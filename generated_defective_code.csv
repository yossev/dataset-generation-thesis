language,code_snippet,smell_or_defect,type_of_defect_or_smell,static_analysis,model
Python,"import sqlite3

def get_user_page(db_path, page, page_size=20):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    offset = page * page_size  # Bug: should be (page-1)*page_size for 1-indexed pages
    cursor.execute('SELECT id, name FROM users LIMIT ? OFFSET ?', (page_size, offset))
    rows = cursor.fetchall()
    conn.close()
    return [{'id': r[0], 'name': r[1]} for r in rows]

# Example usage
if __name__ == '__main__':
    users = get_user_page('app.db', 1)
    for u in users:
        print(u)",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json

CONFIG = None

def load_config():
    global CONFIG
    config_path = 'config.json'
    with open(config_path, 'r') as f:
        CONFIG = json.load(f)


def process_data(data):
    if not data:
        return
    processed = []
    for item in data:
        item['id'] = item['id'].strip()
        processed.append(item)
    return processed


def save_to_file(output, filename='output.txt'):
    with open(filename, 'w') as f:
        for line in output:
            f.write(str(line) + '\n')


def main():
    load_config()
    data = [{'id': ' 123 ', 'name': 'Alice'}, {'id': ' 456 ', 'name': 'Bob'}]
    processed_data = process_data(data)
    save_to_file(processed_data)

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   const userService = {
     users: [],
     addUser: function(username, password) {
       this.users.push({ username, password });
     },
     authenticate: function(username, password) {
       for (let i = 0; i < this.users.length; i++) {
         if (this.users[i].username === username) {
           if (this.users[i].password === password) {
             return true;
           }
         }
       }
       return false;
     }
   };

   userService.addUser('admin', 'password123');
   console.log(userService.authenticate('admin', 'password123'));",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    bool removeUser(const std::string& name) {
        for (size_t i = 0; i <= users.size(); ++i) { // off‑by‑one error
            if (users[i] == name) {
                users.erase(users.begin() + i);
                return true;
            }
        }
        return false;
    }

    void printAll() const {
        for (const auto& u : users) {
            std::cout << u << std::endl;
        }
    }
private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.removeUser(""charlie""); // attempts to remove non‑existent user
    um.printAll();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::vector<std::string> processInputs(const std::vector<std::string>& inputs) {
    std::vector<std::string> results;
    for (const auto& input : inputs) {
        std::string processed = input;
        if (input.size() > 100) {
            processed.resize(100);
        }
        
        for (int i = 0; i < 100; ++i) {
            for (int j = 0; j < 100; ++j) {
                processed += 'a';
            }
        }

        results.push_back(processed);
    }
    return results;
}

int main() {
    std::vector<std::string> inputs = { ""example1"", ""example2"" };
    auto output = processInputs(inputs);
    for (const auto& item : output) {
        std::cout << item << std::endl;
    }
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Person {
public:
    string name;
    int age;
    Person(string n, int a) : name(n), age(a) {}
};

class PersonDatabase {
private:
    vector<Person> people;
public:
    void addPerson(Person p) { people.push_back(p); }
    void sortByName() { sort(people.begin(), people.end(), [](Person a, Person b) { return a.name < b.name; }); }
    void printPeople() {
        for (Person p : people) {
            cout << p.name << "" is "" << p.age << "" years old."" << endl;
        }
    }
};

int main() {
    PersonDatabase db;
    db.addPerson(Person(""John"", 30));
    db.addPerson(Person(""Alice"", 25));
    db.sortByName();
    db.printPeople();
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.*;

public class UserService {
    private Connection getConnection() throws SQLException {
        // In real code, use a connection pool
        return DriverManager.getConnection(""jdbc:mysql://localhost:3306/app"", ""user"", ""password"");
    }

    public boolean authenticate(String username, String password) {
        String query = ""SELECT count(*) FROM users WHERE username='"" + username + ""' AND password='"" + password + ""'"";
        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
}
",code_defect,SQL_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processData(const std::vector<std::string>& data) {
    for (const auto& item : data) {
        std::string temp = item;
        for (size_t i = 0; i < temp.length(); ++i) {
            temp[i] = toupper(temp[i]);
        }
        std::cout << temp << std::endl;
    }
}

int main() {
    std::vector<std::string> input = {""example"", ""input"", ""data""};
    processData(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username.equals(""admin"")) {
            return password.equals(DEFAULT_PASSWORD);
        } else {
            // simulate a delay for other users
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            return password.equals(DEFAULT_PASSWORD);
        }
    }
}",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"public class DiscountCalculator {
    public double calculateTotal(double[] prices, double discountRate) {
        double sum = 0.0;
        for (int i = 0; i <= prices.length; i++) { // off‑by‑one error
            sum += prices[i];
        }
        return sum * (1 - discountRate);
    }
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # Unsafe deserialization: using eval on file content
        with open(self.config_path, 'r') as f:
            data = f.read()
            self.settings = eval(data)  # code_defect: unsafe eval

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)

    def process(self, items):
        results = []
        for i in range(0, len(items), self.batch_size):
            batch = items[i:i + self.batch_size]
            results.extend(self._process_batch(batch))
        return results

    def _process_batch(self, batch):
        # Simulate processing
        return [self._transform(item) for item in batch]

    def _transform(self, item):
        # Potential off-by-one error: using len-1 instead of proper index
        if isinstance(item, dict) and 'value' in item:
            return item['value'] * 2
        return None

# Usage example (would be in separate module)
config = ConfigLoader(os.getenv('APP_CONFIG', 'config.txt'))
processor = DataProcessor(config)
input_data = [{'value': i} for i in range(250)]
output = processor.process(input_data)
print(json.dumps(output))",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    void process(const std::vector<int>& input) {
        for (size_t i = 0; i < input.size(); ++i) {
            if (input[i] % 2 == 0) {
                std::cout << input[i] << "" is even\n"";
            }
            else {
                std::cout << input[i] << "" is odd\n"";
            }
        }
    }
};

int main() {
    DataProcessor dp;
    std::vector<int> data = { 1, 2, 3, 4, 5 };
    dp.process(data);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger LOGGER = LoggerFactory.getLogger(UserService.class); public void saveUser(String username, String password, String email) { try { User user = new User(); user.setUsername(username); user.setPassword(password); user.setEmail(email); if (username.length() > 10) { LOGGER.info(""Username is longer than 10 characters""); } else { LOGGER.info(""Username is 10 characters or less""); } UserRepository userRepository = new UserRepository(); userRepository.save(user); } catch (Exception e) { LOGGER.error(""Error saving user"", e); } } }",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <fstream>
#include <iostream>

class ConfigLoader {
public:
    ConfigLoader(const std::string& path) : filePath(path) {}
    std::vector<std::string> loadLines() {
        std::ifstream file(filePath);
        std::vector<std::string> lines;
        std::string line;
        while (std::getline(file, line)) {
            lines.push_back(line);
        }
        return lines;
    }
private:
    std::string filePath;
};

class DataProcessor {
public:
    void process(const std::vector<std::string>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            if (data[i].empty()) continue;
            // pretend processing
            std::cout << ""Processing: "" << data[i] << std::endl;
        }
    }
};

int main() {
    ConfigLoader loader(""config.txt"");
    auto lines = loader.loadLines();
    DataProcessor processor;
    processor.process(lines);
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, logger) {
    this.users = users;
    this.logger = logger;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user && user.isActive) {
        this.logger.log(`Processing user: ${user.id}`);
        this._updateUserStatus(user);
        this._sendWelcomeEmail(user);
        this._logUserMetrics(user);
      }
    });
  }

  _updateUserStatus(user) {
    user.status = 'processed';
  }

  _sendWelcomeEmail(user) {
    // Simulate email sending
    console.log(`Email sent to ${user.email}`);
  }

  _logUserMetrics(user) {
    // Simulate metrics logging
    console.log(`User ${user.id} metrics logged`);
  }
}

// Unused method
doSomethingElse = () => {
  console.log('This is never used');
};",code_smell,dead_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

private:
    std::string name;
    int salary;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }

    Employee getHighestPaidEmployee() {
        if (employees.empty()) {
            return Employee("""", 0);
        }
        return *std::max_element(employees.begin(), employees.end(),
            [](const Employee& a, const Employee& b) { return a.getSalary() < b.getSalary(); });
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 50000));
    manager.addEmployee(Employee(""Alice"", 60000));
    Employee highestPaid = manager.getHighestPaidEmployee();
    std::cout << ""Highest paid employee: "" << highestPaid.getName() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public User findUserById(int userId) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
        return null;
    }
}

class User {
    private int id;
    private String username;
    private String email;
    public void setId(int id) { this.id = id; }
    public void setUsername(String username) { this.username = username; }
    public void setEmail(String email) { this.email = email; }
    // getters omitted for brevity
}
",code_defect,SQL injection due to string concatenation and hardcoded credentials,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.userRoles = ['admin', 'editor', 'viewer'];
  }

  authenticateUser(username, password, role) {
    if (username === 'admin' && password === 'securepassword123' && this.userRoles.includes(role)) {
      return true;
    } else {
      return false;
    }
  }

  checkAccessLevel(userRole, requiredRole) {
    const rolePriority = {
      admin: 3,
      editor: 2,
      viewer: 1
    };

    return rolePriority[userRole] >= rolePriority[requiredRole];
  }

  grantAccess(user, requiredRole) {
    if (this.authenticateUser(user.username, user.password, user.role)) {
      if (this.checkAccessLevel(user.role, requiredRole)) {
        console.log('Access granted');
        return true;
      } else {
        console.log('Access denied due to insufficient role');
        return false;
      }
    } else {
      console.log('Authentication failed');
      return false;
    }
  }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <string>
using namespace std;

class User {
public:
    User(string name, string password) {
        this->name = name;
        this->password = password;
    }

    string getName() { return name; }
    string getPassword() { return password; }

private:
    string name;
    string password;
};

class UserService {
public:
    UserService() {
        users.push_back(User(""admin"", ""password123""));
    }

    void addUser(string name, string password) {
        users.push_back(User(name, password));
    }

    User* getUserByName(string name) {
        for (int i = 0; i < users.size(); i++) {
            if (users[i].getName() == name) {
                return &users[i];
            }
        }
        return nullptr;
    }

private:
    vector<User> users;
};

int main() {
    UserService userService;
    userService.addUser(""user1"", ""pass123"");
    User* user = userService.getUserByName(""admin"");
    if (user != nullptr) {
        cout << user->getName() << endl;
        cout << user->getPassword() << endl;
    }
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class UserManager {
public:
    void addUser(const std::string& name, int age) {
        users_.push_back({name, age});
    }

    // Returns the average age of all users
    double averageAge() const {
        if (users_.empty()) return 0.0;
        int total = 0;
        for (size_t i = 0; i <= users_.size(); ++i) { // off‑by‑one error
            total += users_[i].age;
        }
        return static_cast<double>(total) / users_.size();
    }

private:
    struct User { std::string name; int age; };
    std::vector<User> users_;
};

int main() {
    UserManager um;
    um.addUser(""Alice"", 30);
    um.addUser(""Bob"", 25);
    std::cout << ""Average age: "" << um.averageAge() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUserData(String username, String role, String... permissions) {
        if (username == null || role == null || permissions.length == 0) {
            return;
        }

        System.out.println(""Processing user: "" + username);
        System.out.println(""Role: "" + role);

        for (String permission : permissions) {
            if (permission.contains(""admin"")) {
                System.out.println(""Granting admin access... "");
                // Simulate some processing
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } else {
                System.out.println(""Granting basic access for: "" + permission);
            }
        }

        // Legacy code, not used anymore
        // assignDefaultPermissions(username);
    }

    // Unused method
    private void assignDefaultPermissions(String username) {
        System.out.println(""Assigning default permissions to "" + username);
    }
}",code_smell,dead_code,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password
        else:
            print('User already exists')

    def authenticate(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def get_all_users(self):
        return list(self.users.keys())

    def save_to_file(self):
        with open(self.db_file, 'w') as f:
            for username, password in self.users.items():
                f.write(f'{username}:{password}\n')

    def load_from_file(self):
        try:
            with open(self.db_file, 'r') as f:
                for line in f.readlines():
                    username, password = line.strip().split(':')
                    self.users[username] = password
        except FileNotFoundError:
            pass

    def __del__(self):
        self.save_to_file()
",code_smell,Tight Coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Returns user profile data
  async getUserProfile(userId) {
    // Missing validation: userId could be undefined or malicious
    const query = `SELECT * FROM users WHERE id = ${userId}`; // SQL injection risk
    const result = await this.db.query(query);
    if (!result || result.length === 0) {
      return null;
    }
    const user = result[0];
    // Improper handling of async file read, forgetting await
    const avatarPath = `/avatars/${user.avatar}`;
    const avatarData = fs.readFileSync(avatarPath, 'utf8'); // blocks event loop
    user.avatarData = avatarData;
    return user;
  }
}

module.exports = UserService;",code_defect,SQL_injection_and_blocking_io,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

void processData(vector<string> data) {
    for (size_t i = 0; i < data.size(); ++i) {
        string processed = data[i];
        for (size_t j = 0; j < processed.length(); ++j) {
            processed[j] = toupper(processed[j]);
        }
        cout << processed << endl;
    }
}

int main() {
    vector<string> input = {""example"", ""data"", ""to"", ""process""};
    processData(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class UserProcessor { constructor(users) { this.users = users; } processUsers() { for (let i = 0; i < this.users.length; i++) { const user = this.users[i]; if (user.isActive) { console.log(user.name); } } } } const users = [{ name: 'John', isActive: true }, { name: 'Alice', isActive: false }]; const processor = new UserProcessor(users); processor.processUsers();",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class UserManager {
public:
    void addUser(const std::string& name, int age) {
        users_.push_back({name, age});
    }

    // Returns the average age of all users
    double averageAge() const {
        if (users_.empty()) return 0.0;
        int total = 0;
        for (size_t i = 0; i <= users_.size(); ++i) { // BUG: off‑by‑one, may read past end
            total += users_[i].age;
        }
        return static_cast<double>(total) / users_.size();
    }

    void printAll() const {
        for (const auto& u : users_) {
            std::cout << u.name << "": "" << u.age << ""\n"";
        }
    }

private:
    struct User {
        std::string name;
        int age;
    };
    std::vector<User> users_;
};

int main() {
    UserManager mgr;
    mgr.addUser(""Alice"", 30);
    mgr.addUser(""Bob"", 25);
    mgr.addUser(""Charlie"", 35);
    std::cout << ""Average age: "" << mgr.averageAge() << std::endl;
    mgr.printAll();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (i != j && data[i] == data[j]) {
                std::cout << ""Duplicate found: "" << data[i] << std::endl;
            }
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 2, 4, 5, 1};
    processData(input);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUser(id) { let user = await this.userDao.getUser(id); if (user) { let roles = await this.userDao.getUserRoles(id); user.roles = roles; } return user; } async getUsers() { return await this.userDao.getUsers(); } },code_smell,Tight Coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<User> findUsersByRole(String role) {
        List<User> users = new ArrayList<>();
        String sql = ""SELECT id, username, email FROM users WHERE role = '"" + role + ""'""; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                User u = new User();
                u.setId(rs.getInt(""id""));
                u.setUsername(rs.getString(""username""));
                u.setEmail(rs.getString(""email""));
                users.add(u);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection vulnerability and hardcoded credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

struct User {
    std::string name;
    int age;
    std::string email;
};

bool validateEmail(const std::string& email) {
    if (email.find('@') != std::string::npos) {
        return true;
    }
    return false;
}

void processUser(const User& user) {
    if (user.age < 0) {
        std::cout << ""Invalid age for user "" << user.name << std::endl;
        return;
    }

    if (!validateEmail(user.email)) {
        std::cout << ""Invalid email for user "" << user.name << std::endl;
        return;
    }

    std::cout << ""Valid user: "" << user.name << std::endl;
}

int main() {
    std::vector<User> users = {
        {""Alice"", 30, ""alice@example.com""},
        {""Bob"", -5, ""bob@example.com""},
        {""Charlie"", 25, ""charlieexample.com""}
    };

    for (const auto& user : users) {
        processUser(user);
    }

    return 0;
}",code_defect,incorrect conditional logic,,qwen/qwen3-32b
Java,"public class UserValidator {
    public boolean validateUser(String username, String password) {
        if (username.length() > 5 && password.length() > 8) {
            return true;
        }
        return false;
    }
}",code_smell,magic_numbers,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Reads JSON config file synchronously each call
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) {
      this.load();
    }
    return this.cache[key];
  }
}

// Usage in a web server
const http = require('http');
const config = new ConfigLoader('./config.json');

http.createServer((req, res) => {
  // Vulnerable: directly uses query param in file path
  const file = req.url.split('?')[1];
  const content = fs.readFileSync(`./public/${file}`);
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end(content);
}).listen(8080);",code_defect,path_traversal_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

std::string formatData(std::string input, int id, bool flag) {
    std::string result = input;
    if (id > 0) {
        result += ""_"" + std::to_string(id);
    }
    if (flag) {
        result += ""_FLAG"";
    }
    return result;
}

int main() {
    std::string user_input = ""DATA123"";
    int user_id = 42;
    bool is_active = true;

    std::string formatted = formatData(user_input, user_id, is_active);
    std::cout << formatted << std::endl;
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private String apiKey; public UserAuthenticator(String apiKey) { this.apiKey = apiKey; } public boolean authenticateUser(String username, String password) { if (username.equals(""admin"") && password.equals(""password123"")) { return true; } else { return false; } } public void saveApiKeyToFile() { try { java.io.FileWriter writer = new java.io.FileWriter(""api_key.txt""); writer.write(apiKey); writer.close(); } catch (java.io.IOException e) { System.out.println(""Error saving API key""); } } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
  }

  // Process a batch of orders and update inventory
  async processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      const product = await this.db.getProduct(order.productId);
      // BUG: Missing check for sufficient stock leads to negative inventory
      product.stock -= order.quantity;
      await this.db.updateProduct(product);
      await this.db.saveOrder(order);
    }
    // Return success without verifying all updates succeeded
    return true;
  }
}

module.exports = OrderProcessor;",code_defect,logic_error,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

def process_user_data(data):
    user_info = {}
    for key, value in data.items():
        if key == 'name':
            user_info['username'] = value
        elif key == 'email':
            user_info['email'] = value
        elif key == 'created_at':
            user_info['registration_date'] = datetime.strptime(value, '%Y-%m-%d')
        elif key == 'is_active':
            user_info['status'] = 'active' if value else 'inactive'
    return user_info

def save_user_info(user_info, filename='user_data.json'):
    try:
        if os.path.exists(filename):
            with open(filename, 'r') as f:
                existing_users = json.load(f)
        else:
            existing_users = []n
        existing_users.append(user_info)

        with open(filename, 'w') as f:
            json.dump(existing_users, f, indent=2)
    except Exception as e:
        print(f""Error saving user info: {e}"")


def main():
    raw_data = {
        'name': 'John Doe',
        'email': 'johndoe@example.com',
        'created_at': '2024-01-15',
        'is_active': True
    }

    processed = process_user_data(raw_data)
    save_user_info(processed)

if __name__ == '__main__':
    main()",code_smell,poor_error_handling,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None
        self._load()

    def _load(self):
        # NOTE: using eval on file content is unsafe
        with open(self.config_path, 'r') as f:
            data = f.read()
        self._config = eval(data)  # code defect: unsafe deserialization

    def get(self, key, default=None):
        return self._config.get(key, default)

class UserService:
    def __init__(self, db):
        self.db = db

    def create_user(self, username, password):
        # Simple password storage without hashing
        query = f""INSERT INTO users (username, password) VALUES ('{username}', '{password}')""
        self.db.execute(query)
        logger.info(""User %s created"", username)

    def get_user(self, user_id):
        rows = self.db.query(f""SELECT * FROM users WHERE id = {user_id}"")
        if rows:
            return rows[0]
        return None

class Database:
    def __init__(self, conn_str):
        self.conn_str = conn_str
        self._connect()

    def _connect(self):
        # Placeholder for actual DB connection
        self.connected = True

    def execute(self, sql):
        if not self.connected:
            raise RuntimeError(""Not connected"")
        # Simulate execution
        logger.debug(""Executing SQL: %s"", sql)

    def query(self, sql):
        if not self.connected:
            raise RuntimeError(""Not connected"")
        logger.debug(""Querying SQL: %s"", sql)
        return []

if __name__ == ""__main__"":
    cfg = ConfigLoader(os.getenv('APP_CONFIG', 'config.cfg'))
    db = Database(cfg.get('db_connection'))
    service = UserService(db)
    service.create_user('alice', 'password123')
    user = service.get_user(1)
    print(user)",code_defect,unsafe_deserialization_and_sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <cmath>

// Function to calculate the average of a vector of numbers
double calculateAverage(const std::vector<double>& data) {
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += data[i];
    }
    return sum / data.size();
}

// Function to calculate standard deviation
// This function is poorly structured and inefficient
// It recalculates the average twice
// It also has a nested loop for variance calculation that can be optimized
void calculateStandardDeviation(const std::vector<double>& data) {
    double average = calculateAverage(data);
    double variance = 0.0;

    // First loop to calculate average again
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += data[i];
    }
    double avg = sum / data.size();

    // Second loop to calculate variance
    for (size_t i = 0; i < data.size(); ++i) {
        variance += (data[i] - avg) * (data[i] - avg);
    }

    double stdDev = sqrt(variance / data.size());
    std::cout << ""Standard Deviation: "" << stdDev << std::endl;
}

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    calculateStandardDeviation(data);
    return 0;
}",code_smell,inefficient_code,,qwen/qwen3-32b
JavaScript,"
      class UserValidator {
         validateUser(user) {
            if (user.username && user.password) {
               if (user.username.length > 5 && user.password.length > 8) {
                  return true;
               } else {
                  return false;
               }
            } else {
               return false;
            }
         }
      }

      function authenticateUser(username, password) {
         const validator = new UserValidator();
         const user = { username, password };
         if (validator.validateUser(user)) {
            // simulate authentication delay
            const startTime = new Date().getTime();
            while (new Date().getTime() < startTime + 1000) {}
            return true;
         } else {
            return false;
         }
      }

      const username = 'testuser';
      const password = 'testpassword123';
      const isValid = authenticateUser(username, password);
      console.log(isValid);
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user info and writes a log file for each call
    getUserData(userId) {
        // Bad practice: synchronous file write inside request handling
        const user = this.db.query(`SELECT * FROM users WHERE id = ${userId}`);
        if (!user) {
            throw new Error('User not found');
        }
        const logEntry = `${new Date().toISOString()} - Fetched user ${userId}\n`;
        fs.appendFileSync('user_fetch.log', logEntry);
        return user;
    }

    // Updates user email without validation and builds SQL via string concatenation
    updateUserEmail(userId, newEmail) {
        const sql = ""UPDATE users SET email='"" + newEmail + ""' WHERE id="" + userId;
        this.db.execute(sql);
    }
}

// Usage example (tight coupling with concrete DB implementation)
const db = {
    query: (q) => {
        // mock result
        return { id: 1, name: 'Alice', email: 'alice@example.com' };
    },
    execute: (sql) => {
        console.log('Executing SQL:', sql);
    }
};

const service = new UserService(db);
service.getUserData(1);
service.updateUserEmail(1, 'new.email@example.com');",code_smell,tight_coupling_and_sql_injection_risk,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, logger) {
    this.users = users;
    this.logger = logger;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user.status === 'active') {
        this.logger.log(`User ${user.id} is active`);
        this.sendWelcomeEmail(user);
      } else {
        this.logger.log(`User ${user.id} is not active`);
      }
    });
  }

  sendWelcomeEmail(user) {
    this.logger.log(`Sending email to user ${user.email}`);
    // Simulate email sending logic
  }

  validateUser(user) {
    return user && user.email && user.status;
  }

  getUserDetails(user) {
    return {
      name: user.name,
      email: user.email,
      status: user.status
    };
  }
}

module.exports = UserProcessor;",code_smell,god_class,,qwen/qwen3-32b
Python,"class PaymentProcessor:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def process_payment(self, payment_amount, user_id):
        query = ""SELECT balance FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_balance = cursor.fetchone()[0]
        if user_balance >= payment_amount:
            new_balance = user_balance - payment_amount
            query = ""UPDATE users SET balance = "" + str(new_balance) + "" WHERE id = "" + str(user_id)
            cursor.execute(query)
            self.db_connection.commit()
            return True
        else:
            return False",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path

    def _connect(self):
        return sqlite3.connect(self.db_path)

    def get_users_page(self, page: int, page_size: int = 20):
        """"""Return a list of users for the given page number.
        Page numbers start at 1.
        """"""
        offset = (page - 1) * page_size
        # BUG: off‑by‑one error – should be LIMIT page_size OFFSET offset
        query = f""SELECT id, name, email FROM users LIMIT {offset}, {page_size}""
        conn = self._connect()
        try:
            cursor = conn.cursor()
            cursor.execute(query)
            rows = cursor.fetchall()
            return [{""id"": r[0], ""name"": r[1], ""email"": r[2]} for r in rows]
        finally:
            conn.close()

    def add_user(self, name: str, email: str):
        conn = self._connect()
        try:
            cursor = conn.cursor()
            cursor.execute(
                ""INSERT INTO users (name, email) VALUES (?, ?)"",
                (name, email)
            )
            conn.commit()
        finally:
            conn.close()
",code_defect,off_by_one_error_in_sql_limit_offset,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    void process(const std::string& input, std::vector<int>& output) {
        if (input.empty()) {
            return;
        }

        for (size_t i = 0; i < input.length(); ++i) {
            if (input[i] >= '0' && input[i] <= '9') {
                int num = input[i] - '0';
                output.push_back(num);
            }
        }
    }
};

int main() {
    DataProcessor dp;
    std::string input = ""a1b2c3d"";
    std::vector<int> result;

    dp.process(input, result);

    for (int val : result) {
        std::cout << val << "" "";
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Employee {
public:
    string name;
    int salary;
    Employee(string n, int s) : name(n), salary(s) {}
};

bool compareEmployees(Employee e1, Employee e2) {
    return e1.salary < e2.salary;
}

void sortEmployees(vector<Employee>& employees) {
    sort(employees.begin(), employees.end(), compareEmployees);
}

int main() {
    vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
    sortEmployees(employees);
    for (Employee e : employees) {
        cout << e.name << "" "" << e.salary << endl;
    }
    return 0;
}",code_smell,long_parameter_list,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
    constructor(db) {
        this.db = db;
    }

    // Process a batch of orders, returns number of successful inserts
    async processOrders(orders) {
        let successCount = 0;
        for (let i = 0; i < orders.length; i++) {
            const order = orders[i];
            // Missing validation: assume order.amount is a number
            const total = order.amount * order.price; // defect: price may be undefined, resulting in NaN
            try {
                await this.db.insert('orders', {
                    userId: order.userId,
                    amount: order.amount,
                    price: order.price,
                    total: total,
                    createdAt: new Date()
                });
                successCount++;
            } catch (e) {
                console.error('Failed to insert order', e);
            }
        }
        return successCount;
    }
}

module.exports = OrderProcessor;",code_defect,incorrect_calculation_due_to_missing_validation,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private static final int MAX_RETRIES = 3;

    public void processUser(User user) {
        int retryCount = 0;
        boolean success = false;
        while (retryCount <= MAX_RETRIES) {
            try {
                validateUser(user);
                persistUser(user);
                sendEmailNotification(user.getEmail());
                success = true;
                break;
            } catch (Exception e) {
                retryCount++;
                System.out.println(""Error processing user. Retrying... "");
            }
        }
        if (!success) {
            System.out.println(""Failed to process user after "" + MAX_RETRIES + "" attempts."");
        }
    }

    private void validateUser(User user) {
        if (user.getName() == null || user.getName().isEmpty()) {
            throw new IllegalArgumentException(""Name is required"");
        }
        if (user.getEmail() == null || !user.getEmail().contains(""@"")) {
            throw new IllegalArgumentException(""Invalid email format"");
        }
    }

    private void persistUser(User user) {
        // Simulated database call
        if (Math.random() < 0.3) {
            throw new RuntimeException(""Database error"");
        }
    }

    private void sendEmailNotification(String email) {
        // Simulated email sending
        if (Math.random() < 0.2) {
            throw new RuntimeException(""Email could not be sent"");
        }
    }
}",code_smell,error_handling_and_logging,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private String passwordHash; public boolean authenticateUser(String username, String password) { String storedHash = getPasswordHashFromDatabase(username); if (storedHash != null && storedHash.equals(password)) { return true; } return false; } private String getPasswordHashFromDatabase(String username) { // simulate database query return ""hashed_password""; } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None

    def load(self):
        # Missing error handling for file not found or invalid JSON
        with open(self.config_path, 'r') as f:
            self._config = json.load(f)
        return self._config

    def get(self, key, default=None):
        return self._config.get(key, default)

class UserService:
    def __init__(self, db_connection_string):
        self.db_connection_string = db_connection_string
        self._connect()

    def _connect(self):
        # Simulated DB connection (placeholder)
        self.conn = self.db_connection_string

    def get_user(self, user_id):
        # Vulnerable to SQL injection because user_id is concatenated directly
        query = f""SELECT * FROM users WHERE id = {user_id}""
        # Placeholder for actual DB execution
        return self._execute_query(query)

    def _execute_query(self, query):
        # Mocked response
        return {""id"": 1, ""name"": ""Alice""}

def main():
    cfg = ConfigLoader('config.json')
    config = cfg.load()
    service = UserService(config.get('db_conn'))
    # Off-by-one error: loop runs one extra iteration
    for i in range(1, config.get('max_users', 10) + 1):
        user = service.get_user(i)
        print(f""User {i}: {user['name']}"")

if __name__ == '__main__':
    main()",code_defect,sql_injection_and_off_by_one,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, logger) {
    this.users = users;
    this.logger = logger;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user.status === 'active') {
        this.logger.log(`User ${user.id} is active`);
        this.sendEmail(user);
      } else {
        this.logger.log(`User ${user.id} is inactive`);
      }
    });
  }

  sendEmail(user) {
    // Simulate email sending logic
    this.logger.log(`Email sent to ${user.email}`);
  }

  validateUser(user) {
    if (!user.email) {
      this.logger.warn(`User ${user.id} has no email`);
      return false;
    }
    return true;
  }

  sendWelcomeEmail(user) {
    if (this.validateUser(user)) {
      this.sendEmail(user);
    }
  }
}

// Usage example
const users = [
  { id: 1, email: 'user1@example.com', status: 'active' },
  { id: 2, email: '', status: 'inactive' }
];

const logger = {
  log: (msg) => console.log(`[LOG] ${msg}`),
  warn: (msg) => console.warn(`[WARN] ${msg}`)
};

const processor = new UserProcessor(users, logger);
processor.processUsers();",code_smell,god_class,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email

    def save_to_database(self):
        import sqlite3
        conn = sqlite3.connect('user_database.db')
        c = conn.cursor()
        c.execute(""INSERT INTO users (username, password, email) VALUES (?, ?, ?)"", (self.username, self.password, self.email))
        conn.commit()
        conn.close()

    def verify_password(self, input_password):
        return self.password == input_password",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path='users.db'):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY,
                            username TEXT,
                            password TEXT)''')
        self.conn.commit()

    def add_user(self, username, password):
        # NOTE: password stored in plain text (security issue)
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, password))
        self.conn.commit()

    def authenticate(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute('SELECT password FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            stored_pw = row[0]
            # Bug: using 'is' instead of '==' for string comparison
            if stored_pw is password:
                return True
        return False

    def export_user_data(self, export_path):
        cursor = self.conn.cursor()
        cursor.execute('SELECT username, password FROM users')
        users = cursor.fetchall()
        # Insecure: writing raw passwords to JSON file
        with open(export_path, 'w') as f:
            json.dump([{'username': u, 'password': p} for u, p in users], f)

# Example usage
if __name__ == '__main__':
    manager = UserManager()
    manager.add_user('alice', 'secret123')
    print('Auth success:', manager.authenticate('alice', 'secret123'))
    manager.export_user_data('users_export.json')
",code_defect,incorrect_string_comparison_using_is,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    if (data[i].status === 'active') {
      let processedItem = {};
      processedItem.id = data[i].id;
      processedItem.name = data[i].name.toUpperCase();
      processedItem.value = data[i].value * 2;
      result.push(processedItem);
    }
  }
  return result;
}

function main() {
  const rawInput = [{ id: 1, name: 'alpha', value: 10, status: 'active' },
                   { id: 2, name: 'beta', value: 20, status: 'inactive' },
                   { id: 3, name: 'gamma', value: 30, status: 'active' }];
  const output = processData(rawInput);
  console.log(output);
}

main();",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class OrderProcessor:
    def __init__(self):
        self.orders = []

    def add_order(self, order_id, customer_id, total):
        order = {'id': order_id, 'customer_id': customer_id, 'total': total}
        self.orders.append(order)

    def get_total_orders_value(self):
        total = 0
        for order in self.orders:
            total += order['total']
        return total

    def get_average_order_value(self):
        if len(self.orders) == 0:
            return 0
        return self.get_total_orders_value() / len(self.orders)

processor = OrderProcessor()
processor.add_order(1, 1, 100)
processor.add_order(2, 1, 200)
processor.add_order(3, 2, 50)
print(processor.get_total_orders_value())
print(processor.get_average_order_value())
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <fstream>
#include <iostream>

class LogProcessor {
public:
    LogProcessor(const std::string& filePath) : path(filePath) {}
    void process() {
        std::ifstream in(path);
        if (!in) {
            std::cerr << ""Failed to open log file"" << std::endl;
            return;
        }
        std::string line;
        while (std::getline(in, line)) {
            if (line.empty()) continue;
            // Expect format: <timestamp> <level> <message>
            size_t firstSpace = line.find(' ');
            size_t secondSpace = line.find(' ', firstSpace + 1);
            if (firstSpace == std::string::npos || secondSpace == std::string::npos) continue;
            std::string level = line.substr(firstSpace + 1, secondSpace - firstSpace - 1);
            if (level == ""ERROR"") {
                errors.push_back(line);
            }
        }
        // BUG: off-by-one error, should be errors.size()
        for (size_t i = 0; i <= errors.size(); ++i) {
            std::cout << errors[i] << std::endl;
        }
    }
private:
    std::string path;
    std::vector<std::string> errors;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.process();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data) {
    int i = 0;
    while (i < data.size()) {
        if (data[i] % 2 == 0) {
            std::cout << data[i] << "" is even"" << std::endl;
        } else {
            std::cout << data[i] << "" is odd"" << std::endl;
        }
        i++;
    }
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6};
    processData(numbers);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, username, password):
        if user_id not in self.users:
            self.users[user_id] = {'username': username, 'password': password}
            return True
        return False

    def authenticate(self, user_id, password):
        if user_id in self.users and self.users[user_id]['password'] == password:
            return True
        return False

    def get_all_users(self):
        return list(self.users.keys())

    def remove_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
            return True
        return False

def main():
    manager = UserManager()
    manager.add_user('1', 'admin', 'password123')
    print(manager.authenticate('1', 'password123'))  # prints: True
    print(manager.get_all_users())  # prints: ['1']
    manager.remove_user('1')
    print(manager.get_all_users())  # prints: []

if __name__ == '__main__':
    main()
",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <algorithm>
#include <iostream>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    // Returns true if user exists
    bool hasUser(const std::string& name) const {
        return std::find(users.begin(), users.end(), name) != users.end();
    }

    // Returns the user at the given index (0‑based)
    std::string getUserAt(int index) const {
        // BUG: off‑by‑one error – should check index < users.size()
        if (index <= 0 || index > static_cast<int>(users.size())) {
            throw std::out_of_range(""Index out of range"");
        }
        return users[index];
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.addUser(""carol"");

    try {
        std::cout << um.getUserAt(0) << std::endl; // Unexpected exception due to bug
    } catch (const std::exception& e) {
        std::cerr << ""Error: "" << e.what() << std::endl;
    }
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  const data = input.split(',');
  let result = [];

  for (let i = 0; i < data.length; i++) {
    let item = data[i].trim();
    if (item.length > 0) {
      result.push(item);
    }
  }

  result = result.sort();

  const unique = [];
  for (let i = 0; i < result.length; i++) {
    if (unique.indexOf(result[i]) === -1) {
      unique.push(result[i]);
    }
  }

  return unique;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Java,"public class UserAccountManager { private Map<String, String> userAccounts = new HashMap<>(); public void addUser(String username, String password) { if (userAccounts.containsKey(username)) { System.out.println(""User already exists""); } else { userAccounts.put(username, password); } } public boolean authenticateUser(String username, String password) { return userAccounts.containsKey(username) && userAccounts.get(username).equals(password); } public void changePassword(String username, String newPassword) { if (userAccounts.containsKey(username)) { userAccounts.put(username, newPassword); } } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() = default;
    void addTransaction(const std::string& user, double amount) {
        std::lock_guard<std::mutex> lock(mtx_);
        balances_[user] += amount; // BUG: does not check for overflow or negative balance
    }
    double getBalance(const std::string& user) {
        std::lock_guard<std::mutex> lock(mtx_);
        return balances_[user];
    }
    void transfer(const std::string& from, const std::string& to, double amount) {
        // Incorrect order of locking leads to potential deadlock
        std::lock_guard<std::mutex> lockFrom(mtx_);
        std::lock_guard<std::mutex> lockTo(mtx_);
        if (balances_[from] >= amount) {
            balances_[from] -= amount;
            balances_[to] += amount;
        }
    }
private:
    std::mutex mtx_;
    std::unordered_map<std::string, double> balances_;
};

int main(){
    TransactionProcessor tp;
    tp.addTransaction(""alice"", 1000);
    tp.addTransaction(""bob"", 500);
    tp.transfer(""alice"", ""bob"", 200);
    std::cout << ""Alice balance: "" << tp.getBalance(""alice"") << std::endl;
    std::cout << ""Bob balance: "" << tp.getBalance(""bob"") << std::endl;
    return 0;
}",code_defect,deadlock_and_missing_validation,,openai/gpt-oss-120b
Python,"import os
import json

def process_user_data(user_id, data):
    user_data = json.loads(data)
    if 'name' not in user_data:
        user_data['name'] = 'Unknown'
    if 'age' not in user_data:
        user_data['age'] = 0
    if 'email' not in user_data:
        user_data['email'] = ''

    processed_data = {
        'user_id': user_id,
        'name': user_data['name'],
        'age': user_data['age'],
        'email': user_data['email'],
        'status': 'active'
    }

    return processed_data


def save_user_to_file(user_data):
    filename = f'{user_data['user_id']}.json'
    with open(filename, 'w') as f:
        json.dump(user_data, f)


def main():
    user_data_json = '{""name"": ""Alice"", ""age"": 30}'
    user_id = 123

    user_data = process_user_data(user_id, user_data_json)
    save_user_to_file(user_data)

if __name__ == '__main__':
    main()",code_smell,incomplete_data_handling,,qwen/qwen3-32b
C++,"#include <iostream>
#include <string>
#include <vector>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserService {
public:
    vector<User> users;
    void addUser(User u) { users.push_back(u); }
    User* getUserByName(string name) {
        for (User& u : users) {
            if (u.name == name) {
                return &u;
            }
        }
        return nullptr;
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User* user = service.getUserByName(""John"");
    if (user != nullptr) {
        cout << user->name << endl;
    }
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // JSON.parse can throw, but we ignore it
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function getUserSetting(userId) {
  const loader = new ConfigLoader('/etc/app/settings.json');
  const config = loader.load();
  // Assume settings are stored as {users: [{id:..., setting:...}, ...]}
  for (let i = 0; i <= config.users.length; i++) { // off‑by‑one error
    if (config.users[i].id === userId) {
      return config.users[i].setting;
    }
  }
  return null;
}

module.exports = { getUserSetting };",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import sqlite3

def get_user_data(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = f""SELECT * FROM users WHERE id = {user_id}""
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result

# Old version of function, kept for reference
def get_user_data_old(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = f""SELECT * FROM users WHERE id = {user_id}""
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result

if __name__ == ""__main__"":
    user = get_user_data(1)
    print(user)",code_smell,code_duplication,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class BankAccount {
public:
    BankAccount(double balance) : balance(balance) {}
    void deposit(double amount) { balance += amount; }
    void withdraw(double amount) { if (balance >= amount) balance -= amount; }
    double getBalance() { return balance; }
private:
    double balance;
};

int main() {
    BankAccount account(1000.0);
    account.deposit(500.0);
    account.withdraw(200.0);
    cout << ""Final balance: "" << account.getBalance() << endl;
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import logging
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

class UserRepository:
    def __init__(self, db_client):
        self.db = db_client

    def get_users(self, page: int = 1, page_size: int = 20) -> List[Dict[str, Any]]:
        """"""Fetch a page of users from the database.
        Note: page is 1-indexed.
        """"""
        offset = (page - 1) * page_size
        query = f""SELECT id, name, email FROM users LIMIT {page_size} OFFSET {offset}""
        rows = self.db.execute(query)
        return [dict(row) for row in rows]

    def get_user_by_id(self, user_id: int) -> Dict[str, Any]:
        query = f""SELECT id, name, email FROM users WHERE id = {user_id}""
        row = self.db.execute_one(query)
        return dict(row) if row else None

class UserService:
    def __init__(self, repository: UserRepository):
        self.repo = repository

    def list_active_users(self, page: int = 1, page_size: int = 20) -> str:
        users = self.repo.get_users(page, page_size)
        # BUG: Off‑by‑one error – should filter out inactive users before pagination
        active = [u for u in users if u.get('status') == 'active']
        return json.dumps(active)

    def get_user_profile(self, user_id: int) -> str:
        user = self.repo.get_user_by_id(user_id)
        if not user:
            logger.error(f""User {user_id} not found"")
            return json.dumps({""error"": ""User not found""})
        # Potential security issue: exposing email directly
        return json.dumps({""id"": user['id'], ""name"": user['name'], ""email"": user['email']})

# Example usage (would be in a different module)
# db_client = DatabaseClient(...)
# repo = UserRepository(db_client)
# service = UserService(repo)
# print(service.list_active_users(page=2, page_size=10))",code_defect,off_by_one_error_in_filtering,,openai/gpt-oss-120b
Python,"import os
import json

def process_user_data(file_path):
    with open(file_path, 'r') as f:
        data = json.load(f)

    for user in data['users']:
        if user['status'] == 'active':
            process_user_profile(user)

        if user['preferences']:
            update_user_settings(user)

    save_processed_data(data)

    return True

def process_user_profile(user):
    user['last_processed'] = 'now'

    if 'tags' in user:
        for tag in user['tags']:
            tag['processed'] = True

    return user

def update_user_settings(user):
    if 'theme' in user['preferences']:
        user['preferences']['theme'] = 'default' if user['preferences']['theme'] == 'dark' else 'dark'

    return user

def save_processed_data(data):
    output_path = os.path.join(os.getcwd(), 'processed_data.json')
    with open(output_path, 'w') as f:
        json.dump(data, f)

    return output_path",code_smell,long_function,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount > self.balance:
            self.balance -= amount
        else:
            self.balance -= amount
    def get_balance(self):
        return self.balance
account = BankAccount(100)
account.withdraw(50)
print(account.get_balance())",code_defect,incorrect conditional logic,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password):
        cursor = self.conn.cursor()
        # Direct string formatting leads to SQL injection vulnerability
        query = f""INSERT INTO users (username, password) VALUES ('{username}', '{password}')""
        cursor.execute(query)
        self.conn.commit()
        return cursor.lastrowid

    def find_user(self, username):
        cursor = self.conn.cursor()
        # Using parameterized query correctly here
        cursor.execute(""SELECT id, username FROM users WHERE username = ?"", (username,))
        return cursor.fetchone()

    def delete_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute(""DELETE FROM users WHERE id = ?"", (user_id,))
        self.conn.commit()

# Example usage
repo = UserRepository('app.db')
repo.add_user('admin', ""password123"")
print(repo.find_user('admin'))",code_defect,sql_injection,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  getUsersByRole(role) {
    const result = [];
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].role === role) {
        result.push(this.users[i]);
      }
    }
    return result;
  }

  deleteUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        this.users.splice(i, 1);
        break;
      }
    }
  }

  updateUsernameByEmail(email, newUsername) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        this.users[i].username = newUsername;
        break;
      }
    }
  }
}

const userManager = new UserManager();
userManager.addUser({ email: 'alice@example.com', username: 'alice', role: 'admin' });
userManager.addUser({ email: 'bob@example.com', username: 'bob', role: 'user' });",code_smell,large_class,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };
   class UserService {
   public:
       std::vector<User> getUsers() {
           std::vector<User> users;
           // simulate database query
           users.push_back(User(""John"", 30));
           users.push_back(User(""Alice"", 25));
           return users;
       }
   };
   int main() {
       UserService service;
       std::vector<User> users = service.getUsers();
       for (const auto& user : users) {
           std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
       }
       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.pagination;

import java.util.ArrayList;
import java.util.List;

public class Paginator {
    private final List<String> items;
    private final int pageSize;

    public Paginator(List<String> items, int pageSize) {
        this.items = items;
        this.pageSize = pageSize;
    }

    /**
     * Returns the items for the requested page number (1‑based).
     * If the page number is out of range, returns an empty list.
     */
    public List<String> getPage(int pageNumber) {
        if (pageNumber < 1) {
            return new ArrayList<>();
        }
        int startIndex = (pageNumber - 1) * pageSize;
        // BUG: off‑by‑one error – endIndex should be exclusive, but we add pageSize - 1
        int endIndex = Math.min(startIndex + pageSize - 1, items.size() - 1);
        if (startIndex >= items.size()) {
            return new ArrayList<>();
        }
        return new ArrayList<>(items.subList(startIndex, endIndex + 1));
    }

    public static void main(String[] args) {
        List<String> data = new ArrayList<>();
        for (int i = 1; i <= 25; i++) {
            data.add(""Item"" + i);
        }
        Paginator paginator = new Paginator(data, 10);
        System.out.println(paginator.getPage(1)); // expects 10 items
        System.out.println(paginator.getPage(3)); // expects 5 items, but gets 4 due to bug
    }
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processOrders(orders) {
  for (let i = 0; i < orders.length; i++) {
    const order = orders[i];
    if (order.status === 'pending') {
      const user = fetchUser(order.userId);
      if (user) {
        const totalPrice = calculateTotalPrice(order.items);
        if (totalPrice > 0) {
          sendConfirmationEmail(user.email, order.id);
          updateOrderStatus(order.id, 'confirmed');
        }
      }
    }
  }
}

function fetchUser(userId) {
  // Simulated user fetching logic
  return {
    id: userId,
    name: 'John Doe',
    email: 'john.doe@example.com'
  };
}

function calculateTotalPrice(items) {
  let total = 0;
  for (let i = 0; i < items.length; i++) {
    total += items[i].price * items[i].quantity;
  }
  return total;
}

function sendConfirmationEmail(email, orderId) {
  console.log(`Sending confirmation email to ${email} for order ${orderId}`);
}

function updateOrderStatus(orderId, status) {
  console.log(`Updating order ${orderId} to status: ${status}`);
}",code_smell,large_function,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final double TAX_RATE = 0.08; public double calculateTotal(double subtotal) { return subtotal + (subtotal * TAX_RATE); } public double calculateTotalWithDiscount(double subtotal, double discountPercentage) { return calculateTotal(subtotal) - (calculateTotal(subtotal) * discountPercentage / 100); } }",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file for each call
    async getUserProfile(userId) {
        // Bad practice: synchronous file write inside async function
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            throw new Error('User not found');
        }
        // Inefficient: writing entire profile to log every time
        const logEntry = `User accessed: ${JSON.stringify(user)}\n`;
        fs.appendFileSync('access.log', logEntry);
        return user;
    }

    // Large function with many responsibilities
    async updateUser(userId, data) {
        const existing = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        if (!existing) {
            throw new Error('User not found');
        }
        // Validate fields (poor validation, missing many checks)
        if (data.email && !data.email.includes('@')) {
            throw new Error('Invalid email');
        }
        // Directly embed values into query – potential SQL injection
        const updateQuery = `UPDATE users SET name='${data.name}', email='${data.email}' WHERE id=${userId}`;
        await this.db.execute(updateQuery);
        // Send notification (side effect mixed with DB logic)
        this._sendNotification(userId, 'Profile updated');
        return true;
    }

    _sendNotification(userId, message) {
        // Placeholder for notification logic
        console.log(`Notify ${userId}: ${message}`);
    }
}

module.exports = UserService;",code_smell,tight_coupling_and_sql_injection_risk,,openai/gpt-oss-120b
Python,"import requests
import json

def fetch_and_process_data(url, auth_token, format='json', timeout=10):
    headers = {'Authorization': f'Bearer {auth_token}'}
    response = requests.get(url, headers=headers, timeout=timeout)
    data = response.content

    if format == 'json':
        parsed_data = json.loads(data)
        processed_data = []
        for item in parsed_data:
            processed_item = {
                'id': item.get('id'),
                'name': item.get('name'),
                'email': item.get('email')
            }
            processed_data.append(processed_item)
        return processed_data
    elif format == 'xml':
        # XML processing logic
        pass
    else:
        raise ValueError('Unsupported format')

# Example usage:
# fetch_and_process_data('https://api.example.com/data', 'my_token')",code_smell,long_function,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    std::string name;
    int salary;

    Employee(std::string name, int salary) : name(name), salary(salary) {}

    bool operator<(const Employee& other) const {
        return salary < other.salary;
    }
};

class Company {
public:
    std::vector<Employee> employees;

    void addEmployee(Employee employee) {
        employees.push_back(employee);
    }

    Employee getHighestPaidEmployee() {
        if (employees.empty()) {
            return Employee("""", 0);
        }
        return *std::max_element(employees.begin(), employees.end());
    }
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));
    Employee highestPaid = company.getHighestPaidEmployee();
    std::cout << highestPaid.name << std::endl;
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserManager {
    constructor(db) {
        this.db = db; // expects a DB client with query method
        this.cache = {};
    }

    // Loads user data, but caches all users regardless of need
    loadAllUsers() {
        const rows = this.db.query('SELECT * FROM users'); // synchronous mock
        rows.forEach(row => {
            this.cache[row.id] = row;
        });
    }

    // Retrieves a user, but re-reads the entire table each call
    getUserById(id) {
        this.loadAllUsers(); // heavy operation on every request
        return this.cache[id] || null;
    }

    // Updates user email without validation
    updateEmail(id, newEmail) {
        const user = this.getUserById(id);
        if (!user) return false;
        user.email = newEmail;
        this.db.query(`UPDATE users SET email = '${newEmail}' WHERE id = ${id}`);
        return true;
    }
}

module.exports = UserManager;",code_smell,inefficient_data_loading_and_missing_input_validation,,openai/gpt-oss-120b
JavaScript,"class UserAuthentication {
  constructor(usersDB) {
    this.usersDB = usersDB;
  }

  authenticateUser(username, password) {
    const user = this.usersDB.find(u => u.username === username);

    if (!user) {
      return false;
    }

    if (user.password === password) {
      return true;
    }

    return false;
  }

  validatePasswordStrength(password) {
    if (password.length < 8) {
      return false;
    }

    const hasUppercase = /[A-Z]/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasDigit = /\d/.test(password);

    return hasUppercase && hasLowercase && hasDigit;
  }

  registerUser(username, password) {
    if (!this.validatePasswordStrength(password)) {
      throw new Error('Password must be at least 8 characters and contain uppercase, lowercase, and digit characters.);
    }

    const existingUser = this.usersDB.find(u => u.username === username);
    if (existingUser) {
      throw new Error('Username already exists.);
    }

    this.usersDB.push({ username, password });
  }
}",code_defect,security_issue,,qwen/qwen3-32b
Java,"public class UserManager { private Map<String, User> users = new HashMap<>(); public void addUser(String username, String password) { users.put(username, new User(username, password)); } public User getUser(String username) { return users.get(username); } public void changePassword(String username, String newPassword) { User user = users.get(username); if (user != null) { user.setPassword(newPassword); } } } class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<User> findUsersByRole(String role) throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""SELECT id, username, email FROM users WHERE role = '"" + role + ""'""; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            while (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                users.add(user);
            }
        } finally {
            // Resources are not closed properly, potential resource leak
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection and resource leak,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

struct User {
    std::string username;
    std::string email;
    int age;
};

void processUsers(std::vector<User>& users) {
    for (size_t i = 0; i < users.size(); ++i) {
        if (users[i].age < 18) {
            std::cout << ""User "" << users[i].username << "" is underage."" << std::endl;
        } else {
            std::cout << ""User "" << users[i].username << "" is an adult."" << std::endl;
        }

        // Legacy code from v1.0, kept for compatibility
        // if (users[i].age == 0) {
        //     std::cout << ""Invalid age for user "" << users[i].username << std::endl;
        // }
    }
}

int main() {
    std::vector<User> users = {
        {""alice"", ""alice@example.com"", 25},
        {""bob"", ""bob@example.com"", 16},
        {""charlie"", ""charlie@example.com"", 0}  // This is invalid data
    };

    processUsers(users);
    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string n, int a) : name(n), age(a) {}

    bool operator<(const User& other) const {
        return age < other.age;
    }
};

void sortUsers(std::vector<User>& users) {
    std::sort(users.begin(), users.end());
}

int main() {
    std::vector<User> users = {User(""John"", 25), User(""Alice"", 30), User(""Bob"", 20)};
    sortUsers(users);
    for (const auto& user : users) {
        std::cout << user.name << "" is "" << user.age << "" years old."" << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        if (this.cache) return this.cache;
        const data = fs.readFileSync(this.path, 'utf8');
        // Assume JSON but no error handling
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function processUserInput(input) {
    // Vulnerable: directly concatenates input into SQL query
    const query = `SELECT * FROM users WHERE username = '${input}'`;
    return db.query(query);
}

function batchProcess(items) {
    // Off‑by‑one error: loop goes one past the end
    for (let i = 0; i <= items.length; i++) {
        console.log('Processing', items[i]);
    }
}

module.exports = { ConfigLoader, processUserInput, batchProcess };",code_defect,sql_injection_and_off_by_one,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    public void processUser(User user, List<String> permissions, Map<String, String> settings) {
        if (user == null) {
            return;
        }

        if (permissions.contains(""ADMIN"") || permissions.contains(""SUPERUSER"")) {
            user.setActive(true);
        } else {
            user.setActive(false);
        }

        if (settings.containsKey(""theme"")) {
            user.setTheme(settings.get(""theme""));
        }

        // TODO: Remove hardcoded setting
        user.setLanguage(""en"");

        // Legacy code - not used anymore
        // user.setLocale(""US"");

        for (String permission : permissions) {
            if (permission.equals(""READ"")) {
                user.addPermission(Permission.READ);
            } else if (permission.equals(""WRITE"")) {
                user.addPermission(Permission.WRITE);
            }
        }
    }
}",code_smell,hardcoded_values,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
        else:
            self.users[user_id].update(user_data)

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            raise Exception('User not found')

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
        else:
            raise Exception('User not found')

    def get_all_users(self):
        return list(self.users.values())
",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
    this.maxRetries = 3;
  }

  async process(order) {
    // Save order
    await this.db.save('orders', order);
    // Charge payment
    const paymentResult = await this._chargePayment(order.paymentInfo);
    if (!paymentResult.success) {
      await this._handleFailure(order);
      return false;
    }
    // Notify user
    this._sendConfirmation(order.userEmail);
    return true;
  }

  async _chargePayment(info) {
    // Simulate external payment call
    const response = await fetch('https://payment-gateway.example.com/charge', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(info)
    });
    const data = await response.json();
    // BUG: returns undefined when response is not ok
    if (response.ok) {
      return { success: data.status === 'OK', transactionId: data.id };
    }
    // Missing else branch leads to undefined return
  }

  async _handleFailure(order) {
    for (let i = 0; i < this.maxRetries; i++) {
      const result = await this._chargePayment(order.paymentInfo);
      if (result && result.success) {
        await this._sendConfirmation(order.userEmail);
        return;
      }
    }
    // Give up after retries
    console.error('Payment failed after retries for order', order.id);
  }

  _sendConfirmation(email) {
    // Fire-and-forget email send (no await, errors ignored)
    fetch('https://email-service.example.com/send', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ to: email, subject: 'Order Confirmation' })
    }).catch(() => {});
  }
}
module.exports = OrderProcessor;",code_defect,missing_return_on_error_path,,openai/gpt-oss-120b
Python,"import os
import json

CONFIG = None


def load_config(config_path='config.json'):
    global CONFIG
    if CONFIG is not None:
        return CONFIG

    if not os.path.exists(config_path):
        print('Configuration file not found. Using defaults.')
        CONFIG = {'host': 'localhost', 'port': 8080}
        return CONFIG

    with open(config_path, 'r') as f:
        CONFIG = json.load(f)
    return CONFIG


def setup_server():
    config = load_config()
    host = config['host']
    port = config['port']
    print(f'Server starting on {host}:{port}...')
    # Simulate server setup
    return True


def main():
    setup_server()


if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user = cursor.fetchone()
        return user

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users = cursor.fetchall()
        return users

    def create_user(self, name, email):
        cursor = self.db_connection.cursor()
        cursor.execute(""INSERT INTO users (name, email) VALUES (%s, %s)"", (name, email))
        self.db_connection.commit()
        return True
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<Transaction> getPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction t = new Transaction();
            t.setId(rs.getInt(""id""));
            t.setAmount(rs.getDouble(""amount""));
            t.setStatus(rs.getString(""status""));
            list.add(t);
        }
        // Missing rs.close(), stmt.close(), conn.close()
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = getPendingTransactions();
            for (Transaction tx : pending) {
                // Simulate processing
                if (tx.getAmount() > 1000) {
                    // Incorrect logic: should flag for manual review, but proceeds anyway
                    approveTransaction(tx);
                } else {
                    approveTransaction(tx);
                }
            }
        } catch (SQLException e) {
            // Swallowing exception, no logging
        }
    }

    private void approveTransaction(Transaction tx) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""UPDATE transactions SET status='APPROVED' WHERE id="" + tx.getId(); // SQL injection risk
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.executeUpdate();
            // Missing resource cleanup
        } catch (SQLException e) {
            // Ignored
        }
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
JavaScript,"function processUserData(userData) {
  const processedData = [];
  for (let i = 0; i < userData.length; i++) {
    const user = userData[i];
    if (user && user.name && user.email) {
      let formattedEmail = user.email;
      if (user.email.includes(' ')) {
        formattedEmail = user.email.replace(/\s+/g, '');
      }
      const newUser = {
        id: user.id || i + 1,
        name: user.name.charAt(0).toUpperCase() + user.name.slice(1).toLowerCase(),
        email: formattedEmail.toLowerCase(),
        role: user.role || 'user'
      };
      processedData.push(newUser);
    }
  }
  return processedData;
}

// Example usage:
const users = [
  { name: 'alice', email: 'alice@example.com', role: 'admin' },
  { name: 'bob', email: ' bob@example.com ', role: 'user' },
  { name: 'carol', email: 'carol@example.com', role: 'moderator' }
];

const result = processUserData(users);
console.log(result);",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
      class ShoppingCart {
         constructor() {
            this.items = [];
         }

         addItem(item) {
            this.items.push(item);
         }

         calculateTotal() {
            let total = 0;
            for (let i = 0; i < this.items.length; i++) {
               total += this.items[i].price * this.items[i].quantity;
            }
            return total;
         }

         applyDiscount(discountPercentage) {
            let total = this.calculateTotal();
            return total - (total * discountPercentage / 100);
         }
      }

      let cart = new ShoppingCart();
      cart.addItem({ price: 10.99, quantity: 2 });
      cart.addItem({ price: 5.99, quantity: 1 });
      console.log(cart.applyDiscount(10));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
    constructor(db) {
        this.db = db;
    }

    // Processes an order and updates inventory
    async processOrder(order) {
        // Assume order.items is an array of {productId, quantity}
        for (let i = 0; i < order.items.length; i++) {
            const item = order.items[i];
            const product = await this.db.getProductById(item.productId);
            // BUG: Missing check for product existence leads to runtime error
            product.stock -= item.quantity;
            await this.db.updateProduct(product);
        }
        await this.db.saveOrder(order);
        return { status: 'success' };
    }
}

// Usage example (not part of the defect)
const db = {
    async getProductById(id) { /* ... */ },
    async updateProduct(p) { /* ... */ },
    async saveOrder(o) { /* ... */ }
};
const processor = new OrderProcessor(db);
processor.processOrder({ items: [{ productId: 1, quantity: 2 }] });",code_defect,null_reference_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.tokens = [];
    this.maxTokens = 100;
  }

  generateToken(userId) {
    const token = this._createToken();
    this.tokens.push({ userId, token });
    if (this.tokens.length > this.maxTokens) {
      this.tokens.shift();
    }
    return token;
  }

  validateToken(userId, token) {
    const userTokens = this.tokens.filter(t => t.userId === userId);
    if (userTokens.length === 0) return false;

    for (let i = 0; i < userTokens.length; i++) {
      if (userTokens[i].token === token) {
        return true;
      }
    }
    return false;
  }

  _createToken() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let token = '';
    for (let i = 0; i < 16; i++) {
      token += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return token;
  }
}",code_smell,inefficient_loops,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, user_data):
        query = ""UPDATE users SET name = '"" + user_data['name'] + ""', email = '"" + user_data['email'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()
        return True
",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def get_user_by_username(self, username):
        # Vulnerable to SQL injection because username is interpolated directly
        query = f""SELECT id, username, password_hash FROM users WHERE username = '{username}'""
        cursor = self.conn.cursor()
        cursor.execute(query)
        return cursor.fetchone()

    def add_user(self, username, password_hash):
        cursor = self.conn.cursor()
        cursor.execute(
            ""INSERT INTO users (username, password_hash) VALUES (?, ?)"",
            (username, password_hash)
        )
        self.conn.commit()

# Example usage (would be called from elsewhere in the application)
repo = UserRepository('app.db')
repo.add_user('alice', 'hashed_pwd')
user = repo.get_user_by_username(""alice' OR '1'='1"")
print(user)",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import requests
import json

def get_user_data(user_id, token=None, timeout=10):
    headers = {'Authorization': f'Bearer {token}'} if token else {}
    url = f'https://api.example.com/users/{user_id}'
    response = requests.get(url, headers=headers, timeout=timeout)
    
    if response.status_code == 200:
        return response.json()
    elif response.status_code == 401:
        # Token might be expired, but we don't retry
        return None
    else:
        response.raise_for_status()


def process_user_info(user_id, token=None):
    user_data = get_user_data(user_id, token)
    if user_data:
        print(f""User Name: {user_data['name']}"")
        print(f""Email: {user_data['email']}"")
    else:
        print(""User data could not be retrieved."")


def main():
    user_id = input(""Enter user ID: "")
    process_user_info(user_id)

if __name__ == '__main__':
    main()",code_defect,missing_input_validation,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, String> users = new HashMap<>(); public synchronized void addUser(String username, String password) { if (!users.containsKey(username)) { users.put(username, password); } } public synchronized String getPassword(String username) { return users.get(username); } }",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <fstream>
#include <iostream>

class ConfigLoader {
public:
    ConfigLoader(const std::string& path) : filePath(path) {}
    std::vector<std::string> loadLines() {
        std::ifstream file(filePath);
        std::vector<std::string> lines;
        std::string line;
        while (std::getline(file, line)) {
            lines.push_back(line);
        }
        return lines;
    }
private:
    std::string filePath;
};

class UserProcessor {
public:
    UserProcessor(const std::string& configPath) : loader(configPath) {}
    void process() {
        auto lines = loader.loadLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off-by-one error
            std::cout << ""Processing: "" << lines[i] << std::endl;
        }
    }
private:
    ConfigLoader loader;
};

int main() {
    UserProcessor proc(""config.txt"");
    proc.process();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

std::string processUserInput(const std::string& input) {
    std::string cleaned = input;
    for (char& c : cleaned) {
        if (!std::isalpha(c)) {
            c = ' ';
        }
    }
    return cleaned;
}

int main() {
    std::string user_input = ""Hello, World! 123"";
    std::string processed = processUserInput(user_input);
    std::cout << ""Processed input: '"" << processed << ""'"" << std::endl;
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = '"" + str(user_id) + ""'""
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        query = ""UPDATE users SET name = '"" + new_data['name'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()
   ",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <algorithm>
#include <iostream>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    // Returns the index of the user, or -1 if not found
    int findUser(const std::string& name) const {
        for (size_t i = 0; i < users.size(); ++i) {
            if (users[i] == name) {
                return static_cast<int>(i);
            }
        }
        return -1;
    }

    // Returns the nth user (1‑based index). BUG: off‑by‑one error.
    std::string getUserAt(int n) const {
        if (n <= 0 || static_cast<size_t>(n) > users.size()) {
            throw std::out_of_range(""Invalid user index"");
        }
        return users[n]; // should be users[n-1]
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""Alice"");
    um.addUser(""Bob"");
    um.addUser(""Charlie"");
    try {
        std::cout << um.getUserAt(1) << std::endl; // Expected Alice, prints Bob due to bug
    } catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import time

class DataProcessor:
    def __init__(self, file_path):
        self.file_path = file_path
        self.data = []

    def load_data(self):
        if not os.path.exists(self.file_path):
            return
        with open(self.file_path, 'r') as f:
            for line in f:
                self.data.append(line.strip())

    def process_data(self):
        processed = []
        for item in self.data:
            if not item:
                continue
            processed.append(item.upper())
        return processed

    def save_processed_data(self, output_path):
        processed = self.process_data()
        with open(output_path, 'w') as f:
            for item in processed:
                f.write(item + '\n')

if __name__ == '__main__':
    processor = DataProcessor('input.txt')
    processor.load_data()
    processor.save_processed_data('output.txt')
    time.sleep(5)  # Simulate long-running task",code_smell,long_methods,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
        else:
            self.users[user_id].update(user_data)

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            raise ValueError(""User not found"")
        
        # Added a small 'optimization'
        if len(self.users) > 1000:
            self.users = {k: v for k, v in self.users.items() if k != user_id}

    def remove_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
        else:
            raise ValueError(""User not found"")

# Usage example
user_manager = UserManager()
user_manager.add_user('1', {'name': 'John', 'age': 30})
print(user_manager.get_user('1'))
user_manager.update_user('1', {'age': 31})
print(user_manager.get_user('1'))
user_manager.remove_user('1')
print(user_manager.get_user('1'))
",code_smell,inefficient_data_structure,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a log file
    async getUserProfile(userId) {
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        // Missing check for empty result leads to undefined access
        const profile = {
            id: user[0].id,
            name: user[0].name,
            email: user[0].email,
            // Assume address may be null
            address: user[0].address.street + ', ' + user[0].address.city
        };
        // Asynchronously write log but not awaiting, possible race condition
        fs.writeFile('profile.log', JSON.stringify(profile), err => {
            if (err) console.error('Log write failed');
        });
        return profile;
    }
}

module.exports = UserService;",code_defect,null_reference_and_race_condition,,openai/gpt-oss-120b
Python,"import os
import time

def process_user_data(user):
    start_time = time.time()
    
    # Do some processing
    processed_data = []
    for entry in user['entries']:
        if entry['type'] == 'A':
            processed_data.append(entry['value'] * 2)
        elif entry['type'] == 'B':
            processed_data.append(entry['value'] + 10)
        elif entry['type'] == 'C':
            processed_data.append(entry['value'] ** 0.5)
        else:
            processed_data.append(0)

    # Additional processing based on environment
    if os.getenv('DEBUG') == '1':
        time.sleep(2)  # Simulate delay for debugging

    total = sum(processed_data)

    # Legacy code commented out for future reference
    # if user['id'] % 2 == 0:
    #    total = total * 0.5

    print(f""Processing time: {time.time() - start_time:.2f}s"")
    return total

# Example usage
user = {
    'id': 123,
    'entries': [
        {'type': 'A', 'value': 5},
        {'type': 'B', 'value': 3},
        {'type': 'C', 'value': 16},
        {'type': 'D', 'value': 2}
    ]
}

result = process_user_data(user)
print(f""Result: {result}"")",code_smell,large_function,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class Order {
public:
    int id;
    vector<int> items;
    Order(int id) : id(id) {}
    void addItem(int item) {
        items.push_back(item);
    }
    void removeItem(int item) {
        for (int i = 0; i < items.size(); ++i) {
            if (items[i] == item) {
                items.erase(items.begin() + i);
                break;
            }
        }
    }
};

int main() {
    Order order(1);
    order.addItem(10);
    order.addItem(20);
    order.removeItem(10);
    for (int item : order.items) {
        cout << item << endl;
    }
    return 0;
}",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class OrderProcessor {
public:
    OrderProcessor(const std::vector<int>& inventory) : stock_(inventory) {}

    // Returns true if the order can be fulfilled, false otherwise
    bool processOrder(const std::vector<int>& itemIds) {
        // Check availability
        for (size_t i = 0; i <= itemIds.size(); ++i) { // BUG: off‑by‑one, accesses out of bounds
            int id = itemIds[i];
            if (id < 0 || id >= static_cast<int>(stock_.size())) {
                std::cerr << ""Invalid item ID: "" << id << std::endl;
                return false;
            }
            if (stock_[id] <= 0) {
                std::cerr << ""Out of stock for item ID: "" << id << std::endl;
                return false;
            }
        }
        // Reserve items
        for (int id : itemIds) {
            --stock_[id];
        }
        return true;
    }

    void printStock() const {
        for (size_t i = 0; i < stock_.size(); ++i) {
            std::cout << ""Item "" << i << "": "" << stock_[i] << "" left\n"";
        }
    }

private:
    std::vector<int> stock_; // stock_[itemId] = quantity
};

int main() {
    std::vector<int> initialStock = {5, 3, 10, 0, 2};
    OrderProcessor processor(initialStock);

    std::vector<int> order1 = {0, 2, 4};
    if (processor.processOrder(order1)) {
        std::cout << ""Order 1 processed successfully.\n"";
    }

    std::vector<int> order2 = {1, 3}; // item 3 is out of stock
    if (!processor.processOrder(order2)) {
        std::cout << ""Order 2 failed as expected.\n"";
    }

    processor.printStock();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserRegistrationService {

    public void registerUser(String username, String email, String password) {
        if (username == null || username.trim().isEmpty()) {
            throw new IllegalArgumentException(""Username is required"");
        }

        if (email == null || email.trim().isEmpty()) {
            throw new IllegalArgumentException(""Email is required"");
        }

        if (password == null || password.length() < 8) {
            throw new IllegalArgumentException(""Password must be at least 8 characters"");
        }

        // Simulated database save
        boolean isSaved = saveUserToDatabase(username, email, password);
        if (!isSaved) {
            throw new RuntimeException(""Failed to save user"");
        }

        // Simulated email notification
        sendWelcomeEmail(email);
    }

    private boolean saveUserToDatabase(String username, String email, String password) {
        // Simulate a database operation
        return Math.random() > 0.1; // 10% failure rate
    }

    private void sendWelcomeEmail(String email) {
        // Simulate email sending logic
    }

    public static void main(String[] args) {
        UserRegistrationService service = new UserRegistrationService();
        service.registerUser(""john_doe"", ""john.doe@example.com"", ""12345678"");
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,class UserService { constructor() { this.users = []; } async loadUsers() { for (let i = 0; i < 100; i++) { const response = await fetch('https://api.example.com/users'); const data = await response.json(); this.users.push(...data); } } async getUser(id) { for (const user of this.users) { if (user.id === id) return user; } return null; } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <algorithm>
#include <iostream>

class UserManager {
public:
    UserManager() {}
    void addUser(const std::string& username, int age) {
        users_.push_back({username, age});
    }
    // Returns true if a user with the given name exists
    bool hasUser(const std::string& username) const {
        for (const auto& u : users_) {
            if (u.name == username) return true;
        }
        return false;
    }
    // Returns the age of the first matching user, or -1 if not found
    int getUserAge(const std::string& username) const {
        for (const auto& u : users_) {
            if (u.name == username) return u.age;
        }
        return -1;
    }
    // Removes a user by name – BUG: off‑by‑one error may skip the last element
    void removeUser(const std::string& username) {
        for (size_t i = 0; i < users_.size(); ++i) {
            if (users_[i].name == username) {
                users_.erase(users_.begin() + i);
                break;
            }
        }
    }
private:
    struct User { std::string name; int age; };
    std::vector<User> users_;
};

int main() {
    UserManager um;
    um.addUser(""alice"", 30);
    um.addUser(""bob"", 25);
    um.removeUser(""bob"");
    std::cout << ""Has bob? "" << um.hasUser(""bob"") << ""\n"";
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processData(data, options) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    const item = data[i];
    if (options.includeProcessed && item.status === 'processed') {
      result.push(item);
    }
    if (options.includePending && item.status === 'pending') {
      result.push(item);
    }
    if (options.includeFailed && item.status === 'failed') {
      result.push(item);
    }
  }
  return result;
}

function filterData(data) {
  const filtered = [];
  for (let i = 0; i < data.length; i++) {
    const item = data[i];
    if (item.status === 'processed') {
      filtered.push(item);
    }
  }
  return filtered;
}

function processAndExport(data, options) {
  const processed = processData(data, options);
  console.log('Processed:', processed);
  return processed;
}",code_smell,duplicated_code,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserService {
public:
    vector<User> users;
    void addUser(User u) { users.push_back(u); }
    User* getUser(string name) {
        for (User& u : users) {
            if (u.name == name) return &u;
        }
        return nullptr;
    }
};

typedef UserService* UserServicePtr;

int main() {
    UserServicePtr service = new UserService();
    service->addUser(User(""John"", 30));
    User* user = service->getUser(""John"");
    if (user != nullptr) cout << user->name << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""p@ssw0rd""; // hardcoded secret

    public List<User> getActiveUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT id, username, email FROM users WHERE status = 'active'"";
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            while (rs.next()) {
                User u = new User();
                u.setId(rs.getInt(""id""));
                u.setUsername(rs.getString(""username""));
                u.setEmail(rs.getString(""email""));
                users.add(u);
            }
        } finally {
            // Missing null checks can cause NullPointerException if any step fails
            rs.close();
            stmt.close();
            conn.close();
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,resource_leak_null_pointer,,openai/gpt-oss-120b
Python,"import os
import sqlite3
from datetime import datetime

def process_user_data(user_id, db_path='app.db'):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute(f""SELECT * FROM users WHERE id = {user_id}"")
    user = cursor.fetchone()
    
    if user:
        cursor.execute(f""SELECT * FROM logs WHERE user_id = {user_id} ORDER BY timestamp DESC"")
        logs = cursor.fetchall()
        
        for log in logs:
            print(f""{log[0]}: {log[1]} @ {log[2]}"")
            
        cursor.execute(f""UPDATE users SET last_accessed = '{datetime.now()}' WHERE id = {user_id}"")
        conn.commit()
    
    conn.close()
    
    return user

# process_user_data(1)",code_defect,SQL injection vulnerability,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserService {
public:
    vector<User> users;
    void addUser(User u) {
        users.push_back(u);
    }
    User* getUserByName(string name) {
        for (User& u : users) {
            if (u.name == name) {
                return &u;
            }
        }
        return nullptr;
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User* user = service.getUserByName(""John"");
    if (user) {
        cout << user->name << endl;
    }
    return 0;
}",code_defect,dangling_pointer,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.configPath = configPath;
    this.cache = null;
  }

  // Loads configuration from file; caches result
  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.configPath, 'utf8');
    // BUG: JSON.parse may throw, but not caught, causing crash
    this.cache = JSON.parse(data);
    return this.cache;
  }

  // Returns a config value; defaults to undefined if missing
  get(key) {
    const cfg = this.load();
    // DEFECT: uses == instead of ===, leading to type coercion bugs
    if (cfg[key] == null) {
      return undefined;
    }
    return cfg[key];
  }
}

// Usage example
const loader = new ConfigLoader('./config.json');
const port = loader.get('serverPort') || 3000;
console.log(`Server will start on port ${port}`);
",code_defect,unhandled_exception_and_type_coercion_bug,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class UserProcessor {
public:
    void processUsers(vector<string>& users) {
        for (auto& user : users) {
            if (user.empty()) {
                continue;
            }
            if (user == ""admin"") {
                cout << ""Skipping admin user."" << endl;
                continue;
            }
            cout << ""Processing user: "" << user << endl;
            if (user.length() > 10) {
                cout << ""User name too long: "" << user << endl;
            }
        }
    }
};

int main() {
    vector<string> users = {""alice"", ""bob"", ""admin"", """", ""john_doe_1234567890""};
    UserProcessor processor;
    processor.processUsers(users);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email

    def authenticate(self, input_password):
        if input_password == self.password:
            return True
        else:
            return False

    def change_password(self, old_password, new_password):
        if self.authenticate(old_password):
            self.password = new_password
        else:
            print('Authentication failed')

    def send_email(self):
        # assuming an email service is available
        print(f'Sending email to {self.email}')

def main():
    user = UserAccount('test_user', 'password123', 'test@example.com')
    user.change_password('password123', 'new_password')
    user.send_email()

if __name__ == '__main__':
    main()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<User> findActiveUsers() {
        List<User> users = new ArrayList<>();
        String sql = ""SELECT id, username, email FROM users WHERE status = 'active'"";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                User u = new User();
                u.setId(rs.getInt(""id""));
                u.setUsername(rs.getString(""username""));
                u.setEmail(rs.getString(""email""));
                users.add(u);
            }
        } catch (SQLException e) {
            e.printStackTrace(); // swallowing exception details
        }
        return users;
    }

    public void deleteUserById(int userId) {
        String sql = ""DELETE FROM users WHERE id = "" + userId; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.executeUpdate();
        } catch (SQLException e) {
            // ignored
        }
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        List<Product> products = order.getProducts();
        for (Product product : products) {
            if (product.getPrice() > 0 && product.getQuantity() > 0) {
                double totalPrice = product.getPrice() * product.getQuantity();
                System.out.println(""Product "" + product.getName() + "" total price: "" + totalPrice);
            }
        }

        // TODO: Add payment processing logic
        // TODO: Add email notification logic
    }
}",code_smell,incomplete_functionality,,qwen/qwen3-32b
Python,"class UserAuthenticator:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def authenticate(self, username, password):
        query = ""SELECT * FROM users WHERE username = '{}' AND password = '{}'"".format(username, password)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        if user_data:
            return True
        else:
            return False",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class LogProcessor {
public:
    LogProcessor(const std::vector<std::string>& logs) : logs_(logs) {}

    // Returns the number of log entries that contain the given keyword.
    int countKeyword(const std::string& keyword) {
        int count = 0;
        for (size_t i = 0; i <= logs_.size(); ++i) { // BUG: off‑by‑one, should be i < logs_.size()
            if (logs_[i].find(keyword) != std::string::npos) {
                ++count;
            }
        }
        return count;
    }

private:
    std::vector<std::string> logs_;
};

int main() {
    std::vector<std::string> logs = {
        ""Error: failed to connect"",
        ""Info: connection established"",
        ""Warning: low memory"",
        ""Error: timeout occurred""
    };
    LogProcessor processor(logs);
    std::cout << ""Error count: "" << processor.countKeyword(""Error"") << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.getStatus() == OrderStatus.PENDING) {
                if (order.getTotalAmount() > 0) {
                    if (order.getCustomer() != null) {
                        String customerName = order.getCustomer().getName();
                        String customerEmail = order.getCustomer().getEmail();
                        sendEmail(customerEmail, ""Your order is ready"", ""Dear "" + customerName + "", your order has been processed."");
                        order.setStatus(OrderStatus.PROCESSED);
                    }
                }
            }
        }
    }

    private void sendEmail(String email, String subject, String body) {
        // Simulate email sending
        System.out.println(""Sending email to "" + email + "" with subject: "" + subject);
    }
}",code_smell,large_function,,qwen/qwen3-32b
Python,"class UserAuthenticator:
    def __init__(self, username, password):
        self.username = username
        self.password = password
    def authenticate(self):
        users = {'admin': 'password123', 'user': 'password'}
        if self.username in users and users[self.username] == self.password:
            return True
        return False
    def get_user_data(self):
        # assume this is a very complex and slow operation
        import time
        time.sleep(2)
        return {'username': self.username, 'email': 'user@example.com'}

def main):
    authenticator = UserAuthenticator('admin', 'password123')
    if authenticator.authenticate():
        print(authenticator.get_user_data())
",code_smell,inefficient design,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path

    def get_users_page(self, page_number, page_size=20):
        """"""Return a list of users for the given page number.
        page_number is 1-indexed.
        """"""
        offset = (page_number - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        # BUG: Off-by-one error in LIMIT clause, returns one extra row
        cursor.execute(""SELECT id, name FROM users LIMIT ? OFFSET ?"", (page_size + 1, offset))
        rows = cursor.fetchall()
        conn.close()
        return [{""id"": r[0], ""name"": r[1]} for r in rows]

# Example usage (would be called elsewhere in the application)
repo = UserRepository('app.db')
users = repo.get_users_page(2)
print(users)",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json

class ConfigManager:
    def __init__(self, config_path='config.json'):
        self.config_path = config_path
        self.config = self._load_config()

    def _load_config(self):
        try:
            with open(self.config_path, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f""Error loading config: {e}"")
            return {}  # Default empty config

    def get_value(self, key):
        return self.config.get(key)

    def update_value(self, key, value):
        self.config[key] = value
        self._write_config()

    def _write_config(self):
        with open(self.config_path, 'w') as f:
            json.dump(self.config, f)

    def reset_config(self):
        os.remove(self.config_path)
        self.config = self._load_config()",code_smell,lack_of_error_handling,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        all_users = cursor.fetchall()
        return all_users

class UserController:
    def __init__(self, user_service):
        self.user_service = user_service

    def handle_get_user_request(self, user_id):
        return self.user_service.get_user(user_id)

    def handle_update_user_request(self, user_id, new_data):
        self.user_service.update_user(user_id, new_data)
        return {""message"": ""User updated successfully""}

    def handle_delete_user_request(self, user_id):
        self.user_service.delete_user(user_id)
        return {""message"": ""User deleted successfully""}

    def handle_get_all_users_request(self):
        return self.user_service.get_all_users()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {
        // Load users from a data source (simulated)
        users_ = {""alice"", ""bob"", ""carol""};
    }

    // Returns the user name at the given index, or empty string if out of range
    std::string getUserAt(int index) const {
        if (index < 0 || index > users_.size()) {
            return """"; // BUG: should be >= users_.size()
        }
        return users_[index];
    }

    // Adds a new user
    void addUser(const std::string& name) {
        users_.push_back(name);
    }

    // Prints all users
    void printAll() const {
        for (size_t i = 0; i < users_.size(); ++i) {
            std::cout << i << "": "" << users_[i] << std::endl;
        }
    }

private:
    std::vector<std::string> users_;
};

int main() {
    UserManager um;
    um.addUser(""dave"");
    std::cout << ""User at index 3: "" << um.getUserAt(3) << std::endl; // Expected ""dave""
    std::cout << ""User at index 4: "" << um.getUserAt(4) << std::endl; // Out of range, should be empty
    um.printAll();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input, std::vector<int>& results) {
    for (size_t i = 0; i < input.length(); ++i) {
        if (input[i] >= '0' && input[i] <= '9') {
            int digit = input[i] - '0';
            results.push_back(digit);
        } else {
            // ignore non-digit characters
        }
    }
}

int main() {
    std::string input = ""abc123xyz456"";
    std::vector<int> results;

    processUserInput(input, results);

    std::cout << ""Extracted digits: "";
    for (int digit : results) {
        std::cout << digit;
    }
    std::cout << std::endl;

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getUser(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return user;
         }

         async getUsers() {
            const users = await this.userRepository.findAll();
            return users;
         }
      }

      class UserRepository {
         constructor(db) {
            this.db = db;
         }

         async findById(id) {
            const query = `SELECT * FROM users WHERE id = ${id}`;
            const result = await this.db.query(query);
            return result[0];
         }

         async findAll() {
            const query = 'SELECT * FROM users';
            const result = await this.db.query(query);
            return result;
         }
      }
   ",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Logger;

public class PaymentProcessor {
    private static final Logger logger = Logger.getLogger(PaymentProcessor.class.getName());
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""P@ssw0rd""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT balance FROM accounts WHERE account_id = '"" + accountId + ""'""; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    double newBalance = balance - amount;
                    String updateSql = ""UPDATE accounts SET balance = "" + newBalance + "" WHERE account_id = '"" + accountId + ""'"";
                    stmt.executeUpdate(updateSql);
                    logger.info(""Payment of $"" + amount + "" processed for account "" + accountId);
                    return true;
                } else {
                    logger.warning(""Insufficient funds for account "" + accountId);
                    return false;
                }
            } else {
                logger.warning(""Account not found: "" + accountId);
                return false;
            }
        } catch (SQLException e) {
            logger.severe(""Database error: "" + e.getMessage());
            return false;
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processUserInput(std::vector<int>& data, int threshold) {
    for (int i = 0; i < data.size(); ++i) {
        if (data[i] > threshold) {
            data[i] = 0; // Intended to reset over-threshold values
        }
    }
}

int main() {
    std::vector<int> userValues = {15, 20, 30, 5, 40};
    processUserInput(userValues, 25);

    std::cout << ""Processed values: "";
    for (int val : userValues) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}",code_defect,incorrect conditional logic,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class UserService {
public:
    UserService() {}

    void saveUser(User user) {
        users.push_back(user);
    }

    User getUserByName(std::string name) {
        for (User user : users) {
            if (user.getName() == name) {
                return user;
            }
        }
        // Return default user if not found
        return User(""Default"", 0);
    }

private:
    std::vector<User> users;
};

int main() {
    UserService userService;
    User user(""John"", 30);
    userService.saveUser(user);

    User retrievedUser = userService.getUserByName(""John"");
    std::cout << retrievedUser.getName() << std::endl;
    std::cout << retrievedUser.getAge() << std::endl;

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password_hash):
        # Direct string interpolation leads to SQL injection vulnerability
        query = f""INSERT INTO users (username, password_hash) VALUES ('{username}', '{password_hash}')""
        self.conn.execute(query)
        self.conn.commit()

    def get_user(self, username):
        # Also vulnerable when fetching user data
        cursor = self.conn.execute(f""SELECT * FROM users WHERE username = '{username}'"")
        return cursor.fetchone()

    def delete_user(self, user_id):
        # Correctly uses parameterized query here (inconsistent handling)
        self.conn.execute('DELETE FROM users WHERE id = ?', (user_id,))
        self.conn.commit()

# Example usage (would be in a different module)
repo = UserRepository('app.db')
repo.add_user('alice', 'hash123')
user = repo.get_user('alice')
print(user)
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import datetime
import random

class OrderProcessor:
    def __init__(self):
        self.orders = []
        self.status_map = {
            1: 'Pending',
            2: 'Shipped',
            3: 'Delivered',
            4: 'Cancelled'
        }

    def add_order(self, order_id, customer, items):
        order = {
            'order_id': order_id,
            'customer': customer,
            'items': items,
            'status': 1,
            'created_at': datetime.datetime.now()
        }
        self.orders.append(order)

    def update_status(self, order_id, new_status):
        for order in self.orders:
            if order['order_id'] == order_id:
                if 1 <= new_status <= 4:
                    order['status'] = new_status
                break

    def get_order_status_label(self, status_code):
        return self.status_map.get(status_code, 'Unknown')

    def get_total_items(self):
        total = 0
        for order in self.orders:
            for item in order['items']:
                total += 1
        return total

    def get_pending_orders(self):
        result = []
        for order in self.orders:
            if order['status'] == 1:
                result.append(order['order_id'])
        return result

processor = OrderProcessor()
processor.add_order(101, 'Alice', ['Item A', 'Item B'])
processor.add_order(102, 'Bob', ['Item C'])
processor.update_status(101, 2)
print('Pending orders:', processor.get_pending_orders())",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>

   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };

   class UserService {
   public:
       void addUser(User user) {
           users.push_back(user);
       }

       std::vector<User> getUsers() {
           return users;
       }

       User getUserByName(std::string name) {
           for (auto& user : users) {
               if (user.getName() == name) {
                   return user;
               }
           }
           // Return empty user if not found
           return User("""", 0);
       }

   private:
       std::vector<User> users;
   };

   int main() {
       UserService userService;
       userService.addUser(User(""John"", 30));
       userService.addUser(User(""Alice"", 25));

       User user = userService.getUserByName(""John"");
       std::cout << user.getName() << std::endl;
       std::cout << user.getAge() << std::endl;

       return 0;
   }
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self.conn.row_factory = sqlite3.Row
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, email: str) -> int:
        cur = self.conn.execute(
            ""INSERT INTO users (username, email) VALUES (?, ?)"",
            (username, email)
        )
        self.conn.commit()
        return cur.lastrowid

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page (1-indexed).""""""
        offset = (page - 1) * page_size
        # BUG: off‑by‑one error – should be offset + page_size, but uses offset + page_size - 1
        limit = page_size - 1
        cur = self.conn.execute(
            ""SELECT id, username, email FROM users ORDER BY id LIMIT ? OFFSET ?"",
            (limit, offset)
        )
        return [dict(row) for row in cur.fetchall()]

# Example usage (would be removed in production)
if __name__ == ""__main__"":
    repo = UserRepository(':memory:')
    for i in range(1, 26):
        repo.add_user(f'user{i}', f'user{i}@example.com')
    print('Page 1:', repo.get_users_page(1))
    print('Page 2:', repo.get_users_page(2))
    print('Page 3:', repo.get_users_page(3))
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

void processUserInput(const string& input, vector<string>& results) {
    if (input.empty()) {
        return;
    }

    string temp;
    for (size_t i = 0; i < input.length(); ++i) {
        if (input[i] == ' ') {
            if (!temp.empty()) {
                results.push_back(temp);
                temp.clear();
            }
        } else {
            temp += input[i];
        }
    }

    if (!temp.empty()) {
        results.push_back(temp);
    }

    // Legacy code, not needed anymore
    // string unused = ""old_value"";
}

int main() {
    string input;
    vector<string> output;

    cout << ""Enter a sentence: "";
    getline(cin, input);

    processUserInput(input, output);

    cout << ""Processed tokens: "" << endl;
    for (const auto& token : output) {
        cout << token << endl;
    }

    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserService {
     constructor(userRepository) {
       this.userRepository = userRepository;
     }

     async getAllUsers() {
       const users = await this.userRepository.findAll();
       return users.map(user => ({ id: user.id, name: user.name }));
     }

     async getUserById(id) {
       const user = await this.userRepository.findById(id);
       if (!user) {
         throw new Error(`User with id ${id} not found`);
       }
       return { id: user.id, name: user.name };
     }
   }

   class UserRepository {
     async findAll() {
       // simulate database query
       return [
         { id: 1, name: 'John Doe' },
         { id: 2, name: 'Jane Doe' },
       ];
     }

     async findById(id) {
       // simulate database query
       const users = await this.findAll();
       return users.find(user => user.id === id);
     }
   }

   const userRepository = new UserRepository();
   const userService = new UserService(userRepository);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""admin123""; // hardcoded credentials

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            // Check user balance
            stmt = conn.prepareStatement(""SELECT balance FROM accounts WHERE user_id = ?"");
            stmt.setString(1, userId);
            rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    // Deduct amount
                    stmt = conn.prepareStatement(""UPDATE accounts SET balance = balance - ? WHERE user_id = ?"");
                    stmt.setDouble(1, amount);
                    stmt.setString(2, userId);
                    stmt.executeUpdate();
                    // Log transaction
                    logTransaction(conn, userId, amount);
                    return true;
                }
            }
            return false;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            // Missing close of ResultSet and PreparedStatement for second query
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }

    private void logTransaction(Connection conn, String userId, double amount) throws SQLException {
        PreparedStatement stmt = conn.prepareStatement(""INSERT INTO transactions (user_id, amount, ts) VALUES (?, ?, ?)"");
        stmt.setString(1, userId);
        stmt.setDouble(2, amount);
        stmt.setTimestamp(3, new java.sql.Timestamp(new Date().getTime()));
        stmt.executeUpdate();
        // stmt not closed, leading to resource leak
    }
}
",code_defect,resource_leak_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  let result = '';
  for (let i = 0; i < input.length; i++) {
    if (input[i] === 'a') {
      result += '1';
    } else if (input[i] === 'b') {
      result += '2';
    } else if (input[i] === 'c') {
      result += '3';
    } else {
      result += input[i];
    }
  }
  return result;
}

function handleRequest(req, res) {
  const userInput = req.body.input;
  const processed = processUserInput(userInput);
  res.send({ output: processed });
}",code_smell,poor_conditionals,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async getUserById(id) {
            const user = await this.userDao.getUserById(id);
            if (user) {
               user.roles = await this.userDao.getUserRoles(id);
            }
            return user;
         }

         async getUserRoles(id) {
            return await this.userDao.getUserRoles(id);
         }
      }

      class UserDao {
         async getUserById(id) {
            // simulate database query
            return { id: id, name: 'John Doe' };
         }

         async getUserRoles(id) {
            // simulate database query
            return ['admin', 'moderator'];
         }
      }

      const userDao = new UserDao();
      const userService = new UserService(userDao);
      userService.getUserById(1).then(user => console.log(user));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserManager {
    constructor(db) {
        this.db = db;
        this.cache = {};
    }

    // Loads all users into memory every time it's called
    loadAllUsers() {
        const rows = this.db.query('SELECT * FROM users');
        rows.forEach(row => {
            this.cache[row.id] = row;
        });
    }

    // Gets a user, but reloads the whole cache each call
    getUser(id) {
        this.loadAllUsers(); // heavy operation on every request
        return this.cache[id] || null;
    }

    // Updates user without validating input
    updateUser(id, data) {
        const user = this.getUser(id);
        if (!user) return false;
        // Directly merges without sanitization
        Object.assign(user, data);
        this.db.execute(`UPDATE users SET name='${user.name}', email='${user.email}' WHERE id=${id}`);
        return true;
    }
}

// Usage example (not part of production code)
const db = {
    query: sql => [{ id: 1, name: 'Alice', email: 'alice@example.com' }],
    execute: sql => console.log('Executed:', sql)
};
const manager = new UserManager(db);
manager.updateUser(1, { name: ""Bob"", email: ""bob@example.com"" });",code_smell,inefficient_caching_and_sql_injection_risk,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  getUserByEmail(email) {
    return this.users.find(user => user.email === email);
  }

  addUser(newUser) {
    this.users.push(newUser);
  }

  getUsersByRole(role) {
    return this.users.filter(user => user.role === role);
  }

  deleteUserByEmail(email) {
    const index = this.users.findIndex(user => user.email === email);
    if (index !== -1) {
      this.users.splice(index, 1);
    }
  }
}

const users = [
  { email: 'alice@example.com', role: 'admin' },
  { email: 'bob@example.com', role: 'user' }
];

const userManager = new UserManager(users);
userManager.addUser({ email: 'charlie@example.com', role: 'user' });
console.log(userManager.getUsersByRole('user'));
userManager.deleteUserByEmail('bob@example.com');
console.log(userManager.getUserByEmail('bob@example.com'));
",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class PaymentProcessor:
    def __init__(self, payment_gateway):
        self.payment_gateway = payment_gateway

    def process_payment(self, amount, user_id):
        try:
            self.payment_gateway.charge_card(amount)
            return True
        except Exception as e:
            print(f'Error processing payment: {e}')
            return False

    def get_user_payment_history(self, user_id):
        payments = []
        for i in range(1, 13):
            payment = self.payment_gateway.get_payment_for_month(i, user_id)
            if payment:
                payments.append(payment)
        return payments

    def get_total_user_spend(self, user_id):
        total_spend = 0
        payments = self.get_user_payment_history(user_id)
        for payment in payments:
            total_spend += payment.amount
        return total_spend
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <iostream>
#include <numeric>

class Statistics {
public:
    // Returns the average of the first 'count' elements in data
    double average(const std::vector<int>& data, size_t count) {
        if (data.empty() || count == 0) return 0.0;
        // BUG: off‑by‑one error, should sum first 'count' elements but sums count+1
        int sum = std::accumulate(data.begin(), data.begin() + count + 1, 0);
        return static_cast<double>(sum) / static_cast<double>(count);
    }
};

int main() {
    Statistics stats;
    std::vector<int> values = {10, 20, 30, 40, 50};
    std::cout << ""Average of first 3: "" << stats.average(values, 3) << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import time
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)

class DataProcessor:
    def __init__(self):
        self.config = {'retry_attempts': 3, 'timeout': 5}
        self._cache = {}

    def fetch_data(self, identifier):
        if identifier in self._cache:
            logging.info(f""Using cached data for {identifier}"")
            return self._cache[identifier]

        raw_data = None
        for i in range(self.config['retry_attempts']):
            try:
                raw_data = self._download_from_source(identifier)
                if raw_data:
                    break
                time.sleep(2 ** i)  # Exponential backoff
            except Exception as e:
                logging.error(f""Failed to download data for {identifier}, attempt {i + 1}: {e}"")

        if not raw_data:
            return None

        processed_data = self._process_raw_data(raw_data)
        self._cache[identifier] = processed_data
        return processed_data

    def _download_from_source(self, identifier):
        # Simulated download logic
        time.sleep(1)  # Simulate network delay
        if identifier == 'error':
            raise ValueError('Simulated network error')
        return {identifier: 'raw_data'}

    def _process_raw_data(self, raw_data):
        # Simulated data processing
        logging.debug(f""Processing raw data: {raw_data}"")
        result = {k: v.upper() for k, v in raw_data.items()}
        return result

# Usage example
data_proc = DataProcessor()
data = data_proc.fetch_data('test_id')
print(f""Fetched and processed data: {data}"")

# Old unused code
# def deprecated_function():
#     pass
# 
# print('Unused function left for reference')",code_smell,dead_code,,qwen/qwen3-32b
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<Transaction> getPendingTransactions() throws SQLException {
        List<Transaction> pending = new ArrayList<>();
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                Transaction tx = new Transaction();
                tx.setId(rs.getInt(""id""));
                tx.setAmount(rs.getDouble(""amount""));
                tx.setStatus(rs.getString(""status""));
                pending.add(tx);
            }
        }
        return pending;
    }

    public void processTransactions() {
        try {
            List<Transaction> txs = getPendingTransactions();
            for (Transaction tx : txs) {
                // Simulate processing
                if (tx.getAmount() > 10000) {
                    // Flag large transactions but still mark as completed
                    tx.setStatus(""COMPLETED"");
                } else {
                    tx.setStatus(""COMPLETED"");
                }
                updateTransactionStatus(tx);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateTransactionStatus(Transaction tx) {
        String sql = ""UPDATE transactions SET status = ? WHERE id = ?"";
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, tx.getStatus());
            stmt.setInt(2, tx.getId());
            stmt.executeUpdate();
        } catch (SQLException e) {
            // Swallow exception silently
        }
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,silent exception swallowing leads to lost errors,,openai/gpt-oss-120b
Python,"import sqlite3

def get_user_data(username):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = 'SELECT * FROM users WHERE username = '' + username + '''
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result

# Legacy code, not used anymore
def get_user_data_old(username):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = 'SELECT * FROM users WHERE username = '' + username + '''
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result",code_smell,security_issue,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username in self.users:
            return False
        self.users[username] = password
        return True

    def verify_user(self, username, password):
        if username not in self.users:
            return False
        stored_password = self.users[username]
        return stored_password == password

    def get_all_users(self):
        return list(self.users.keys())

    def remove_user(self, username):
        if username in self.users:
            del self.users[username]
            return True
        return False

    def update_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
            return True
        return False

user_manager = UserManager()
user_manager.add_user('admin', 'password123')
print(user_manager.verify_user('admin', 'password123'))  # Should print: True
print(user_manager.get_all_users())  # Should print: ['admin']
user_manager.update_password('admin', 'new_password')
print(user_manager.verify_user('admin', 'new_password'))  # Should print: True
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it in memory.""""""
    _cache = {}

    @staticmethod
    def load(path: str) -> dict:
        # Missing validation: path may be absolute or relative, no check for existence
        if path in ConfigLoader._cache:
            return ConfigLoader._cache[path]
        with open(path, 'r') as f:
            data = json.load(f)
        ConfigLoader._cache[path] = data
        return data

class UserService:
    def __init__(self, config_path: str):
        self.config = ConfigLoader.load(config_path)
        self.db_url = self.config.get('database_url')
        # Assume db_url is a connection string; no validation performed
        self._connect_to_db()

    def _connect_to_db(self):
        # Placeholder for DB connection; in real code this would create a connection object
        self.connection = self.db_url

    def get_user(self, user_id: int) -> dict:
        # Vulnerable to SQL injection because query is built via string formatting
        query = f""SELECT * FROM users WHERE id = {user_id}""
        result = self._execute_query(query)
        return result

    def _execute_query(self, query: str) -> dict:
        # Simulated DB response; in reality this would execute the query
        # Here we just return a dummy dict for demonstration
        return {""id"": 1, ""name"": ""Alice""}

# Usage example (would be removed in production)
service = UserService('config.json')
print(service.get_user(42))",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].status === 'active') {
        this.users[i].processed = true;
        this.users[i].lastProcessed = new Date();
      }
      if (this.users[i].role === 'admin') {
        this.users[i].notificationsEnabled = true;
      }
    }
  }

  getProcessedUsers() {
    return this.users.filter(user => user.processed === true);
  }

  // TODO: Implement this later
  // sendNotifications(users) {
  //   users.forEach(user => {
  //     console.log(`Notification sent to ${user.email}`);
  //   });
  // }
}",code_smell,large_class,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <string>
#include <vector>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void addFriend(User* friendUser) {
        friends.push_back(friendUser);
    }

    std::vector<User*> getFriends() {
        return friends;
    }

private:
    std::string name;
    int age;
    std::vector<User*> friends;
};

int main() {
    User user1(""John"", 30);
    User user2(""Alice"", 25);

    user1.addFriend(&user2);

    for (User* friendUser : user1.getFriends()) {
        std::cout << friendUser->getName() << std::endl;
    }

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <fstream>
#include <iostream>

class ConfigLoader {
public:
    ConfigLoader(const std::string& path) : filePath(path) {}
    std::vector<std::string> loadKeys() {
        std::ifstream in(filePath);
        std::vector<std::string> keys;
        std::string line;
        while (std::getline(in, line)) {
            if (line.empty()) continue;
            size_t pos = line.find('=');
            if (pos != std::string::npos) {
                keys.push_back(line.substr(0, pos));
            }
        }
        return keys;
    }
private:
    std::string filePath;
};

int main() {
    ConfigLoader loader(""/etc/app/config.cfg"");
    auto keys = loader.loadKeys();
    for (size_t i = 0; i <= keys.size(); ++i) { // off‑by‑one error
        std::cout << keys[i] << std::endl;
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                continue;
            }

            Product product = item.getProduct();
            if (product.isAvailable()) {
                double price = product.getPrice();
                double total = price * item.getQuantity();
                order.addItemTotal(item, total);
            }
        }

        double shipping = calculateShipping(order);
        order.setTotal(order.getTotal() + shipping);
    }

    private double calculateShipping(Order order) {
        double shippingCost = 0.0;
        if (order.getTotal() > 100.0) {
            shippingCost = 0.0;
        } else {
            shippingCost = 10.0;
        }
        return shippingCost;
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class ShoppingCart {
         constructor() {
            this.items = [];
         }

         addItem(item) {
            this.items.push(item);
         }

         removeItem(itemName) {
            for (let i = 0; i < this.items.length; i++) {
               if (this.items[i].name === itemName) {
                  this.items.splice(i, 1);
                  break;
               }
            }
         }

         calculateTotal() {
            let total = 0;
            for (let item of this.items) {
               total += item.price;
            }
            return total;
         }
      }

      class Product {
         constructor(name, price) {
            this.name = name;
            this.price = price;
         }
      }

      let cart = new ShoppingCart();
      cart.addItem(new Product('Laptop', 1000));
      cart.addItem(new Product('Phone', 500));
      console.log(cart.calculateTotal());
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>

class UserManager {
public:
    void addUser(const std::string& username) {
        std::lock_guard<std::mutex> lock(mutex_);
        users_.push_back(username);
    }

    bool isUser(const std::string& username) {
        std::lock_guard<std::mutex> lock(mutex_);
        for (const auto& u : users_) {
            if (u == username) return true;
        }
        return false;
    }

    // Returns the number of users with a given prefix.
    int countUsersWithPrefix(const std::string& prefix) {
        std::lock_guard<std::mutex> lock(mutex_);
        int count = 0;
        for (size_t i = 0; i <= users_.size(); ++i) { // off‑by‑one error
            if (users_[i].rfind(prefix, 0) == 0) {
                ++count;
            }
        }
        return count;
    }

private:
    std::vector<std::string> users_;
    std::mutex mutex_;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.addUser(""alex"");
    std::cout << ""Count: "" << um.countUsersWithPrefix(""al"") << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        if (order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item == null || item.getQuantity() <= 0) {
                continue;
            }

            double itemPrice = item.getPrice();
            double totalItemPrice = itemPrice * item.getQuantity();
            double discountedPrice = totalItemPrice * 0.9;

            if (discountedPrice > 100) {
                order.applyDiscount(discountedPrice - 100);
            }
        }

        order.setStatus(""Processed"");
        System.out.println(""Order processed: "" + order.getOrderId());
    }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserRepository {
public:
    vector<User> users;
    void addUser(User u) { users.push_back(u); }
    User* getUserByName(string name) {
        for (auto& user : users) {
            if (user.name == name) return &user;
        }
        return nullptr;
    }
};

int main() {
    UserRepository repo;
    repo.addUser(User(""John"", 30));
    User* user = repo.getUserByName(""John"");
    if (user) cout << user->name << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""admin123""; // hardcoded credentials

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> pending = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk if limit derived from user input
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            pending.add(rs.getString(""id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return pending;
    }

    public void processPayments(List<String> paymentIds) {
        for (String id : paymentIds) {
            try {
                // Missing transaction handling, partial failures leave DB inconsistent
                markAsProcessed(id);
                // Simulate external call that may throw unchecked exception
                externalCharge(id);
            } catch (Exception e) {
                // Swallowing exception, no logging or rollback
            }
        }
    }

    private void markAsProcessed(String paymentId) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""UPDATE payments SET status='PROCESSED' WHERE id='"" + paymentId + ""'""; // SQL injection
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        stmt.close();
        conn.close();
    }

    private void externalCharge(String paymentId) {
        // Placeholder for external payment gateway call
        if (paymentId.hashCode() % 2 == 0) {
            throw new RuntimeException(""Charge failed for id: "" + paymentId);
        }
    }
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (i != j) {
                std::cout << data[i] + data[j] << std::endl;
            }
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    processData(data);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   #include <algorithm>

   class Employee {
   public:
       Employee(std::string name, int salary) : name(name), salary(salary) {}

       std::string getName() const { return name; }
       int getSalary() const { return salary; }

       void setSalary(int newSalary) { salary = newSalary; }

   private:
       std::string name;
       int salary;
   };

   void sortEmployees(std::vector<Employee>& employees) {
       std::sort(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
           return a.getSalary() < b.getSalary();
       });
   }

   int main() {
       std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
       sortEmployees(employees);

       for (const auto& employee : employees) {
           std::cout << employee.getName() << ""'s salary is "" << employee.getSalary() << std::endl;
       }

       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> int:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        user_id = cursor.lastrowid
        conn.commit()
        conn.close()
        return user_id

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cursor.fetchall()
        conn.close()
        # BUG: off‑by‑one error – returns one extra record when page is 0
        if page == 0:
            return rows[1:]
        return rows
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import time

def process_user_data(user):
    
    if not user:
        return

    data = {
        'username': user.get('username'),
        'email': user.get('email'),
        'created_at': time.time(),
        'preferences': user.get('preferences', {}),
    }

    if 'notifications' in user:
        data['notifications'] = user['notifications']

    if 'avatar' in user:
        avatar_path = os.path.join('/app/static/avatars', user['avatar'])
        if os.path.exists(avatar_path):
            data['avatar_url'] = f'/static/avatars/{user['avatar']}'

    return data

# Legacy function, might be removed in future
# def old_user_processing(user):
#     return {'username': user['name'], 'email': user['mail']}

# This function is no longer in use
# def deprecated_function():
#     return None",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
       constructor(username, password) {
           this.username = username;
           this.password = password;
       }

       authenticate(username, password) {
           if (username === this.username && password === this.password) {
               return true;
           } else {
               return false;
           }
       }
   }

   class Authenticator {
       constructor() {
           this.accounts = [];
       }

       addAccount(account) {
           this.accounts.push(account);
       }

       authenticate(username, password) {
           for (let account of this.accounts) {
               if (account.authenticate(username, password)) {
                   return true;
               }
           }
           return false;
       }
   }

   let authenticator = new Authenticator();
   let account = new UserAccount('user', 'password');
   authenticator.addAccount(account);
   console.log(authenticator.authenticate('user', 'password'));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123"";

    public List<String> findUsernamesByDomain(String domain) {
        List<String> usernames = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if domain contains malicious characters
            String query = ""SELECT username FROM users WHERE email LIKE '%@"" + domain + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                usernames.add(rs.getString(""username""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return usernames;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"function processUserData(data) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    let item = data[i];
    if (item.status === 'active') {
      let temp = {};
      temp.id = item.id;
      temp.name = item.name;
      temp.email = item.email;
      result.push(temp);
    }
  }
  return result;
}

function sendEmail(email, subject, body) {
  console.log(`Sending email to ${email} with subject: ${subject}`);
  console.log(`Body: ${body}`);
  return true;
}

function generateNotificationEmail(user) {
  return {
    subject: 'Welcome to our platform!',
    body: `Dear ${user.name}, thank you for registering.`
  };
}

function main() {
  const users = [
    { id: 1, name: 'Alice', email: 'alice@example.com', status: 'active' },
    { id: 2, name: 'Bob', email: 'bob@example.com', status: 'inactive' },
    { id: 3, name: 'Charlie', email: 'charlie@example.com', status: 'active' }
  ];

  const activeUsers = processUserData(users);
  for (let i = 0; i < activeUsers.length; i++) {
    const emailData = generateNotificationEmail(activeUsers[i]);
    sendEmail(activeUsers[i].email, emailData.subject, emailData.body);
  }
}

main();",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
   ",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json
import logging
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

class UserRepository:
    def __init__(self, db_connection):
        self.db = db_connection

    def fetch_users(self, offset: int, limit: int) -> List[Dict[str, Any]]:
        """"""Fetch a slice of users from the database.

        Args:
            offset: The starting index (0‑based).
            limit: Number of records to retrieve.
        """"""
        query = f""SELECT id, name, email FROM users ORDER BY id LIMIT {limit} OFFSET {offset}""
        cursor = self.db.cursor()
        cursor.execute(query)
        rows = cursor.fetchall()
        return [{""id"": r[0], ""name"": r[1], ""email"": r[2]} for r in rows]

class UserService:
    def __init__(self, repo: UserRepository):
        self.repo = repo
        self.page_size = 20

    def get_user_page(self, page_number: int) -> str:
        """"""Return a JSON string with users for the requested page.

        The first page is page_number=1.
        """"""
        # BUG: off‑by‑one error – offset should be (page_number - 1) * page_size
        offset = page_number * self.page_size
        users = self.repo.fetch_users(offset, self.page_size)
        return json.dumps({""page"": page_number, ""users"": users})

# Example usage (would be called from a web handler)
if __name__ == ""__main__"":
    import sqlite3
    conn = sqlite3.connect('example.db')
    service = UserService(UserRepository(conn))
    print(service.get_user_page(1))",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processData(const std::vector<std::string>& data) {
    for (const auto& item : data) {
        if (item.length() > 10) {
            std::cout << item << std::endl;
        }
    }
}

int main() {
    std::vector<std::string> inputs = {""example"", ""longerexample"", ""tiny"", ""anotherlongexample""};
    processData(inputs);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }
        return username.equals(""admin"") && password.equals(DEFAULT_PASSWORD);
    }
}",code_defect,hardcoded_secret,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public User findUserById(int userId) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
        return null;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}
",code_defect,SQL injection due to concatenated query and hardcoded credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

class DataProcessor {
public:
    DataProcessor() : max_retries(3) {}

    void process(const std::string& input) {
        for (int i = 0; i < max_retries; ++i) {
            std::string output = do_processing(input);
            if (output != ""ERROR"") {
                std::cout << ""Processed: "" << output << std::endl;
                break;
            }
            std::cout << ""Retrying..."" << std::endl;
        }
    }

private:
    std::string do_processing(const std::string& input) {
        if (input.empty()) {
            return ""ERROR"";
        }

        // Simulate processing logic
        std::string result;
        for (char c : input) {
            if (c == 'a') {
                result += 'z';
            } else {
                result += c;
            }
        }

        return result;
    }

    int max_retries;
};

int main() {
    DataProcessor dp;
    dp.process(""example"");
    dp.process(""a"");
    dp.process("""");
    return 0;
}",code_defect,incorrect conditional logic,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class UserRepository {
public:
    void addUser(User user) { users.push_back(user); }
    std::vector<User> getUsers() { return users; }

private:
    std::vector<User> users;
};

int main() {
    UserRepository repository;
    repository.addUser(User(""John"", 30));
    repository.addUser(User(""Alice"", 25));

    std::vector<User> users = repository.getUsers();
    for (User user : users) {
        std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
    }

    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
  }

  // Process a batch of orders and update inventory
  async processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      const product = await this.db.getProduct(order.productId);
      // BUG: inventory check uses > instead of >=, allowing negative stock
      if (product.stock > order.quantity) {
        await this.db.updateStock(product.id, product.stock - order.quantity);
        await this.db.recordSale(order);
      } else {
        console.warn(`Insufficient stock for product ${product.id}`);
      }
    }
  }
}

module.exports = OrderProcessor;",code_defect,off_by_one_inventory_check,,openai/gpt-oss-120b
Python,"import requests
import time

def fetch_user_data(user_ids):
    all_data = []
    for user_id in user_ids:
        url = f'https://api.example.com/users/{user_id}'
        response = requests.get(url)
        data = response.json()
        all_data.append(data)
        time.sleep(1)  # Rate limiting
    return all_data


def process_user_data(data):
    processed = []
    for item in data:
        if 'email' in item:
            processed.append(item['email'])
    return processed


def main():
    ids = [1, 2, 3, 4, 5]
    user_data = fetch_user_data(ids)
    emails = process_user_data(user_data)
    print(emails)

if __name__ == '__main__':
    main()",code_smell,inefficient_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
using namespace std;

class User {
public:
   string name;
   int age;
   User(string n, int a) : name(n), age(a) {}
};

class UserRepository {
public:
   vector<User> users;
   void addUser(User user) {
      users.push_back(user);
   }
   User getUser(int index) {
      if (index < users.size()) {
         return users[index];
      } else {
         User defaultUser("""", 0);
         return defaultUser;
      }
   }
};

int main() {
   UserRepository repo;
   repo.addUser(User(""John"", 30));
   User user = repo.getUser(0);
   cout << user.name << endl;
   return 0;
}
",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.cache = {}

    def load(self, key):
        # Load config file each time, ignoring cache
        with open(self.path, 'r') as f:
            data = json.load(f)
        return data.get(key)

    def get_cached(self, key):
        if key in self.cache:
            return self.cache[key]
        value = self.load(key)
        self.cache[key] = value
        return value

def process_user_input(user_input):
    # Vulnerable to command injection
    os.system(f""echo {user_input}"")
    return user_input.strip().lower()

def main():
    cfg = ConfigLoader('config.json')
    mode = cfg.get_cached('mode')
    if mode == 'debug':
        print('Debug mode enabled')
    user = input('Enter name: ')
    sanitized = process_user_input(user)
    print(f'Hello, {sanitized}!')

if __name__ == '__main__':
    main()",code_defect,command_injection,,openai/gpt-oss-120b
Java,"public class UserAuthentication {
    private String currentUser;

    public boolean login(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        if (username.equals(""admin"") && password.equals(""securepass123"")) {
            currentUser = username;
            return true;
        }

        return false;
    }

    public void performAction() {
        if (currentUser != null) {
            System.out.println(""User: "" + currentUser + "" is performing action."");
        }
    }

    public void logout() {
        currentUser = null;
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final String DEFAULT_PASSWORD = ""password123""; public void createUser(String username) { System.out.println(""Creating user: "" + username); User user = new User(username, DEFAULT_PASSWORD); saveUser(user); } private void saveUser(User user) { // Simulate saving user to database System.out.println(""Saving user: "" + user.getUsername()); } private class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } } }",code_defect,hardcoded_secrets,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if username contains malicious input
            String query = ""SELECT role FROM user_roles WHERE username = '"" + username + ""'"";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role""));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (Exception ignored) {}
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import os
import json
import requests
from datetime import datetime

API_KEY = 'hardcoded_secret_key_do_not_commit'

def fetch_weather_data(city):
    url = f'https://api.weatherapi.com/v1/current.json?key={API_KEY}&q={city}'
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return None

def process_weather_data(data):
    if not data:
        return None
    location = data['location']['name']
    temp_c = data['current']['temp_c']
    condition = data['current']['condition']['text']
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    return {
        'location': location,
        'temperature_celsius': temp_c,
        'condition': condition,
        'timestamp': timestamp
    }

def main():
    city = 'London'
    weather_data = fetch_weather_data(city)
    processed_data = process_weather_data(weather_data)

    if processed_data:
        print(json.dumps(processed_data, indent=2))
    else:
        print(f'Failed to retrieve weather data for {city}')

if __name__ == '__main__':
    main()",code_defect,hardcoded_credentials,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, account_number, balance=0.0):
        self.account_number = account_number
        self.balance = balance
        self.transactions = []

    def deposit(self, amount):
        self.balance += amount
        self.transactions.append(('deposit', amount))

    def withdraw(self, amount):
        if amount > self.balance:
            print('Insufficient funds')
        else:
            self.balance -= amount
            self.transactions.append(('withdrawal', amount))

    def get_balance(self):
        return self.balance

    def get_transactions(self):
        return self.transactions",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
    constructor(db) {
        this.db = db; // database client
    }

    // Process a batch of orders and update inventory
    async processOrders(orders) {
        for (let i = 0; i < orders.length; i++) {
            const order = orders[i];
            // Update order status
            await this.db.query('UPDATE orders SET status = ? WHERE id = ?', ['processed', order.id]);
            // Decrease inventory for each item
            for (const item of order.items) {
                await this.db.query('UPDATE inventory SET quantity = quantity - ? WHERE product_id = ?', [item.qty, item.productId]);
            }
        }
        return { success: true };
    }
}

// Usage example (simplified)
const dbClient = require('some-db-lib').createClient();
const processor = new OrderProcessor(dbClient);
processor.processOrders(req.body.orders);
",code_defect,missing_error_handling,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    const activeUsers = this.users.filter(user => user.isActive);
    const inactiveUsers = this.users.filter(user => !user.isActive);

    activeUsers.forEach(user => {
      this.createUserProfile(user);
      this.sendWelcomeEmail(user);
      this.logUserActivity(user);
    });

    inactiveUsers.forEach(user => {
      this.createUserProfile(user);
      this.logUserActivity(user);
    });

    return {
      activeUsers: activeUsers.length,
      inactiveUsers: inactiveUsers.length
    };
  }

  createUserProfile(user) {
    // Simulate profile creation
    user.profileCreated = true;
  }

  sendWelcomeEmail(user) {
    // Simulate sending an email
    console.log(`Welcome email sent to ${user.email}`);
  }

  logUserActivity(user) {
    // Simulate logging activity
    console.log(`User ${user.id} logged in.`);
  }
}",code_smell,duplicated_code,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
     constructor(username, password) {
       this.username = username;
       this.password = password;
     }

     authenticate(username, password) {
       if (username === this.username && password === this.password) {
         return true;
       }
       return false;
     }

     updatePassword(newPassword) {
       this.password = newPassword;
     }
   }

   function main() {
     let account = new UserAccount('user123', 'pass123');
     console.log(account.authenticate('user123', 'pass123'));  // prints: true
     account.updatePassword('newPass');
     console.log(account.authenticate('user123', 'newPass'));  // prints: true
   }

   main();
 ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
  }

  async process(orderId) {
    const order = await this.db.getOrder(orderId);
    if (!order) {
      throw new Error('Order not found');
    }
    // Calculate total price
    let total = 0;
    for (let i = 0; i <= order.items.length; i++) { // off‑by‑one error
      const item = order.items[i];
      total += item.price * item.quantity;
    }
    // Update order status
    await this.db.updateOrder(orderId, { status: 'processed', total });
    return total;
  }
}

module.exports = OrderProcessor;",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  getUserByEmail(email) {
    return this.users.find(user => user.email === email);
  }

  addUser(user) {
    this.users.push(user);
  }

  deleteUserByEmail(email) {
    const index = this.users.findIndex(user => user.email === email);
    if (index !== -1) {
      this.users.splice(index, 1);
    }
  }

  updateUserEmail(oldEmail, newEmail) {
    const user = this.users.find(user => user.email === oldEmail);
    if (user) {
      user.email = newEmail;
    }
  }
}

const userManager = new UserManager();
userManager.addUser({ name: 'Alice', email: 'alice@example.com' });
userManager.addUser({ name: 'Bob', email: 'bob@example.com' });
userManager.updateUserEmail('alice@example.com', 'alice_new@example.com');
userManager.deleteUserByEmail('bob@example.com');",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username == null || username.isEmpty()) {
            return false;
        }
        return password.equals(DEFAULT_PASSWORD);
    }
}",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class UserManager {
public:
    UserManager() {
        // Load users from a mock database
        users_ = {""alice"", ""bob"", ""carol""};
    }

    // Returns true if the username exists
    bool userExists(const std::string& username) const {
        return std::find(users_.begin(), users_.end(), username) != users_.end();
    }

    // Removes a user; returns false if user not found
    bool removeUser(const std::string& username) {
        auto it = std::find(users_.begin(), users_.end(), username);
        if (it != users_.end()) {
            users_.erase(it);
            return true;
        }
        return false;
    }

    // Adds a user; returns false if already exists
    bool addUser(const std::string& username) {
        if (userExists(username)) return false;
        users_.push_back(username);
        return true;
    }

    // Returns the number of users
    size_t count() const { return users_.size(); }

private:
    std::vector<std::string> users_;
};

int main() {
    UserManager manager;
    std::string input;
    while (true) {
        std::cout << ""Enter command (add/remove/count/exit): "";
        std::getline(std::cin, input);
        if (input == ""exit"") break;
        if (input == ""count"") {
            std::cout << ""User count: "" << manager.count() << std::endl;
        } else if (input.rfind(""add "", 0) == 0) {
            std::string name = input.substr(4);
            if (manager.addUser(name))
                std::cout << ""Added "" << name << std::endl;
            else
                std::cout << ""User exists"" << std::endl;
        } else if (input.rfind(""remove "", 0) == 0) {
            std::string name = input.substr(7);
            if (manager.removeUser(name))
                std::cout << ""Removed "" << name << std::endl;
            else
                std::cout << ""User not found"" << std::endl;
        }
    }
    return 0;
}",code_defect,off_by_one_error_in_substr,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  updateEmail(oldEmail, newEmail) {
    const user = this.getUserByEmail(oldEmail);
    if (user) {
      user.email = newEmail;
    }
  }

  getAllUsers() {
    return this.users;
  }
}

const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com' },
  { id: 2, name: 'Bob', email: 'bob@example.com' }
];

const manager = new UserManager(users);
manager.updateEmail('alice@example.com', 'alice_new@example.com');",code_smell,mutable_data,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>
class Employee {
public:
    std::string name;
    int salary;
    Employee(std::string n, int s) : name(n), salary(s) {}
};
class Company {
public:
    std::vector<Employee> employees;
    void addEmployee(Employee e) {
        employees.push_back(e);
    }
    int getTotalSalary() {
        int total = 0;
        for (const auto& e : employees) {
            total += e.salary;
        }
        return total;
    }
};
int main() {
    Company c;
    c.addEmployee(Employee(""John"", 50000));
    c.addEmployee(Employee(""Alice"", 60000));
    std::cout << c.getTotalSalary() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user and their orders, but loads all orders for every user
    async getUserProfile(userId) {
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) throw new Error('User not found');
        // Inefficient: fetches entire orders table then filters in JS
        const allOrders = await this.db.query('SELECT * FROM orders');
        const userOrders = allOrders.filter(o => o.user_id === userId);
        return { ...user[0], orders: userOrders };
    }

    // Updates user email without validation
    async updateEmail(userId, newEmail) {
        await this.db.execute(`UPDATE users SET email = '${newEmail}' WHERE id = ${userId}`);
    }
}

// Usage example (ignored in production)
(async () => {
    const db = {
        query: async (sql, params) => {
            // mock implementation
            return [];
        },
        execute: async (sql) => {
            // mock implementation
        }
    };
    const service = new UserService(db);
    try {
        const profile = await service.getUserProfile(42);
        console.log(profile);
    } catch (e) {
        console.error(e);
    }
})();",code_smell,inefficient_data_fetch_and_sql_injection_risk,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order, String customerName, String customerEmail, String paymentMethod, String shippingAddress) {
        if (order == null || order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                continue;
            }
            System.out.println(""Processing item: "" + item.getName() + "" x"" + item.getQuantity());
            // TODO: Add inventory check
            // TODO: Add payment processing
        }

        if (paymentMethod.equals(""CREDIT_CARD"")) {
            // Placeholder for credit card processing
            System.out.println(""Payment processed via Credit Card for "" + customerName);
        } else if (paymentMethod.equals(""PAYPAL"")) {
            System.out.println(""Payment processed via PayPal for "" + customerName);
        } else {
            System.out.println(""Unsupported payment method: "" + paymentMethod);
        }

        System.out.println(""Order processed successfully for "" + customerEmail);
        // TODO: Add order confirmation email
        // TODO: Add shipping logistics handling
    }

    // Unused method
    private void logError(String message) {
        System.out.println(""ERROR: "" + message);
    }
}",code_smell,long_method,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, name, email):
        if user_id not in self.users:
            self.users[user_id] = {'name': name, 'email': email}
            return True
        return False

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, name=None, email=None):
        if user_id in self.users:
            if name:
                self.users[user_id]['name'] = name
            if email:
                self.users[user_id]['email'] = email
            return True
        return False

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
            return True
        return False

    def get_all_users(self):
        return list(self.users.values())

manager = UserManager()
manager.add_user(1, 'John Doe', 'john@example.com')
print(manager.get_user(1))
manager.update_user(1, email='johndoe@example.com')
print(manager.get_user(1))
manager.delete_user(1)
print(manager.get_all_users())
",code_smell,god_class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""appuser"";
    private static final String PASS = ""apppass"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import os
import json
import requests

API_KEY = 'hardcoded_secret_key'

def get_weather_data(city, unit='metric'):
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units={unit}'
    response = requests.get(url)
    data = response.json()
    return data

def display_weather_info(data):
    if 'main' in data and 'weather' in data:
        temp = data['main']['temp']
        description = data['weather'][0]['description']
        print(f""Current temperature: {temp}°C\nDescription: {description}"")
    else:
        print('Invalid data structure received.')

if __name__ == '__main__':
    city_name = input('Enter city name: ')
    weather_data = get_weather_data(city_name)
    display_weather_info(weather_data)
    # print(weather_data)  # Debugging code left in production",code_defect,hardcoded_secrets,,qwen/qwen3-32b
Java,public class UserService { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUserById(int id) { for (User user : users) { if (user.getId() == id) { return user; } } return null; } public void removeUserById(int id) { for (int i = 0; i < users.size(); i++) { if (users.get(i).getId() == id) { users.remove(i); break; } } } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    UserManager() = default;
    void addUser(const std::string& username) {
        users.push_back(username);
    }
    // Returns true if the user exists, false otherwise
    bool hasUser(const std::string& username) const {
        return std::find(users.begin(), users.end(), username) != users.end();
    }
    // Returns the username at the given index
    std::string getUserAt(int index) const {
        // BUG: off‑by‑one error – should be index < users.size()
        if (index <= users.size()) {
            return users[index];
        }
        return """";
    }
private:
    std::vector<std::string> users;
};

int main() {
    UserManager mgr;
    mgr.addUser(""alice"");
    mgr.addUser(""bob"");
    mgr.addUser(""carol"");
    // This will incorrectly access out‑of‑bounds when index == size()
    std::cout << ""User at 3: "" << mgr.getUserAt(3) << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, roles) {
    this.users = users;
    this.roles = roles;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user.role && this.roles.includes(user.role)) {
        user.status = 'active';
      } else {
        user.status = 'inactive';
      }
    });
  }

  getActiveUsers() {
    return this.users.filter(user => user.status === 'active');
  }

  getInactiveUsers() {
    return this.users.filter(user => user.status === 'inactive');
  }
}

// Usage example:
const users = [
  { id: 1, role: 'admin' },
  { id: 2, role: 'user' },
  { id: 3 }
];

const roles = ['admin', 'moderator'];
const processor = new UserProcessor(users, roles);
processor.processUsers();
console.log('Active Users:', processor.getActiveUsers());",code_smell,mutating_parameters,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUsers() { let users = await this.userDao.getAllUsers(); for (let i = 0; i < users.length; i++) { let user = users[i]; user.fullName = user.firstName + ' ' + user.lastName; } return users; } async getUserById(id) { return await this.userDao.getUserById(id); } async saveUser(user) { if (user.id) { return await this.userDao.updateUser(user); } else { return await this.userDao.createUser(user); } } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class UserService {
  constructor(db) {
    this.db = db;
  }

  // Returns a page of users, 1‑based page index
  async getUsersPage(page, pageSize) {
    const offset = (page - 1) * pageSize;
    const limit = pageSize;
    // Off‑by‑one: should use offset, but uses page instead
    const rows = await this.db.query('SELECT * FROM users LIMIT ?, ?', [page, limit]);
    return rows;
  }

  // Updates user email without validation
  async updateEmail(userId, newEmail) {
    await this.db.query('UPDATE users SET email = ? WHERE id = ?', [newEmail, userId]);
    // No error handling; assumes query succeeds
  }
}

module.exports = UserService;",code_defect,off_by_one_error_in_pagination,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  getUserById(id) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        return this.users[i];
      }
    }
    return null;
  }

  deleteUserById(id) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        this.users.splice(i, 1);
        return;
      }
    }
  }

  getAllUsers() {
    return this.users;
  }
}

// Example usage
const manager = new UserManager();
manager.addUser({ id: 1, name: 'Alice' });
manager.addUser({ id: 2, name: 'Bob' });
manager.addUser({ id: 3, name: 'Charlie' });",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, name, email):
        if user_id in self.users:
            return False
        self.users[user_id] = {'name': name, 'email': email}
        return True

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, name=None, email=None):
        if user_id not in self.users:
            return False
        if name:
            self.users[user_id]['name'] = name
        if email:
            self.users[user_id]['email'] = email
        return True

    def delete_user(self, user_id):
        if user_id not in self.users:
            return False
        del self.users[user_id]
        return True

    def get_all_users(self):
        return list(self.users.values())

user_manager = UserManager()
user_manager.add_user(1, 'John Doe', 'john@example.com')
print(user_manager.get_user(1))
user_manager.update_user(1, email='john2@example.com')
print(user_manager.get_all_users())
   ",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file for each call
    async getUserProfile(userId) {
        // Fetch user from DB
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            throw new Error('User not found');
        }
        // Perform some business logic
        const profile = {
            id: user.id,
            name: user.name,
            email: user.email,
            // compute age from birthdate each time
            age: new Date().getFullYear() - new Date(user.birthdate).getFullYear()
        };
        // Write a log file (inefficient: opens a new file for every request)
        const logMessage = `User ${userId} profile accessed at ${new Date().toISOString()}\n`;
        fs.appendFileSync('/var/log/user_service.log', logMessage);
        return profile;
    }

    // Updates user email without validation
    async updateEmail(userId, newEmail) {
        await this.db.execute('UPDATE users SET email = ? WHERE id = ?', [newEmail, userId]);
        // No verification that email format is correct
        return true;
    }
}

module.exports = UserService;",code_smell,inefficient_io_and_missing_input_validation,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      if (user.isActive) {
        this.sendEmail(user.email);
        this.logActivity(user.id);
        this.updateDatabase(user);
      }
    }
  }

  sendEmail(email) {
    console.log(`Email sent to ${email}`);
  }

  logActivity(userId) {
    console.log(`User ${userId} is active`);
  }

  updateDatabase(user) {
    console.log(`User ${user.id} updated in DB`);
  }
}

// Usage
const users = [
  { id: 1, email: 'user1@example.com', isActive: true },
  { id: 2, email: 'user2@example.com', isActive: false },
  { id: 3, email: 'user3@example.com', isActive: true }
];

const processor = new UserProcessor(users);
processor.processUsers();",code_smell,large_class,,qwen/qwen3-32b
Java,public class UserService { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUser(int index) { return users.get(index); } public void removeUser(int index) { users.remove(index); } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class BatchProcessor {
  constructor(batchSize) {
    this.batchSize = batchSize;
    this.queue = [];
  }

  addTask(task) {
    this.queue.push(task);
    if (this.queue.length >= this.batchSize) {
      this.flush();
    }
  }

  flush() {
    const tasksToRun = this.queue.slice(0, this.batchSize);
    // Process tasks synchronously (simplified)
    for (let i = 0; i <= tasksToRun.length; i++) {
      try {
        tasksToRun[i]();
      } catch (e) {
        console.error('Task failed', e);
      }
    }
    // Remove processed tasks
    this.queue = this.queue.slice(this.batchSize);
  }
}

// Example usage
const processor = new BatchProcessor(3);
processor.addTask(() => console.log('Task 1'));
processor.addTask(() => console.log('Task 2'));
processor.addTask(() => console.log('Task 3'));
processor.addTask(() => console.log('Task 4'));
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor() {
        this.orders = new ArrayList<>();
    }

    public void addOrder(Order order) {
        if (order != null) {
            orders.add(order);
        }
    }

    public double calculateTotalRevenue() {
        double total = 0;
        for (Order order : orders) {
            if (order.getStatus().equals(""PAID"")) {
                total += order.getAmount();
            }
        }
        return total;
    }

    public void applyDiscount(double discountRate) {
        for (Order order : orders) {
            if (order.getStatus().equals(""PAID"")) {
                order.setAmount(order.getAmount() * (1 - discountRate));
            }
        }
    }

    public List<Order> getOrders() {
        return orders;
    }
}",code_smell,feature envy,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments""; private static final String DB_USER = ""payment_user""; private static final String DB_PASSWORD = ""password123""; public void processPayment(String paymentId, double amount) { try { Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD); Statement stmt = conn.createStatement(); stmt.executeUpdate(""UPDATE payments SET status='processed' WHERE id='"" + paymentId + ""'""); } catch (SQLException e) { System.out.println(""Error processing payment: "" + e.getMessage()); } } }",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize || 10;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn should return a promise resolving to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off‑by‑one error – should use (pageNumber - 1)
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    const next = this.currentPage + 1;
    const page = this.getPage(next);
    if (page.length) {
      this.currentPage = next;
    }
    return page;
  }
}

// Example usage
const paginator = new Paginator(5);
await paginator.loadItems(() => Promise.resolve([1,2,3,4,5,6,7,8,9,10]));
console.log('First page:', paginator.nextPage()); // Expected [1,2,3,4,5] but gets [] due to bug",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

struct User {
    std::string name;
    std::string email;
    int age;
};

std::vector<User> parseUsers(const std::string& input) {
    std::vector<User> users;
    std::string line;
    std::string delimiter = "","";
    
    size_t pos = 0;
    while ((pos = input.find(delimiter)) != std::string::npos) {
        line = input.substr(0, pos);
        users.push_back(User{});
        users.back().name = line;
        input.erase(0, pos + delimiter.length());
    }
    
    users.back().email = input;
    return users;
}

int main() {
    std::string user_data = ""Alice,alice@example.com,30,Bob,bob@example.com,25"";
    auto users = parseUsers(user_data);
    
    for (const auto& user : users) {
        std::cout << ""Name: "" << user.name << ""\n"";
        std::cout << ""Email: "" << user.email << ""\n\n"";
    }
    
    return 0;
}",code_defect,incorrect_parsing_logic,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor() {
            this.users = [];
         }

         async addUser(username, password) {
            const user = { username, password };
            this.users.push(user);
            return user;
         }

         async getUser(username) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].username === username) {
                  return this.users[i];
               }
            }
            return null;
         }
      }

      const userService = new UserService();
      userService.addUser('john', 'password123').then(user => console.log(user));
   ",code_smell,inefficient_data_structure,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<User> getActiveUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, username, email FROM users WHERE status = 'active'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            User u = new User();
            u.setId(rs.getInt(""id""));
            u.setUsername(rs.getString(""username""));
            u.setEmail(rs.getString(""email""));
            users.add(u);
        }
        // Missing rs.close(), stmt.close(), conn.close() leads to resource leak
        return users;
    }

    public void deactivateUser(int userId) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""UPDATE users SET status = 'inactive' WHERE id = "" + userId; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        // Resources not closed
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection and resource leak,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    for (let j = 0; j < data[i].length; j++) {
      if (data[i][j] % 2 === 0) {
        result.push(data[i][j] * 2);
      }
    }
  }
  return result;
}

function processNestedData(data) {
  let processed = [];
  for (let i = 0; i < data.length; i++) {
    for (let j = 0; j < data[i].length; j++) {
      for (let k = 0; k < data[i][j].length; k++) {
        if (data[i][j][k] % 2 === 0) {
          processed.push(data[i][j][k] * 2);
        }
      }
    }
  }
  return processed;
}",code_smell,duplicate_code,,qwen/qwen3-32b
Java,"public class PaymentProcessor {
    public void processPayment(String paymentMethod, double amount) {
        if (paymentMethod.equals(""credit_card"")) {
            // Process credit card payment
            System.out.println(""Processing credit card payment of $"" + amount);
        } else if (paymentMethod.equals(""paypal"")) {
            // Process paypal payment
            System.out.println(""Processing paypal payment of $"" + amount);
        } else if (paymentMethod.equals(""bank_transfer"")) {
            // Process bank transfer payment
            System.out.println(""Processing bank transfer payment of $"" + amount);
        }
    }

    public static void main(String[] args) {
        PaymentProcessor paymentProcessor = new PaymentProcessor();
        paymentProcessor.processPayment(""credit_card"", 100.0);
    }
}",code_smell,long_method,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getPendingPayments() throws SQLException {
        List<String> pending = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT user_id FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            pending.add(rs.getString(""user_id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return pending;
    }

    public boolean processPayment(String userId, double amount) {
        // Missing validation for amount <= 0
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""UPDATE payments SET status='COMPLETED' WHERE user_id='"" + userId + ""'""; // SQL injection risk
            PreparedStatement stmt = conn.prepareStatement(sql);
            int rows = stmt.executeUpdate();
            stmt.close();
            conn.close();
            return rows > 0;
        } catch (SQLException e) {
            // Swallowing exception, no logging
            return false;
        }
    }

    public void batchProcess(List<String> userIds) {
        for (String userId : userIds) {
            // Calls processPayment with a fixed amount, ignoring actual owed amount
            processPayment(userId, 100.0);
        }
    }
}
",code_defect,SQL injection and missing input validation,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input) {
    std::vector<int> numbers;
    std::string temp;

    for (char c : input) {
        if (c >= '0' && c <= '9') {
            temp += c;
        } else {
            if (!temp.empty()) {
                numbers.push_back(std::stoi(temp));
                temp.clear();
            }
        }
    }

    if (!temp.empty()) {
        numbers.push_back(std::stoi(temp));
    }

    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0) {
            std::cout << numbers[i] << "" is even.\n"";
        } else {
            std::cout << numbers[i] << "" is odd.\n"";
        }
    }
}

int main() {
    std::string input;
    std::cout << ""Enter a sequence of numbers separated by non-numeric characters: "";
    std::getline(std::cin, input);
    processUserInput(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class PaymentProcessor { constructor(merchantId) { this.merchantId = merchantId; } processPayment(amount, currency) { let taxRate = 0.08; let paymentAmount = amount * (1 + taxRate); let payment = { amount: paymentAmount, currency: currency }; let paymentGateway = new PaymentGateway(); return paymentGateway.chargeCard(payment); } } class PaymentGateway { chargeCard(payment) { let url = 'https://example.com/payment'; let headers = { 'Content-Type': 'application/json' }; let body = JSON.stringify(payment); return fetch(url, { method: 'POST', headers: headers, body: body }); } }",code_smell,Tight Coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>

class UserManager {
public:
    void addUser(const std::string& name, int age) {
        std::lock_guard<std::mutex> lock(mutex_);
        users_.push_back({name, age});
    }

    // Returns the average age of all users.
    double averageAge() const {
        if (users_.empty()) return 0.0;
        int total = 0;
        for (size_t i = 0; i <= users_.size(); ++i) { // off‑by‑one error
            total += users_[i].age;
        }
        return static_cast<double>(total) / users_.size();
    }

private:
    struct User { std::string name; int age; };
    std::vector<User> users_;
    mutable std::mutex mutex_;
};

int main() {
    UserManager um;
    um.addUser(""Alice"", 30);
    um.addUser(""Bob"", 25);
    std::cout << ""Average age: "" << um.averageAge() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

struct User {
    std::string name;
    int age;
    std::string email;
};

bool validateEmail(const std::string& email) {
    return email.find('@') != std::string::npos;
}

void registerUser(const std::vector<User>& users, const User& newUser) {
    for (const auto& user : users) {
        if (user.email == newUser.email) {
            std::cout << ""Email already exists!"" << std::endl;
            return;
        }
    }

    if (validateEmail(newUser.email) && newUser.age >= 18) {
        std::cout << ""User registered successfully."" << std::endl;
    } else {
        std::cout << ""Invalid registration data."" << std::endl;
    }
}

int main() {
    std::vector<User> existingUsers = { {""Alice"", 25, ""alice@example.com""}, {""Bob"", 17, ""bob@example.com""} };
    User newUser = {""Charlie"", 20, ""charlie@example.com""};

    registerUser(existingUsers, newUser);

    return 0;
}",code_smell,poor_error_handling,,qwen/qwen3-32b
Java,"public class UserDAO { private Connection conn; public UserDAO() { try { Class.forName(""com.mysql.cj.jdbc.Driver""); conn = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""root"", ""password""); } catch (Exception e) { System.out.println(e.getMessage()); } } public User getUser(int id) { try { Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""SELECT * FROM users WHERE id = "" + id); if (rs.next()) { return new User(rs.getInt(""id""), rs.getString(""name""), rs.getString(""email"")); } } catch (Exception e) { System.out.println(e.getMessage()); } return null; } }",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a log file
    async getUserProfile(userId) {
        const user = await this.db.query('SELECT * FROM users WHERE id = ' + userId);
        // Log the request (potentially blocking I/O)
        fs.writeFileSync('/var/log/user_requests.log', `User ${userId} requested at ${new Date().toISOString()}\n`, {flag: 'a'});
        return user;
    }
}

module.exports = UserService;",code_defect,SQL_injection_via_string_concatenation,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  process(order) {
    if (!order || !order.items || order.items.length === 0) {
      return;
    }

    let totalPrice = 0;
    for (let i = 0; i < order.items.length; i++) {
      totalPrice += order.items[i].price * order.items[i].quantity;
    }

    if (order.discount) {
      totalPrice -= order.discount;
    }

    console.log(`Total price after discount: ${totalPrice}`);
    this.applyTax(totalPrice);
  }

  applyTax(price) {
    const taxRate = 0.1;
    const finalPrice = price + (price * taxRate);
    console.log(`Final price with tax: ${finalPrice}`);
  }

  validate(order) {
    if (!order || !order.items) {
      console.log('Order is invalid');
      return false;
    }

    for (let i = 0; i < order.items.length; i++) {
      if (order.items[i].price <= 0) {
        console.log(`Invalid item price at index ${i}`);
        return false;
      }
    }

    return true;
  }
}

// Usage
const order = {
  items: [
    { price: 10, quantity: 2 },
    { price: 5, quantity: 3 }
  ],
  discount: 5
};

const processor = new OrderProcessor();
processor.process(order);",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private String passwordHash; public UserAuthenticator(String passwordHash) { this.passwordHash = passwordHash; } public boolean authenticate(String inputPassword) { String hashedInput = inputPassword; for (int i = 0; i < 10000; i++) { hashedInput = hashedInput + ""salt""; } return hashedInput.equals(passwordHash); } }",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import os
import json

def process_user_data(user_data):
    processed_data = []
    for user in user_data:
        if 'name' in user and 'email' in user:
            user['name'] = user['name'].strip().title()
            user['email'] = user['email'].strip().lower()
            processed_data.append(user)
        else:
            print(f""Skipping incomplete user data: {user}"")
    return processed_data

def save_to_file(data, filename='output.json'):
    with open(filename, 'w') as f:
        json.dump(data, f, indent=4)

if __name__ == '__main__':
    raw_data = [
        {'name': ' alice ', 'email': 'ALICE@example.com', 'age': 30},
        {'name': 'bob', 'email': 'bob@example.com'},
        {'email': 'charlie@example.com'},
        {'name': 'david'}
    ]
    processed_data = process_user_data(raw_data)
    save_to_file(processed_data)",code_smell,incomplete_error_handling,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class UserService {
public:
    vector<string> getUsers() {
        vector<string> users;
        users.push_back(""John"");
        users.push_back(""Alice"");
        users.push_back(""Bob"");
        return users;
    }
};

class UserRepository {
public:
    vector<string> fetchUsersFromDB() {
        // Assume this function fetches users from a database
        vector<string> users;
        users.push_back(""John"");
        users.push_back(""Alice"");
        users.push_back(""Bob"");
        return users;
    }
};

int main() {
    UserService userService;
    UserRepository userRepository;
    vector<string> users = userService.getUsers();
    // The following line is not used anywhere
    vector<string> dbUsers = userRepository.fetchUsersFromDB();
    for (string user : users) {
        cout << user << endl;
    }
    return 0;
}",code_smell,unused_variable,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor{constructor(db){this.db=db;}processOrders(orders){for(let i=0;i<=orders.length;i++){let order=orders[i];if(!order||!order.id)return;this.db.save(order);}}}const db={save(o){console.log('saved',o.id);}};const processor=new OrderProcessor(db);processor.processOrders([{id:1},{id:2},{id:3}]);",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processUserData(users) {
  const results = [];
  for (let i = 0; i < users.length; i++) {
    let user = users[i];
    if (user.isActive) {
      user.role = user.role || 'guest';
      user.metadata = user.metadata || {};
      user.metadata.lastLogin = new Date();
      results.push(user);
    }
  }
  return results;
}

function updateDatabase(records) {
  for (let i = 0; i < records.length; i++) {
    let record = records[i];
    // Simulate database update
    console.log(`Updating record for ${record.name}`);
    if (record.metadata && record.metadata.lastLogin) {
      console.log(`Last login: ${record.metadata.lastLogin}`);
    }
  }
}

function handleUserRequests(data) {
  const processedUsers = processUserData(data);
  updateDatabase(processedUsers);
  console.log('All users processed and database updated.');//debug
}",code_smell,long_function,,qwen/qwen3-32b
Java,"public class UserService { private Map<String, String> users = new HashMap<>(); public synchronized void addUser(String username, String password) { if (users.containsKey(username)) { return; } users.put(username, password); } public synchronized boolean authenticate(String username, String password) { return users.containsKey(username) && users.get(username).equals(password); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    // Returns the nth user (1-based index) or empty string if out of range
    std::string getUserByRank(int rank) const {
        // Bug: off-by-one error, should be rank-1
        if (rank <= 0 || rank > static_cast<int>(users.size())) {
            return """";
        }
        return users[rank];
    }

    // Removes duplicate usernames (case-sensitive)
    void deduplicate() {
        std::sort(users.begin(), users.end());
        auto it = std::unique(users.begin(), users.end());
        users.erase(it, users.end());
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.addUser(""charlie"");
    um.addUser(""bob"");
    um.deduplicate();
    std::cout << ""Second user: "" << um.getUserByRank(2) << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  if (input === null || input === undefined) {
    return 'Invalid input';
  }

  let output = '';
  for (let i = 0; i < input.length; i++) {
    if (input[i] === 'a') {
      output += '1';
    } else if (input[i] === 'b') {
      output += '2';
    } else if (input[i] === 'c') {
      output += '3';
    } else {
      output += input[i];
    }
  }
  return output;
}

function processUsers(users) {
  for (let i = 0; i < users.length; i++) {
    const processed = processUserInput(users[i].name);
    console.log(`Processed name: ${processed}`);
  }
}

const userArray = [{ name: 'abc' }, { name: 'def' }, { name: 'ghi' }];
processUsers(userArray);",code_smell,long_function,,qwen/qwen3-32b
Java,public class UserManager { private List<User> users = new ArrayList<>(); public void addUser(User user) { for (User existingUser : users) { if (existingUser.getId() == user.getId()) { users.remove(existingUser); break; } } users.add(user); } public User getUser(int id) { for (User user : users) { if (user.getId() == id) { return user; } } return null; } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user profile and writes a log file
  async getUserProfile(userId) {
    const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
    if (!user) {
      throw new Error('User not found');
    }
    // Log the access (bug: race condition with async file write)
    fs.appendFile('access.log', `User ${userId} accessed at ${new Date().toISOString()}\n`, (err) => {
      if (err) console.error('Failed to write log');
    });
    return user;
  }

  // Updates user email without proper validation (defect: insecure input handling)
  async updateEmail(userId, newEmail) {
    const result = await this.db.execute(`UPDATE users SET email = '${newEmail}' WHERE id = ${userId}`);
    return result.affectedRows;
  }
}

module.exports = UserService;",code_defect,SQL_injection,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users) {
    this.users = users;
  }

  validateUser(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username && this.users[i].password === password) {
        return true;
      }
    }
    return false;
  }

  authenticateUser(username, password) {
    if (this.validateUser(username, password)) {
      console.log('Authentication successful');
      return true;
    } else {
      console.log('Authentication failed');
      return false;
    }
  }
}

const users = [
  { username: 'admin', password: 'admin123' },
  { username: 'user', password: 'pass123' }
];

const auth = new UserAuth(users);
auth.authenticateUser('admin', 'admin123');",code_smell,poor_error_handling,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>
   
   class Student {
   public:
       std::string name;
       int grade;
   
       Student(std::string n, int g) : name(n), grade(g) {}
   
       bool operator<(const Student& other) const {
           return grade < other.grade;
       }
   };
   
   void sortStudents(std::vector<Student>& students) {
       std::sort(students.begin(), students.end());
   }
   
   int main() {
       std::vector<Student> students = {Student(""John"", 85), Student(""Alice"", 90), Student(""Bob"", 78)};
       sortStudents(students);
       for (const auto& student : students) {
           std::cout << student.name << "" "" << student.grade << std::endl;
       }
       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.account;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection,,openai/gpt-oss-120b
Python,"import os
import requests

API_KEY = '1234567890abcdefg'


def fetch_weather_data(city):
    url = f'http://api.weatherapi.com/v1/current.json?key={API_KEY}&q={city}'
    response = requests.get(url)
    data = response.json()

    if response.status_code == 200:
        return {
            'temperature': data['current']['temp_c'],
            'condition': data['current']['condition']['text'],
            'humidity': data['current']['humidity']
        }
    else:
        return None


def log_weather_info(city, weather_info):
    with open(f'{city}_weather.log', 'w') as log_file:
        log_file.write(f""Weather in {city}:
"")
        log_file.write(f""Temperature: {weather_info['temperature']}°C\n"")
        log_file.write(f""Condition: {weather_info['condition']}\n"")
        log_file.write(f""Humidity: {weather_info['humidity']}%\n"")


def main():
    city = input('Enter city name: ')
    weather_data = fetch_weather_data(city)
    if weather_data:
        log_weather_info(city, weather_data)
        print('Weather data logged successfully.')
    else:
        print('Failed to fetch weather data.')

if __name__ == '__main__':
    main()",code_defect,hardcoded_secret,,qwen/qwen3-32b
Java,"public class UserDAO {
    private Connection connection;
    public UserDAO() {
        try {
            Class.forName(""com.mysql.cj.jdbc.Driver"");
            connection = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""root"", ""password"");
        } catch (Exception e) {}
    }
    public User getUser(int id) {
        try {
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(""SELECT * FROM users WHERE id = "" + id);
            if (resultSet.next()) {
                return new User(resultSet.getInt(""id""), resultSet.getString(""name""), resultSet.getString(""email""));
            }
        } catch (Exception e) {}
        return null;
    }
}",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # NOTE: using eval on file content – insecure
        with open(self.config_path, 'r') as f:
            data = f.read()
            self.settings = eval(data)  # dangerous if file is tampered

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)
        self.output_dir = self.config.get('output_dir', '/tmp')

    def process(self, records):
        # Off‑by‑one error: should process up to len(records)
        for i in range(self.batch_size):
            record = records[i]
            self._handle(record)
        self._finalize()

    def _handle(self, record):
        # Simulate processing
        result = {k: v*2 for k, v in record.items()}
        self._save(result)

    def _save(self, result):
        filename = os.path.join(self.output_dir, f""result_{result['id']}.json"")
        with open(filename, 'w') as f:
            json.dump(result, f)

    def _finalize(self):
        print('Processing complete')

if __name__ == '__main__':
    loader = ConfigLoader('config.cfg')
    processor = DataProcessor(loader)
    sample_records = [{'id': i, 'value': i*10} for i in range(50)]
    processor.process(sample_records)",code_defect,off_by_one_and_insecure_eval,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(String productId, String customerEmail, int quantity) {
        if (productId == null || productId.trim().isEmpty()) {
            productId = ""default_product"";
        }

        if (customerEmail == null || !customerEmail.contains(""@"")) {
            customerEmail = ""noemail@example.com"";
        }

        if (quantity <= 0) {
            quantity = 1;
        }

        String orderSummary = String.format(""Product ID: %s, Customer Email: %s, Quantity: %d"", productId, customerEmail, quantity);
        System.out.println(orderSummary);

        // Additional logic for processing order
        // ...
    }
}",code_smell,magic_string,,qwen/qwen3-32b
JavaScript,"class PaymentGateway { constructor(apiKey) { this.apiKey = apiKey; } processPayment(amount, currency) { const apiEndpoint = 'https://example.com/api/'; const headers = { 'Authorization': 'Bearer ' + this.apiKey }; const paymentData = { amount: amount, currency: currency }; return fetch(apiEndpoint + 'payment', { method: 'POST', headers: headers, body: JSON.stringify(paymentData) }); } }",code_smell,Tight Coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit; // insecure concatenation
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        // Missing close of ResultSet, Statement, and Connection
        return payments;
    }

    public boolean processPayment(String paymentId, double amount) {
        // Simulated processing logic
        if (amount <= 0) {
            throw new IllegalArgumentException(""Amount must be positive"");
        }
        // Bug: using string comparison with == instead of equals
        if (paymentId == null || paymentId == """") {
            return false;
        }
        // Assume payment is processed successfully
        return true;
    }
}
",code_defect,logic_error_and_resource_leak,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                continue;
            }
            double itemPrice = item.getPrice();
            int quantity = item.getQuantity();
            double discount = 0;

            if (quantity >= 100) {
                discount = 0.1;
            } else if (quantity >= 50) {
                discount = 0.05;
            } else if (quantity >= 20) {
                discount = 0.02;
            }

            double total = itemPrice * quantity * (1 - discount);
            item.setTotalPrice(total);
        }

        double orderTotal = order.getItems().stream()
                .mapToDouble(OrderItem::getTotalPrice)
                .sum();
        order.setTotal(orderTotal);
    }
}",code_smell,long_function,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password
        else:
            print('User already exists')

    def authenticate(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def get_all_users(self):
        return list(self.users.keys())

    def update_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
        else:
            print('User does not exist')

# usage
user_db = UserDatabase('users.db')
user_db.add_user('admin', 'password123')
print(user_db.authenticate('admin', 'password123'))  # prints: True
print(user_db.get_all_users())  # prints: ['admin']
user_db.update_password('admin', 'new_password')
print(user_db.authenticate('admin', 'new_password'))  # prints: True",code_smell,Tight Coupling,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db; // expects a database client with async query method
  }

  // Processes an array of orders and returns total revenue
  async processOrders(orders) {
    let total = 0;
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      // fetch product price (assume async DB call)
      const priceRow = await this.db.query('SELECT price FROM products WHERE id = ?', [order.productId]);
      const price = priceRow[0].price;
      // BUG: quantity is a string from external source, implicit conversion may cause concatenation
      total += price * order.quantity;
    }
    // BUG: returns string when total is 0 because of implicit type coercion earlier
    return total;
  }
}

// Example usage (not part of production code)
(async () => {
  const fakeDb = {
    async query(sql, params) {
      // mock returning price 10 for any product
      return [{ price: 10 }];
    }
  };
  const processor = new OrderProcessor(fakeDb);
  const orders = [
    { productId: 1, quantity: '2' }, // quantity as string
    { productId: 2, quantity: 3 }
  ];
  const revenue = await processor.processOrders(orders);
  console.log('Total revenue:', revenue);
})();",code_defect,type_coercion_error,,openai/gpt-oss-120b
