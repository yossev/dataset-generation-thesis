language,code_snippet,smell_or_defect,type_of_defect_or_smell,static_analysis,model
Python,"import csv

def load_user_data(file_path):
    users = []
    with open(file_path, newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            users.append({
                'id': int(row['id']),
                'name': row['name'],
                'email': row['email']
            })
    return users

def find_user_by_id(users, target_id):
    # Off‑by‑one error: should use <= len(users)-1
    for i in range(len(users)):
        if users[i]['id'] == target_id:
            return users[i]
    return None

if __name__ == ""__main__"":
    data = load_user_data('users.csv')
    user = find_user_by_id(data, 5)
    if user:
        print(f""Found user: {user['name']} ({user['email']})"")
    else:
        print(""User not found"")
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::vector<std::string> processUserInputs(const std::vector<std::string>& inputs) {
    std::vector<std::string> results;
    for (const auto& input : inputs) {
        std::string trimmed = input;
        for (int i = 0; i < trimmed.length(); ++i) {
            if (trimmed[i] == ' ') {
                trimmed.erase(i);
                --i;
            }
        }
        if (trimmed.length() > 0) {
            results.push_back(trimmed);
        }
    }
    return results;
}

int main() {
    std::vector<std::string> userInputs = {""  Hello World  "", ""   "", ""Good Morning"", ""C++ is great""};
    std::vector<std::string> processed = processUserInputs(userInputs);
    for (const auto& str : processed) {
        std::cout << str << std::endl;
    }
    return 0;
}",code_smell,inefficient_loop,,qwen/qwen3-32b
JavaScript,function calculateTotalPrice(order) { let total = 0; for (let i = 0; i < order.items.length; i++) { const item = order.items[i]; total += item.price * item.quantity; } return total; },clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const express = require('express');
const router = express.Router();

// Fetch paginated list of users
router.get('/users', async (req, res) => {
  const page = parseInt(req.query.page) || 1;
  const pageSize = 20;
  const offset = (page - 1) * pageSize;
  try {
    const users = await db.query('SELECT * FROM users LIMIT ?, ?', [offset, pageSize]);
    const total = await db.query('SELECT COUNT(*) as cnt FROM users');
    const totalPages = Math.ceil(total[0].cnt / pageSize);
    // Off‑by‑one error: should be page <= totalPages, not <
    if (page < totalPages) {
      res.json({ page, totalPages, data: users });
    } else {
      res.status(400).json({ error: 'Page out of range' });
    }
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import time

CONFIG = {
    'db_host': 'localhost',
    'db_port': 5432,
    'username': 'admin',
    'password': 's3cr3tP@ss',
}

def connect_to_db():
    host = CONFIG['db_host']
    port = CONFIG['db_port']
    user = CONFIG['username']
    password = CONFIG['password']
    
    print(f""Connecting to {host}:{port} as {user}..."")
    time.sleep(1)
    print(""Connection established."")

if __name__ == ""__main__"":
    connect_to_db()",code_defect,hardcoded_credentials,,qwen/qwen3-32b
