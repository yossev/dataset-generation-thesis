language,code_snippet,smell_or_defect,type_of_defect_or_smell,static_analysis,model
Python,"import sqlite3

def get_user_page(db_path, page, page_size=20):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    offset = page * page_size  # Bug: should be (page-1)*page_size for 1-indexed pages
    cursor.execute('SELECT id, name FROM users LIMIT ? OFFSET ?', (page_size, offset))
    rows = cursor.fetchall()
    conn.close()
    return [{'id': r[0], 'name': r[1]} for r in rows]

# Example usage
if __name__ == '__main__':
    users = get_user_page('app.db', 1)
    for u in users:
        print(u)",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json

CONFIG = None

def load_config():
    global CONFIG
    config_path = 'config.json'
    with open(config_path, 'r') as f:
        CONFIG = json.load(f)


def process_data(data):
    if not data:
        return
    processed = []
    for item in data:
        item['id'] = item['id'].strip()
        processed.append(item)
    return processed


def save_to_file(output, filename='output.txt'):
    with open(filename, 'w') as f:
        for line in output:
            f.write(str(line) + '\n')


def main():
    load_config()
    data = [{'id': ' 123 ', 'name': 'Alice'}, {'id': ' 456 ', 'name': 'Bob'}]
    processed_data = process_data(data)
    save_to_file(processed_data)

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   const userService = {
     users: [],
     addUser: function(username, password) {
       this.users.push({ username, password });
     },
     authenticate: function(username, password) {
       for (let i = 0; i < this.users.length; i++) {
         if (this.users[i].username === username) {
           if (this.users[i].password === password) {
             return true;
           }
         }
       }
       return false;
     }
   };

   userService.addUser('admin', 'password123');
   console.log(userService.authenticate('admin', 'password123'));",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    bool removeUser(const std::string& name) {
        for (size_t i = 0; i <= users.size(); ++i) { // off‑by‑one error
            if (users[i] == name) {
                users.erase(users.begin() + i);
                return true;
            }
        }
        return false;
    }

    void printAll() const {
        for (const auto& u : users) {
            std::cout << u << std::endl;
        }
    }
private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.removeUser(""charlie""); // attempts to remove non‑existent user
    um.printAll();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::vector<std::string> processInputs(const std::vector<std::string>& inputs) {
    std::vector<std::string> results;
    for (const auto& input : inputs) {
        std::string processed = input;
        if (input.size() > 100) {
            processed.resize(100);
        }
        
        for (int i = 0; i < 100; ++i) {
            for (int j = 0; j < 100; ++j) {
                processed += 'a';
            }
        }

        results.push_back(processed);
    }
    return results;
}

int main() {
    std::vector<std::string> inputs = { ""example1"", ""example2"" };
    auto output = processInputs(inputs);
    for (const auto& item : output) {
        std::cout << item << std::endl;
    }
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Person {
public:
    string name;
    int age;
    Person(string n, int a) : name(n), age(a) {}
};

class PersonDatabase {
private:
    vector<Person> people;
public:
    void addPerson(Person p) { people.push_back(p); }
    void sortByName() { sort(people.begin(), people.end(), [](Person a, Person b) { return a.name < b.name; }); }
    void printPeople() {
        for (Person p : people) {
            cout << p.name << "" is "" << p.age << "" years old."" << endl;
        }
    }
};

int main() {
    PersonDatabase db;
    db.addPerson(Person(""John"", 30));
    db.addPerson(Person(""Alice"", 25));
    db.sortByName();
    db.printPeople();
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.*;

public class UserService {
    private Connection getConnection() throws SQLException {
        // In real code, use a connection pool
        return DriverManager.getConnection(""jdbc:mysql://localhost:3306/app"", ""user"", ""password"");
    }

    public boolean authenticate(String username, String password) {
        String query = ""SELECT count(*) FROM users WHERE username='"" + username + ""' AND password='"" + password + ""'"";
        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
}
",code_defect,SQL_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processData(const std::vector<std::string>& data) {
    for (const auto& item : data) {
        std::string temp = item;
        for (size_t i = 0; i < temp.length(); ++i) {
            temp[i] = toupper(temp[i]);
        }
        std::cout << temp << std::endl;
    }
}

int main() {
    std::vector<std::string> input = {""example"", ""input"", ""data""};
    processData(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username.equals(""admin"")) {
            return password.equals(DEFAULT_PASSWORD);
        } else {
            // simulate a delay for other users
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            return password.equals(DEFAULT_PASSWORD);
        }
    }
}",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"public class DiscountCalculator {
    public double calculateTotal(double[] prices, double discountRate) {
        double sum = 0.0;
        for (int i = 0; i <= prices.length; i++) { // off‑by‑one error
            sum += prices[i];
        }
        return sum * (1 - discountRate);
    }
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # Unsafe deserialization: using eval on file content
        with open(self.config_path, 'r') as f:
            data = f.read()
            self.settings = eval(data)  # code_defect: unsafe eval

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)

    def process(self, items):
        results = []
        for i in range(0, len(items), self.batch_size):
            batch = items[i:i + self.batch_size]
            results.extend(self._process_batch(batch))
        return results

    def _process_batch(self, batch):
        # Simulate processing
        return [self._transform(item) for item in batch]

    def _transform(self, item):
        # Potential off-by-one error: using len-1 instead of proper index
        if isinstance(item, dict) and 'value' in item:
            return item['value'] * 2
        return None

# Usage example (would be in separate module)
config = ConfigLoader(os.getenv('APP_CONFIG', 'config.txt'))
processor = DataProcessor(config)
input_data = [{'value': i} for i in range(250)]
output = processor.process(input_data)
print(json.dumps(output))",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    void process(const std::vector<int>& input) {
        for (size_t i = 0; i < input.size(); ++i) {
            if (input[i] % 2 == 0) {
                std::cout << input[i] << "" is even\n"";
            }
            else {
                std::cout << input[i] << "" is odd\n"";
            }
        }
    }
};

int main() {
    DataProcessor dp;
    std::vector<int> data = { 1, 2, 3, 4, 5 };
    dp.process(data);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger LOGGER = LoggerFactory.getLogger(UserService.class); public void saveUser(String username, String password, String email) { try { User user = new User(); user.setUsername(username); user.setPassword(password); user.setEmail(email); if (username.length() > 10) { LOGGER.info(""Username is longer than 10 characters""); } else { LOGGER.info(""Username is 10 characters or less""); } UserRepository userRepository = new UserRepository(); userRepository.save(user); } catch (Exception e) { LOGGER.error(""Error saving user"", e); } } }",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <fstream>
#include <iostream>

class ConfigLoader {
public:
    ConfigLoader(const std::string& path) : filePath(path) {}
    std::vector<std::string> loadLines() {
        std::ifstream file(filePath);
        std::vector<std::string> lines;
        std::string line;
        while (std::getline(file, line)) {
            lines.push_back(line);
        }
        return lines;
    }
private:
    std::string filePath;
};

class DataProcessor {
public:
    void process(const std::vector<std::string>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            if (data[i].empty()) continue;
            // pretend processing
            std::cout << ""Processing: "" << data[i] << std::endl;
        }
    }
};

int main() {
    ConfigLoader loader(""config.txt"");
    auto lines = loader.loadLines();
    DataProcessor processor;
    processor.process(lines);
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, logger) {
    this.users = users;
    this.logger = logger;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user && user.isActive) {
        this.logger.log(`Processing user: ${user.id}`);
        this._updateUserStatus(user);
        this._sendWelcomeEmail(user);
        this._logUserMetrics(user);
      }
    });
  }

  _updateUserStatus(user) {
    user.status = 'processed';
  }

  _sendWelcomeEmail(user) {
    // Simulate email sending
    console.log(`Email sent to ${user.email}`);
  }

  _logUserMetrics(user) {
    // Simulate metrics logging
    console.log(`User ${user.id} metrics logged`);
  }
}

// Unused method
doSomethingElse = () => {
  console.log('This is never used');
};",code_smell,dead_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

private:
    std::string name;
    int salary;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }

    Employee getHighestPaidEmployee() {
        if (employees.empty()) {
            return Employee("""", 0);
        }
        return *std::max_element(employees.begin(), employees.end(),
            [](const Employee& a, const Employee& b) { return a.getSalary() < b.getSalary(); });
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 50000));
    manager.addEmployee(Employee(""Alice"", 60000));
    Employee highestPaid = manager.getHighestPaidEmployee();
    std::cout << ""Highest paid employee: "" << highestPaid.getName() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public User findUserById(int userId) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
        return null;
    }
}

class User {
    private int id;
    private String username;
    private String email;
    public void setId(int id) { this.id = id; }
    public void setUsername(String username) { this.username = username; }
    public void setEmail(String email) { this.email = email; }
    // getters omitted for brevity
}
",code_defect,SQL injection due to string concatenation and hardcoded credentials,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.userRoles = ['admin', 'editor', 'viewer'];
  }

  authenticateUser(username, password, role) {
    if (username === 'admin' && password === 'securepassword123' && this.userRoles.includes(role)) {
      return true;
    } else {
      return false;
    }
  }

  checkAccessLevel(userRole, requiredRole) {
    const rolePriority = {
      admin: 3,
      editor: 2,
      viewer: 1
    };

    return rolePriority[userRole] >= rolePriority[requiredRole];
  }

  grantAccess(user, requiredRole) {
    if (this.authenticateUser(user.username, user.password, user.role)) {
      if (this.checkAccessLevel(user.role, requiredRole)) {
        console.log('Access granted');
        return true;
      } else {
        console.log('Access denied due to insufficient role');
        return false;
      }
    } else {
      console.log('Authentication failed');
      return false;
    }
  }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <string>
using namespace std;

class User {
public:
    User(string name, string password) {
        this->name = name;
        this->password = password;
    }

    string getName() { return name; }
    string getPassword() { return password; }

private:
    string name;
    string password;
};

class UserService {
public:
    UserService() {
        users.push_back(User(""admin"", ""password123""));
    }

    void addUser(string name, string password) {
        users.push_back(User(name, password));
    }

    User* getUserByName(string name) {
        for (int i = 0; i < users.size(); i++) {
            if (users[i].getName() == name) {
                return &users[i];
            }
        }
        return nullptr;
    }

private:
    vector<User> users;
};

int main() {
    UserService userService;
    userService.addUser(""user1"", ""pass123"");
    User* user = userService.getUserByName(""admin"");
    if (user != nullptr) {
        cout << user->getName() << endl;
        cout << user->getPassword() << endl;
    }
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class UserManager {
public:
    void addUser(const std::string& name, int age) {
        users_.push_back({name, age});
    }

    // Returns the average age of all users
    double averageAge() const {
        if (users_.empty()) return 0.0;
        int total = 0;
        for (size_t i = 0; i <= users_.size(); ++i) { // off‑by‑one error
            total += users_[i].age;
        }
        return static_cast<double>(total) / users_.size();
    }

private:
    struct User { std::string name; int age; };
    std::vector<User> users_;
};

int main() {
    UserManager um;
    um.addUser(""Alice"", 30);
    um.addUser(""Bob"", 25);
    std::cout << ""Average age: "" << um.averageAge() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUserData(String username, String role, String... permissions) {
        if (username == null || role == null || permissions.length == 0) {
            return;
        }

        System.out.println(""Processing user: "" + username);
        System.out.println(""Role: "" + role);

        for (String permission : permissions) {
            if (permission.contains(""admin"")) {
                System.out.println(""Granting admin access... "");
                // Simulate some processing
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } else {
                System.out.println(""Granting basic access for: "" + permission);
            }
        }

        // Legacy code, not used anymore
        // assignDefaultPermissions(username);
    }

    // Unused method
    private void assignDefaultPermissions(String username) {
        System.out.println(""Assigning default permissions to "" + username);
    }
}",code_smell,dead_code,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password
        else:
            print('User already exists')

    def authenticate(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def get_all_users(self):
        return list(self.users.keys())

    def save_to_file(self):
        with open(self.db_file, 'w') as f:
            for username, password in self.users.items():
                f.write(f'{username}:{password}\n')

    def load_from_file(self):
        try:
            with open(self.db_file, 'r') as f:
                for line in f.readlines():
                    username, password = line.strip().split(':')
                    self.users[username] = password
        except FileNotFoundError:
            pass

    def __del__(self):
        self.save_to_file()
",code_smell,Tight Coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Returns user profile data
  async getUserProfile(userId) {
    // Missing validation: userId could be undefined or malicious
    const query = `SELECT * FROM users WHERE id = ${userId}`; // SQL injection risk
    const result = await this.db.query(query);
    if (!result || result.length === 0) {
      return null;
    }
    const user = result[0];
    // Improper handling of async file read, forgetting await
    const avatarPath = `/avatars/${user.avatar}`;
    const avatarData = fs.readFileSync(avatarPath, 'utf8'); // blocks event loop
    user.avatarData = avatarData;
    return user;
  }
}

module.exports = UserService;",code_defect,SQL_injection_and_blocking_io,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

void processData(vector<string> data) {
    for (size_t i = 0; i < data.size(); ++i) {
        string processed = data[i];
        for (size_t j = 0; j < processed.length(); ++j) {
            processed[j] = toupper(processed[j]);
        }
        cout << processed << endl;
    }
}

int main() {
    vector<string> input = {""example"", ""data"", ""to"", ""process""};
    processData(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class UserProcessor { constructor(users) { this.users = users; } processUsers() { for (let i = 0; i < this.users.length; i++) { const user = this.users[i]; if (user.isActive) { console.log(user.name); } } } } const users = [{ name: 'John', isActive: true }, { name: 'Alice', isActive: false }]; const processor = new UserProcessor(users); processor.processUsers();",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class UserManager {
public:
    void addUser(const std::string& name, int age) {
        users_.push_back({name, age});
    }

    // Returns the average age of all users
    double averageAge() const {
        if (users_.empty()) return 0.0;
        int total = 0;
        for (size_t i = 0; i <= users_.size(); ++i) { // BUG: off‑by‑one, may read past end
            total += users_[i].age;
        }
        return static_cast<double>(total) / users_.size();
    }

    void printAll() const {
        for (const auto& u : users_) {
            std::cout << u.name << "": "" << u.age << ""\n"";
        }
    }

private:
    struct User {
        std::string name;
        int age;
    };
    std::vector<User> users_;
};

int main() {
    UserManager mgr;
    mgr.addUser(""Alice"", 30);
    mgr.addUser(""Bob"", 25);
    mgr.addUser(""Charlie"", 35);
    std::cout << ""Average age: "" << mgr.averageAge() << std::endl;
    mgr.printAll();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (i != j && data[i] == data[j]) {
                std::cout << ""Duplicate found: "" << data[i] << std::endl;
            }
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 2, 4, 5, 1};
    processData(input);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUser(id) { let user = await this.userDao.getUser(id); if (user) { let roles = await this.userDao.getUserRoles(id); user.roles = roles; } return user; } async getUsers() { return await this.userDao.getUsers(); } },code_smell,Tight Coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<User> findUsersByRole(String role) {
        List<User> users = new ArrayList<>();
        String sql = ""SELECT id, username, email FROM users WHERE role = '"" + role + ""'""; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                User u = new User();
                u.setId(rs.getInt(""id""));
                u.setUsername(rs.getString(""username""));
                u.setEmail(rs.getString(""email""));
                users.add(u);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection vulnerability and hardcoded credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

struct User {
    std::string name;
    int age;
    std::string email;
};

bool validateEmail(const std::string& email) {
    if (email.find('@') != std::string::npos) {
        return true;
    }
    return false;
}

void processUser(const User& user) {
    if (user.age < 0) {
        std::cout << ""Invalid age for user "" << user.name << std::endl;
        return;
    }

    if (!validateEmail(user.email)) {
        std::cout << ""Invalid email for user "" << user.name << std::endl;
        return;
    }

    std::cout << ""Valid user: "" << user.name << std::endl;
}

int main() {
    std::vector<User> users = {
        {""Alice"", 30, ""alice@example.com""},
        {""Bob"", -5, ""bob@example.com""},
        {""Charlie"", 25, ""charlieexample.com""}
    };

    for (const auto& user : users) {
        processUser(user);
    }

    return 0;
}",code_defect,incorrect conditional logic,,qwen/qwen3-32b
Java,"public class UserValidator {
    public boolean validateUser(String username, String password) {
        if (username.length() > 5 && password.length() > 8) {
            return true;
        }
        return false;
    }
}",code_smell,magic_numbers,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Reads JSON config file synchronously each call
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) {
      this.load();
    }
    return this.cache[key];
  }
}

// Usage in a web server
const http = require('http');
const config = new ConfigLoader('./config.json');

http.createServer((req, res) => {
  // Vulnerable: directly uses query param in file path
  const file = req.url.split('?')[1];
  const content = fs.readFileSync(`./public/${file}`);
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end(content);
}).listen(8080);",code_defect,path_traversal_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

std::string formatData(std::string input, int id, bool flag) {
    std::string result = input;
    if (id > 0) {
        result += ""_"" + std::to_string(id);
    }
    if (flag) {
        result += ""_FLAG"";
    }
    return result;
}

int main() {
    std::string user_input = ""DATA123"";
    int user_id = 42;
    bool is_active = true;

    std::string formatted = formatData(user_input, user_id, is_active);
    std::cout << formatted << std::endl;
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private String apiKey; public UserAuthenticator(String apiKey) { this.apiKey = apiKey; } public boolean authenticateUser(String username, String password) { if (username.equals(""admin"") && password.equals(""password123"")) { return true; } else { return false; } } public void saveApiKeyToFile() { try { java.io.FileWriter writer = new java.io.FileWriter(""api_key.txt""); writer.write(apiKey); writer.close(); } catch (java.io.IOException e) { System.out.println(""Error saving API key""); } } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
  }

  // Process a batch of orders and update inventory
  async processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      const product = await this.db.getProduct(order.productId);
      // BUG: Missing check for sufficient stock leads to negative inventory
      product.stock -= order.quantity;
      await this.db.updateProduct(product);
      await this.db.saveOrder(order);
    }
    // Return success without verifying all updates succeeded
    return true;
  }
}

module.exports = OrderProcessor;",code_defect,logic_error,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

def process_user_data(data):
    user_info = {}
    for key, value in data.items():
        if key == 'name':
            user_info['username'] = value
        elif key == 'email':
            user_info['email'] = value
        elif key == 'created_at':
            user_info['registration_date'] = datetime.strptime(value, '%Y-%m-%d')
        elif key == 'is_active':
            user_info['status'] = 'active' if value else 'inactive'
    return user_info

def save_user_info(user_info, filename='user_data.json'):
    try:
        if os.path.exists(filename):
            with open(filename, 'r') as f:
                existing_users = json.load(f)
        else:
            existing_users = []n
        existing_users.append(user_info)

        with open(filename, 'w') as f:
            json.dump(existing_users, f, indent=2)
    except Exception as e:
        print(f""Error saving user info: {e}"")


def main():
    raw_data = {
        'name': 'John Doe',
        'email': 'johndoe@example.com',
        'created_at': '2024-01-15',
        'is_active': True
    }

    processed = process_user_data(raw_data)
    save_user_info(processed)

if __name__ == '__main__':
    main()",code_smell,poor_error_handling,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None
        self._load()

    def _load(self):
        # NOTE: using eval on file content is unsafe
        with open(self.config_path, 'r') as f:
            data = f.read()
        self._config = eval(data)  # code defect: unsafe deserialization

    def get(self, key, default=None):
        return self._config.get(key, default)

class UserService:
    def __init__(self, db):
        self.db = db

    def create_user(self, username, password):
        # Simple password storage without hashing
        query = f""INSERT INTO users (username, password) VALUES ('{username}', '{password}')""
        self.db.execute(query)
        logger.info(""User %s created"", username)

    def get_user(self, user_id):
        rows = self.db.query(f""SELECT * FROM users WHERE id = {user_id}"")
        if rows:
            return rows[0]
        return None

class Database:
    def __init__(self, conn_str):
        self.conn_str = conn_str
        self._connect()

    def _connect(self):
        # Placeholder for actual DB connection
        self.connected = True

    def execute(self, sql):
        if not self.connected:
            raise RuntimeError(""Not connected"")
        # Simulate execution
        logger.debug(""Executing SQL: %s"", sql)

    def query(self, sql):
        if not self.connected:
            raise RuntimeError(""Not connected"")
        logger.debug(""Querying SQL: %s"", sql)
        return []

if __name__ == ""__main__"":
    cfg = ConfigLoader(os.getenv('APP_CONFIG', 'config.cfg'))
    db = Database(cfg.get('db_connection'))
    service = UserService(db)
    service.create_user('alice', 'password123')
    user = service.get_user(1)
    print(user)",code_defect,unsafe_deserialization_and_sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <cmath>

// Function to calculate the average of a vector of numbers
double calculateAverage(const std::vector<double>& data) {
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += data[i];
    }
    return sum / data.size();
}

// Function to calculate standard deviation
// This function is poorly structured and inefficient
// It recalculates the average twice
// It also has a nested loop for variance calculation that can be optimized
void calculateStandardDeviation(const std::vector<double>& data) {
    double average = calculateAverage(data);
    double variance = 0.0;

    // First loop to calculate average again
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += data[i];
    }
    double avg = sum / data.size();

    // Second loop to calculate variance
    for (size_t i = 0; i < data.size(); ++i) {
        variance += (data[i] - avg) * (data[i] - avg);
    }

    double stdDev = sqrt(variance / data.size());
    std::cout << ""Standard Deviation: "" << stdDev << std::endl;
}

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    calculateStandardDeviation(data);
    return 0;
}",code_smell,inefficient_code,,qwen/qwen3-32b
JavaScript,"
      class UserValidator {
         validateUser(user) {
            if (user.username && user.password) {
               if (user.username.length > 5 && user.password.length > 8) {
                  return true;
               } else {
                  return false;
               }
            } else {
               return false;
            }
         }
      }

      function authenticateUser(username, password) {
         const validator = new UserValidator();
         const user = { username, password };
         if (validator.validateUser(user)) {
            // simulate authentication delay
            const startTime = new Date().getTime();
            while (new Date().getTime() < startTime + 1000) {}
            return true;
         } else {
            return false;
         }
      }

      const username = 'testuser';
      const password = 'testpassword123';
      const isValid = authenticateUser(username, password);
      console.log(isValid);
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user info and writes a log file for each call
    getUserData(userId) {
        // Bad practice: synchronous file write inside request handling
        const user = this.db.query(`SELECT * FROM users WHERE id = ${userId}`);
        if (!user) {
            throw new Error('User not found');
        }
        const logEntry = `${new Date().toISOString()} - Fetched user ${userId}\n`;
        fs.appendFileSync('user_fetch.log', logEntry);
        return user;
    }

    // Updates user email without validation and builds SQL via string concatenation
    updateUserEmail(userId, newEmail) {
        const sql = ""UPDATE users SET email='"" + newEmail + ""' WHERE id="" + userId;
        this.db.execute(sql);
    }
}

// Usage example (tight coupling with concrete DB implementation)
const db = {
    query: (q) => {
        // mock result
        return { id: 1, name: 'Alice', email: 'alice@example.com' };
    },
    execute: (sql) => {
        console.log('Executing SQL:', sql);
    }
};

const service = new UserService(db);
service.getUserData(1);
service.updateUserEmail(1, 'new.email@example.com');",code_smell,tight_coupling_and_sql_injection_risk,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, logger) {
    this.users = users;
    this.logger = logger;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user.status === 'active') {
        this.logger.log(`User ${user.id} is active`);
        this.sendWelcomeEmail(user);
      } else {
        this.logger.log(`User ${user.id} is not active`);
      }
    });
  }

  sendWelcomeEmail(user) {
    this.logger.log(`Sending email to user ${user.email}`);
    // Simulate email sending logic
  }

  validateUser(user) {
    return user && user.email && user.status;
  }

  getUserDetails(user) {
    return {
      name: user.name,
      email: user.email,
      status: user.status
    };
  }
}

module.exports = UserProcessor;",code_smell,god_class,,qwen/qwen3-32b
Python,"class PaymentProcessor:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def process_payment(self, payment_amount, user_id):
        query = ""SELECT balance FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_balance = cursor.fetchone()[0]
        if user_balance >= payment_amount:
            new_balance = user_balance - payment_amount
            query = ""UPDATE users SET balance = "" + str(new_balance) + "" WHERE id = "" + str(user_id)
            cursor.execute(query)
            self.db_connection.commit()
            return True
        else:
            return False",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path

    def _connect(self):
        return sqlite3.connect(self.db_path)

    def get_users_page(self, page: int, page_size: int = 20):
        """"""Return a list of users for the given page number.
        Page numbers start at 1.
        """"""
        offset = (page - 1) * page_size
        # BUG: off‑by‑one error – should be LIMIT page_size OFFSET offset
        query = f""SELECT id, name, email FROM users LIMIT {offset}, {page_size}""
        conn = self._connect()
        try:
            cursor = conn.cursor()
            cursor.execute(query)
            rows = cursor.fetchall()
            return [{""id"": r[0], ""name"": r[1], ""email"": r[2]} for r in rows]
        finally:
            conn.close()

    def add_user(self, name: str, email: str):
        conn = self._connect()
        try:
            cursor = conn.cursor()
            cursor.execute(
                ""INSERT INTO users (name, email) VALUES (?, ?)"",
                (name, email)
            )
            conn.commit()
        finally:
            conn.close()
",code_defect,off_by_one_error_in_sql_limit_offset,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    void process(const std::string& input, std::vector<int>& output) {
        if (input.empty()) {
            return;
        }

        for (size_t i = 0; i < input.length(); ++i) {
            if (input[i] >= '0' && input[i] <= '9') {
                int num = input[i] - '0';
                output.push_back(num);
            }
        }
    }
};

int main() {
    DataProcessor dp;
    std::string input = ""a1b2c3d"";
    std::vector<int> result;

    dp.process(input, result);

    for (int val : result) {
        std::cout << val << "" "";
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Employee {
public:
    string name;
    int salary;
    Employee(string n, int s) : name(n), salary(s) {}
};

bool compareEmployees(Employee e1, Employee e2) {
    return e1.salary < e2.salary;
}

void sortEmployees(vector<Employee>& employees) {
    sort(employees.begin(), employees.end(), compareEmployees);
}

int main() {
    vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
    sortEmployees(employees);
    for (Employee e : employees) {
        cout << e.name << "" "" << e.salary << endl;
    }
    return 0;
}",code_smell,long_parameter_list,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
    constructor(db) {
        this.db = db;
    }

    // Process a batch of orders, returns number of successful inserts
    async processOrders(orders) {
        let successCount = 0;
        for (let i = 0; i < orders.length; i++) {
            const order = orders[i];
            // Missing validation: assume order.amount is a number
            const total = order.amount * order.price; // defect: price may be undefined, resulting in NaN
            try {
                await this.db.insert('orders', {
                    userId: order.userId,
                    amount: order.amount,
                    price: order.price,
                    total: total,
                    createdAt: new Date()
                });
                successCount++;
            } catch (e) {
                console.error('Failed to insert order', e);
            }
        }
        return successCount;
    }
}

module.exports = OrderProcessor;",code_defect,incorrect_calculation_due_to_missing_validation,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private static final int MAX_RETRIES = 3;

    public void processUser(User user) {
        int retryCount = 0;
        boolean success = false;
        while (retryCount <= MAX_RETRIES) {
            try {
                validateUser(user);
                persistUser(user);
                sendEmailNotification(user.getEmail());
                success = true;
                break;
            } catch (Exception e) {
                retryCount++;
                System.out.println(""Error processing user. Retrying... "");
            }
        }
        if (!success) {
            System.out.println(""Failed to process user after "" + MAX_RETRIES + "" attempts."");
        }
    }

    private void validateUser(User user) {
        if (user.getName() == null || user.getName().isEmpty()) {
            throw new IllegalArgumentException(""Name is required"");
        }
        if (user.getEmail() == null || !user.getEmail().contains(""@"")) {
            throw new IllegalArgumentException(""Invalid email format"");
        }
    }

    private void persistUser(User user) {
        // Simulated database call
        if (Math.random() < 0.3) {
            throw new RuntimeException(""Database error"");
        }
    }

    private void sendEmailNotification(String email) {
        // Simulated email sending
        if (Math.random() < 0.2) {
            throw new RuntimeException(""Email could not be sent"");
        }
    }
}",code_smell,error_handling_and_logging,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private String passwordHash; public boolean authenticateUser(String username, String password) { String storedHash = getPasswordHashFromDatabase(username); if (storedHash != null && storedHash.equals(password)) { return true; } return false; } private String getPasswordHashFromDatabase(String username) { // simulate database query return ""hashed_password""; } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None

    def load(self):
        # Missing error handling for file not found or invalid JSON
        with open(self.config_path, 'r') as f:
            self._config = json.load(f)
        return self._config

    def get(self, key, default=None):
        return self._config.get(key, default)

class UserService:
    def __init__(self, db_connection_string):
        self.db_connection_string = db_connection_string
        self._connect()

    def _connect(self):
        # Simulated DB connection (placeholder)
        self.conn = self.db_connection_string

    def get_user(self, user_id):
        # Vulnerable to SQL injection because user_id is concatenated directly
        query = f""SELECT * FROM users WHERE id = {user_id}""
        # Placeholder for actual DB execution
        return self._execute_query(query)

    def _execute_query(self, query):
        # Mocked response
        return {""id"": 1, ""name"": ""Alice""}

def main():
    cfg = ConfigLoader('config.json')
    config = cfg.load()
    service = UserService(config.get('db_conn'))
    # Off-by-one error: loop runs one extra iteration
    for i in range(1, config.get('max_users', 10) + 1):
        user = service.get_user(i)
        print(f""User {i}: {user['name']}"")

if __name__ == '__main__':
    main()",code_defect,sql_injection_and_off_by_one,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, logger) {
    this.users = users;
    this.logger = logger;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user.status === 'active') {
        this.logger.log(`User ${user.id} is active`);
        this.sendEmail(user);
      } else {
        this.logger.log(`User ${user.id} is inactive`);
      }
    });
  }

  sendEmail(user) {
    // Simulate email sending logic
    this.logger.log(`Email sent to ${user.email}`);
  }

  validateUser(user) {
    if (!user.email) {
      this.logger.warn(`User ${user.id} has no email`);
      return false;
    }
    return true;
  }

  sendWelcomeEmail(user) {
    if (this.validateUser(user)) {
      this.sendEmail(user);
    }
  }
}

// Usage example
const users = [
  { id: 1, email: 'user1@example.com', status: 'active' },
  { id: 2, email: '', status: 'inactive' }
];

const logger = {
  log: (msg) => console.log(`[LOG] ${msg}`),
  warn: (msg) => console.warn(`[WARN] ${msg}`)
};

const processor = new UserProcessor(users, logger);
processor.processUsers();",code_smell,god_class,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email

    def save_to_database(self):
        import sqlite3
        conn = sqlite3.connect('user_database.db')
        c = conn.cursor()
        c.execute(""INSERT INTO users (username, password, email) VALUES (?, ?, ?)"", (self.username, self.password, self.email))
        conn.commit()
        conn.close()

    def verify_password(self, input_password):
        return self.password == input_password",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path='users.db'):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY,
                            username TEXT,
                            password TEXT)''')
        self.conn.commit()

    def add_user(self, username, password):
        # NOTE: password stored in plain text (security issue)
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, password))
        self.conn.commit()

    def authenticate(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute('SELECT password FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            stored_pw = row[0]
            # Bug: using 'is' instead of '==' for string comparison
            if stored_pw is password:
                return True
        return False

    def export_user_data(self, export_path):
        cursor = self.conn.cursor()
        cursor.execute('SELECT username, password FROM users')
        users = cursor.fetchall()
        # Insecure: writing raw passwords to JSON file
        with open(export_path, 'w') as f:
            json.dump([{'username': u, 'password': p} for u, p in users], f)

# Example usage
if __name__ == '__main__':
    manager = UserManager()
    manager.add_user('alice', 'secret123')
    print('Auth success:', manager.authenticate('alice', 'secret123'))
    manager.export_user_data('users_export.json')
",code_defect,incorrect_string_comparison_using_is,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    if (data[i].status === 'active') {
      let processedItem = {};
      processedItem.id = data[i].id;
      processedItem.name = data[i].name.toUpperCase();
      processedItem.value = data[i].value * 2;
      result.push(processedItem);
    }
  }
  return result;
}

function main() {
  const rawInput = [{ id: 1, name: 'alpha', value: 10, status: 'active' },
                   { id: 2, name: 'beta', value: 20, status: 'inactive' },
                   { id: 3, name: 'gamma', value: 30, status: 'active' }];
  const output = processData(rawInput);
  console.log(output);
}

main();",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class OrderProcessor:
    def __init__(self):
        self.orders = []

    def add_order(self, order_id, customer_id, total):
        order = {'id': order_id, 'customer_id': customer_id, 'total': total}
        self.orders.append(order)

    def get_total_orders_value(self):
        total = 0
        for order in self.orders:
            total += order['total']
        return total

    def get_average_order_value(self):
        if len(self.orders) == 0:
            return 0
        return self.get_total_orders_value() / len(self.orders)

processor = OrderProcessor()
processor.add_order(1, 1, 100)
processor.add_order(2, 1, 200)
processor.add_order(3, 2, 50)
print(processor.get_total_orders_value())
print(processor.get_average_order_value())
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <fstream>
#include <iostream>

class LogProcessor {
public:
    LogProcessor(const std::string& filePath) : path(filePath) {}
    void process() {
        std::ifstream in(path);
        if (!in) {
            std::cerr << ""Failed to open log file"" << std::endl;
            return;
        }
        std::string line;
        while (std::getline(in, line)) {
            if (line.empty()) continue;
            // Expect format: <timestamp> <level> <message>
            size_t firstSpace = line.find(' ');
            size_t secondSpace = line.find(' ', firstSpace + 1);
            if (firstSpace == std::string::npos || secondSpace == std::string::npos) continue;
            std::string level = line.substr(firstSpace + 1, secondSpace - firstSpace - 1);
            if (level == ""ERROR"") {
                errors.push_back(line);
            }
        }
        // BUG: off-by-one error, should be errors.size()
        for (size_t i = 0; i <= errors.size(); ++i) {
            std::cout << errors[i] << std::endl;
        }
    }
private:
    std::string path;
    std::vector<std::string> errors;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.process();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data) {
    int i = 0;
    while (i < data.size()) {
        if (data[i] % 2 == 0) {
            std::cout << data[i] << "" is even"" << std::endl;
        } else {
            std::cout << data[i] << "" is odd"" << std::endl;
        }
        i++;
    }
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6};
    processData(numbers);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, username, password):
        if user_id not in self.users:
            self.users[user_id] = {'username': username, 'password': password}
            return True
        return False

    def authenticate(self, user_id, password):
        if user_id in self.users and self.users[user_id]['password'] == password:
            return True
        return False

    def get_all_users(self):
        return list(self.users.keys())

    def remove_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
            return True
        return False

def main():
    manager = UserManager()
    manager.add_user('1', 'admin', 'password123')
    print(manager.authenticate('1', 'password123'))  # prints: True
    print(manager.get_all_users())  # prints: ['1']
    manager.remove_user('1')
    print(manager.get_all_users())  # prints: []

if __name__ == '__main__':
    main()
",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <algorithm>
#include <iostream>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    // Returns true if user exists
    bool hasUser(const std::string& name) const {
        return std::find(users.begin(), users.end(), name) != users.end();
    }

    // Returns the user at the given index (0‑based)
    std::string getUserAt(int index) const {
        // BUG: off‑by‑one error – should check index < users.size()
        if (index <= 0 || index > static_cast<int>(users.size())) {
            throw std::out_of_range(""Index out of range"");
        }
        return users[index];
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.addUser(""carol"");

    try {
        std::cout << um.getUserAt(0) << std::endl; // Unexpected exception due to bug
    } catch (const std::exception& e) {
        std::cerr << ""Error: "" << e.what() << std::endl;
    }
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  const data = input.split(',');
  let result = [];

  for (let i = 0; i < data.length; i++) {
    let item = data[i].trim();
    if (item.length > 0) {
      result.push(item);
    }
  }

  result = result.sort();

  const unique = [];
  for (let i = 0; i < result.length; i++) {
    if (unique.indexOf(result[i]) === -1) {
      unique.push(result[i]);
    }
  }

  return unique;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Java,"public class UserAccountManager { private Map<String, String> userAccounts = new HashMap<>(); public void addUser(String username, String password) { if (userAccounts.containsKey(username)) { System.out.println(""User already exists""); } else { userAccounts.put(username, password); } } public boolean authenticateUser(String username, String password) { return userAccounts.containsKey(username) && userAccounts.get(username).equals(password); } public void changePassword(String username, String newPassword) { if (userAccounts.containsKey(username)) { userAccounts.put(username, newPassword); } } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() = default;
    void addTransaction(const std::string& user, double amount) {
        std::lock_guard<std::mutex> lock(mtx_);
        balances_[user] += amount; // BUG: does not check for overflow or negative balance
    }
    double getBalance(const std::string& user) {
        std::lock_guard<std::mutex> lock(mtx_);
        return balances_[user];
    }
    void transfer(const std::string& from, const std::string& to, double amount) {
        // Incorrect order of locking leads to potential deadlock
        std::lock_guard<std::mutex> lockFrom(mtx_);
        std::lock_guard<std::mutex> lockTo(mtx_);
        if (balances_[from] >= amount) {
            balances_[from] -= amount;
            balances_[to] += amount;
        }
    }
private:
    std::mutex mtx_;
    std::unordered_map<std::string, double> balances_;
};

int main(){
    TransactionProcessor tp;
    tp.addTransaction(""alice"", 1000);
    tp.addTransaction(""bob"", 500);
    tp.transfer(""alice"", ""bob"", 200);
    std::cout << ""Alice balance: "" << tp.getBalance(""alice"") << std::endl;
    std::cout << ""Bob balance: "" << tp.getBalance(""bob"") << std::endl;
    return 0;
}",code_defect,deadlock_and_missing_validation,,openai/gpt-oss-120b
Python,"import os
import json

def process_user_data(user_id, data):
    user_data = json.loads(data)
    if 'name' not in user_data:
        user_data['name'] = 'Unknown'
    if 'age' not in user_data:
        user_data['age'] = 0
    if 'email' not in user_data:
        user_data['email'] = ''

    processed_data = {
        'user_id': user_id,
        'name': user_data['name'],
        'age': user_data['age'],
        'email': user_data['email'],
        'status': 'active'
    }

    return processed_data


def save_user_to_file(user_data):
    filename = f'{user_data['user_id']}.json'
    with open(filename, 'w') as f:
        json.dump(user_data, f)


def main():
    user_data_json = '{""name"": ""Alice"", ""age"": 30}'
    user_id = 123

    user_data = process_user_data(user_id, user_data_json)
    save_user_to_file(user_data)

if __name__ == '__main__':
    main()",code_smell,incomplete_data_handling,,qwen/qwen3-32b
C++,"#include <iostream>
#include <string>
#include <vector>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserService {
public:
    vector<User> users;
    void addUser(User u) { users.push_back(u); }
    User* getUserByName(string name) {
        for (User& u : users) {
            if (u.name == name) {
                return &u;
            }
        }
        return nullptr;
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User* user = service.getUserByName(""John"");
    if (user != nullptr) {
        cout << user->name << endl;
    }
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // JSON.parse can throw, but we ignore it
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function getUserSetting(userId) {
  const loader = new ConfigLoader('/etc/app/settings.json');
  const config = loader.load();
  // Assume settings are stored as {users: [{id:..., setting:...}, ...]}
  for (let i = 0; i <= config.users.length; i++) { // off‑by‑one error
    if (config.users[i].id === userId) {
      return config.users[i].setting;
    }
  }
  return null;
}

module.exports = { getUserSetting };",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import sqlite3

def get_user_data(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = f""SELECT * FROM users WHERE id = {user_id}""
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result

# Old version of function, kept for reference
def get_user_data_old(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = f""SELECT * FROM users WHERE id = {user_id}""
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result

if __name__ == ""__main__"":
    user = get_user_data(1)
    print(user)",code_smell,code_duplication,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class BankAccount {
public:
    BankAccount(double balance) : balance(balance) {}
    void deposit(double amount) { balance += amount; }
    void withdraw(double amount) { if (balance >= amount) balance -= amount; }
    double getBalance() { return balance; }
private:
    double balance;
};

int main() {
    BankAccount account(1000.0);
    account.deposit(500.0);
    account.withdraw(200.0);
    cout << ""Final balance: "" << account.getBalance() << endl;
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import logging
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

class UserRepository:
    def __init__(self, db_client):
        self.db = db_client

    def get_users(self, page: int = 1, page_size: int = 20) -> List[Dict[str, Any]]:
        """"""Fetch a page of users from the database.
        Note: page is 1-indexed.
        """"""
        offset = (page - 1) * page_size
        query = f""SELECT id, name, email FROM users LIMIT {page_size} OFFSET {offset}""
        rows = self.db.execute(query)
        return [dict(row) for row in rows]

    def get_user_by_id(self, user_id: int) -> Dict[str, Any]:
        query = f""SELECT id, name, email FROM users WHERE id = {user_id}""
        row = self.db.execute_one(query)
        return dict(row) if row else None

class UserService:
    def __init__(self, repository: UserRepository):
        self.repo = repository

    def list_active_users(self, page: int = 1, page_size: int = 20) -> str:
        users = self.repo.get_users(page, page_size)
        # BUG: Off‑by‑one error – should filter out inactive users before pagination
        active = [u for u in users if u.get('status') == 'active']
        return json.dumps(active)

    def get_user_profile(self, user_id: int) -> str:
        user = self.repo.get_user_by_id(user_id)
        if not user:
            logger.error(f""User {user_id} not found"")
            return json.dumps({""error"": ""User not found""})
        # Potential security issue: exposing email directly
        return json.dumps({""id"": user['id'], ""name"": user['name'], ""email"": user['email']})

# Example usage (would be in a different module)
# db_client = DatabaseClient(...)
# repo = UserRepository(db_client)
# service = UserService(repo)
# print(service.list_active_users(page=2, page_size=10))",code_defect,off_by_one_error_in_filtering,,openai/gpt-oss-120b
Python,"import os
import json

def process_user_data(file_path):
    with open(file_path, 'r') as f:
        data = json.load(f)

    for user in data['users']:
        if user['status'] == 'active':
            process_user_profile(user)

        if user['preferences']:
            update_user_settings(user)

    save_processed_data(data)

    return True

def process_user_profile(user):
    user['last_processed'] = 'now'

    if 'tags' in user:
        for tag in user['tags']:
            tag['processed'] = True

    return user

def update_user_settings(user):
    if 'theme' in user['preferences']:
        user['preferences']['theme'] = 'default' if user['preferences']['theme'] == 'dark' else 'dark'

    return user

def save_processed_data(data):
    output_path = os.path.join(os.getcwd(), 'processed_data.json')
    with open(output_path, 'w') as f:
        json.dump(data, f)

    return output_path",code_smell,long_function,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount > self.balance:
            self.balance -= amount
        else:
            self.balance -= amount
    def get_balance(self):
        return self.balance
account = BankAccount(100)
account.withdraw(50)
print(account.get_balance())",code_defect,incorrect conditional logic,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password):
        cursor = self.conn.cursor()
        # Direct string formatting leads to SQL injection vulnerability
        query = f""INSERT INTO users (username, password) VALUES ('{username}', '{password}')""
        cursor.execute(query)
        self.conn.commit()
        return cursor.lastrowid

    def find_user(self, username):
        cursor = self.conn.cursor()
        # Using parameterized query correctly here
        cursor.execute(""SELECT id, username FROM users WHERE username = ?"", (username,))
        return cursor.fetchone()

    def delete_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute(""DELETE FROM users WHERE id = ?"", (user_id,))
        self.conn.commit()

# Example usage
repo = UserRepository('app.db')
repo.add_user('admin', ""password123"")
print(repo.find_user('admin'))",code_defect,sql_injection,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  getUsersByRole(role) {
    const result = [];
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].role === role) {
        result.push(this.users[i]);
      }
    }
    return result;
  }

  deleteUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        this.users.splice(i, 1);
        break;
      }
    }
  }

  updateUsernameByEmail(email, newUsername) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        this.users[i].username = newUsername;
        break;
      }
    }
  }
}

const userManager = new UserManager();
userManager.addUser({ email: 'alice@example.com', username: 'alice', role: 'admin' });
userManager.addUser({ email: 'bob@example.com', username: 'bob', role: 'user' });",code_smell,large_class,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };
   class UserService {
   public:
       std::vector<User> getUsers() {
           std::vector<User> users;
           // simulate database query
           users.push_back(User(""John"", 30));
           users.push_back(User(""Alice"", 25));
           return users;
       }
   };
   int main() {
       UserService service;
       std::vector<User> users = service.getUsers();
       for (const auto& user : users) {
           std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
       }
       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.pagination;

import java.util.ArrayList;
import java.util.List;

public class Paginator {
    private final List<String> items;
    private final int pageSize;

    public Paginator(List<String> items, int pageSize) {
        this.items = items;
        this.pageSize = pageSize;
    }

    /**
     * Returns the items for the requested page number (1‑based).
     * If the page number is out of range, returns an empty list.
     */
    public List<String> getPage(int pageNumber) {
        if (pageNumber < 1) {
            return new ArrayList<>();
        }
        int startIndex = (pageNumber - 1) * pageSize;
        // BUG: off‑by‑one error – endIndex should be exclusive, but we add pageSize - 1
        int endIndex = Math.min(startIndex + pageSize - 1, items.size() - 1);
        if (startIndex >= items.size()) {
            return new ArrayList<>();
        }
        return new ArrayList<>(items.subList(startIndex, endIndex + 1));
    }

    public static void main(String[] args) {
        List<String> data = new ArrayList<>();
        for (int i = 1; i <= 25; i++) {
            data.add(""Item"" + i);
        }
        Paginator paginator = new Paginator(data, 10);
        System.out.println(paginator.getPage(1)); // expects 10 items
        System.out.println(paginator.getPage(3)); // expects 5 items, but gets 4 due to bug
    }
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processOrders(orders) {
  for (let i = 0; i < orders.length; i++) {
    const order = orders[i];
    if (order.status === 'pending') {
      const user = fetchUser(order.userId);
      if (user) {
        const totalPrice = calculateTotalPrice(order.items);
        if (totalPrice > 0) {
          sendConfirmationEmail(user.email, order.id);
          updateOrderStatus(order.id, 'confirmed');
        }
      }
    }
  }
}

function fetchUser(userId) {
  // Simulated user fetching logic
  return {
    id: userId,
    name: 'John Doe',
    email: 'john.doe@example.com'
  };
}

function calculateTotalPrice(items) {
  let total = 0;
  for (let i = 0; i < items.length; i++) {
    total += items[i].price * items[i].quantity;
  }
  return total;
}

function sendConfirmationEmail(email, orderId) {
  console.log(`Sending confirmation email to ${email} for order ${orderId}`);
}

function updateOrderStatus(orderId, status) {
  console.log(`Updating order ${orderId} to status: ${status}`);
}",code_smell,large_function,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final double TAX_RATE = 0.08; public double calculateTotal(double subtotal) { return subtotal + (subtotal * TAX_RATE); } public double calculateTotalWithDiscount(double subtotal, double discountPercentage) { return calculateTotal(subtotal) - (calculateTotal(subtotal) * discountPercentage / 100); } }",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file for each call
    async getUserProfile(userId) {
        // Bad practice: synchronous file write inside async function
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            throw new Error('User not found');
        }
        // Inefficient: writing entire profile to log every time
        const logEntry = `User accessed: ${JSON.stringify(user)}\n`;
        fs.appendFileSync('access.log', logEntry);
        return user;
    }

    // Large function with many responsibilities
    async updateUser(userId, data) {
        const existing = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        if (!existing) {
            throw new Error('User not found');
        }
        // Validate fields (poor validation, missing many checks)
        if (data.email && !data.email.includes('@')) {
            throw new Error('Invalid email');
        }
        // Directly embed values into query – potential SQL injection
        const updateQuery = `UPDATE users SET name='${data.name}', email='${data.email}' WHERE id=${userId}`;
        await this.db.execute(updateQuery);
        // Send notification (side effect mixed with DB logic)
        this._sendNotification(userId, 'Profile updated');
        return true;
    }

    _sendNotification(userId, message) {
        // Placeholder for notification logic
        console.log(`Notify ${userId}: ${message}`);
    }
}

module.exports = UserService;",code_smell,tight_coupling_and_sql_injection_risk,,openai/gpt-oss-120b
Python,"import requests
import json

def fetch_and_process_data(url, auth_token, format='json', timeout=10):
    headers = {'Authorization': f'Bearer {auth_token}'}
    response = requests.get(url, headers=headers, timeout=timeout)
    data = response.content

    if format == 'json':
        parsed_data = json.loads(data)
        processed_data = []
        for item in parsed_data:
            processed_item = {
                'id': item.get('id'),
                'name': item.get('name'),
                'email': item.get('email')
            }
            processed_data.append(processed_item)
        return processed_data
    elif format == 'xml':
        # XML processing logic
        pass
    else:
        raise ValueError('Unsupported format')

# Example usage:
# fetch_and_process_data('https://api.example.com/data', 'my_token')",code_smell,long_function,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    std::string name;
    int salary;

    Employee(std::string name, int salary) : name(name), salary(salary) {}

    bool operator<(const Employee& other) const {
        return salary < other.salary;
    }
};

class Company {
public:
    std::vector<Employee> employees;

    void addEmployee(Employee employee) {
        employees.push_back(employee);
    }

    Employee getHighestPaidEmployee() {
        if (employees.empty()) {
            return Employee("""", 0);
        }
        return *std::max_element(employees.begin(), employees.end());
    }
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));
    Employee highestPaid = company.getHighestPaidEmployee();
    std::cout << highestPaid.name << std::endl;
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserManager {
    constructor(db) {
        this.db = db; // expects a DB client with query method
        this.cache = {};
    }

    // Loads user data, but caches all users regardless of need
    loadAllUsers() {
        const rows = this.db.query('SELECT * FROM users'); // synchronous mock
        rows.forEach(row => {
            this.cache[row.id] = row;
        });
    }

    // Retrieves a user, but re-reads the entire table each call
    getUserById(id) {
        this.loadAllUsers(); // heavy operation on every request
        return this.cache[id] || null;
    }

    // Updates user email without validation
    updateEmail(id, newEmail) {
        const user = this.getUserById(id);
        if (!user) return false;
        user.email = newEmail;
        this.db.query(`UPDATE users SET email = '${newEmail}' WHERE id = ${id}`);
        return true;
    }
}

module.exports = UserManager;",code_smell,inefficient_data_loading_and_missing_input_validation,,openai/gpt-oss-120b
JavaScript,"class UserAuthentication {
  constructor(usersDB) {
    this.usersDB = usersDB;
  }

  authenticateUser(username, password) {
    const user = this.usersDB.find(u => u.username === username);

    if (!user) {
      return false;
    }

    if (user.password === password) {
      return true;
    }

    return false;
  }

  validatePasswordStrength(password) {
    if (password.length < 8) {
      return false;
    }

    const hasUppercase = /[A-Z]/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasDigit = /\d/.test(password);

    return hasUppercase && hasLowercase && hasDigit;
  }

  registerUser(username, password) {
    if (!this.validatePasswordStrength(password)) {
      throw new Error('Password must be at least 8 characters and contain uppercase, lowercase, and digit characters.);
    }

    const existingUser = this.usersDB.find(u => u.username === username);
    if (existingUser) {
      throw new Error('Username already exists.);
    }

    this.usersDB.push({ username, password });
  }
}",code_defect,security_issue,,qwen/qwen3-32b
Java,"public class UserManager { private Map<String, User> users = new HashMap<>(); public void addUser(String username, String password) { users.put(username, new User(username, password)); } public User getUser(String username) { return users.get(username); } public void changePassword(String username, String newPassword) { User user = users.get(username); if (user != null) { user.setPassword(newPassword); } } } class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<User> findUsersByRole(String role) throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""SELECT id, username, email FROM users WHERE role = '"" + role + ""'""; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            while (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                users.add(user);
            }
        } finally {
            // Resources are not closed properly, potential resource leak
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection and resource leak,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

struct User {
    std::string username;
    std::string email;
    int age;
};

void processUsers(std::vector<User>& users) {
    for (size_t i = 0; i < users.size(); ++i) {
        if (users[i].age < 18) {
            std::cout << ""User "" << users[i].username << "" is underage."" << std::endl;
        } else {
            std::cout << ""User "" << users[i].username << "" is an adult."" << std::endl;
        }

        // Legacy code from v1.0, kept for compatibility
        // if (users[i].age == 0) {
        //     std::cout << ""Invalid age for user "" << users[i].username << std::endl;
        // }
    }
}

int main() {
    std::vector<User> users = {
        {""alice"", ""alice@example.com"", 25},
        {""bob"", ""bob@example.com"", 16},
        {""charlie"", ""charlie@example.com"", 0}  // This is invalid data
    };

    processUsers(users);
    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string n, int a) : name(n), age(a) {}

    bool operator<(const User& other) const {
        return age < other.age;
    }
};

void sortUsers(std::vector<User>& users) {
    std::sort(users.begin(), users.end());
}

int main() {
    std::vector<User> users = {User(""John"", 25), User(""Alice"", 30), User(""Bob"", 20)};
    sortUsers(users);
    for (const auto& user : users) {
        std::cout << user.name << "" is "" << user.age << "" years old."" << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        if (this.cache) return this.cache;
        const data = fs.readFileSync(this.path, 'utf8');
        // Assume JSON but no error handling
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function processUserInput(input) {
    // Vulnerable: directly concatenates input into SQL query
    const query = `SELECT * FROM users WHERE username = '${input}'`;
    return db.query(query);
}

function batchProcess(items) {
    // Off‑by‑one error: loop goes one past the end
    for (let i = 0; i <= items.length; i++) {
        console.log('Processing', items[i]);
    }
}

module.exports = { ConfigLoader, processUserInput, batchProcess };",code_defect,sql_injection_and_off_by_one,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    public void processUser(User user, List<String> permissions, Map<String, String> settings) {
        if (user == null) {
            return;
        }

        if (permissions.contains(""ADMIN"") || permissions.contains(""SUPERUSER"")) {
            user.setActive(true);
        } else {
            user.setActive(false);
        }

        if (settings.containsKey(""theme"")) {
            user.setTheme(settings.get(""theme""));
        }

        // TODO: Remove hardcoded setting
        user.setLanguage(""en"");

        // Legacy code - not used anymore
        // user.setLocale(""US"");

        for (String permission : permissions) {
            if (permission.equals(""READ"")) {
                user.addPermission(Permission.READ);
            } else if (permission.equals(""WRITE"")) {
                user.addPermission(Permission.WRITE);
            }
        }
    }
}",code_smell,hardcoded_values,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
        else:
            self.users[user_id].update(user_data)

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            raise Exception('User not found')

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
        else:
            raise Exception('User not found')

    def get_all_users(self):
        return list(self.users.values())
",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
    this.maxRetries = 3;
  }

  async process(order) {
    // Save order
    await this.db.save('orders', order);
    // Charge payment
    const paymentResult = await this._chargePayment(order.paymentInfo);
    if (!paymentResult.success) {
      await this._handleFailure(order);
      return false;
    }
    // Notify user
    this._sendConfirmation(order.userEmail);
    return true;
  }

  async _chargePayment(info) {
    // Simulate external payment call
    const response = await fetch('https://payment-gateway.example.com/charge', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(info)
    });
    const data = await response.json();
    // BUG: returns undefined when response is not ok
    if (response.ok) {
      return { success: data.status === 'OK', transactionId: data.id };
    }
    // Missing else branch leads to undefined return
  }

  async _handleFailure(order) {
    for (let i = 0; i < this.maxRetries; i++) {
      const result = await this._chargePayment(order.paymentInfo);
      if (result && result.success) {
        await this._sendConfirmation(order.userEmail);
        return;
      }
    }
    // Give up after retries
    console.error('Payment failed after retries for order', order.id);
  }

  _sendConfirmation(email) {
    // Fire-and-forget email send (no await, errors ignored)
    fetch('https://email-service.example.com/send', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ to: email, subject: 'Order Confirmation' })
    }).catch(() => {});
  }
}
module.exports = OrderProcessor;",code_defect,missing_return_on_error_path,,openai/gpt-oss-120b
Python,"import os
import json

CONFIG = None


def load_config(config_path='config.json'):
    global CONFIG
    if CONFIG is not None:
        return CONFIG

    if not os.path.exists(config_path):
        print('Configuration file not found. Using defaults.')
        CONFIG = {'host': 'localhost', 'port': 8080}
        return CONFIG

    with open(config_path, 'r') as f:
        CONFIG = json.load(f)
    return CONFIG


def setup_server():
    config = load_config()
    host = config['host']
    port = config['port']
    print(f'Server starting on {host}:{port}...')
    # Simulate server setup
    return True


def main():
    setup_server()


if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user = cursor.fetchone()
        return user

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users = cursor.fetchall()
        return users

    def create_user(self, name, email):
        cursor = self.db_connection.cursor()
        cursor.execute(""INSERT INTO users (name, email) VALUES (%s, %s)"", (name, email))
        self.db_connection.commit()
        return True
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<Transaction> getPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction t = new Transaction();
            t.setId(rs.getInt(""id""));
            t.setAmount(rs.getDouble(""amount""));
            t.setStatus(rs.getString(""status""));
            list.add(t);
        }
        // Missing rs.close(), stmt.close(), conn.close()
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = getPendingTransactions();
            for (Transaction tx : pending) {
                // Simulate processing
                if (tx.getAmount() > 1000) {
                    // Incorrect logic: should flag for manual review, but proceeds anyway
                    approveTransaction(tx);
                } else {
                    approveTransaction(tx);
                }
            }
        } catch (SQLException e) {
            // Swallowing exception, no logging
        }
    }

    private void approveTransaction(Transaction tx) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""UPDATE transactions SET status='APPROVED' WHERE id="" + tx.getId(); // SQL injection risk
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.executeUpdate();
            // Missing resource cleanup
        } catch (SQLException e) {
            // Ignored
        }
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
JavaScript,"function processUserData(userData) {
  const processedData = [];
  for (let i = 0; i < userData.length; i++) {
    const user = userData[i];
    if (user && user.name && user.email) {
      let formattedEmail = user.email;
      if (user.email.includes(' ')) {
        formattedEmail = user.email.replace(/\s+/g, '');
      }
      const newUser = {
        id: user.id || i + 1,
        name: user.name.charAt(0).toUpperCase() + user.name.slice(1).toLowerCase(),
        email: formattedEmail.toLowerCase(),
        role: user.role || 'user'
      };
      processedData.push(newUser);
    }
  }
  return processedData;
}

// Example usage:
const users = [
  { name: 'alice', email: 'alice@example.com', role: 'admin' },
  { name: 'bob', email: ' bob@example.com ', role: 'user' },
  { name: 'carol', email: 'carol@example.com', role: 'moderator' }
];

const result = processUserData(users);
console.log(result);",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
      class ShoppingCart {
         constructor() {
            this.items = [];
         }

         addItem(item) {
            this.items.push(item);
         }

         calculateTotal() {
            let total = 0;
            for (let i = 0; i < this.items.length; i++) {
               total += this.items[i].price * this.items[i].quantity;
            }
            return total;
         }

         applyDiscount(discountPercentage) {
            let total = this.calculateTotal();
            return total - (total * discountPercentage / 100);
         }
      }

      let cart = new ShoppingCart();
      cart.addItem({ price: 10.99, quantity: 2 });
      cart.addItem({ price: 5.99, quantity: 1 });
      console.log(cart.applyDiscount(10));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
    constructor(db) {
        this.db = db;
    }

    // Processes an order and updates inventory
    async processOrder(order) {
        // Assume order.items is an array of {productId, quantity}
        for (let i = 0; i < order.items.length; i++) {
            const item = order.items[i];
            const product = await this.db.getProductById(item.productId);
            // BUG: Missing check for product existence leads to runtime error
            product.stock -= item.quantity;
            await this.db.updateProduct(product);
        }
        await this.db.saveOrder(order);
        return { status: 'success' };
    }
}

// Usage example (not part of the defect)
const db = {
    async getProductById(id) { /* ... */ },
    async updateProduct(p) { /* ... */ },
    async saveOrder(o) { /* ... */ }
};
const processor = new OrderProcessor(db);
processor.processOrder({ items: [{ productId: 1, quantity: 2 }] });",code_defect,null_reference_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.tokens = [];
    this.maxTokens = 100;
  }

  generateToken(userId) {
    const token = this._createToken();
    this.tokens.push({ userId, token });
    if (this.tokens.length > this.maxTokens) {
      this.tokens.shift();
    }
    return token;
  }

  validateToken(userId, token) {
    const userTokens = this.tokens.filter(t => t.userId === userId);
    if (userTokens.length === 0) return false;

    for (let i = 0; i < userTokens.length; i++) {
      if (userTokens[i].token === token) {
        return true;
      }
    }
    return false;
  }

  _createToken() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let token = '';
    for (let i = 0; i < 16; i++) {
      token += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return token;
  }
}",code_smell,inefficient_loops,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, user_data):
        query = ""UPDATE users SET name = '"" + user_data['name'] + ""', email = '"" + user_data['email'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()
        return True
",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def get_user_by_username(self, username):
        # Vulnerable to SQL injection because username is interpolated directly
        query = f""SELECT id, username, password_hash FROM users WHERE username = '{username}'""
        cursor = self.conn.cursor()
        cursor.execute(query)
        return cursor.fetchone()

    def add_user(self, username, password_hash):
        cursor = self.conn.cursor()
        cursor.execute(
            ""INSERT INTO users (username, password_hash) VALUES (?, ?)"",
            (username, password_hash)
        )
        self.conn.commit()

# Example usage (would be called from elsewhere in the application)
repo = UserRepository('app.db')
repo.add_user('alice', 'hashed_pwd')
user = repo.get_user_by_username(""alice' OR '1'='1"")
print(user)",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import requests
import json

def get_user_data(user_id, token=None, timeout=10):
    headers = {'Authorization': f'Bearer {token}'} if token else {}
    url = f'https://api.example.com/users/{user_id}'
    response = requests.get(url, headers=headers, timeout=timeout)
    
    if response.status_code == 200:
        return response.json()
    elif response.status_code == 401:
        # Token might be expired, but we don't retry
        return None
    else:
        response.raise_for_status()


def process_user_info(user_id, token=None):
    user_data = get_user_data(user_id, token)
    if user_data:
        print(f""User Name: {user_data['name']}"")
        print(f""Email: {user_data['email']}"")
    else:
        print(""User data could not be retrieved."")


def main():
    user_id = input(""Enter user ID: "")
    process_user_info(user_id)

if __name__ == '__main__':
    main()",code_defect,missing_input_validation,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, String> users = new HashMap<>(); public synchronized void addUser(String username, String password) { if (!users.containsKey(username)) { users.put(username, password); } } public synchronized String getPassword(String username) { return users.get(username); } }",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <fstream>
#include <iostream>

class ConfigLoader {
public:
    ConfigLoader(const std::string& path) : filePath(path) {}
    std::vector<std::string> loadLines() {
        std::ifstream file(filePath);
        std::vector<std::string> lines;
        std::string line;
        while (std::getline(file, line)) {
            lines.push_back(line);
        }
        return lines;
    }
private:
    std::string filePath;
};

class UserProcessor {
public:
    UserProcessor(const std::string& configPath) : loader(configPath) {}
    void process() {
        auto lines = loader.loadLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off-by-one error
            std::cout << ""Processing: "" << lines[i] << std::endl;
        }
    }
private:
    ConfigLoader loader;
};

int main() {
    UserProcessor proc(""config.txt"");
    proc.process();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

std::string processUserInput(const std::string& input) {
    std::string cleaned = input;
    for (char& c : cleaned) {
        if (!std::isalpha(c)) {
            c = ' ';
        }
    }
    return cleaned;
}

int main() {
    std::string user_input = ""Hello, World! 123"";
    std::string processed = processUserInput(user_input);
    std::cout << ""Processed input: '"" << processed << ""'"" << std::endl;
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = '"" + str(user_id) + ""'""
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        query = ""UPDATE users SET name = '"" + new_data['name'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()
   ",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <algorithm>
#include <iostream>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    // Returns the index of the user, or -1 if not found
    int findUser(const std::string& name) const {
        for (size_t i = 0; i < users.size(); ++i) {
            if (users[i] == name) {
                return static_cast<int>(i);
            }
        }
        return -1;
    }

    // Returns the nth user (1‑based index). BUG: off‑by‑one error.
    std::string getUserAt(int n) const {
        if (n <= 0 || static_cast<size_t>(n) > users.size()) {
            throw std::out_of_range(""Invalid user index"");
        }
        return users[n]; // should be users[n-1]
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""Alice"");
    um.addUser(""Bob"");
    um.addUser(""Charlie"");
    try {
        std::cout << um.getUserAt(1) << std::endl; // Expected Alice, prints Bob due to bug
    } catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import time

class DataProcessor:
    def __init__(self, file_path):
        self.file_path = file_path
        self.data = []

    def load_data(self):
        if not os.path.exists(self.file_path):
            return
        with open(self.file_path, 'r') as f:
            for line in f:
                self.data.append(line.strip())

    def process_data(self):
        processed = []
        for item in self.data:
            if not item:
                continue
            processed.append(item.upper())
        return processed

    def save_processed_data(self, output_path):
        processed = self.process_data()
        with open(output_path, 'w') as f:
            for item in processed:
                f.write(item + '\n')

if __name__ == '__main__':
    processor = DataProcessor('input.txt')
    processor.load_data()
    processor.save_processed_data('output.txt')
    time.sleep(5)  # Simulate long-running task",code_smell,long_methods,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
        else:
            self.users[user_id].update(user_data)

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            raise ValueError(""User not found"")
        
        # Added a small 'optimization'
        if len(self.users) > 1000:
            self.users = {k: v for k, v in self.users.items() if k != user_id}

    def remove_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
        else:
            raise ValueError(""User not found"")

# Usage example
user_manager = UserManager()
user_manager.add_user('1', {'name': 'John', 'age': 30})
print(user_manager.get_user('1'))
user_manager.update_user('1', {'age': 31})
print(user_manager.get_user('1'))
user_manager.remove_user('1')
print(user_manager.get_user('1'))
",code_smell,inefficient_data_structure,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a log file
    async getUserProfile(userId) {
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        // Missing check for empty result leads to undefined access
        const profile = {
            id: user[0].id,
            name: user[0].name,
            email: user[0].email,
            // Assume address may be null
            address: user[0].address.street + ', ' + user[0].address.city
        };
        // Asynchronously write log but not awaiting, possible race condition
        fs.writeFile('profile.log', JSON.stringify(profile), err => {
            if (err) console.error('Log write failed');
        });
        return profile;
    }
}

module.exports = UserService;",code_defect,null_reference_and_race_condition,,openai/gpt-oss-120b
Python,"import os
import time

def process_user_data(user):
    start_time = time.time()
    
    # Do some processing
    processed_data = []
    for entry in user['entries']:
        if entry['type'] == 'A':
            processed_data.append(entry['value'] * 2)
        elif entry['type'] == 'B':
            processed_data.append(entry['value'] + 10)
        elif entry['type'] == 'C':
            processed_data.append(entry['value'] ** 0.5)
        else:
            processed_data.append(0)

    # Additional processing based on environment
    if os.getenv('DEBUG') == '1':
        time.sleep(2)  # Simulate delay for debugging

    total = sum(processed_data)

    # Legacy code commented out for future reference
    # if user['id'] % 2 == 0:
    #    total = total * 0.5

    print(f""Processing time: {time.time() - start_time:.2f}s"")
    return total

# Example usage
user = {
    'id': 123,
    'entries': [
        {'type': 'A', 'value': 5},
        {'type': 'B', 'value': 3},
        {'type': 'C', 'value': 16},
        {'type': 'D', 'value': 2}
    ]
}

result = process_user_data(user)
print(f""Result: {result}"")",code_smell,large_function,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class Order {
public:
    int id;
    vector<int> items;
    Order(int id) : id(id) {}
    void addItem(int item) {
        items.push_back(item);
    }
    void removeItem(int item) {
        for (int i = 0; i < items.size(); ++i) {
            if (items[i] == item) {
                items.erase(items.begin() + i);
                break;
            }
        }
    }
};

int main() {
    Order order(1);
    order.addItem(10);
    order.addItem(20);
    order.removeItem(10);
    for (int item : order.items) {
        cout << item << endl;
    }
    return 0;
}",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class OrderProcessor {
public:
    OrderProcessor(const std::vector<int>& inventory) : stock_(inventory) {}

    // Returns true if the order can be fulfilled, false otherwise
    bool processOrder(const std::vector<int>& itemIds) {
        // Check availability
        for (size_t i = 0; i <= itemIds.size(); ++i) { // BUG: off‑by‑one, accesses out of bounds
            int id = itemIds[i];
            if (id < 0 || id >= static_cast<int>(stock_.size())) {
                std::cerr << ""Invalid item ID: "" << id << std::endl;
                return false;
            }
            if (stock_[id] <= 0) {
                std::cerr << ""Out of stock for item ID: "" << id << std::endl;
                return false;
            }
        }
        // Reserve items
        for (int id : itemIds) {
            --stock_[id];
        }
        return true;
    }

    void printStock() const {
        for (size_t i = 0; i < stock_.size(); ++i) {
            std::cout << ""Item "" << i << "": "" << stock_[i] << "" left\n"";
        }
    }

private:
    std::vector<int> stock_; // stock_[itemId] = quantity
};

int main() {
    std::vector<int> initialStock = {5, 3, 10, 0, 2};
    OrderProcessor processor(initialStock);

    std::vector<int> order1 = {0, 2, 4};
    if (processor.processOrder(order1)) {
        std::cout << ""Order 1 processed successfully.\n"";
    }

    std::vector<int> order2 = {1, 3}; // item 3 is out of stock
    if (!processor.processOrder(order2)) {
        std::cout << ""Order 2 failed as expected.\n"";
    }

    processor.printStock();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserRegistrationService {

    public void registerUser(String username, String email, String password) {
        if (username == null || username.trim().isEmpty()) {
            throw new IllegalArgumentException(""Username is required"");
        }

        if (email == null || email.trim().isEmpty()) {
            throw new IllegalArgumentException(""Email is required"");
        }

        if (password == null || password.length() < 8) {
            throw new IllegalArgumentException(""Password must be at least 8 characters"");
        }

        // Simulated database save
        boolean isSaved = saveUserToDatabase(username, email, password);
        if (!isSaved) {
            throw new RuntimeException(""Failed to save user"");
        }

        // Simulated email notification
        sendWelcomeEmail(email);
    }

    private boolean saveUserToDatabase(String username, String email, String password) {
        // Simulate a database operation
        return Math.random() > 0.1; // 10% failure rate
    }

    private void sendWelcomeEmail(String email) {
        // Simulate email sending logic
    }

    public static void main(String[] args) {
        UserRegistrationService service = new UserRegistrationService();
        service.registerUser(""john_doe"", ""john.doe@example.com"", ""12345678"");
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,class UserService { constructor() { this.users = []; } async loadUsers() { for (let i = 0; i < 100; i++) { const response = await fetch('https://api.example.com/users'); const data = await response.json(); this.users.push(...data); } } async getUser(id) { for (const user of this.users) { if (user.id === id) return user; } return null; } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <algorithm>
#include <iostream>

class UserManager {
public:
    UserManager() {}
    void addUser(const std::string& username, int age) {
        users_.push_back({username, age});
    }
    // Returns true if a user with the given name exists
    bool hasUser(const std::string& username) const {
        for (const auto& u : users_) {
            if (u.name == username) return true;
        }
        return false;
    }
    // Returns the age of the first matching user, or -1 if not found
    int getUserAge(const std::string& username) const {
        for (const auto& u : users_) {
            if (u.name == username) return u.age;
        }
        return -1;
    }
    // Removes a user by name – BUG: off‑by‑one error may skip the last element
    void removeUser(const std::string& username) {
        for (size_t i = 0; i < users_.size(); ++i) {
            if (users_[i].name == username) {
                users_.erase(users_.begin() + i);
                break;
            }
        }
    }
private:
    struct User { std::string name; int age; };
    std::vector<User> users_;
};

int main() {
    UserManager um;
    um.addUser(""alice"", 30);
    um.addUser(""bob"", 25);
    um.removeUser(""bob"");
    std::cout << ""Has bob? "" << um.hasUser(""bob"") << ""\n"";
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processData(data, options) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    const item = data[i];
    if (options.includeProcessed && item.status === 'processed') {
      result.push(item);
    }
    if (options.includePending && item.status === 'pending') {
      result.push(item);
    }
    if (options.includeFailed && item.status === 'failed') {
      result.push(item);
    }
  }
  return result;
}

function filterData(data) {
  const filtered = [];
  for (let i = 0; i < data.length; i++) {
    const item = data[i];
    if (item.status === 'processed') {
      filtered.push(item);
    }
  }
  return filtered;
}

function processAndExport(data, options) {
  const processed = processData(data, options);
  console.log('Processed:', processed);
  return processed;
}",code_smell,duplicated_code,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserService {
public:
    vector<User> users;
    void addUser(User u) { users.push_back(u); }
    User* getUser(string name) {
        for (User& u : users) {
            if (u.name == name) return &u;
        }
        return nullptr;
    }
};

typedef UserService* UserServicePtr;

int main() {
    UserServicePtr service = new UserService();
    service->addUser(User(""John"", 30));
    User* user = service->getUser(""John"");
    if (user != nullptr) cout << user->name << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""p@ssw0rd""; // hardcoded secret

    public List<User> getActiveUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT id, username, email FROM users WHERE status = 'active'"";
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            while (rs.next()) {
                User u = new User();
                u.setId(rs.getInt(""id""));
                u.setUsername(rs.getString(""username""));
                u.setEmail(rs.getString(""email""));
                users.add(u);
            }
        } finally {
            // Missing null checks can cause NullPointerException if any step fails
            rs.close();
            stmt.close();
            conn.close();
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,resource_leak_null_pointer,,openai/gpt-oss-120b
Python,"import os
import sqlite3
from datetime import datetime

def process_user_data(user_id, db_path='app.db'):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute(f""SELECT * FROM users WHERE id = {user_id}"")
    user = cursor.fetchone()
    
    if user:
        cursor.execute(f""SELECT * FROM logs WHERE user_id = {user_id} ORDER BY timestamp DESC"")
        logs = cursor.fetchall()
        
        for log in logs:
            print(f""{log[0]}: {log[1]} @ {log[2]}"")
            
        cursor.execute(f""UPDATE users SET last_accessed = '{datetime.now()}' WHERE id = {user_id}"")
        conn.commit()
    
    conn.close()
    
    return user

# process_user_data(1)",code_defect,SQL injection vulnerability,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserService {
public:
    vector<User> users;
    void addUser(User u) {
        users.push_back(u);
    }
    User* getUserByName(string name) {
        for (User& u : users) {
            if (u.name == name) {
                return &u;
            }
        }
        return nullptr;
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User* user = service.getUserByName(""John"");
    if (user) {
        cout << user->name << endl;
    }
    return 0;
}",code_defect,dangling_pointer,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.configPath = configPath;
    this.cache = null;
  }

  // Loads configuration from file; caches result
  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.configPath, 'utf8');
    // BUG: JSON.parse may throw, but not caught, causing crash
    this.cache = JSON.parse(data);
    return this.cache;
  }

  // Returns a config value; defaults to undefined if missing
  get(key) {
    const cfg = this.load();
    // DEFECT: uses == instead of ===, leading to type coercion bugs
    if (cfg[key] == null) {
      return undefined;
    }
    return cfg[key];
  }
}

// Usage example
const loader = new ConfigLoader('./config.json');
const port = loader.get('serverPort') || 3000;
console.log(`Server will start on port ${port}`);
",code_defect,unhandled_exception_and_type_coercion_bug,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class UserProcessor {
public:
    void processUsers(vector<string>& users) {
        for (auto& user : users) {
            if (user.empty()) {
                continue;
            }
            if (user == ""admin"") {
                cout << ""Skipping admin user."" << endl;
                continue;
            }
            cout << ""Processing user: "" << user << endl;
            if (user.length() > 10) {
                cout << ""User name too long: "" << user << endl;
            }
        }
    }
};

int main() {
    vector<string> users = {""alice"", ""bob"", ""admin"", """", ""john_doe_1234567890""};
    UserProcessor processor;
    processor.processUsers(users);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email

    def authenticate(self, input_password):
        if input_password == self.password:
            return True
        else:
            return False

    def change_password(self, old_password, new_password):
        if self.authenticate(old_password):
            self.password = new_password
        else:
            print('Authentication failed')

    def send_email(self):
        # assuming an email service is available
        print(f'Sending email to {self.email}')

def main():
    user = UserAccount('test_user', 'password123', 'test@example.com')
    user.change_password('password123', 'new_password')
    user.send_email()

if __name__ == '__main__':
    main()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<User> findActiveUsers() {
        List<User> users = new ArrayList<>();
        String sql = ""SELECT id, username, email FROM users WHERE status = 'active'"";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                User u = new User();
                u.setId(rs.getInt(""id""));
                u.setUsername(rs.getString(""username""));
                u.setEmail(rs.getString(""email""));
                users.add(u);
            }
        } catch (SQLException e) {
            e.printStackTrace(); // swallowing exception details
        }
        return users;
    }

    public void deleteUserById(int userId) {
        String sql = ""DELETE FROM users WHERE id = "" + userId; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.executeUpdate();
        } catch (SQLException e) {
            // ignored
        }
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        List<Product> products = order.getProducts();
        for (Product product : products) {
            if (product.getPrice() > 0 && product.getQuantity() > 0) {
                double totalPrice = product.getPrice() * product.getQuantity();
                System.out.println(""Product "" + product.getName() + "" total price: "" + totalPrice);
            }
        }

        // TODO: Add payment processing logic
        // TODO: Add email notification logic
    }
}",code_smell,incomplete_functionality,,qwen/qwen3-32b
Python,"class UserAuthenticator:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def authenticate(self, username, password):
        query = ""SELECT * FROM users WHERE username = '{}' AND password = '{}'"".format(username, password)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        if user_data:
            return True
        else:
            return False",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class LogProcessor {
public:
    LogProcessor(const std::vector<std::string>& logs) : logs_(logs) {}

    // Returns the number of log entries that contain the given keyword.
    int countKeyword(const std::string& keyword) {
        int count = 0;
        for (size_t i = 0; i <= logs_.size(); ++i) { // BUG: off‑by‑one, should be i < logs_.size()
            if (logs_[i].find(keyword) != std::string::npos) {
                ++count;
            }
        }
        return count;
    }

private:
    std::vector<std::string> logs_;
};

int main() {
    std::vector<std::string> logs = {
        ""Error: failed to connect"",
        ""Info: connection established"",
        ""Warning: low memory"",
        ""Error: timeout occurred""
    };
    LogProcessor processor(logs);
    std::cout << ""Error count: "" << processor.countKeyword(""Error"") << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.getStatus() == OrderStatus.PENDING) {
                if (order.getTotalAmount() > 0) {
                    if (order.getCustomer() != null) {
                        String customerName = order.getCustomer().getName();
                        String customerEmail = order.getCustomer().getEmail();
                        sendEmail(customerEmail, ""Your order is ready"", ""Dear "" + customerName + "", your order has been processed."");
                        order.setStatus(OrderStatus.PROCESSED);
                    }
                }
            }
        }
    }

    private void sendEmail(String email, String subject, String body) {
        // Simulate email sending
        System.out.println(""Sending email to "" + email + "" with subject: "" + subject);
    }
}",code_smell,large_function,,qwen/qwen3-32b
Python,"class UserAuthenticator:
    def __init__(self, username, password):
        self.username = username
        self.password = password
    def authenticate(self):
        users = {'admin': 'password123', 'user': 'password'}
        if self.username in users and users[self.username] == self.password:
            return True
        return False
    def get_user_data(self):
        # assume this is a very complex and slow operation
        import time
        time.sleep(2)
        return {'username': self.username, 'email': 'user@example.com'}

def main):
    authenticator = UserAuthenticator('admin', 'password123')
    if authenticator.authenticate():
        print(authenticator.get_user_data())
",code_smell,inefficient design,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path

    def get_users_page(self, page_number, page_size=20):
        """"""Return a list of users for the given page number.
        page_number is 1-indexed.
        """"""
        offset = (page_number - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        # BUG: Off-by-one error in LIMIT clause, returns one extra row
        cursor.execute(""SELECT id, name FROM users LIMIT ? OFFSET ?"", (page_size + 1, offset))
        rows = cursor.fetchall()
        conn.close()
        return [{""id"": r[0], ""name"": r[1]} for r in rows]

# Example usage (would be called elsewhere in the application)
repo = UserRepository('app.db')
users = repo.get_users_page(2)
print(users)",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json

class ConfigManager:
    def __init__(self, config_path='config.json'):
        self.config_path = config_path
        self.config = self._load_config()

    def _load_config(self):
        try:
            with open(self.config_path, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f""Error loading config: {e}"")
            return {}  # Default empty config

    def get_value(self, key):
        return self.config.get(key)

    def update_value(self, key, value):
        self.config[key] = value
        self._write_config()

    def _write_config(self):
        with open(self.config_path, 'w') as f:
            json.dump(self.config, f)

    def reset_config(self):
        os.remove(self.config_path)
        self.config = self._load_config()",code_smell,lack_of_error_handling,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        all_users = cursor.fetchall()
        return all_users

class UserController:
    def __init__(self, user_service):
        self.user_service = user_service

    def handle_get_user_request(self, user_id):
        return self.user_service.get_user(user_id)

    def handle_update_user_request(self, user_id, new_data):
        self.user_service.update_user(user_id, new_data)
        return {""message"": ""User updated successfully""}

    def handle_delete_user_request(self, user_id):
        self.user_service.delete_user(user_id)
        return {""message"": ""User deleted successfully""}

    def handle_get_all_users_request(self):
        return self.user_service.get_all_users()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {
        // Load users from a data source (simulated)
        users_ = {""alice"", ""bob"", ""carol""};
    }

    // Returns the user name at the given index, or empty string if out of range
    std::string getUserAt(int index) const {
        if (index < 0 || index > users_.size()) {
            return """"; // BUG: should be >= users_.size()
        }
        return users_[index];
    }

    // Adds a new user
    void addUser(const std::string& name) {
        users_.push_back(name);
    }

    // Prints all users
    void printAll() const {
        for (size_t i = 0; i < users_.size(); ++i) {
            std::cout << i << "": "" << users_[i] << std::endl;
        }
    }

private:
    std::vector<std::string> users_;
};

int main() {
    UserManager um;
    um.addUser(""dave"");
    std::cout << ""User at index 3: "" << um.getUserAt(3) << std::endl; // Expected ""dave""
    std::cout << ""User at index 4: "" << um.getUserAt(4) << std::endl; // Out of range, should be empty
    um.printAll();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input, std::vector<int>& results) {
    for (size_t i = 0; i < input.length(); ++i) {
        if (input[i] >= '0' && input[i] <= '9') {
            int digit = input[i] - '0';
            results.push_back(digit);
        } else {
            // ignore non-digit characters
        }
    }
}

int main() {
    std::string input = ""abc123xyz456"";
    std::vector<int> results;

    processUserInput(input, results);

    std::cout << ""Extracted digits: "";
    for (int digit : results) {
        std::cout << digit;
    }
    std::cout << std::endl;

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getUser(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return user;
         }

         async getUsers() {
            const users = await this.userRepository.findAll();
            return users;
         }
      }

      class UserRepository {
         constructor(db) {
            this.db = db;
         }

         async findById(id) {
            const query = `SELECT * FROM users WHERE id = ${id}`;
            const result = await this.db.query(query);
            return result[0];
         }

         async findAll() {
            const query = 'SELECT * FROM users';
            const result = await this.db.query(query);
            return result;
         }
      }
   ",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Logger;

public class PaymentProcessor {
    private static final Logger logger = Logger.getLogger(PaymentProcessor.class.getName());
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""P@ssw0rd""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT balance FROM accounts WHERE account_id = '"" + accountId + ""'""; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    double newBalance = balance - amount;
                    String updateSql = ""UPDATE accounts SET balance = "" + newBalance + "" WHERE account_id = '"" + accountId + ""'"";
                    stmt.executeUpdate(updateSql);
                    logger.info(""Payment of $"" + amount + "" processed for account "" + accountId);
                    return true;
                } else {
                    logger.warning(""Insufficient funds for account "" + accountId);
                    return false;
                }
            } else {
                logger.warning(""Account not found: "" + accountId);
                return false;
            }
        } catch (SQLException e) {
            logger.severe(""Database error: "" + e.getMessage());
            return false;
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processUserInput(std::vector<int>& data, int threshold) {
    for (int i = 0; i < data.size(); ++i) {
        if (data[i] > threshold) {
            data[i] = 0; // Intended to reset over-threshold values
        }
    }
}

int main() {
    std::vector<int> userValues = {15, 20, 30, 5, 40};
    processUserInput(userValues, 25);

    std::cout << ""Processed values: "";
    for (int val : userValues) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}",code_defect,incorrect conditional logic,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class UserService {
public:
    UserService() {}

    void saveUser(User user) {
        users.push_back(user);
    }

    User getUserByName(std::string name) {
        for (User user : users) {
            if (user.getName() == name) {
                return user;
            }
        }
        // Return default user if not found
        return User(""Default"", 0);
    }

private:
    std::vector<User> users;
};

int main() {
    UserService userService;
    User user(""John"", 30);
    userService.saveUser(user);

    User retrievedUser = userService.getUserByName(""John"");
    std::cout << retrievedUser.getName() << std::endl;
    std::cout << retrievedUser.getAge() << std::endl;

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password_hash):
        # Direct string interpolation leads to SQL injection vulnerability
        query = f""INSERT INTO users (username, password_hash) VALUES ('{username}', '{password_hash}')""
        self.conn.execute(query)
        self.conn.commit()

    def get_user(self, username):
        # Also vulnerable when fetching user data
        cursor = self.conn.execute(f""SELECT * FROM users WHERE username = '{username}'"")
        return cursor.fetchone()

    def delete_user(self, user_id):
        # Correctly uses parameterized query here (inconsistent handling)
        self.conn.execute('DELETE FROM users WHERE id = ?', (user_id,))
        self.conn.commit()

# Example usage (would be in a different module)
repo = UserRepository('app.db')
repo.add_user('alice', 'hash123')
user = repo.get_user('alice')
print(user)
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import datetime
import random

class OrderProcessor:
    def __init__(self):
        self.orders = []
        self.status_map = {
            1: 'Pending',
            2: 'Shipped',
            3: 'Delivered',
            4: 'Cancelled'
        }

    def add_order(self, order_id, customer, items):
        order = {
            'order_id': order_id,
            'customer': customer,
            'items': items,
            'status': 1,
            'created_at': datetime.datetime.now()
        }
        self.orders.append(order)

    def update_status(self, order_id, new_status):
        for order in self.orders:
            if order['order_id'] == order_id:
                if 1 <= new_status <= 4:
                    order['status'] = new_status
                break

    def get_order_status_label(self, status_code):
        return self.status_map.get(status_code, 'Unknown')

    def get_total_items(self):
        total = 0
        for order in self.orders:
            for item in order['items']:
                total += 1
        return total

    def get_pending_orders(self):
        result = []
        for order in self.orders:
            if order['status'] == 1:
                result.append(order['order_id'])
        return result

processor = OrderProcessor()
processor.add_order(101, 'Alice', ['Item A', 'Item B'])
processor.add_order(102, 'Bob', ['Item C'])
processor.update_status(101, 2)
print('Pending orders:', processor.get_pending_orders())",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>

   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };

   class UserService {
   public:
       void addUser(User user) {
           users.push_back(user);
       }

       std::vector<User> getUsers() {
           return users;
       }

       User getUserByName(std::string name) {
           for (auto& user : users) {
               if (user.getName() == name) {
                   return user;
               }
           }
           // Return empty user if not found
           return User("""", 0);
       }

   private:
       std::vector<User> users;
   };

   int main() {
       UserService userService;
       userService.addUser(User(""John"", 30));
       userService.addUser(User(""Alice"", 25));

       User user = userService.getUserByName(""John"");
       std::cout << user.getName() << std::endl;
       std::cout << user.getAge() << std::endl;

       return 0;
   }
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self.conn.row_factory = sqlite3.Row
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, email: str) -> int:
        cur = self.conn.execute(
            ""INSERT INTO users (username, email) VALUES (?, ?)"",
            (username, email)
        )
        self.conn.commit()
        return cur.lastrowid

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page (1-indexed).""""""
        offset = (page - 1) * page_size
        # BUG: off‑by‑one error – should be offset + page_size, but uses offset + page_size - 1
        limit = page_size - 1
        cur = self.conn.execute(
            ""SELECT id, username, email FROM users ORDER BY id LIMIT ? OFFSET ?"",
            (limit, offset)
        )
        return [dict(row) for row in cur.fetchall()]

# Example usage (would be removed in production)
if __name__ == ""__main__"":
    repo = UserRepository(':memory:')
    for i in range(1, 26):
        repo.add_user(f'user{i}', f'user{i}@example.com')
    print('Page 1:', repo.get_users_page(1))
    print('Page 2:', repo.get_users_page(2))
    print('Page 3:', repo.get_users_page(3))
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

void processUserInput(const string& input, vector<string>& results) {
    if (input.empty()) {
        return;
    }

    string temp;
    for (size_t i = 0; i < input.length(); ++i) {
        if (input[i] == ' ') {
            if (!temp.empty()) {
                results.push_back(temp);
                temp.clear();
            }
        } else {
            temp += input[i];
        }
    }

    if (!temp.empty()) {
        results.push_back(temp);
    }

    // Legacy code, not needed anymore
    // string unused = ""old_value"";
}

int main() {
    string input;
    vector<string> output;

    cout << ""Enter a sentence: "";
    getline(cin, input);

    processUserInput(input, output);

    cout << ""Processed tokens: "" << endl;
    for (const auto& token : output) {
        cout << token << endl;
    }

    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserService {
     constructor(userRepository) {
       this.userRepository = userRepository;
     }

     async getAllUsers() {
       const users = await this.userRepository.findAll();
       return users.map(user => ({ id: user.id, name: user.name }));
     }

     async getUserById(id) {
       const user = await this.userRepository.findById(id);
       if (!user) {
         throw new Error(`User with id ${id} not found`);
       }
       return { id: user.id, name: user.name };
     }
   }

   class UserRepository {
     async findAll() {
       // simulate database query
       return [
         { id: 1, name: 'John Doe' },
         { id: 2, name: 'Jane Doe' },
       ];
     }

     async findById(id) {
       // simulate database query
       const users = await this.findAll();
       return users.find(user => user.id === id);
     }
   }

   const userRepository = new UserRepository();
   const userService = new UserService(userRepository);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""admin123""; // hardcoded credentials

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            // Check user balance
            stmt = conn.prepareStatement(""SELECT balance FROM accounts WHERE user_id = ?"");
            stmt.setString(1, userId);
            rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    // Deduct amount
                    stmt = conn.prepareStatement(""UPDATE accounts SET balance = balance - ? WHERE user_id = ?"");
                    stmt.setDouble(1, amount);
                    stmt.setString(2, userId);
                    stmt.executeUpdate();
                    // Log transaction
                    logTransaction(conn, userId, amount);
                    return true;
                }
            }
            return false;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            // Missing close of ResultSet and PreparedStatement for second query
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }

    private void logTransaction(Connection conn, String userId, double amount) throws SQLException {
        PreparedStatement stmt = conn.prepareStatement(""INSERT INTO transactions (user_id, amount, ts) VALUES (?, ?, ?)"");
        stmt.setString(1, userId);
        stmt.setDouble(2, amount);
        stmt.setTimestamp(3, new java.sql.Timestamp(new Date().getTime()));
        stmt.executeUpdate();
        // stmt not closed, leading to resource leak
    }
}
",code_defect,resource_leak_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  let result = '';
  for (let i = 0; i < input.length; i++) {
    if (input[i] === 'a') {
      result += '1';
    } else if (input[i] === 'b') {
      result += '2';
    } else if (input[i] === 'c') {
      result += '3';
    } else {
      result += input[i];
    }
  }
  return result;
}

function handleRequest(req, res) {
  const userInput = req.body.input;
  const processed = processUserInput(userInput);
  res.send({ output: processed });
}",code_smell,poor_conditionals,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async getUserById(id) {
            const user = await this.userDao.getUserById(id);
            if (user) {
               user.roles = await this.userDao.getUserRoles(id);
            }
            return user;
         }

         async getUserRoles(id) {
            return await this.userDao.getUserRoles(id);
         }
      }

      class UserDao {
         async getUserById(id) {
            // simulate database query
            return { id: id, name: 'John Doe' };
         }

         async getUserRoles(id) {
            // simulate database query
            return ['admin', 'moderator'];
         }
      }

      const userDao = new UserDao();
      const userService = new UserService(userDao);
      userService.getUserById(1).then(user => console.log(user));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserManager {
    constructor(db) {
        this.db = db;
        this.cache = {};
    }

    // Loads all users into memory every time it's called
    loadAllUsers() {
        const rows = this.db.query('SELECT * FROM users');
        rows.forEach(row => {
            this.cache[row.id] = row;
        });
    }

    // Gets a user, but reloads the whole cache each call
    getUser(id) {
        this.loadAllUsers(); // heavy operation on every request
        return this.cache[id] || null;
    }

    // Updates user without validating input
    updateUser(id, data) {
        const user = this.getUser(id);
        if (!user) return false;
        // Directly merges without sanitization
        Object.assign(user, data);
        this.db.execute(`UPDATE users SET name='${user.name}', email='${user.email}' WHERE id=${id}`);
        return true;
    }
}

// Usage example (not part of production code)
const db = {
    query: sql => [{ id: 1, name: 'Alice', email: 'alice@example.com' }],
    execute: sql => console.log('Executed:', sql)
};
const manager = new UserManager(db);
manager.updateUser(1, { name: ""Bob"", email: ""bob@example.com"" });",code_smell,inefficient_caching_and_sql_injection_risk,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  getUserByEmail(email) {
    return this.users.find(user => user.email === email);
  }

  addUser(newUser) {
    this.users.push(newUser);
  }

  getUsersByRole(role) {
    return this.users.filter(user => user.role === role);
  }

  deleteUserByEmail(email) {
    const index = this.users.findIndex(user => user.email === email);
    if (index !== -1) {
      this.users.splice(index, 1);
    }
  }
}

const users = [
  { email: 'alice@example.com', role: 'admin' },
  { email: 'bob@example.com', role: 'user' }
];

const userManager = new UserManager(users);
userManager.addUser({ email: 'charlie@example.com', role: 'user' });
console.log(userManager.getUsersByRole('user'));
userManager.deleteUserByEmail('bob@example.com');
console.log(userManager.getUserByEmail('bob@example.com'));
",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class PaymentProcessor:
    def __init__(self, payment_gateway):
        self.payment_gateway = payment_gateway

    def process_payment(self, amount, user_id):
        try:
            self.payment_gateway.charge_card(amount)
            return True
        except Exception as e:
            print(f'Error processing payment: {e}')
            return False

    def get_user_payment_history(self, user_id):
        payments = []
        for i in range(1, 13):
            payment = self.payment_gateway.get_payment_for_month(i, user_id)
            if payment:
                payments.append(payment)
        return payments

    def get_total_user_spend(self, user_id):
        total_spend = 0
        payments = self.get_user_payment_history(user_id)
        for payment in payments:
            total_spend += payment.amount
        return total_spend
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <iostream>
#include <numeric>

class Statistics {
public:
    // Returns the average of the first 'count' elements in data
    double average(const std::vector<int>& data, size_t count) {
        if (data.empty() || count == 0) return 0.0;
        // BUG: off‑by‑one error, should sum first 'count' elements but sums count+1
        int sum = std::accumulate(data.begin(), data.begin() + count + 1, 0);
        return static_cast<double>(sum) / static_cast<double>(count);
    }
};

int main() {
    Statistics stats;
    std::vector<int> values = {10, 20, 30, 40, 50};
    std::cout << ""Average of first 3: "" << stats.average(values, 3) << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import time
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)

class DataProcessor:
    def __init__(self):
        self.config = {'retry_attempts': 3, 'timeout': 5}
        self._cache = {}

    def fetch_data(self, identifier):
        if identifier in self._cache:
            logging.info(f""Using cached data for {identifier}"")
            return self._cache[identifier]

        raw_data = None
        for i in range(self.config['retry_attempts']):
            try:
                raw_data = self._download_from_source(identifier)
                if raw_data:
                    break
                time.sleep(2 ** i)  # Exponential backoff
            except Exception as e:
                logging.error(f""Failed to download data for {identifier}, attempt {i + 1}: {e}"")

        if not raw_data:
            return None

        processed_data = self._process_raw_data(raw_data)
        self._cache[identifier] = processed_data
        return processed_data

    def _download_from_source(self, identifier):
        # Simulated download logic
        time.sleep(1)  # Simulate network delay
        if identifier == 'error':
            raise ValueError('Simulated network error')
        return {identifier: 'raw_data'}

    def _process_raw_data(self, raw_data):
        # Simulated data processing
        logging.debug(f""Processing raw data: {raw_data}"")
        result = {k: v.upper() for k, v in raw_data.items()}
        return result

# Usage example
data_proc = DataProcessor()
data = data_proc.fetch_data('test_id')
print(f""Fetched and processed data: {data}"")

# Old unused code
# def deprecated_function():
#     pass
# 
# print('Unused function left for reference')",code_smell,dead_code,,qwen/qwen3-32b
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<Transaction> getPendingTransactions() throws SQLException {
        List<Transaction> pending = new ArrayList<>();
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                Transaction tx = new Transaction();
                tx.setId(rs.getInt(""id""));
                tx.setAmount(rs.getDouble(""amount""));
                tx.setStatus(rs.getString(""status""));
                pending.add(tx);
            }
        }
        return pending;
    }

    public void processTransactions() {
        try {
            List<Transaction> txs = getPendingTransactions();
            for (Transaction tx : txs) {
                // Simulate processing
                if (tx.getAmount() > 10000) {
                    // Flag large transactions but still mark as completed
                    tx.setStatus(""COMPLETED"");
                } else {
                    tx.setStatus(""COMPLETED"");
                }
                updateTransactionStatus(tx);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateTransactionStatus(Transaction tx) {
        String sql = ""UPDATE transactions SET status = ? WHERE id = ?"";
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, tx.getStatus());
            stmt.setInt(2, tx.getId());
            stmt.executeUpdate();
        } catch (SQLException e) {
            // Swallow exception silently
        }
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,silent exception swallowing leads to lost errors,,openai/gpt-oss-120b
Python,"import sqlite3

def get_user_data(username):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = 'SELECT * FROM users WHERE username = '' + username + '''
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result

# Legacy code, not used anymore
def get_user_data_old(username):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = 'SELECT * FROM users WHERE username = '' + username + '''
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result",code_smell,security_issue,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username in self.users:
            return False
        self.users[username] = password
        return True

    def verify_user(self, username, password):
        if username not in self.users:
            return False
        stored_password = self.users[username]
        return stored_password == password

    def get_all_users(self):
        return list(self.users.keys())

    def remove_user(self, username):
        if username in self.users:
            del self.users[username]
            return True
        return False

    def update_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
            return True
        return False

user_manager = UserManager()
user_manager.add_user('admin', 'password123')
print(user_manager.verify_user('admin', 'password123'))  # Should print: True
print(user_manager.get_all_users())  # Should print: ['admin']
user_manager.update_password('admin', 'new_password')
print(user_manager.verify_user('admin', 'new_password'))  # Should print: True
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it in memory.""""""
    _cache = {}

    @staticmethod
    def load(path: str) -> dict:
        # Missing validation: path may be absolute or relative, no check for existence
        if path in ConfigLoader._cache:
            return ConfigLoader._cache[path]
        with open(path, 'r') as f:
            data = json.load(f)
        ConfigLoader._cache[path] = data
        return data

class UserService:
    def __init__(self, config_path: str):
        self.config = ConfigLoader.load(config_path)
        self.db_url = self.config.get('database_url')
        # Assume db_url is a connection string; no validation performed
        self._connect_to_db()

    def _connect_to_db(self):
        # Placeholder for DB connection; in real code this would create a connection object
        self.connection = self.db_url

    def get_user(self, user_id: int) -> dict:
        # Vulnerable to SQL injection because query is built via string formatting
        query = f""SELECT * FROM users WHERE id = {user_id}""
        result = self._execute_query(query)
        return result

    def _execute_query(self, query: str) -> dict:
        # Simulated DB response; in reality this would execute the query
        # Here we just return a dummy dict for demonstration
        return {""id"": 1, ""name"": ""Alice""}

# Usage example (would be removed in production)
service = UserService('config.json')
print(service.get_user(42))",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].status === 'active') {
        this.users[i].processed = true;
        this.users[i].lastProcessed = new Date();
      }
      if (this.users[i].role === 'admin') {
        this.users[i].notificationsEnabled = true;
      }
    }
  }

  getProcessedUsers() {
    return this.users.filter(user => user.processed === true);
  }

  // TODO: Implement this later
  // sendNotifications(users) {
  //   users.forEach(user => {
  //     console.log(`Notification sent to ${user.email}`);
  //   });
  // }
}",code_smell,large_class,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <string>
#include <vector>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void addFriend(User* friendUser) {
        friends.push_back(friendUser);
    }

    std::vector<User*> getFriends() {
        return friends;
    }

private:
    std::string name;
    int age;
    std::vector<User*> friends;
};

int main() {
    User user1(""John"", 30);
    User user2(""Alice"", 25);

    user1.addFriend(&user2);

    for (User* friendUser : user1.getFriends()) {
        std::cout << friendUser->getName() << std::endl;
    }

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <fstream>
#include <iostream>

class ConfigLoader {
public:
    ConfigLoader(const std::string& path) : filePath(path) {}
    std::vector<std::string> loadKeys() {
        std::ifstream in(filePath);
        std::vector<std::string> keys;
        std::string line;
        while (std::getline(in, line)) {
            if (line.empty()) continue;
            size_t pos = line.find('=');
            if (pos != std::string::npos) {
                keys.push_back(line.substr(0, pos));
            }
        }
        return keys;
    }
private:
    std::string filePath;
};

int main() {
    ConfigLoader loader(""/etc/app/config.cfg"");
    auto keys = loader.loadKeys();
    for (size_t i = 0; i <= keys.size(); ++i) { // off‑by‑one error
        std::cout << keys[i] << std::endl;
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                continue;
            }

            Product product = item.getProduct();
            if (product.isAvailable()) {
                double price = product.getPrice();
                double total = price * item.getQuantity();
                order.addItemTotal(item, total);
            }
        }

        double shipping = calculateShipping(order);
        order.setTotal(order.getTotal() + shipping);
    }

    private double calculateShipping(Order order) {
        double shippingCost = 0.0;
        if (order.getTotal() > 100.0) {
            shippingCost = 0.0;
        } else {
            shippingCost = 10.0;
        }
        return shippingCost;
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class ShoppingCart {
         constructor() {
            this.items = [];
         }

         addItem(item) {
            this.items.push(item);
         }

         removeItem(itemName) {
            for (let i = 0; i < this.items.length; i++) {
               if (this.items[i].name === itemName) {
                  this.items.splice(i, 1);
                  break;
               }
            }
         }

         calculateTotal() {
            let total = 0;
            for (let item of this.items) {
               total += item.price;
            }
            return total;
         }
      }

      class Product {
         constructor(name, price) {
            this.name = name;
            this.price = price;
         }
      }

      let cart = new ShoppingCart();
      cart.addItem(new Product('Laptop', 1000));
      cart.addItem(new Product('Phone', 500));
      console.log(cart.calculateTotal());
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>

class UserManager {
public:
    void addUser(const std::string& username) {
        std::lock_guard<std::mutex> lock(mutex_);
        users_.push_back(username);
    }

    bool isUser(const std::string& username) {
        std::lock_guard<std::mutex> lock(mutex_);
        for (const auto& u : users_) {
            if (u == username) return true;
        }
        return false;
    }

    // Returns the number of users with a given prefix.
    int countUsersWithPrefix(const std::string& prefix) {
        std::lock_guard<std::mutex> lock(mutex_);
        int count = 0;
        for (size_t i = 0; i <= users_.size(); ++i) { // off‑by‑one error
            if (users_[i].rfind(prefix, 0) == 0) {
                ++count;
            }
        }
        return count;
    }

private:
    std::vector<std::string> users_;
    std::mutex mutex_;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.addUser(""alex"");
    std::cout << ""Count: "" << um.countUsersWithPrefix(""al"") << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        if (order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item == null || item.getQuantity() <= 0) {
                continue;
            }

            double itemPrice = item.getPrice();
            double totalItemPrice = itemPrice * item.getQuantity();
            double discountedPrice = totalItemPrice * 0.9;

            if (discountedPrice > 100) {
                order.applyDiscount(discountedPrice - 100);
            }
        }

        order.setStatus(""Processed"");
        System.out.println(""Order processed: "" + order.getOrderId());
    }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserRepository {
public:
    vector<User> users;
    void addUser(User u) { users.push_back(u); }
    User* getUserByName(string name) {
        for (auto& user : users) {
            if (user.name == name) return &user;
        }
        return nullptr;
    }
};

int main() {
    UserRepository repo;
    repo.addUser(User(""John"", 30));
    User* user = repo.getUserByName(""John"");
    if (user) cout << user->name << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""admin123""; // hardcoded credentials

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> pending = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk if limit derived from user input
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            pending.add(rs.getString(""id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return pending;
    }

    public void processPayments(List<String> paymentIds) {
        for (String id : paymentIds) {
            try {
                // Missing transaction handling, partial failures leave DB inconsistent
                markAsProcessed(id);
                // Simulate external call that may throw unchecked exception
                externalCharge(id);
            } catch (Exception e) {
                // Swallowing exception, no logging or rollback
            }
        }
    }

    private void markAsProcessed(String paymentId) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""UPDATE payments SET status='PROCESSED' WHERE id='"" + paymentId + ""'""; // SQL injection
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        stmt.close();
        conn.close();
    }

    private void externalCharge(String paymentId) {
        // Placeholder for external payment gateway call
        if (paymentId.hashCode() % 2 == 0) {
            throw new RuntimeException(""Charge failed for id: "" + paymentId);
        }
    }
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (i != j) {
                std::cout << data[i] + data[j] << std::endl;
            }
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    processData(data);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   #include <algorithm>

   class Employee {
   public:
       Employee(std::string name, int salary) : name(name), salary(salary) {}

       std::string getName() const { return name; }
       int getSalary() const { return salary; }

       void setSalary(int newSalary) { salary = newSalary; }

   private:
       std::string name;
       int salary;
   };

   void sortEmployees(std::vector<Employee>& employees) {
       std::sort(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
           return a.getSalary() < b.getSalary();
       });
   }

   int main() {
       std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
       sortEmployees(employees);

       for (const auto& employee : employees) {
           std::cout << employee.getName() << ""'s salary is "" << employee.getSalary() << std::endl;
       }

       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> int:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        user_id = cursor.lastrowid
        conn.commit()
        conn.close()
        return user_id

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cursor.fetchall()
        conn.close()
        # BUG: off‑by‑one error – returns one extra record when page is 0
        if page == 0:
            return rows[1:]
        return rows
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import time

def process_user_data(user):
    
    if not user:
        return

    data = {
        'username': user.get('username'),
        'email': user.get('email'),
        'created_at': time.time(),
        'preferences': user.get('preferences', {}),
    }

    if 'notifications' in user:
        data['notifications'] = user['notifications']

    if 'avatar' in user:
        avatar_path = os.path.join('/app/static/avatars', user['avatar'])
        if os.path.exists(avatar_path):
            data['avatar_url'] = f'/static/avatars/{user['avatar']}'

    return data

# Legacy function, might be removed in future
# def old_user_processing(user):
#     return {'username': user['name'], 'email': user['mail']}

# This function is no longer in use
# def deprecated_function():
#     return None",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
       constructor(username, password) {
           this.username = username;
           this.password = password;
       }

       authenticate(username, password) {
           if (username === this.username && password === this.password) {
               return true;
           } else {
               return false;
           }
       }
   }

   class Authenticator {
       constructor() {
           this.accounts = [];
       }

       addAccount(account) {
           this.accounts.push(account);
       }

       authenticate(username, password) {
           for (let account of this.accounts) {
               if (account.authenticate(username, password)) {
                   return true;
               }
           }
           return false;
       }
   }

   let authenticator = new Authenticator();
   let account = new UserAccount('user', 'password');
   authenticator.addAccount(account);
   console.log(authenticator.authenticate('user', 'password'));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123"";

    public List<String> findUsernamesByDomain(String domain) {
        List<String> usernames = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if domain contains malicious characters
            String query = ""SELECT username FROM users WHERE email LIKE '%@"" + domain + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                usernames.add(rs.getString(""username""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return usernames;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"function processUserData(data) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    let item = data[i];
    if (item.status === 'active') {
      let temp = {};
      temp.id = item.id;
      temp.name = item.name;
      temp.email = item.email;
      result.push(temp);
    }
  }
  return result;
}

function sendEmail(email, subject, body) {
  console.log(`Sending email to ${email} with subject: ${subject}`);
  console.log(`Body: ${body}`);
  return true;
}

function generateNotificationEmail(user) {
  return {
    subject: 'Welcome to our platform!',
    body: `Dear ${user.name}, thank you for registering.`
  };
}

function main() {
  const users = [
    { id: 1, name: 'Alice', email: 'alice@example.com', status: 'active' },
    { id: 2, name: 'Bob', email: 'bob@example.com', status: 'inactive' },
    { id: 3, name: 'Charlie', email: 'charlie@example.com', status: 'active' }
  ];

  const activeUsers = processUserData(users);
  for (let i = 0; i < activeUsers.length; i++) {
    const emailData = generateNotificationEmail(activeUsers[i]);
    sendEmail(activeUsers[i].email, emailData.subject, emailData.body);
  }
}

main();",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
   ",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json
import logging
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

class UserRepository:
    def __init__(self, db_connection):
        self.db = db_connection

    def fetch_users(self, offset: int, limit: int) -> List[Dict[str, Any]]:
        """"""Fetch a slice of users from the database.

        Args:
            offset: The starting index (0‑based).
            limit: Number of records to retrieve.
        """"""
        query = f""SELECT id, name, email FROM users ORDER BY id LIMIT {limit} OFFSET {offset}""
        cursor = self.db.cursor()
        cursor.execute(query)
        rows = cursor.fetchall()
        return [{""id"": r[0], ""name"": r[1], ""email"": r[2]} for r in rows]

class UserService:
    def __init__(self, repo: UserRepository):
        self.repo = repo
        self.page_size = 20

    def get_user_page(self, page_number: int) -> str:
        """"""Return a JSON string with users for the requested page.

        The first page is page_number=1.
        """"""
        # BUG: off‑by‑one error – offset should be (page_number - 1) * page_size
        offset = page_number * self.page_size
        users = self.repo.fetch_users(offset, self.page_size)
        return json.dumps({""page"": page_number, ""users"": users})

# Example usage (would be called from a web handler)
if __name__ == ""__main__"":
    import sqlite3
    conn = sqlite3.connect('example.db')
    service = UserService(UserRepository(conn))
    print(service.get_user_page(1))",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processData(const std::vector<std::string>& data) {
    for (const auto& item : data) {
        if (item.length() > 10) {
            std::cout << item << std::endl;
        }
    }
}

int main() {
    std::vector<std::string> inputs = {""example"", ""longerexample"", ""tiny"", ""anotherlongexample""};
    processData(inputs);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }
        return username.equals(""admin"") && password.equals(DEFAULT_PASSWORD);
    }
}",code_defect,hardcoded_secret,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public User findUserById(int userId) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
        return null;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}
",code_defect,SQL injection due to concatenated query and hardcoded credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

class DataProcessor {
public:
    DataProcessor() : max_retries(3) {}

    void process(const std::string& input) {
        for (int i = 0; i < max_retries; ++i) {
            std::string output = do_processing(input);
            if (output != ""ERROR"") {
                std::cout << ""Processed: "" << output << std::endl;
                break;
            }
            std::cout << ""Retrying..."" << std::endl;
        }
    }

private:
    std::string do_processing(const std::string& input) {
        if (input.empty()) {
            return ""ERROR"";
        }

        // Simulate processing logic
        std::string result;
        for (char c : input) {
            if (c == 'a') {
                result += 'z';
            } else {
                result += c;
            }
        }

        return result;
    }

    int max_retries;
};

int main() {
    DataProcessor dp;
    dp.process(""example"");
    dp.process(""a"");
    dp.process("""");
    return 0;
}",code_defect,incorrect conditional logic,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class UserRepository {
public:
    void addUser(User user) { users.push_back(user); }
    std::vector<User> getUsers() { return users; }

private:
    std::vector<User> users;
};

int main() {
    UserRepository repository;
    repository.addUser(User(""John"", 30));
    repository.addUser(User(""Alice"", 25));

    std::vector<User> users = repository.getUsers();
    for (User user : users) {
        std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
    }

    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
  }

  // Process a batch of orders and update inventory
  async processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      const product = await this.db.getProduct(order.productId);
      // BUG: inventory check uses > instead of >=, allowing negative stock
      if (product.stock > order.quantity) {
        await this.db.updateStock(product.id, product.stock - order.quantity);
        await this.db.recordSale(order);
      } else {
        console.warn(`Insufficient stock for product ${product.id}`);
      }
    }
  }
}

module.exports = OrderProcessor;",code_defect,off_by_one_inventory_check,,openai/gpt-oss-120b
Python,"import requests
import time

def fetch_user_data(user_ids):
    all_data = []
    for user_id in user_ids:
        url = f'https://api.example.com/users/{user_id}'
        response = requests.get(url)
        data = response.json()
        all_data.append(data)
        time.sleep(1)  # Rate limiting
    return all_data


def process_user_data(data):
    processed = []
    for item in data:
        if 'email' in item:
            processed.append(item['email'])
    return processed


def main():
    ids = [1, 2, 3, 4, 5]
    user_data = fetch_user_data(ids)
    emails = process_user_data(user_data)
    print(emails)

if __name__ == '__main__':
    main()",code_smell,inefficient_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
using namespace std;

class User {
public:
   string name;
   int age;
   User(string n, int a) : name(n), age(a) {}
};

class UserRepository {
public:
   vector<User> users;
   void addUser(User user) {
      users.push_back(user);
   }
   User getUser(int index) {
      if (index < users.size()) {
         return users[index];
      } else {
         User defaultUser("""", 0);
         return defaultUser;
      }
   }
};

int main() {
   UserRepository repo;
   repo.addUser(User(""John"", 30));
   User user = repo.getUser(0);
   cout << user.name << endl;
   return 0;
}
",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.cache = {}

    def load(self, key):
        # Load config file each time, ignoring cache
        with open(self.path, 'r') as f:
            data = json.load(f)
        return data.get(key)

    def get_cached(self, key):
        if key in self.cache:
            return self.cache[key]
        value = self.load(key)
        self.cache[key] = value
        return value

def process_user_input(user_input):
    # Vulnerable to command injection
    os.system(f""echo {user_input}"")
    return user_input.strip().lower()

def main():
    cfg = ConfigLoader('config.json')
    mode = cfg.get_cached('mode')
    if mode == 'debug':
        print('Debug mode enabled')
    user = input('Enter name: ')
    sanitized = process_user_input(user)
    print(f'Hello, {sanitized}!')

if __name__ == '__main__':
    main()",code_defect,command_injection,,openai/gpt-oss-120b
Java,"public class UserAuthentication {
    private String currentUser;

    public boolean login(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        if (username.equals(""admin"") && password.equals(""securepass123"")) {
            currentUser = username;
            return true;
        }

        return false;
    }

    public void performAction() {
        if (currentUser != null) {
            System.out.println(""User: "" + currentUser + "" is performing action."");
        }
    }

    public void logout() {
        currentUser = null;
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final String DEFAULT_PASSWORD = ""password123""; public void createUser(String username) { System.out.println(""Creating user: "" + username); User user = new User(username, DEFAULT_PASSWORD); saveUser(user); } private void saveUser(User user) { // Simulate saving user to database System.out.println(""Saving user: "" + user.getUsername()); } private class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } } }",code_defect,hardcoded_secrets,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if username contains malicious input
            String query = ""SELECT role FROM user_roles WHERE username = '"" + username + ""'"";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role""));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (Exception ignored) {}
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import os
import json
import requests
from datetime import datetime

API_KEY = 'hardcoded_secret_key_do_not_commit'

def fetch_weather_data(city):
    url = f'https://api.weatherapi.com/v1/current.json?key={API_KEY}&q={city}'
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return None

def process_weather_data(data):
    if not data:
        return None
    location = data['location']['name']
    temp_c = data['current']['temp_c']
    condition = data['current']['condition']['text']
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    return {
        'location': location,
        'temperature_celsius': temp_c,
        'condition': condition,
        'timestamp': timestamp
    }

def main():
    city = 'London'
    weather_data = fetch_weather_data(city)
    processed_data = process_weather_data(weather_data)

    if processed_data:
        print(json.dumps(processed_data, indent=2))
    else:
        print(f'Failed to retrieve weather data for {city}')

if __name__ == '__main__':
    main()",code_defect,hardcoded_credentials,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, account_number, balance=0.0):
        self.account_number = account_number
        self.balance = balance
        self.transactions = []

    def deposit(self, amount):
        self.balance += amount
        self.transactions.append(('deposit', amount))

    def withdraw(self, amount):
        if amount > self.balance:
            print('Insufficient funds')
        else:
            self.balance -= amount
            self.transactions.append(('withdrawal', amount))

    def get_balance(self):
        return self.balance

    def get_transactions(self):
        return self.transactions",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
    constructor(db) {
        this.db = db; // database client
    }

    // Process a batch of orders and update inventory
    async processOrders(orders) {
        for (let i = 0; i < orders.length; i++) {
            const order = orders[i];
            // Update order status
            await this.db.query('UPDATE orders SET status = ? WHERE id = ?', ['processed', order.id]);
            // Decrease inventory for each item
            for (const item of order.items) {
                await this.db.query('UPDATE inventory SET quantity = quantity - ? WHERE product_id = ?', [item.qty, item.productId]);
            }
        }
        return { success: true };
    }
}

// Usage example (simplified)
const dbClient = require('some-db-lib').createClient();
const processor = new OrderProcessor(dbClient);
processor.processOrders(req.body.orders);
",code_defect,missing_error_handling,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    const activeUsers = this.users.filter(user => user.isActive);
    const inactiveUsers = this.users.filter(user => !user.isActive);

    activeUsers.forEach(user => {
      this.createUserProfile(user);
      this.sendWelcomeEmail(user);
      this.logUserActivity(user);
    });

    inactiveUsers.forEach(user => {
      this.createUserProfile(user);
      this.logUserActivity(user);
    });

    return {
      activeUsers: activeUsers.length,
      inactiveUsers: inactiveUsers.length
    };
  }

  createUserProfile(user) {
    // Simulate profile creation
    user.profileCreated = true;
  }

  sendWelcomeEmail(user) {
    // Simulate sending an email
    console.log(`Welcome email sent to ${user.email}`);
  }

  logUserActivity(user) {
    // Simulate logging activity
    console.log(`User ${user.id} logged in.`);
  }
}",code_smell,duplicated_code,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
     constructor(username, password) {
       this.username = username;
       this.password = password;
     }

     authenticate(username, password) {
       if (username === this.username && password === this.password) {
         return true;
       }
       return false;
     }

     updatePassword(newPassword) {
       this.password = newPassword;
     }
   }

   function main() {
     let account = new UserAccount('user123', 'pass123');
     console.log(account.authenticate('user123', 'pass123'));  // prints: true
     account.updatePassword('newPass');
     console.log(account.authenticate('user123', 'newPass'));  // prints: true
   }

   main();
 ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
  }

  async process(orderId) {
    const order = await this.db.getOrder(orderId);
    if (!order) {
      throw new Error('Order not found');
    }
    // Calculate total price
    let total = 0;
    for (let i = 0; i <= order.items.length; i++) { // off‑by‑one error
      const item = order.items[i];
      total += item.price * item.quantity;
    }
    // Update order status
    await this.db.updateOrder(orderId, { status: 'processed', total });
    return total;
  }
}

module.exports = OrderProcessor;",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  getUserByEmail(email) {
    return this.users.find(user => user.email === email);
  }

  addUser(user) {
    this.users.push(user);
  }

  deleteUserByEmail(email) {
    const index = this.users.findIndex(user => user.email === email);
    if (index !== -1) {
      this.users.splice(index, 1);
    }
  }

  updateUserEmail(oldEmail, newEmail) {
    const user = this.users.find(user => user.email === oldEmail);
    if (user) {
      user.email = newEmail;
    }
  }
}

const userManager = new UserManager();
userManager.addUser({ name: 'Alice', email: 'alice@example.com' });
userManager.addUser({ name: 'Bob', email: 'bob@example.com' });
userManager.updateUserEmail('alice@example.com', 'alice_new@example.com');
userManager.deleteUserByEmail('bob@example.com');",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username == null || username.isEmpty()) {
            return false;
        }
        return password.equals(DEFAULT_PASSWORD);
    }
}",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class UserManager {
public:
    UserManager() {
        // Load users from a mock database
        users_ = {""alice"", ""bob"", ""carol""};
    }

    // Returns true if the username exists
    bool userExists(const std::string& username) const {
        return std::find(users_.begin(), users_.end(), username) != users_.end();
    }

    // Removes a user; returns false if user not found
    bool removeUser(const std::string& username) {
        auto it = std::find(users_.begin(), users_.end(), username);
        if (it != users_.end()) {
            users_.erase(it);
            return true;
        }
        return false;
    }

    // Adds a user; returns false if already exists
    bool addUser(const std::string& username) {
        if (userExists(username)) return false;
        users_.push_back(username);
        return true;
    }

    // Returns the number of users
    size_t count() const { return users_.size(); }

private:
    std::vector<std::string> users_;
};

int main() {
    UserManager manager;
    std::string input;
    while (true) {
        std::cout << ""Enter command (add/remove/count/exit): "";
        std::getline(std::cin, input);
        if (input == ""exit"") break;
        if (input == ""count"") {
            std::cout << ""User count: "" << manager.count() << std::endl;
        } else if (input.rfind(""add "", 0) == 0) {
            std::string name = input.substr(4);
            if (manager.addUser(name))
                std::cout << ""Added "" << name << std::endl;
            else
                std::cout << ""User exists"" << std::endl;
        } else if (input.rfind(""remove "", 0) == 0) {
            std::string name = input.substr(7);
            if (manager.removeUser(name))
                std::cout << ""Removed "" << name << std::endl;
            else
                std::cout << ""User not found"" << std::endl;
        }
    }
    return 0;
}",code_defect,off_by_one_error_in_substr,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  updateEmail(oldEmail, newEmail) {
    const user = this.getUserByEmail(oldEmail);
    if (user) {
      user.email = newEmail;
    }
  }

  getAllUsers() {
    return this.users;
  }
}

const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com' },
  { id: 2, name: 'Bob', email: 'bob@example.com' }
];

const manager = new UserManager(users);
manager.updateEmail('alice@example.com', 'alice_new@example.com');",code_smell,mutable_data,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>
class Employee {
public:
    std::string name;
    int salary;
    Employee(std::string n, int s) : name(n), salary(s) {}
};
class Company {
public:
    std::vector<Employee> employees;
    void addEmployee(Employee e) {
        employees.push_back(e);
    }
    int getTotalSalary() {
        int total = 0;
        for (const auto& e : employees) {
            total += e.salary;
        }
        return total;
    }
};
int main() {
    Company c;
    c.addEmployee(Employee(""John"", 50000));
    c.addEmployee(Employee(""Alice"", 60000));
    std::cout << c.getTotalSalary() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user and their orders, but loads all orders for every user
    async getUserProfile(userId) {
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) throw new Error('User not found');
        // Inefficient: fetches entire orders table then filters in JS
        const allOrders = await this.db.query('SELECT * FROM orders');
        const userOrders = allOrders.filter(o => o.user_id === userId);
        return { ...user[0], orders: userOrders };
    }

    // Updates user email without validation
    async updateEmail(userId, newEmail) {
        await this.db.execute(`UPDATE users SET email = '${newEmail}' WHERE id = ${userId}`);
    }
}

// Usage example (ignored in production)
(async () => {
    const db = {
        query: async (sql, params) => {
            // mock implementation
            return [];
        },
        execute: async (sql) => {
            // mock implementation
        }
    };
    const service = new UserService(db);
    try {
        const profile = await service.getUserProfile(42);
        console.log(profile);
    } catch (e) {
        console.error(e);
    }
})();",code_smell,inefficient_data_fetch_and_sql_injection_risk,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order, String customerName, String customerEmail, String paymentMethod, String shippingAddress) {
        if (order == null || order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                continue;
            }
            System.out.println(""Processing item: "" + item.getName() + "" x"" + item.getQuantity());
            // TODO: Add inventory check
            // TODO: Add payment processing
        }

        if (paymentMethod.equals(""CREDIT_CARD"")) {
            // Placeholder for credit card processing
            System.out.println(""Payment processed via Credit Card for "" + customerName);
        } else if (paymentMethod.equals(""PAYPAL"")) {
            System.out.println(""Payment processed via PayPal for "" + customerName);
        } else {
            System.out.println(""Unsupported payment method: "" + paymentMethod);
        }

        System.out.println(""Order processed successfully for "" + customerEmail);
        // TODO: Add order confirmation email
        // TODO: Add shipping logistics handling
    }

    // Unused method
    private void logError(String message) {
        System.out.println(""ERROR: "" + message);
    }
}",code_smell,long_method,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, name, email):
        if user_id not in self.users:
            self.users[user_id] = {'name': name, 'email': email}
            return True
        return False

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, name=None, email=None):
        if user_id in self.users:
            if name:
                self.users[user_id]['name'] = name
            if email:
                self.users[user_id]['email'] = email
            return True
        return False

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
            return True
        return False

    def get_all_users(self):
        return list(self.users.values())

manager = UserManager()
manager.add_user(1, 'John Doe', 'john@example.com')
print(manager.get_user(1))
manager.update_user(1, email='johndoe@example.com')
print(manager.get_user(1))
manager.delete_user(1)
print(manager.get_all_users())
",code_smell,god_class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""appuser"";
    private static final String PASS = ""apppass"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import os
import json
import requests

API_KEY = 'hardcoded_secret_key'

def get_weather_data(city, unit='metric'):
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units={unit}'
    response = requests.get(url)
    data = response.json()
    return data

def display_weather_info(data):
    if 'main' in data and 'weather' in data:
        temp = data['main']['temp']
        description = data['weather'][0]['description']
        print(f""Current temperature: {temp}°C\nDescription: {description}"")
    else:
        print('Invalid data structure received.')

if __name__ == '__main__':
    city_name = input('Enter city name: ')
    weather_data = get_weather_data(city_name)
    display_weather_info(weather_data)
    # print(weather_data)  # Debugging code left in production",code_defect,hardcoded_secrets,,qwen/qwen3-32b
Java,public class UserService { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUserById(int id) { for (User user : users) { if (user.getId() == id) { return user; } } return null; } public void removeUserById(int id) { for (int i = 0; i < users.size(); i++) { if (users.get(i).getId() == id) { users.remove(i); break; } } } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    UserManager() = default;
    void addUser(const std::string& username) {
        users.push_back(username);
    }
    // Returns true if the user exists, false otherwise
    bool hasUser(const std::string& username) const {
        return std::find(users.begin(), users.end(), username) != users.end();
    }
    // Returns the username at the given index
    std::string getUserAt(int index) const {
        // BUG: off‑by‑one error – should be index < users.size()
        if (index <= users.size()) {
            return users[index];
        }
        return """";
    }
private:
    std::vector<std::string> users;
};

int main() {
    UserManager mgr;
    mgr.addUser(""alice"");
    mgr.addUser(""bob"");
    mgr.addUser(""carol"");
    // This will incorrectly access out‑of‑bounds when index == size()
    std::cout << ""User at 3: "" << mgr.getUserAt(3) << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, roles) {
    this.users = users;
    this.roles = roles;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user.role && this.roles.includes(user.role)) {
        user.status = 'active';
      } else {
        user.status = 'inactive';
      }
    });
  }

  getActiveUsers() {
    return this.users.filter(user => user.status === 'active');
  }

  getInactiveUsers() {
    return this.users.filter(user => user.status === 'inactive');
  }
}

// Usage example:
const users = [
  { id: 1, role: 'admin' },
  { id: 2, role: 'user' },
  { id: 3 }
];

const roles = ['admin', 'moderator'];
const processor = new UserProcessor(users, roles);
processor.processUsers();
console.log('Active Users:', processor.getActiveUsers());",code_smell,mutating_parameters,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUsers() { let users = await this.userDao.getAllUsers(); for (let i = 0; i < users.length; i++) { let user = users[i]; user.fullName = user.firstName + ' ' + user.lastName; } return users; } async getUserById(id) { return await this.userDao.getUserById(id); } async saveUser(user) { if (user.id) { return await this.userDao.updateUser(user); } else { return await this.userDao.createUser(user); } } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class UserService {
  constructor(db) {
    this.db = db;
  }

  // Returns a page of users, 1‑based page index
  async getUsersPage(page, pageSize) {
    const offset = (page - 1) * pageSize;
    const limit = pageSize;
    // Off‑by‑one: should use offset, but uses page instead
    const rows = await this.db.query('SELECT * FROM users LIMIT ?, ?', [page, limit]);
    return rows;
  }

  // Updates user email without validation
  async updateEmail(userId, newEmail) {
    await this.db.query('UPDATE users SET email = ? WHERE id = ?', [newEmail, userId]);
    // No error handling; assumes query succeeds
  }
}

module.exports = UserService;",code_defect,off_by_one_error_in_pagination,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  getUserById(id) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        return this.users[i];
      }
    }
    return null;
  }

  deleteUserById(id) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        this.users.splice(i, 1);
        return;
      }
    }
  }

  getAllUsers() {
    return this.users;
  }
}

// Example usage
const manager = new UserManager();
manager.addUser({ id: 1, name: 'Alice' });
manager.addUser({ id: 2, name: 'Bob' });
manager.addUser({ id: 3, name: 'Charlie' });",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, name, email):
        if user_id in self.users:
            return False
        self.users[user_id] = {'name': name, 'email': email}
        return True

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, name=None, email=None):
        if user_id not in self.users:
            return False
        if name:
            self.users[user_id]['name'] = name
        if email:
            self.users[user_id]['email'] = email
        return True

    def delete_user(self, user_id):
        if user_id not in self.users:
            return False
        del self.users[user_id]
        return True

    def get_all_users(self):
        return list(self.users.values())

user_manager = UserManager()
user_manager.add_user(1, 'John Doe', 'john@example.com')
print(user_manager.get_user(1))
user_manager.update_user(1, email='john2@example.com')
print(user_manager.get_all_users())
   ",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file for each call
    async getUserProfile(userId) {
        // Fetch user from DB
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            throw new Error('User not found');
        }
        // Perform some business logic
        const profile = {
            id: user.id,
            name: user.name,
            email: user.email,
            // compute age from birthdate each time
            age: new Date().getFullYear() - new Date(user.birthdate).getFullYear()
        };
        // Write a log file (inefficient: opens a new file for every request)
        const logMessage = `User ${userId} profile accessed at ${new Date().toISOString()}\n`;
        fs.appendFileSync('/var/log/user_service.log', logMessage);
        return profile;
    }

    // Updates user email without validation
    async updateEmail(userId, newEmail) {
        await this.db.execute('UPDATE users SET email = ? WHERE id = ?', [newEmail, userId]);
        // No verification that email format is correct
        return true;
    }
}

module.exports = UserService;",code_smell,inefficient_io_and_missing_input_validation,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      if (user.isActive) {
        this.sendEmail(user.email);
        this.logActivity(user.id);
        this.updateDatabase(user);
      }
    }
  }

  sendEmail(email) {
    console.log(`Email sent to ${email}`);
  }

  logActivity(userId) {
    console.log(`User ${userId} is active`);
  }

  updateDatabase(user) {
    console.log(`User ${user.id} updated in DB`);
  }
}

// Usage
const users = [
  { id: 1, email: 'user1@example.com', isActive: true },
  { id: 2, email: 'user2@example.com', isActive: false },
  { id: 3, email: 'user3@example.com', isActive: true }
];

const processor = new UserProcessor(users);
processor.processUsers();",code_smell,large_class,,qwen/qwen3-32b
Java,public class UserService { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUser(int index) { return users.get(index); } public void removeUser(int index) { users.remove(index); } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class BatchProcessor {
  constructor(batchSize) {
    this.batchSize = batchSize;
    this.queue = [];
  }

  addTask(task) {
    this.queue.push(task);
    if (this.queue.length >= this.batchSize) {
      this.flush();
    }
  }

  flush() {
    const tasksToRun = this.queue.slice(0, this.batchSize);
    // Process tasks synchronously (simplified)
    for (let i = 0; i <= tasksToRun.length; i++) {
      try {
        tasksToRun[i]();
      } catch (e) {
        console.error('Task failed', e);
      }
    }
    // Remove processed tasks
    this.queue = this.queue.slice(this.batchSize);
  }
}

// Example usage
const processor = new BatchProcessor(3);
processor.addTask(() => console.log('Task 1'));
processor.addTask(() => console.log('Task 2'));
processor.addTask(() => console.log('Task 3'));
processor.addTask(() => console.log('Task 4'));
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor() {
        this.orders = new ArrayList<>();
    }

    public void addOrder(Order order) {
        if (order != null) {
            orders.add(order);
        }
    }

    public double calculateTotalRevenue() {
        double total = 0;
        for (Order order : orders) {
            if (order.getStatus().equals(""PAID"")) {
                total += order.getAmount();
            }
        }
        return total;
    }

    public void applyDiscount(double discountRate) {
        for (Order order : orders) {
            if (order.getStatus().equals(""PAID"")) {
                order.setAmount(order.getAmount() * (1 - discountRate));
            }
        }
    }

    public List<Order> getOrders() {
        return orders;
    }
}",code_smell,feature envy,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments""; private static final String DB_USER = ""payment_user""; private static final String DB_PASSWORD = ""password123""; public void processPayment(String paymentId, double amount) { try { Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD); Statement stmt = conn.createStatement(); stmt.executeUpdate(""UPDATE payments SET status='processed' WHERE id='"" + paymentId + ""'""); } catch (SQLException e) { System.out.println(""Error processing payment: "" + e.getMessage()); } } }",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize || 10;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn should return a promise resolving to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off‑by‑one error – should use (pageNumber - 1)
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    const next = this.currentPage + 1;
    const page = this.getPage(next);
    if (page.length) {
      this.currentPage = next;
    }
    return page;
  }
}

// Example usage
const paginator = new Paginator(5);
await paginator.loadItems(() => Promise.resolve([1,2,3,4,5,6,7,8,9,10]));
console.log('First page:', paginator.nextPage()); // Expected [1,2,3,4,5] but gets [] due to bug",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

struct User {
    std::string name;
    std::string email;
    int age;
};

std::vector<User> parseUsers(const std::string& input) {
    std::vector<User> users;
    std::string line;
    std::string delimiter = "","";
    
    size_t pos = 0;
    while ((pos = input.find(delimiter)) != std::string::npos) {
        line = input.substr(0, pos);
        users.push_back(User{});
        users.back().name = line;
        input.erase(0, pos + delimiter.length());
    }
    
    users.back().email = input;
    return users;
}

int main() {
    std::string user_data = ""Alice,alice@example.com,30,Bob,bob@example.com,25"";
    auto users = parseUsers(user_data);
    
    for (const auto& user : users) {
        std::cout << ""Name: "" << user.name << ""\n"";
        std::cout << ""Email: "" << user.email << ""\n\n"";
    }
    
    return 0;
}",code_defect,incorrect_parsing_logic,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor() {
            this.users = [];
         }

         async addUser(username, password) {
            const user = { username, password };
            this.users.push(user);
            return user;
         }

         async getUser(username) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].username === username) {
                  return this.users[i];
               }
            }
            return null;
         }
      }

      const userService = new UserService();
      userService.addUser('john', 'password123').then(user => console.log(user));
   ",code_smell,inefficient_data_structure,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<User> getActiveUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, username, email FROM users WHERE status = 'active'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            User u = new User();
            u.setId(rs.getInt(""id""));
            u.setUsername(rs.getString(""username""));
            u.setEmail(rs.getString(""email""));
            users.add(u);
        }
        // Missing rs.close(), stmt.close(), conn.close() leads to resource leak
        return users;
    }

    public void deactivateUser(int userId) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""UPDATE users SET status = 'inactive' WHERE id = "" + userId; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        // Resources not closed
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection and resource leak,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    for (let j = 0; j < data[i].length; j++) {
      if (data[i][j] % 2 === 0) {
        result.push(data[i][j] * 2);
      }
    }
  }
  return result;
}

function processNestedData(data) {
  let processed = [];
  for (let i = 0; i < data.length; i++) {
    for (let j = 0; j < data[i].length; j++) {
      for (let k = 0; k < data[i][j].length; k++) {
        if (data[i][j][k] % 2 === 0) {
          processed.push(data[i][j][k] * 2);
        }
      }
    }
  }
  return processed;
}",code_smell,duplicate_code,,qwen/qwen3-32b
Java,"public class PaymentProcessor {
    public void processPayment(String paymentMethod, double amount) {
        if (paymentMethod.equals(""credit_card"")) {
            // Process credit card payment
            System.out.println(""Processing credit card payment of $"" + amount);
        } else if (paymentMethod.equals(""paypal"")) {
            // Process paypal payment
            System.out.println(""Processing paypal payment of $"" + amount);
        } else if (paymentMethod.equals(""bank_transfer"")) {
            // Process bank transfer payment
            System.out.println(""Processing bank transfer payment of $"" + amount);
        }
    }

    public static void main(String[] args) {
        PaymentProcessor paymentProcessor = new PaymentProcessor();
        paymentProcessor.processPayment(""credit_card"", 100.0);
    }
}",code_smell,long_method,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getPendingPayments() throws SQLException {
        List<String> pending = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT user_id FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            pending.add(rs.getString(""user_id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return pending;
    }

    public boolean processPayment(String userId, double amount) {
        // Missing validation for amount <= 0
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""UPDATE payments SET status='COMPLETED' WHERE user_id='"" + userId + ""'""; // SQL injection risk
            PreparedStatement stmt = conn.prepareStatement(sql);
            int rows = stmt.executeUpdate();
            stmt.close();
            conn.close();
            return rows > 0;
        } catch (SQLException e) {
            // Swallowing exception, no logging
            return false;
        }
    }

    public void batchProcess(List<String> userIds) {
        for (String userId : userIds) {
            // Calls processPayment with a fixed amount, ignoring actual owed amount
            processPayment(userId, 100.0);
        }
    }
}
",code_defect,SQL injection and missing input validation,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input) {
    std::vector<int> numbers;
    std::string temp;

    for (char c : input) {
        if (c >= '0' && c <= '9') {
            temp += c;
        } else {
            if (!temp.empty()) {
                numbers.push_back(std::stoi(temp));
                temp.clear();
            }
        }
    }

    if (!temp.empty()) {
        numbers.push_back(std::stoi(temp));
    }

    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0) {
            std::cout << numbers[i] << "" is even.\n"";
        } else {
            std::cout << numbers[i] << "" is odd.\n"";
        }
    }
}

int main() {
    std::string input;
    std::cout << ""Enter a sequence of numbers separated by non-numeric characters: "";
    std::getline(std::cin, input);
    processUserInput(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class PaymentProcessor { constructor(merchantId) { this.merchantId = merchantId; } processPayment(amount, currency) { let taxRate = 0.08; let paymentAmount = amount * (1 + taxRate); let payment = { amount: paymentAmount, currency: currency }; let paymentGateway = new PaymentGateway(); return paymentGateway.chargeCard(payment); } } class PaymentGateway { chargeCard(payment) { let url = 'https://example.com/payment'; let headers = { 'Content-Type': 'application/json' }; let body = JSON.stringify(payment); return fetch(url, { method: 'POST', headers: headers, body: body }); } }",code_smell,Tight Coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>

class UserManager {
public:
    void addUser(const std::string& name, int age) {
        std::lock_guard<std::mutex> lock(mutex_);
        users_.push_back({name, age});
    }

    // Returns the average age of all users.
    double averageAge() const {
        if (users_.empty()) return 0.0;
        int total = 0;
        for (size_t i = 0; i <= users_.size(); ++i) { // off‑by‑one error
            total += users_[i].age;
        }
        return static_cast<double>(total) / users_.size();
    }

private:
    struct User { std::string name; int age; };
    std::vector<User> users_;
    mutable std::mutex mutex_;
};

int main() {
    UserManager um;
    um.addUser(""Alice"", 30);
    um.addUser(""Bob"", 25);
    std::cout << ""Average age: "" << um.averageAge() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

struct User {
    std::string name;
    int age;
    std::string email;
};

bool validateEmail(const std::string& email) {
    return email.find('@') != std::string::npos;
}

void registerUser(const std::vector<User>& users, const User& newUser) {
    for (const auto& user : users) {
        if (user.email == newUser.email) {
            std::cout << ""Email already exists!"" << std::endl;
            return;
        }
    }

    if (validateEmail(newUser.email) && newUser.age >= 18) {
        std::cout << ""User registered successfully."" << std::endl;
    } else {
        std::cout << ""Invalid registration data."" << std::endl;
    }
}

int main() {
    std::vector<User> existingUsers = { {""Alice"", 25, ""alice@example.com""}, {""Bob"", 17, ""bob@example.com""} };
    User newUser = {""Charlie"", 20, ""charlie@example.com""};

    registerUser(existingUsers, newUser);

    return 0;
}",code_smell,poor_error_handling,,qwen/qwen3-32b
Java,"public class UserDAO { private Connection conn; public UserDAO() { try { Class.forName(""com.mysql.cj.jdbc.Driver""); conn = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""root"", ""password""); } catch (Exception e) { System.out.println(e.getMessage()); } } public User getUser(int id) { try { Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""SELECT * FROM users WHERE id = "" + id); if (rs.next()) { return new User(rs.getInt(""id""), rs.getString(""name""), rs.getString(""email"")); } } catch (Exception e) { System.out.println(e.getMessage()); } return null; } }",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a log file
    async getUserProfile(userId) {
        const user = await this.db.query('SELECT * FROM users WHERE id = ' + userId);
        // Log the request (potentially blocking I/O)
        fs.writeFileSync('/var/log/user_requests.log', `User ${userId} requested at ${new Date().toISOString()}\n`, {flag: 'a'});
        return user;
    }
}

module.exports = UserService;",code_defect,SQL_injection_via_string_concatenation,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  process(order) {
    if (!order || !order.items || order.items.length === 0) {
      return;
    }

    let totalPrice = 0;
    for (let i = 0; i < order.items.length; i++) {
      totalPrice += order.items[i].price * order.items[i].quantity;
    }

    if (order.discount) {
      totalPrice -= order.discount;
    }

    console.log(`Total price after discount: ${totalPrice}`);
    this.applyTax(totalPrice);
  }

  applyTax(price) {
    const taxRate = 0.1;
    const finalPrice = price + (price * taxRate);
    console.log(`Final price with tax: ${finalPrice}`);
  }

  validate(order) {
    if (!order || !order.items) {
      console.log('Order is invalid');
      return false;
    }

    for (let i = 0; i < order.items.length; i++) {
      if (order.items[i].price <= 0) {
        console.log(`Invalid item price at index ${i}`);
        return false;
      }
    }

    return true;
  }
}

// Usage
const order = {
  items: [
    { price: 10, quantity: 2 },
    { price: 5, quantity: 3 }
  ],
  discount: 5
};

const processor = new OrderProcessor();
processor.process(order);",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private String passwordHash; public UserAuthenticator(String passwordHash) { this.passwordHash = passwordHash; } public boolean authenticate(String inputPassword) { String hashedInput = inputPassword; for (int i = 0; i < 10000; i++) { hashedInput = hashedInput + ""salt""; } return hashedInput.equals(passwordHash); } }",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import os
import json

def process_user_data(user_data):
    processed_data = []
    for user in user_data:
        if 'name' in user and 'email' in user:
            user['name'] = user['name'].strip().title()
            user['email'] = user['email'].strip().lower()
            processed_data.append(user)
        else:
            print(f""Skipping incomplete user data: {user}"")
    return processed_data

def save_to_file(data, filename='output.json'):
    with open(filename, 'w') as f:
        json.dump(data, f, indent=4)

if __name__ == '__main__':
    raw_data = [
        {'name': ' alice ', 'email': 'ALICE@example.com', 'age': 30},
        {'name': 'bob', 'email': 'bob@example.com'},
        {'email': 'charlie@example.com'},
        {'name': 'david'}
    ]
    processed_data = process_user_data(raw_data)
    save_to_file(processed_data)",code_smell,incomplete_error_handling,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class UserService {
public:
    vector<string> getUsers() {
        vector<string> users;
        users.push_back(""John"");
        users.push_back(""Alice"");
        users.push_back(""Bob"");
        return users;
    }
};

class UserRepository {
public:
    vector<string> fetchUsersFromDB() {
        // Assume this function fetches users from a database
        vector<string> users;
        users.push_back(""John"");
        users.push_back(""Alice"");
        users.push_back(""Bob"");
        return users;
    }
};

int main() {
    UserService userService;
    UserRepository userRepository;
    vector<string> users = userService.getUsers();
    // The following line is not used anywhere
    vector<string> dbUsers = userRepository.fetchUsersFromDB();
    for (string user : users) {
        cout << user << endl;
    }
    return 0;
}",code_smell,unused_variable,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor{constructor(db){this.db=db;}processOrders(orders){for(let i=0;i<=orders.length;i++){let order=orders[i];if(!order||!order.id)return;this.db.save(order);}}}const db={save(o){console.log('saved',o.id);}};const processor=new OrderProcessor(db);processor.processOrders([{id:1},{id:2},{id:3}]);",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processUserData(users) {
  const results = [];
  for (let i = 0; i < users.length; i++) {
    let user = users[i];
    if (user.isActive) {
      user.role = user.role || 'guest';
      user.metadata = user.metadata || {};
      user.metadata.lastLogin = new Date();
      results.push(user);
    }
  }
  return results;
}

function updateDatabase(records) {
  for (let i = 0; i < records.length; i++) {
    let record = records[i];
    // Simulate database update
    console.log(`Updating record for ${record.name}`);
    if (record.metadata && record.metadata.lastLogin) {
      console.log(`Last login: ${record.metadata.lastLogin}`);
    }
  }
}

function handleUserRequests(data) {
  const processedUsers = processUserData(data);
  updateDatabase(processedUsers);
  console.log('All users processed and database updated.');//debug
}",code_smell,long_function,,qwen/qwen3-32b
Java,"public class UserService { private Map<String, String> users = new HashMap<>(); public synchronized void addUser(String username, String password) { if (users.containsKey(username)) { return; } users.put(username, password); } public synchronized boolean authenticate(String username, String password) { return users.containsKey(username) && users.get(username).equals(password); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    // Returns the nth user (1-based index) or empty string if out of range
    std::string getUserByRank(int rank) const {
        // Bug: off-by-one error, should be rank-1
        if (rank <= 0 || rank > static_cast<int>(users.size())) {
            return """";
        }
        return users[rank];
    }

    // Removes duplicate usernames (case-sensitive)
    void deduplicate() {
        std::sort(users.begin(), users.end());
        auto it = std::unique(users.begin(), users.end());
        users.erase(it, users.end());
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.addUser(""charlie"");
    um.addUser(""bob"");
    um.deduplicate();
    std::cout << ""Second user: "" << um.getUserByRank(2) << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  if (input === null || input === undefined) {
    return 'Invalid input';
  }

  let output = '';
  for (let i = 0; i < input.length; i++) {
    if (input[i] === 'a') {
      output += '1';
    } else if (input[i] === 'b') {
      output += '2';
    } else if (input[i] === 'c') {
      output += '3';
    } else {
      output += input[i];
    }
  }
  return output;
}

function processUsers(users) {
  for (let i = 0; i < users.length; i++) {
    const processed = processUserInput(users[i].name);
    console.log(`Processed name: ${processed}`);
  }
}

const userArray = [{ name: 'abc' }, { name: 'def' }, { name: 'ghi' }];
processUsers(userArray);",code_smell,long_function,,qwen/qwen3-32b
Java,public class UserManager { private List<User> users = new ArrayList<>(); public void addUser(User user) { for (User existingUser : users) { if (existingUser.getId() == user.getId()) { users.remove(existingUser); break; } } users.add(user); } public User getUser(int id) { for (User user : users) { if (user.getId() == id) { return user; } } return null; } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user profile and writes a log file
  async getUserProfile(userId) {
    const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
    if (!user) {
      throw new Error('User not found');
    }
    // Log the access (bug: race condition with async file write)
    fs.appendFile('access.log', `User ${userId} accessed at ${new Date().toISOString()}\n`, (err) => {
      if (err) console.error('Failed to write log');
    });
    return user;
  }

  // Updates user email without proper validation (defect: insecure input handling)
  async updateEmail(userId, newEmail) {
    const result = await this.db.execute(`UPDATE users SET email = '${newEmail}' WHERE id = ${userId}`);
    return result.affectedRows;
  }
}

module.exports = UserService;",code_defect,SQL_injection,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users) {
    this.users = users;
  }

  validateUser(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username && this.users[i].password === password) {
        return true;
      }
    }
    return false;
  }

  authenticateUser(username, password) {
    if (this.validateUser(username, password)) {
      console.log('Authentication successful');
      return true;
    } else {
      console.log('Authentication failed');
      return false;
    }
  }
}

const users = [
  { username: 'admin', password: 'admin123' },
  { username: 'user', password: 'pass123' }
];

const auth = new UserAuth(users);
auth.authenticateUser('admin', 'admin123');",code_smell,poor_error_handling,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>
   
   class Student {
   public:
       std::string name;
       int grade;
   
       Student(std::string n, int g) : name(n), grade(g) {}
   
       bool operator<(const Student& other) const {
           return grade < other.grade;
       }
   };
   
   void sortStudents(std::vector<Student>& students) {
       std::sort(students.begin(), students.end());
   }
   
   int main() {
       std::vector<Student> students = {Student(""John"", 85), Student(""Alice"", 90), Student(""Bob"", 78)};
       sortStudents(students);
       for (const auto& student : students) {
           std::cout << student.name << "" "" << student.grade << std::endl;
       }
       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.account;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection,,openai/gpt-oss-120b
Python,"import os
import requests

API_KEY = '1234567890abcdefg'


def fetch_weather_data(city):
    url = f'http://api.weatherapi.com/v1/current.json?key={API_KEY}&q={city}'
    response = requests.get(url)
    data = response.json()

    if response.status_code == 200:
        return {
            'temperature': data['current']['temp_c'],
            'condition': data['current']['condition']['text'],
            'humidity': data['current']['humidity']
        }
    else:
        return None


def log_weather_info(city, weather_info):
    with open(f'{city}_weather.log', 'w') as log_file:
        log_file.write(f""Weather in {city}:
"")
        log_file.write(f""Temperature: {weather_info['temperature']}°C\n"")
        log_file.write(f""Condition: {weather_info['condition']}\n"")
        log_file.write(f""Humidity: {weather_info['humidity']}%\n"")


def main():
    city = input('Enter city name: ')
    weather_data = fetch_weather_data(city)
    if weather_data:
        log_weather_info(city, weather_data)
        print('Weather data logged successfully.')
    else:
        print('Failed to fetch weather data.')

if __name__ == '__main__':
    main()",code_defect,hardcoded_secret,,qwen/qwen3-32b
Java,"public class UserDAO {
    private Connection connection;
    public UserDAO() {
        try {
            Class.forName(""com.mysql.cj.jdbc.Driver"");
            connection = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""root"", ""password"");
        } catch (Exception e) {}
    }
    public User getUser(int id) {
        try {
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(""SELECT * FROM users WHERE id = "" + id);
            if (resultSet.next()) {
                return new User(resultSet.getInt(""id""), resultSet.getString(""name""), resultSet.getString(""email""));
            }
        } catch (Exception e) {}
        return null;
    }
}",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # NOTE: using eval on file content – insecure
        with open(self.config_path, 'r') as f:
            data = f.read()
            self.settings = eval(data)  # dangerous if file is tampered

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)
        self.output_dir = self.config.get('output_dir', '/tmp')

    def process(self, records):
        # Off‑by‑one error: should process up to len(records)
        for i in range(self.batch_size):
            record = records[i]
            self._handle(record)
        self._finalize()

    def _handle(self, record):
        # Simulate processing
        result = {k: v*2 for k, v in record.items()}
        self._save(result)

    def _save(self, result):
        filename = os.path.join(self.output_dir, f""result_{result['id']}.json"")
        with open(filename, 'w') as f:
            json.dump(result, f)

    def _finalize(self):
        print('Processing complete')

if __name__ == '__main__':
    loader = ConfigLoader('config.cfg')
    processor = DataProcessor(loader)
    sample_records = [{'id': i, 'value': i*10} for i in range(50)]
    processor.process(sample_records)",code_defect,off_by_one_and_insecure_eval,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(String productId, String customerEmail, int quantity) {
        if (productId == null || productId.trim().isEmpty()) {
            productId = ""default_product"";
        }

        if (customerEmail == null || !customerEmail.contains(""@"")) {
            customerEmail = ""noemail@example.com"";
        }

        if (quantity <= 0) {
            quantity = 1;
        }

        String orderSummary = String.format(""Product ID: %s, Customer Email: %s, Quantity: %d"", productId, customerEmail, quantity);
        System.out.println(orderSummary);

        // Additional logic for processing order
        // ...
    }
}",code_smell,magic_string,,qwen/qwen3-32b
JavaScript,"class PaymentGateway { constructor(apiKey) { this.apiKey = apiKey; } processPayment(amount, currency) { const apiEndpoint = 'https://example.com/api/'; const headers = { 'Authorization': 'Bearer ' + this.apiKey }; const paymentData = { amount: amount, currency: currency }; return fetch(apiEndpoint + 'payment', { method: 'POST', headers: headers, body: JSON.stringify(paymentData) }); } }",code_smell,Tight Coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit; // insecure concatenation
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        // Missing close of ResultSet, Statement, and Connection
        return payments;
    }

    public boolean processPayment(String paymentId, double amount) {
        // Simulated processing logic
        if (amount <= 0) {
            throw new IllegalArgumentException(""Amount must be positive"");
        }
        // Bug: using string comparison with == instead of equals
        if (paymentId == null || paymentId == """") {
            return false;
        }
        // Assume payment is processed successfully
        return true;
    }
}
",code_defect,logic_error_and_resource_leak,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                continue;
            }
            double itemPrice = item.getPrice();
            int quantity = item.getQuantity();
            double discount = 0;

            if (quantity >= 100) {
                discount = 0.1;
            } else if (quantity >= 50) {
                discount = 0.05;
            } else if (quantity >= 20) {
                discount = 0.02;
            }

            double total = itemPrice * quantity * (1 - discount);
            item.setTotalPrice(total);
        }

        double orderTotal = order.getItems().stream()
                .mapToDouble(OrderItem::getTotalPrice)
                .sum();
        order.setTotal(orderTotal);
    }
}",code_smell,long_function,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password
        else:
            print('User already exists')

    def authenticate(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def get_all_users(self):
        return list(self.users.keys())

    def update_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
        else:
            print('User does not exist')

# usage
user_db = UserDatabase('users.db')
user_db.add_user('admin', 'password123')
print(user_db.authenticate('admin', 'password123'))  # prints: True
print(user_db.get_all_users())  # prints: ['admin']
user_db.update_password('admin', 'new_password')
print(user_db.authenticate('admin', 'new_password'))  # prints: True",code_smell,Tight Coupling,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db; // expects a database client with async query method
  }

  // Processes an array of orders and returns total revenue
  async processOrders(orders) {
    let total = 0;
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      // fetch product price (assume async DB call)
      const priceRow = await this.db.query('SELECT price FROM products WHERE id = ?', [order.productId]);
      const price = priceRow[0].price;
      // BUG: quantity is a string from external source, implicit conversion may cause concatenation
      total += price * order.quantity;
    }
    // BUG: returns string when total is 0 because of implicit type coercion earlier
    return total;
  }
}

// Example usage (not part of production code)
(async () => {
  const fakeDb = {
    async query(sql, params) {
      // mock returning price 10 for any product
      return [{ price: 10 }];
    }
  };
  const processor = new OrderProcessor(fakeDb);
  const orders = [
    { productId: 1, quantity: '2' }, // quantity as string
    { productId: 2, quantity: 3 }
  ];
  const revenue = await processor.processOrders(orders);
  console.log('Total revenue:', revenue);
})();",code_defect,type_coercion_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
    this.pendingOrders = [];
  }

  // Adds an order to the processing queue
  enqueue(order) {
    this.pendingOrders.push(order);
  }

  // Processes all pending orders sequentially
  async processAll() {
    while (this.pendingOrders.length > 0) {
      const order = this.pendingOrders.shift();
      try {
        await this._processOrder(order);
      } catch (e) {
        console.error('Failed to process order', order.id, e);
      }
    }
  }

  // Private method to handle a single order
  async _processOrder(order) {
    // Validate order fields
    if (!order.id || !order.amount) {
      throw new Error('Invalid order');
    }
    // Insert order into DB without parameterization – SQL injection risk
    const query = `INSERT INTO orders (id, amount) VALUES ('${order.id}', ${order.amount})`;
    await this.db.execute(query);
    // Simulate external payment call (no timeout handling)
    const paymentResult = await this._chargePayment(order);
    if (!paymentResult.success) {
      throw new Error('Payment failed');
    }
    console.log('Order processed:', order.id);
  }

  // Simulated payment gateway call
  async _chargePayment(order) {
    // Missing error handling for network failures
    const response = await fetch(`https://payment.example.com/charge?amount=${order.amount}`);
    return response.json();
  }
}

module.exports = OrderProcessor;",code_defect,SQL_injection_and_missing_error_handling,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 0) {
            std::cout << data[i] << "" is even\n"";
        } else {
            std::cout << data[i] << "" is odd\n"";
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5};
    processData(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, email):
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()

    def find_user(self, username):
        cursor = self.conn.cursor()
        # Vulnerable to SQL injection because username is interpolated directly
        query = f""SELECT id, username, email FROM users WHERE username = '{username}'""
        cursor.execute(query)
        return cursor.fetchone()

    def close(self):
        self.conn.close()

# Example usage
repo = UserRepository('example.db')
repo.add_user('alice', 'alice@example.com')
# An attacker could pass a malicious username like ""' OR '1'='1"" to retrieve all users
user = repo.find_user(""' OR '1'='1"")
print(user)
repo.close()",code_defect,sql_injection,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        // Hardcoded credentials
        String validUsername = ""admin"";
        String validPassword = ""admin123!"";

        if (username.equals(validUsername) && password.equals(validPassword)) {
            System.out.println(""Authentication successful for user: "" + username);
            return true;
        } else {
            System.out.println(""Authentication failed for user: "" + username);
            return false;
        }
    }
}",code_defect,hardcoded_credentials,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public synchronized User getUser(String username) { for (User user : users.values()) { if (user.getUsername().equals(username)) { return user; } } return null; } public synchronized void addUser(User user) { users.put(user.getUsername(), user); } } class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<Payment> getPendingPayments() throws SQLException {
        List<Payment> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, account FROM pending_payments"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Payment p = new Payment();
            p.setId(rs.getInt(""id""));
            p.setAmount(rs.getDouble(""amount""));
            p.setAccount(rs.getString(""account""));
            payments.add(p);
        }
        // Missing close of ResultSet, Statement, and Connection -> resource leak
        return payments;
    }

    public boolean processPayment(Payment payment) {
        // Incorrect conditional logic: should check > 0, but uses >= 0 allowing zero amount
        if (payment.getAmount() >= 0) {
            // Simulate processing
            try {
                Thread.sleep(100); // blocking call in potentially async context
            } catch (InterruptedException e) {
                // Swallow interruption, continue as if successful
            }
            return true;
        }
        return false;
    }

    public void processAll() throws SQLException {
        List<Payment> pending = getPendingPayments();
        for (Payment p : pending) {
            if (!processPayment(p)) {
                // No error handling, just continue
                continue;
            }
            // Update status without transaction safety
            updatePaymentStatus(p.getId(), ""PROCESSED"");
        }
    }

    private void updatePaymentStatus(int paymentId, String status) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""UPDATE pending_payments SET status = ? WHERE id = ?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, status);
            stmt.setInt(2, paymentId);
            stmt.executeUpdate();
            // Missing close of Statement and Connection
        } catch (SQLException e) {
            // Swallow exception, lose visibility of failure
        }
    }
}

class Payment {
    private int id;
    private double amount;
    private String account;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getAccount() { return account; }
    public void setAccount(String account) { this.account = account; }
}",code_defect,resource_leak_and_logic_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  processUser(user) {
    if (!user || !user.id || !user.name) {
      return;
    }

    const sanitizedUser = this.sanitizeUser(user);

    if (sanitizedUser) {
      this.saveUserToDatabase(sanitizedUser);
    }

    // Legacy code from previous version, kept for reference
    // this.sendUserEmail(user);
  }

  sanitizeUser(user) {
    const allowedKeys = ['id', 'name', 'email'];
    const sanitized = {};

    for (const key in user) {
      if (allowedKeys.includes(key)) {
        sanitized[key] = user[key];
      }
    }

    return sanitized;
  }

  saveUserToDatabase(user) {
    console.log(`Saving user: ${user.name} with ID: ${user.id}`);
    // Database save logic goes here
  }
}

// Unused function
function sendWelcomeEmail(user) {
  console.log(`Sending email to ${user.email}`);
}

export default UserProcessor;",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class UserManager { private static Map<String, User> users = new HashMap<>(); public static void addUser(User user) { users.put(user.getUsername(), user); } public static User getUser(String username) { return users.get(username); } public static void removeUser(String username) { users.remove(username); } public static void main(String[] args) { User user1 = new User(""john"", ""password123""); User user2 = new User(""jane"", ""password456""); addUser(user1); addUser(user2); System.out.println(getUser(""john"").getPassword()); removeUser(""jane""); System.out.println(getUser(""jane"")); } } class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; }}",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {
        // Load users from a data source (simulated)
        users = {""alice"", ""bob"", ""charlie""};
    }

    // Returns the user at the given index, or empty string if out of range
    std::string getUserAt(int index) const {
        // BUG: off‑by‑one error – should be index >= 0 && index < users.size()
        if (index > 0 && index <= static_cast<int>(users.size())) {
            return users[index];
        }
        return """";
    }

    // Prints all users
    void printAll() const {
        for (size_t i = 0; i < users.size(); ++i) {
            std::cout << i << "": "" << users[i] << std::endl;
        }
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.printAll();
    // Attempt to fetch the last user (should be index 2)
    std::cout << ""Fetching user at index 2: "" << um.getUserAt(2) << std::endl;
    // Off‑by‑one causes out‑of‑range access for the last element
    std::cout << ""Fetching user at index 3: "" << um.getUserAt(3) << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    private String username;
    private String password;

    public UserAuthenticator(String username, String password) {
        this.username = username;
        this.password = password;
    }

    public boolean authenticate() {
        if (username == null || password == null) {
            return false;
        }

        String dbPassword = getPasswordFromDatabase(username);
        if (dbPassword == null) {
            return false;
        }

        return dbPassword.equals(password);
    }

    private String getPasswordFromDatabase(String username) {
        // Simulated hardcoded user for demo
        if (""admin"".equals(username)) {
            return ""s3cr3tP@ss"";
        }
        return null;
    }

    public void resetPassword(String newPassword) {
        password = newPassword;
        // Intentionally missing DB update logic
    }
}",code_smell,incomplete_logic,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
      constructor() {
         this.users = [];
      }

      addUser(user) {
         this.users.push(user);
      }

      removeUser(username) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].username === username) {
               this.users.splice(i, 1);
               break;
            }
         }
      }

      getUser(username) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].username === username) {
               return this.users[i];
            }
         }
         return null;
      }
   }

   const userManager = new UserManager();
   userManager.addUser({ username: 'john', password: '123' });
   console.log(userManager.getUser('john'));
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3
from datetime import datetime

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def create_user(self, username, password):
        # Insecure: storing plain password in DB
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, password_hash, created_at) VALUES (?, ?, ?)',
                       (username, password, datetime.utcnow().isoformat()))
        self.conn.commit()
        return cursor.lastrowid

    def authenticate(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute('SELECT password_hash FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row and row[0] == password:
            return True
        return False

    def export_user_data(self, user_id, export_path):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
        user = cursor.fetchone()
        if not user:
            raise ValueError('User not found')
        # Vulnerable to path traversal
        with open(export_path, 'w') as f:
            json.dump({'id': user[0], 'username': user[1]}, f)

    def close(self):
        self.conn.close()

# Example usage
if __name__ == '__main__':
    manager = UserManager('users.db')
    uid = manager.create_user('alice', 'secret123')
    print('Created user with ID:', uid)
    auth = manager.authenticate('alice', 'secret123')
    print('Authentication success:', auth)
    manager.export_user_data(uid, '../../tmp/export.json')
    manager.close()
",code_defect,insecure_password_storage_and_path_traversal,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processItems(std::vector<int>& items, int threshold, bool flag1, bool flag2, int multiplier = 1) {
    for (size_t i = 0; i < items.size(); ++i) {
        if (items[i] > threshold) {
            if (flag1) {
                items[i] *= multiplier;
            }
            if (flag2) {
                items[i] /= 2;
            }
        }
    }
}

int main() {
    std::vector<int> data = {5, 10, 15, 20, 25};
    processItems(data, 10, true, false);
    for (int val : data) {
        std::cout << val << "" "";
    }
    return 0;
}",code_smell,"large_function, long_parameter_list",,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string name, int age) : name(name), age(age) {}

    bool operator<(const User& other) const {
        return age < other.age;
    }
};

void sortUsers(std::vector<User>& users) {
    std::sort(users.begin(), users.end());
}

int main() {
    std::vector<User> users = {User(""John"", 30), User(""Alice"", 25), User(""Bob"", 40)};
    sortUsers(users);
    for (const auto& user : users) {
        std::cout << user.name << "" is "" << user.age << "" years old."" << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::vector<std::string>& logs) : logs_(logs) {}
    void startProcessing() {
        for (size_t i = 0; i < logs_.size(); ++i) {
            workers_.emplace_back(&LogProcessor::processLog, this, i);
        }
        for (auto& t : workers_) t.join();
    }
private:
    void processLog(size_t index) {
        std::lock_guard<std::mutex> lock(mtx_);
        // Simulate processing
        std::string entry = logs_[index];
        if (entry.empty()) return;
        // Bug: off‑by‑one, should be < entry.size()
        for (size_t i = 0; i <= entry.size(); ++i) {
            if (entry[i] == '\n') ++newlineCount_;
        }
    }
    const std::vector<std::string>& logs_;
    std::vector<std::thread> workers_;
    std::mutex mtx_;
    size_t newlineCount_ = 0;
};

int main(){
    std::vector<std::string> logs = {""first line\nsecond line"", ""single line""};
    LogProcessor lp(logs);
    lp.startProcessing();
    std::cout << ""Processing complete"" << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserAuthenticationService {
    private String storedPasswordHash = ""5f4dcc3b5aa765d0e4e32b32c8b512b0"";

    public boolean authenticate(String username, String password) {
        String passwordHash = computeMD5Hash(password);
        return storedPasswordHash.equals(passwordHash);
    }

    private String computeMD5Hash(String input) {
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            byte[] array = md.digest(input.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : array) {
                sb.append(Integer.toHexString((b & 0xFF) | 0x100).substring(1, 3));
            }
            return sb.toString();
        } catch (Exception e) {
            return """";
        }
    }
}",code_defect,security_defect,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <string>
      class User {
         public:
            User(std::string name, int age) : name(name), age(age) {}
            std::string getName() { return name; }
            int getAge() { return age; }
         private:
            std::string name;
            int age;
      };
      class UserService {
         public:
            UserService() {}
            User* getUser(std::string name) {
               for (int i = 0; i < 1000000; i++) {
                  if (users[i].getName() == name) {
                     return &users[i];
                  }
               }
               return nullptr;
            }
         private:
            User users[1000000];
      };
      int main() {
         UserService service;
         User* user = service.getUser(""John"");
         if (user != nullptr) {
            std::cout << user->getName() << std::endl;
         }
         return 0;
      }
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class LogProcessor {
public:
    LogProcessor(const std::vector<std::string>& logs) : logs_(logs) {}

    // Returns the most frequent log entry length
    size_t mostFrequentLength() const {
        std::vector<size_t> lengths;
        lengths.reserve(logs_.size());
        for (const auto& entry : logs_) {
            lengths.push_back(entry.size());
        }
        std::sort(lengths.begin(), lengths.end());
        size_t bestLen = 0;
        size_t bestCount = 0;
        size_t currentLen = 0;
        size_t currentCount = 0;
        for (size_t i = 0; i <= lengths.size(); ++i) { // BUG: off‑by‑one, accesses out of bounds
            if (i < lengths.size() && lengths[i] == currentLen) {
                ++currentCount;
            } else {
                if (currentCount > bestCount) {
                    bestCount = currentCount;
                    bestLen = currentLen;
                }
                if (i < lengths.size()) {
                    currentLen = lengths[i];
                    currentCount = 1;
                }
            }
        }
        return bestLen;
    }

private:
    std::vector<std::string> logs_;
};

int main() {
    std::vector<std::string> logs = {
        ""Error: Disk full"",
        ""Warning: Low memory"",
        ""Info: Startup complete"",
        ""Error: Disk full"",
        ""Error: Disk full""
    };
    LogProcessor lp(logs);
    std::cout << ""Most frequent length: "" << lp.mostFrequentLength() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  findUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  validateEmail(email) {
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return regex.test(email);
  }

  addUser(email, name) {
    if (!this.validateEmail(email)) {
      console.log('Invalid email format');
      return;
    }

    const userExists = this.findUserByEmail(email);
    if (userExists) {
      console.log('User already exists');
      return;
    }

    const newUser = {
      id: this.users.length + 1,
      name,
      email
    };

    this.users.push(newUser);
  }
}

const users = [{ id: 1, name: 'Alice', email: 'alice@example.com' }];
const userManager = new UserManager(users);
userManager.addUser('bob@example.com', 'Bob');",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userDao) {
         this.userDao = userDao;
      }

      async getUser(id) {
         const user = await this.userDao.findById(id);
         if (!user) {
            throw new Error(`User with id ${id} not found`);
         }
         return user;
      }

      async getUsers() {
         return await this.userDao.findAll();
      }
   }

   class UserDao {
      constructor(db) {
         this.db = db;
      }

      async findById(id) {
         return await this.db.collection('users').findOne({ id });
      }

      async findAll() {
         return await this.db.collection('users').find().toArray();
      }
   }

   const db = { collection: () => ({ findOne: () => {}, find: () => ({ toArray: () => {} }) }) };
   const userDao = new UserDao(db);
   const userService = new UserService(userDao);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cur = self.conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY,
                        username TEXT NOT NULL,
                        data TEXT)''')
        self.conn.commit()

    def load_user(self, username):
        cur = self.conn.cursor()
        cur.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cur.fetchone()
        if row:
            # Unsafe deserialization of stored JSON data
            return json.loads(row[0])
        return None

    def save_user(self, username, data):
        cur = self.conn.cursor()
        # Directly embedding JSON string without escaping can lead to SQL injection if data contains quotes
        json_data = json.dumps(data)
        cur.execute(f""INSERT OR REPLACE INTO users (username, data) VALUES ('{username}', '{json_data}')"")
        self.conn.commit()

    def delete_user(self, username):
        cur = self.conn.cursor()
        cur.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage (would be called elsewhere in the application)
manager = UserManager(os.getenv('USER_DB', ':memory:'))
manager.save_user('alice', {'role': 'admin', 'prefs': {'theme': 'dark'}})
user_data = manager.load_user('alice')
print(user_data)",code_defect,SQL_injection_and_unsafe_deserialization,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users) {
    this.users = users;
  }

  validateUser(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username && this.users[i].password === password) {
        return true;
      }
    }
    return false;
  }

  loginHandler(req, res) {
    const { username, password } = req.body;
    if (this.validateUser(username, password)) {
      res.status(200).send('Login successful');
    } else {
      res.status(401).send('Invalid credentials');
    }
  }
}

module.exports = UserAuth;",code_defect,insecure_authentication,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) { users.push_back(user); }
    User* getUserByName(std::string name) {
        for (auto& user : users) {
            if (user.getName() == name) {
                return &user;
            }
        }
        return nullptr;
    }
private:
    std::vector<User> users;
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User* user = service.getUserByName(""John"");
    if (user != nullptr) {
        std::cout << user->getName() << std::endl;
    }
    return 0;
}",code_defect,dangling_pointer,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and watches for changes.""""""
    def __init__(self, path: str):
        self.path = path
        self._config = {}
        self._lock = threading.Lock()
        self._load()
        self._watch_thread = threading.Thread(target=self._watch_file, daemon=True)
        self._watch_thread.start()

    def _load(self):
        with open(self.path, 'r') as f:
            data = json.load(f)
        with self._lock:
            self._config.update(data)

    def _watch_file(self):
        last_mtime = os.path.getmtime(self.path)
        while True:
            try:
                current_mtime = os.path.getmtime(self.path)
                if current_mtime != last_mtime:
                    self._load()
                    last_mtime = current_mtime
            except Exception:
                pass
            # No sleep -> busy loop

    def get(self, key, default=None):
        with self._lock:
            return self._config.get(key, default)

# Usage example (would be in production code)
config = ConfigLoader('/etc/app/config.json')
api_key = config.get('api_key')  # Sensitive data loaded without validation
",code_defect,busy_wait_without_sleep,,openai/gpt-oss-120b
JavaScript,"function processOrders(orders, discounts) {
  let total = 0;
  for (let i = 0; i < orders.length; i++) {
    const order = orders[i];
    let orderTotal = 0;
    for (let j = 0; j < order.items.length; j++) {
      const item = order.items[j];
      orderTotal += item.price * item.quantity;
    }

    let discount = 0;
    if (discounts.includes(order.customerId)) {
      discount = orderTotal * 0.1;
    }

    total += orderTotal - discount;
  }

  console.log(`Total revenue: $${total.toFixed(2)}`);
}

// Example usage:
const orders = [
  {
    customerId: 'C123',
    items: [
      { price: 10, quantity: 2 },
      { price: 5, quantity: 4 }
    ]
  },
  {
    customerId: 'C456',
    items: [
      { price: 8, quantity: 1 }
    ]
  }
];

const discounts = ['C123'];

processOrders(orders, discounts);",code_smell,nested_loops,,qwen/qwen3-32b
Java,public class UserService { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUserById(int id) { for (User user : users) { if (user.getId() == id) { return user; } } return null; } public void removeUser(int id) { for (User user : users) { if (user.getId() == id) { users.remove(user); break; } } } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}

    def load(self):
        # NOTE: The config file may contain sensitive information
        with open(self.config_path, 'r') as f:
            data = f.read()
        # Unsafe deserialization: using eval on file contents
        self.settings = eval(data)  # potential code execution vulnerability
        return self.settings

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)

    def process(self, records):
        results = []
        for i in range(0, len(records), self.batch_size):
            batch = records[i:i + self.batch_size]
            # Simulate processing each record
            for rec in batch:
                if rec.get('value') is None:
                    continue
                results.append(self._transform(rec))
        return results

    def _transform(self, record):
        # Simple transformation that could raise KeyError if 'value' missing
        return record['value'] * 2

# Usage example (would be in production code)
config = ConfigLoader('config.cfg')
config.load()
processor = DataProcessor(config)
sample_data = [{'value': i} for i in range(500)]
output = processor.process(sample_data)
print(json.dumps(output))",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Python,"import os
import requests

API_KEY = '1234567890abcdef'  # Hardcoded API key

def fetch_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    headers = {
        'Authorization': f'Bearer {API_KEY}'
    }
    response = requests.get(url, headers=headers)
    return response.json()


def process_user(user_data):
    name = user_data.get('name', '')
    email = user_data.get('email', '')
    if not email:
        return None
    
    # Complex processing logic
    processed = {
        'full_name': name,
        'email': email.lower(),
    }
    return processed


def main():
    user_id = input('Enter user ID: ')
    user_data = fetch_user_data(user_id)
    processed_user = process_user(user_data)
    
    if processed_user:
        print('User processed successfully:', processed_user)
    else:
        print('Failed to process user.')

if __name__ == '__main__':
    main()",code_defect,hardcoded_secrets,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final double TAX_RATE = 0.08; public double calculateTotal(double subtotal) { return subtotal + (subtotal * TAX_RATE); } public double calculateTotalWithDiscount(double subtotal, double discount) { return calculateTotal(subtotal) - discount; } public static void main(String[] args) { PaymentProcessor paymentProcessor = new PaymentProcessor(); double subtotal = 100.0; double discount = 10.0; double total = paymentProcessor.calculateTotalWithDiscount(subtotal, discount); System.out.println(""Total: "" + total); } }",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.account;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class AccountService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASS = ""apppass"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallowing exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,sql_injection,,openai/gpt-oss-120b
Python,"import os
import time

def process_files(directory):
    files = os.listdir(directory)
    results = []

    for file in files:
        if not file.endswith('.txt'):
            continue
        file_path = os.path.join(directory, file)
        with open(file_path, 'r') as f:
            content = f.read()
            words = content.split()
            word_count = len(words)
            results.append((file, word_count))

    time.sleep(2)  # Simulate processing delay
    return results


def main():
    directory = '/data/input'
    if not os.path.exists(directory):
        print(f""Directory {directory} does not exist."")
        return

    results = process_files(directory)
    for file, count in results:
        print(f""{file}: {count} words"")

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor() {
         this.processedPayments = {};
      }

      processPayment(paymentId, amount) {
         if (!this.processedPayments[paymentId]) {
            this.processedPayments[paymentId] = amount;
         } else {
            this.processedPayments[paymentId] += amount;
         }
      }

      getPaymentHistory() {
         return Object.keys(this.processedPayments).map(paymentId => ({ paymentId, amount: this.processedPayments[paymentId] }));
      }
   }

   const paymentProcessor = new PaymentProcessor();
   paymentProcessor.processPayment('123', 100);
   paymentProcessor.processPayment('123', 200);
   console.log(paymentProcessor.getPaymentHistory());
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // Unsafe eval of config file content
    this.cache = eval(data);
    return this.cache;
  }
}

function initializeApp() {
  const loader = new ConfigLoader('./config.js');
  const config = loader.load();
  // Assume config has a port property
  const server = require('http').createServer((req, res) => {
    res.writeHead(200, {'Content-Type': 'text/plain'});
    res.end('Server running');
  });
  server.listen(config.port);
  console.log(`Server listening on port ${config.port}`);
}

initializeApp();",code_defect,unsafe_eval_execution,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data, int threshold) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = i + 1; j < data.size(); ++j) {
            if (data[i] + data[j] > threshold) {
                data[i] = data[j] = 0;
            }
        }
    }
}

int main() {
    std::vector<int> values = {10, 20, 30, 40, 50};
    processData(values, 50);

    for (const auto& val : values) {
        std::cout << val << "" "";
    }

    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
class User {
public:
   User(std::string name, int age) : name(name), age(age) {}
   std::string getName() { return name; }
   int getAge() { return age; }
private:
   std::string name;
   int age;
};
class UserService {
public:
   void saveUser(User user) {
      users.push_back(user);
   }
   User getUser(int index) {
      if (index < users.size()) {
         return users[index];
      }
      // Return default user if index is out of bounds
      return User(""Unknown"", 0);
   }
private:
   std::vector<User> users;
};
int main() {
   UserService service;
   service.saveUser(User(""John Doe"", 30));
   User user = service.getUser(0);
   std::cout << user.getName() << std::endl;
   return 0;
}
",code_smell,Magic Number,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public User getUserById(int userId) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String query = ""SELECT id, username, email FROM users WHERE id = "" + userId; // insecure concatenation
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();
        User user = null;
        if (rs.next()) {
            user = new User();
            user.setId(rs.getInt(""id""));
            user.setUsername(rs.getString(""username""));
            user.setEmail(rs.getString(""email""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return user;
    }
}

class User {
    private int id;
    private String username;
    private String email;
    public void setId(int id) { this.id = id; }
    public void setUsername(String username) { this.username = username; }
    public void setEmail(String email) { this.email = email; }
    // getters omitted for brevity
}",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processUserInput(const std::string& input, bool flag) {
    std::string result = input;
    if (flag) {
        result += ""_flagged"";
    }

    for (int i = 0; i < input.length(); ++i) {
        if (islower(input[i])) {
            result[i] = toupper(input[i]);
        }
    }

    return result;
}

int main() {
    std::string user_input = ""example"";
    bool flag = true;

    std::string processed = processUserInput(user_input, flag);

    std::cout << ""Processed: "" << processed << std::endl;
    return 0;
}",code_defect,off_by_one_error,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, String> users = new HashMap<>(); public void saveUser(String username, String password) { users.put(username, password); } public boolean authenticate(String username, String password) { return users.containsKey(username) && users.get(username).equals(password); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Missing error handling – if file is missing or malformed, JSON.parse will throw
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    // If load() hasn't been called, cache is null and this will throw
    return this.cache[key];
  }
}

// Global singleton used across the app
const config = new ConfigLoader('./config.json');
config.load();

function processRequest(req, res) {
  // Assume userId comes from query string without validation
  const userId = req.query.id;
  // Directly embed user input into file path – path traversal vulnerability
  const userFile = `./data/users/${userId}.json`;
  const userData = JSON.parse(fs.readFileSync(userFile, 'utf8'));
  // Business logic uses config values
  if (userData.role === config.get('adminRole')) {
    res.send('Welcome, admin!');
  } else {
    res.send('Access denied');
  }
}

module.exports = { processRequest, ConfigLoader };",code_defect,unvalidated_user_input_path_traversal_and_missing_error_handling,,openai/gpt-oss-120b
Python,"import os
import requests

API_KEY = '1234567890'

def fetch_weather_data(city_name):
    url = f'https:",code_defect,hardcoded_secret,,qwen/qwen3-32b
Java,"public class UserProcessor { private static final int MAX_RETRIES = 5; public void processUser(String userId) { for (int i = 0; i < MAX_RETRIES; i++) { try { // simulate some work String userData = fetchUserDataFromDatabase(userId); if (userData == null) { throw new RuntimeException(""User data not found""); } System.out.println(""User data: "" + userData); break; } catch (Exception e) { System.out.println(""Error processing user: "" + e.getMessage()); } } } private String fetchUserDataFromDatabase(String userId) { // simulate a database query return userId.equals(""existing_user"") ? ""Existing user data"" : null; } }",code_smell,inefficient_error_handling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : log_file(file) {}
    void process() {
        std::lock_guard<std::mutex> lock(mtx);
        std::vector<std::string> lines = readLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off‑by‑one bug: should be i < lines.size()
            std::string line = lines[i];
            if (line.find(""ERROR"") != std::string::npos) {
                ++error_count;
            }
        }
        std::cout << ""Errors: "" << error_count << std::endl;
    }
private:
    std::vector<std::string> readLines() {
        // Dummy implementation for illustration
        return {""INFO start"", ""ERROR something failed"", ""INFO end""};
    }
    std::string log_file;
    size_t error_count = 0;
    std::mutex mtx;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.process();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    private String databasePassword = ""password123"";

    public void processUserInput(String userInput) {
        String query = ""SELECT * FROM users WHERE username = '"" + userInput + ""'"";
        // Simulate executing the query
        System.out.println(""Executing query: "" + query);
        // No input sanitization or validation
    }

    public void setupDatabaseConnection() {
        // Hardcoded password in source code
        String connectionString = ""jdbc:mysql://localhost:3306/mydb?user=admin&password="" + databasePassword;
        // Simulate connection setup
        System.out.println(""Connecting to database with: "" + connectionString);
    }
}",code_defect,security_defect,,qwen/qwen3-32b
Python,"
class BankAccount:
    def __init__(self, account_number, balance=0):
        self.account_number = account_number
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        if amount > self.balance:
            return False
        self.balance -= amount
        return True

    def get_balance(self):
        return self.balance

class BankSystem:
    def __init__(self):
        self.accounts = {}

    def create_account(self, account_number, initial_balance):
        if account_number in self.accounts:
            return False
        self.accounts[account_number] = BankAccount(account_number, initial_balance)
        return True

    def get_account(self, account_number):
        return self.accounts.get(account_number)

    def transfer(self, from_account_number, to_account_number, amount):
        from_account = self.get_account(from_account_number)
        to_account = self.get_account(to_account_number)
        if from_account and to_account:
            if from_account.withdraw(amount):
                to_account.deposit(amount)
                return True
        return False

bank_system = BankSystem()
bank_system.create_account('12345', 1000)
bank_system.create_account('67890', 500)
print(bank_system.get_account('12345').get_balance())
bank_system.transfer('12345', '67890', 200)
print(bank_system.get_account('12345').get_balance())
print(bank_system.get_account('67890').get_balance())
",code_defect,race condition,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None
        self.load()

    def load(self):
        # NOTE: Using eval on file contents – insecure!
        with open(self.config_path, 'r') as f:
            data = f.read()
        self._config = eval(data)  # unsafe deserialization
        logger.info(""Configuration loaded."")

    def get(self, key, default=None):
        return self._config.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.cfg = config_loader
        self.batch_size = self.cfg.get('batch_size', 100)
        self.output_dir = self.cfg.get('output_dir', '/tmp')

    def process(self, records):
        # Process records in batches but off‑by‑one error: last batch may be skipped
        for i in range(0, len(records), self.batch_size):
            batch = records[i:i + self.batch_size - 1]
            self._handle_batch(batch)

    def _handle_batch(self, batch):
        # Simulate writing results to files
        for idx, record in enumerate(batch):
            out_path = os.path.join(self.output_dir, f""result_{idx}.json"")
            with open(out_path, 'w') as f:
                json.dump(record, f)
        logger.debug(f""Processed batch of {len(batch)} records."")

def main():
    cfg = ConfigLoader('config.cfg')
    processor = DataProcessor(cfg)
    # Simulated input data
    records = [{""id"": i, ""value"": i * 2} for i in range(250)]
    processor.process(records)

if __name__ == '__main__':
    main()",code_defect,off_by_one_error_and_unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class ReportGenerator {
    public void generateReport(String input, String format) {
        if (format.equals(""PDF"")) {
            System.out.println(""Generating PDF report..."");
            System.out.println(""Input data: "" + input);
            System.out.println(""PDF generated successfully."");
        } else if (format.equals(""CSV"")) {
            System.out.println(""Generating CSV report..."");
            System.out.println(""Input data: "" + input);
            System.out.println(""CSV generated successfully."");
        } else {
            System.out.println(""Unsupported format: "" + format);
        }
    }

    public static void main(String[] args) {
        ReportGenerator generator = new ReportGenerator();
        generator.generateReport(""Sample data"", ""PDF"");
        generator.generateReport(""More data"", ""CSV"");
        generator.generateReport(""Invalid input"", ""XML"");
    }
}",code_smell,duplicated_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) { users.push_back(user); }
    std::vector<User> getUsers() { return users; }

private:
    std::vector<User> users;
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    service.addUser(User(""Alice"", 25));

    std::vector<User> users = service.getUsers();
    for (const auto& user : users) {
        std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
    }

    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class FileCache {
  constructor(cacheDir) {
    this.cacheDir = cacheDir;
    if (!fs.existsSync(cacheDir)) {
      fs.mkdirSync(cacheDir, { recursive: true });
    }
    this.cache = {};
  }

  // Loads a file into memory and caches it
  load(key, filePath) {
    const fullPath = `${this.cacheDir}/${filePath}`;
    const data = fs.readFileSync(fullPath, 'utf8');
    this.cache[key] = data;
    return data;
  }

  // Retrieves cached data; if missing, reads from disk (but forgets to update cache)
  get(key, filePath) {
    if (this.cache[key]) {
      return this.cache[key];
    }
    const fullPath = `${this.cacheDir}/${filePath}`;
    // BUG: reading file synchronously without handling errors and not caching result
    return fs.readFileSync(fullPath, 'utf8');
  }

  // Clears a specific cache entry
  invalidate(key) {
    delete this.cache[key];
  }
}

// Example usage
const cache = new FileCache('/tmp/cache');
cache.load('config', 'config.json');
// Subsequent calls will read from disk each time instead of using the cache
const config1 = cache.get('config', 'config.json');
const config2 = cache.get('config', 'config.json');
console.log(config1 === config2); // false due to defect",code_defect,cache_miss_logic,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let results = [];
  for (let i = 0; i < data.length; i++) {
    let item = data[i];
    let processed = {};
    processed.id = item.id;
    processed.name = item.name;
    if (item.type === 'user') {
      processed.status = 'active';
    } else {
      processed.status = 'inactive';
    }
    results.push(processed);
  }
  return results;
}

function processExtraData(extraData) {
  let results = [];
  for (let i = 0; i < extraData.length; i++) {
    let item = extraData[i];
    let processed = {};
    processed.id = item.id;
    processed.name = item.name;
    if (item.type === 'user') {
      processed.status = 'active';
    } else {
      processed.status = 'inactive';n    }
    results.push(processed);
  }
  return results;
}",code_smell,duplicate_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};
class UserService {
public:
    UserService() {}
    void addUser(User user) {
        users.push_back(user);
    }
    std::vector<User> getUsers() {
        return users;
    }
private:
    std::vector<User> users;
};
int main() {
    UserService service;
    service.addUser(User(""John Doe"", 30));
    service.addUser(User(""Jane Doe"", 25));
    std::vector<User> users = service.getUsers();
    for (const auto& user : users) {
        std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogProcessor {
public:
    LogProcessor(const std::string& filename) : fileName(filename) {}
    void start() {
        running = true;
        worker = std::thread(&LogProcessor::processLoop, this);
    }
    void stop() {
        running = false;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& line) {
        std::lock_guard<std::mutex> lock(queueMutex);
        queue.push_back(line);
    }
private:
    void processLoop() {
        while (running) {
            std::string line;
            {
                std::lock_guard<std::mutex> lock(queueMutex);
                if (!queue.empty()) {
                    line = queue.front();
                    queue.erase(queue.begin());
                }
            }
            // BUG: If queue is empty, 'line' remains unchanged from previous iteration
            // leading to processing the same line repeatedly.
            writeToFile(line);
        }
    }
    void writeToFile(const std::string& data) {
        // Simplified: just print to console instead of actual file I/O
        std::cout << ""Processed: "" << data << std::endl;
    }
    std::string fileName;
    std::vector<std::string> queue;
    std::mutex queueMutex;
    std::thread worker;
    bool running = false;
};

int main() {
    LogProcessor lp(""app.log"");
    lp.start();
    lp.enqueue(""first entry"");
    lp.enqueue(""second entry"");
    std::this_thread::sleep_for(std::chrono::seconds(1));
    lp.stop();
    return 0;
}",code_defect,logic_error_reprocessing_stale_data,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  let data = {};
  if (input && input.length > 0) {
    data.name = input.split(',')[0].trim();
    data.age = parseInt(input.split(',')[1].trim(), 10);
    data.email = input.split(',')[2].trim();
    if (isNaN(data.age)) {
      data.age = 0;
    }
  }
  return data;
}

function sendEmailToUser(user) {
  const emailTemplate = `Dear ${user.name},\nThank you for registering! Your details are:\nName: ${user.name}\nAge: ${user.age}\nEmail: ${user.email}`;
  console.log(`Sending email: ${emailTemplate}`);
}

function handleRegistration(input) {
  const user = processUserInput(input);
  sendEmailToUser(user);
}

handleRegistration('John Doe, 30, john.doe@example.com');",code_smell,poor_error_handling,,qwen/qwen3-32b
Java,"public class UserService { private static Map<String, User> users = new HashMap<>(); public static void addUser(User user) { users.put(user.getUsername(), user); } public static User getUser(String username) { return users.get(username); } public static void main(String[] args) { User user = new User(""john"", ""password123""); addUser(user); System.out.println(getUser(""john"").getPassword()); } } class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.configPath = configPath;
    this.cache = null;
  }

  // Loads JSON config file; caches result but never invalidates it
  loadConfig() {
    if (this.cache) return this.cache;
    const raw = fs.readFileSync(this.configPath, 'utf8');
    // BUG: JSON.parse can throw, but not caught – crashes the process
    this.cache = JSON.parse(raw);
    return this.cache;
  }

  // Returns a config value; if key missing returns undefined
  get(key) {
    const cfg = this.loadConfig();
    return cfg[key];
  }
}

// Usage example
const loader = new ConfigLoader('/etc/app/config.json');
const dbHost = loader.get('databaseHost');
console.log('DB Host:', dbHost);

// Later in the app we attempt to reload config after a change
function reloadConfig() {
  // BUG: reset cache not performed, so stale config is used
  // Intended to clear cache but mistakenly reassigns a new loader
  const loader = new ConfigLoader('/etc/app/config.json');
  // This creates a new instance but does not affect the original one used elsewhere
  console.log('Config reloaded');
}

module.exports = { ConfigLoader, reloadConfig };",code_defect,unhandled_exception_and_stale_cache,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class UserProcessor {
public:
    void processUsers(const std::vector<std::string>& users) {
        for (const auto& user : users) {
            if (user.empty()) {
                continue;
            }
            if (user.length() > 255) {
                std::cerr << ""User name too long: "" << user << std::endl;
                continue;
            }
            if (user.find(''') != std::string::npos) {
                std::cerr << ""User name contains invalid character: "" << user << std::endl;
                continue;
            }
            // Simulate some processing
            std::cout << ""Processing user: "" << user << std::endl;
        }
    }
};

int main() {
    std::vector<std::string> users = {""Alice"", ""Bob"", ""Charlie@"", """", ""Alice O'Connor""};
    UserProcessor processor;
    processor.processUsers(users);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    std::string name;
    int salary;

    Employee(std::string n, int s) : name(n), salary(s) {}

    bool operator<(const Employee& other) const {
        return salary < other.salary;
    }
};

class EmployeeManager {
public:
    std::vector<Employee> employees;

    void addEmployee(const Employee& employee) {
        employees.push_back(employee);
    }

    void sortEmployees() {
        std::sort(employees.begin(), employees.end());
    }

    Employee getHighestPaidEmployee() {
        if (employees.empty()) {
            return Employee("""", 0);
        }
        return *std::max_element(employees.begin(), employees.end());
    }
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 50000));
    manager.addEmployee(Employee(""Alice"", 60000));
    manager.sortEmployees();
    Employee highestPaid = manager.getHighestPaidEmployee();
    std::cout << highestPaid.name << std::endl;
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""admin123""; // hardcoded secret

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        String query = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk if limit derived from user
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                payments.add(rs.getString(""payment_id""));
            }
        }
        return payments;
    }

    public void processPayments() throws SQLException {
        List<String> pending = getPendingPayments(100);
        for (String paymentId : pending) {
            // Simulate processing
            boolean success = externalPaymentGatewayCall(paymentId);
            updatePaymentStatus(paymentId, success ? ""COMPLETED"" : ""FAILED"");
        }
    }

    private boolean externalPaymentGatewayCall(String paymentId) {
        // Placeholder for external call, always returns true for demo
        return true;
    }

    private void updatePaymentStatus(String paymentId, String status) throws SQLException {
        String update = ""UPDATE payments SET status='"" + status + ""' WHERE payment_id='"" + paymentId + ""'""; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(update)) {
            stmt.executeUpdate();
        }
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  let result = '';
  if (input) {
    if (input.length > 0) {
      for (let i = 0; i < input.length; i++) {
        if (input[i] === 'a') {
          result += 'apple';
        } else if (input[i] === 'b') {
          result += 'banana';
        } else if (input[i] === 'c') {
          result += 'cherry';
        } else {
          result += input[i];
        }
      }
    }
  }
  return result;
}

function main() {
  const userInput = 'abc';
  const processed = processUserInput(userInput);
  console.log(processed);
}

main();",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
       constructor(paymentGateway) {
           this.paymentGateway = paymentGateway;
       }

       processPayment(amount, currency) {
           if (amount <= 0) {
               throw new Error('Invalid amount');
           }
           const paymentResult = this.paymentGateway.chargeCard(amount, currency);
           if (paymentResult.success) {
               return paymentResult.transactionId;
           } else {
               return null;
           }
       }
   }

   class PaymentGateway {
       chargeCard(amount, currency) {
           // Simulating a payment gateway API call
           return { success: true, transactionId: 'TRANSACTION_ID' };
       }
   }

   const paymentGateway = new PaymentGateway();
   const paymentProcessor = new PaymentProcessor(paymentGateway);
   const transactionId = paymentProcessor.processPayment(100, 'USD');
   console.log(transactionId);
   ",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}
    void addTransaction(int amount) {
        // No validation of amount, can be negative
        std::lock_guard<std::mutex> lock(mtx_);
        pending_.push_back(amount);
    }
    void processAll() {
        // Process pending transactions without clearing the vector safely
        for (size_t i = 0; i <= pending_.size(); ++i) {
            total_ += pending_[i]; // Off‑by‑one leads to out‑of‑bounds read
        }
        pending_.clear();
    }
    int getTotal() const { return total_; }
private:
    std::vector<int> pending_;
    int total_;
    mutable std::mutex mtx_;
};

int main() {
    TransactionProcessor tp;
    tp.addTransaction(100);
    tp.addTransaction(-50); // Negative amount allowed
    std::thread t1([&tp](){ tp.processAll(); });
    std::thread t2([&tp](){ tp.processAll(); }); // Concurrent processing without proper sync
    t1.join();
    t2.join();
    std::cout << ""Total: "" << tp.getTotal() << std::endl;
    return 0;
}
",code_defect,off_by_one_and_race_condition,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    private List<User> users;

    public UserProcessor(List<User> users) {
        this.users = users;
    }

    public void processUsers() {
        for (User user : users) {
            if (user.isActive()) {
                if (user.getRole().equals(""ADMIN"")) {
                    user.grantAccess();
                } else if (user.getRole().equals(""MODERATOR"")) {
                    user.grantAccess();
                } else {
                    user.denyAccess();
                }
            } else {
                user.denyAccess();
            }
        }
    }

    // Legacy code - to be removed
    // public void deprecatedProcessUsers() {
    //     users.forEach(user -> user.denyAccess());
    // }

    public static class User {
        private String role;
        private boolean active;

        public User(String role, boolean active) {
            this.role = role;
            this.active = active;
        }

        public String getRole() {
            return role;
        }

        public boolean isActive() {
            return active;
        }

        public void grantAccess() {
            System.out.println(""Access granted."");
        }

        public void denyAccess() {
            System.out.println(""Access denied."");
        }
    }
}",code_smell,duplicate_condition,,qwen/qwen3-32b
Python,"class UserManager:
    def __init__(self, db_connection):
        self.db_connection = db_connection
        self.users = {}

    def add_user(self, user_id, username, email):
        if user_id not in self.users:
            self.users[user_id] = {'username': username, 'email': email}
            self.db_connection.execute('INSERT INTO users (id, username, email) VALUES (?, ?, ?)', (user_id, username, email))
        else:
            self.users[user_id]['username'] = username
            self.users[user_id]['email'] = email
            self.db_connection.execute('UPDATE users SET username = ?, email = ? WHERE id = ?', (username, email, user_id))

    def get_user(self, user_id):
        return self.users.get(user_id)

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
            self.db_connection.execute('DELETE FROM users WHERE id = ?', (user_id,))
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize || 10;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn returns a promise resolving to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off‑by‑one error – should use pageNumber - 1 for zero‑based index
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    const next = this.currentPage + 1;
    const page = this.getPage(next);
    if (page.length > 0) {
      this.currentPage = next;
    }
    return page;
  }
}

// Example usage
const paginator = new Paginator(5);
await paginator.loadItems(() => Promise.resolve([1,2,3,4,5,6,7,8,9,10]));
console.log('First page:', paginator.getPage(1)); // Expected [1,2,3,4,5] but gets [] due to bug
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processUserData(userInput) {
  let processedData = [];

  for (let i = 0; i < userInput.length; i++) {
    const item = userInput[i];
    let result = '';

    if (item.type === 'text') {
      result = item.value.toUpperCase();
    } else if (item.type === 'number') {
      result = item.value * 2;
    } else if (item.type === 'boolean') {
      result = !item.value;
    } else {
      result = null;
    }

    processedData.push(result);
  }

  return processedData;
}

// Example usage
const input = [
  { type: 'text', value: 'hello' },
  { type: 'number', value: 42 },
  { type: 'boolean', value: true },
  { type: 'unknown', value: 123 }
];

const output = processUserData(input);
console.log(output);",code_smell,large_function,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(merchantId, apiKey) {
         this.merchantId = merchantId;
         this.apiKey = apiKey;
      }

      processPayment(amount, currency, cardNumber, expirationDate, cvv) {
         const paymentData = {
            amount: amount,
            currency: currency,
            cardNumber: cardNumber,
            expirationDate: expirationDate,
            cvv: cvv
         };

         const xml = `
            <?xml version='1.0' encoding='utf-8'?>
            <payment>
               <amount>${amount}</amount>
               <currency>${currency}</currency>
               <cardNumber>${cardNumber}</cardNumber>
               <expirationDate>${expirationDate}</expirationDate>
               <cvv>${cvv}</cvv>
            </payment>
         `;

         const https = require('https');
         const options = {
            method: 'POST',
            hostname: 'payment-gateway.com',
            path: '/process',
            headers: {
               'Content-Type': 'application/xml',
               'Authorization': 'Bearer ' + this.apiKey
            }
         };

         const req = https.request(options, (res) => {
            let data = '';
            res.on('data', (chunk) => {
               data += chunk;
            });
            res.on('end', () => {
               console.log(data);
            });
         });

         req.on('error', (error) => {
            console.error(error);
         });

         req.write(xml);
         req.end();
      }
   }

   const paymentProcessor = new PaymentProcessor('12345', 'my_api_key');
   paymentProcessor.processPayment(10.99, 'USD', '1234-1234-1234-1234', '12/2025', '123');
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a log file
    async getUserProfile(userId) {
        // Missing validation: userId could be undefined or malicious
        const user = await this.db.query('SELECT * FROM users WHERE id = ' + userId);
        if (!user) {
            throw new Error('User not found');
        }
        // Async file write without awaiting - race condition
        fs.writeFile('/var/log/user_access.log', `User ${userId} accessed at ${new Date().toISOString()}\n`, (err) => {
            if (err) console.error('Log write failed');
        });
        return user;
    }
}

// Example usage
(async () => {
    const fakeDb = {
        query: async (sql) => {
            // Simulate SQL injection vulnerability
            if (sql.includes('DROP')) return null;
            return { id: 1, name: 'Alice' };
        }
    };
    const service = new UserService(fakeDb);
    const profile = await service.getUserProfile('1; DROP TABLE users');
    console.log('Profile:', profile);
})();",code_defect,SQL_injection_and_race_condition,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUser(User user) {
        if (user != null && user.getEmail() != null && !user.getEmail().isEmpty()) {
            String email = user.getEmail().trim();
            if (isValidEmail(email)) {
                String normalizedEmail = email.toLowerCase();
                if (normalizedEmail.contains(""@example.com"")) {
                    System.out.println(""Processing example user: "" + normalizedEmail);
                } else {
                    System.out.println(""Skipping non-example user: "" + normalizedEmail);
                }
            }
        }
    }

    private boolean isValidEmail(String email) {
        return email != null && email.matches(""^[A-Za-z0-9+_.-]+@(.+$)?"");
    }
}",code_smell,long_method,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = "" + str(user_id))
        user_data = cursor.fetchone()
        return user_data

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data

    def update_user(self, user_id, new_email):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET email = '"" + new_email + ""' WHERE id = "" + str(user_id))
        self.db_connection.commit()

# usage
import sqlite3
db_connection = sqlite3.connect(':memory:')
cursor = db_connection.cursor()
cursor.execute(""CREATE TABLE users (id INTEGER, email TEXT)"")
cursor.execute(""INSERT INTO users VALUES (1, 'user1@example.com')"")
cursor.execute(""INSERT INTO users VALUES (2, 'user2@example.com')"")
user_service = UserService(db_connection)
print(user_service.get_user(1))
print(user_service.get_all_users())
user_service.update_user(1, 'new_email@example.com')
print(user_service.get_user(1))
",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigManager:
    def __init__(self, config_path: str):
        self.config_path = config_path
        self._config = {}
        self._load_config()

    def _load_config(self):
        # NOTE: This loads JSON without any validation. If the file is tampered, arbitrary objects could be injected.
        with open(self.config_path, 'r') as f:
            self._config = json.load(f)
        logger.info('Configuration loaded')

    def get(self, key: str, default=None):
        return self._config.get(key, default)

    def set(self, key: str, value):
        self._config[key] = value
        self._save_config()

    def _save_config(self):
        # Overwrites the config file directly; no backup or atomic write.
        with open(self.config_path, 'w') as f:
            json.dump(self._config, f, indent=2)
        logger.info('Configuration saved')

class UserService:
    def __init__(self, db_path: str, config: ConfigManager):
        self.db_path = db_path
        self.config = config
        self._ensure_db()

    def _ensure_db(self):
        if not os.path.exists(self.db_path):
            with open(self.db_path, 'w') as f:
                f.write('[]')  # simple JSON list for users

    def add_user(self, username: str, password: str):
        # Password stored in plain text! Also no duplicate check.
        with open(self.db_path, 'r+') as f:
            users = json.load(f)
            users.append({'username': username, 'password': password})
            f.seek(0)
            json.dump(users, f, indent=2)
            f.truncate()
        logger.info(f'User {username} added')

    def authenticate(self, username: str, password: str) -> bool:
        with open(self.db_path, 'r') as f:
            users = json.load(f)
            for user in users:
                if user['username'] == username and user['password'] == password:
                    return True
        return False

# Example usage (would be in production code)
config = ConfigManager('app_config.json')
service = UserService('users.json', config)
service.add_user('admin', 'secret123')
print('Authenticated:', service.authenticate('admin', 'secret123'))",code_defect,insecure_password_storage,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private List<String> users;

    public UserProcessor(List<String> users) {
        this.users = users;
    }

    public List<String> processUsers() {
        List<String> processedUsers = new ArrayList<>();
        for (String user : users) {
            if (user != null && !user.isEmpty()) {
                String processed = user.trim().toLowerCase();
                if (!processed.equals(""admin"")) {
                    processedUsers.add(processed);
                }
            }
        }
        return processedUsers;
    }

    private void someUnusedMethod() {
        // Legacy code that's no longer used
        System.out.println(""This is unused"");
    }
}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
       constructor(paymentGateway) {
           this.paymentGateway = paymentGateway;
       }

       processPayment(amount, currency) {
           if (amount <= 0) {
               throw new Error('Invalid amount');
           }
           return new Promise((resolve, reject) => {
               setTimeout(() => {
                   this.paymentGateway.charge(amount, currency, (error, result) => {
                       if (error) {
                           reject(error);
                       } else {
                           resolve(result);
                       }
                   });
               }, 1000);
           });
       }
   }

   class PaymentGateway {
       charge(amount, currency, callback) {
           // Simulating a payment processing delay
           setTimeout(() => {
               callback(null, { status: 'success', transactionId: '12345' });
           }, 2000);
       }
   }

   const paymentGateway = new PaymentGateway();
   const paymentProcessor = new PaymentProcessor(paymentGateway);

   paymentProcessor.processPayment(100, 'USD').then((result) => {
       console.log(result);
   }).catch((error) => {
       console.error(error);
   });
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class OrderProcessor {
    private Connection conn;
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/shop"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public OrderProcessor() throws SQLException {
        conn = DriverManager.getConnection(DB_URL, USER, PASS);
    }

    public List<String> getPendingOrders(int limit) throws SQLException {
        List<String> orders = new ArrayList<>();
        String query = ""SELECT order_id FROM orders WHERE status='PENDING' LIMIT "" + limit; // insecure concatenation
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(query);
        while (rs.next()) {
            orders.add(rs.getString(""order_id""));
        }
        rs.close();
        stmt.close();
        return orders;
    }

    public void processOrders() {
        try {
            List<String> pending = getPendingOrders(100);
            for (String orderId : pending) {
                // Simulate processing
                updateOrderStatus(orderId, ""PROCESSED"");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateOrderStatus(String orderId, String status) throws SQLException {
        String sql = ""UPDATE orders SET status='"" + status + ""' WHERE order_id='"" + orderId + ""'""; // SQL injection risk
        Statement stmt = conn.createStatement();
        stmt.executeUpdate(sql);
        stmt.close();
    }

    public void close() throws SQLException {
        if (conn != null && !conn.isClosed()) {
            conn.close();
        }
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order != null && order.isValid()) {
                applyDiscounts(order);
                calculateTotal(order);
                saveToDatabase(order);
            }
        }
    }

    private void applyDiscounts(Order order) {
        if (order.getCustomerType() == CustomerType.VIP) {
            order.setTotal(order.getTotal() * 0.9);
        } else if (order.getCustomerType() == CustomerType.REGULAR) {
            order.setTotal(order.getTotal() * 0.95);
        }
    }

    private void calculateTotal(Order order) {
        double total = 0;
        for (OrderItem item : order.getItems()) {
            total += item.getPrice() * item.getQuantity();
        }
        order.setTotal(total);
    }

    private void saveToDatabase(Order order) {
        // Simulate database operation
        System.out.println(""Saving order: "" + order.getId());
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(merchantId, apiKey) {
         this.merchantId = merchantId;
         this.apiKey = apiKey;
      }

      processPayment(amount, currency, cardDetails) {
         const paymentGatewayUrl = 'https://example.com/payment';
         const headers = {
            'Authorization': 'Bearer ' + this.apiKey,
            'Content-Type': 'application/json'
         };
         const paymentData = {
            'amount': amount,
            'currency': currency,
            'cardDetails': cardDetails
         };

         // Using a timeout to simulate a delay, which could potentially lead to a race condition if not handled properly
         setTimeout(() => {
            fetch(paymentGatewayUrl, {
               method: 'POST',
               headers: headers,
               body: JSON.stringify(paymentData)
            })
            .then(response => response.json())
            .then(data => console.log(data))
            .catch(error => console.error(error));
         }, 1000);
      }
   }

   const paymentProcessor = new PaymentProcessor('MERCHANT123', 'APIKEY123');
   paymentProcessor.processPayment(100, 'USD', { cardNumber: '1234-1234-1234-1234', expirationDate: '12/25', cvv: '123' });
   ",code_defect,race_condition,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        # Insecure: directly eval content, allowing code execution if file is tampered
        with open(self.path, 'r') as f:
            data = f.read()
            self.config = eval(data)  # unsafe deserialization

    def get(self, key, default=None):
        return self.config.get(key, default)

class UserService:
    def __init__(self, config_path):
        self.cfg = ConfigLoader(config_path)
        self.users = {}
        self._populate()

    def _populate(self):
        # Simulate loading users from a DB; here we just hardcode for demo
        self.users = {
            1: {'name': 'Alice', 'role': 'admin'},
            2: {'name': 'Bob', 'role': 'user'}
        }

    def get_user_role(self, user_id):
        return self.users[user_id]['role']

    def is_admin(self, user_id):
        return self.get_user_role(user_id) == 'admin'

def main():
    service = UserService('config.cfg')
    if service.is_admin(2):
        print('User is admin')
    else:
        print('User is not admin')

if __name__ == '__main__':
    main()",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order, User user, boolean isPriority, String promoCode) {
        if (order == null || user == null) {
            return;
        }

        if (order.getItems().isEmpty()) {
            System.out.println(""Order has no items."");
            return;
        }

        double totalPrice = 0;
        for (Item item : order.getItems()) {
            totalPrice += item.getPrice();
        }

        if (isPriority) {
            totalPrice *= 1.15; // Priority fee
        }

        if (promoCode != null && promoCode.equals(""SUMMER2023"")) {
            totalPrice *= 0.9; // Apply discount
        }

        if (user.getBalance() >= totalPrice) {
            deductBalance(user, totalPrice);
            System.out.println(""Order processed successfully."");
        } else {
            System.out.println(""Insufficient balance."");
        }
    }

    private void deductBalance(User user, double amount) {
        user.setBalance(user.getBalance() - amount);
    }
}",code_smell,large_method,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserRepository {
public:
    vector<User> users;
    void addUser(User u) { users.push_back(u); }
    User* getUserByName(string name) {
        for (auto& user : users) {
            if (user.name == name) return &user;
        }
        return nullptr;
    }
};

int main() {
    UserRepository repo;
    repo.addUser(User(""John"", 30));
    User* user = repo.getUserByName(""John"");
    if (user) cout << user->name << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserReportGenerator {
    constructor(db) {
        this.db = db;
    }

    // Generates a CSV report for a list of user IDs
    generateReport(userIds) {
        // NOTE: This method does everything – fetching, formatting, and writing
        let csv = 'id,name,email,age\n';
        for (let i = 0; i < userIds.length; i++) {
            const user = this.db.getUserById(userIds[i]); // synchronous DB call
            if (!user) continue;
            // Magic numbers for age categories
            let ageCategory = '';
            if (user.age < 18) ageCategory = 'minor';
            else if (user.age < 65) ageCategory = 'adult';
            else ageCategory = 'senior';
            csv += `${user.id},${user.name},${user.email},${ageCategory}\n`;
        }
        // Write to file – path is hardcoded
        fs.writeFileSync('/var/reports/user_report.csv', csv);
        return '/var/reports/user_report.csv';
    }
}

// Usage example (in production this would be elsewhere)
const db = require('./db'); // heavy module, imported even if not needed
const reportGen = new UserReportGenerator(db);
const ids = [1,2,3,4,5,6,7,8,9,10];
reportGen.generateReport(ids);",code_smell,god_class_and_magic_numbers,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUser(User user) {
        if (user != null) {
            String name = user.getName();
            if (name != null && !name.isEmpty()) {
                name = name.trim();
                System.out.println(""Processing user: "" + name);
            }
            String email = user.getEmail();
            if (email != null && email.contains(""@"")) {
                System.out.println(""User email: "" + email);
            }
            boolean isVerified = user.isVerified();
            if (isVerified) {
                System.out.println(""User is verified."");
            } else {
                System.out.println(""User is NOT verified."");
            }
        }
    }
}",code_smell,long_method,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data

    def update_user(self, user_id, new_email):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET email = %s WHERE id = %s"", (new_email, user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()

    def create_user(self, name, email):
        cursor = self.db_connection.cursor()
        cursor.execute(""INSERT INTO users (name, email) VALUES (%s, %s)"", (name, email))
        self.db_connection.commit()
",code_smell,God class,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_schema()

    def _ensure_schema(self):
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        email TEXT NOT NULL
                      )''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> int:
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        user_id = cur.lastrowid
        conn.commit()
        conn.close()
        return user_id

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('SELECT id, username, email FROM users ORDER BY id LIMIT ? OFFSET ?', (page_size, offset))
        rows = cur.fetchall()
        conn.close()
        # BUG: off‑by‑one error – returns one extra record when page is 1
        if page == 1:
            rows = rows[:-1]
        return [{'id': r[0], 'username': r[1], 'email': r[2]} for r in rows]

# Example usage
repo = UserRepository('app.db')
for i in range(1, 31):
    repo.add_user(f'user{i}', f'user{i}@example.com')
print(repo.get_users_page(1, 10))  # Expected 10 users, but returns 9 due to bug",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void process_data(const std::vector<int>& data, int id) {
    for (int val : data) {
        if (val % 2 == 0) {
            std::lock_guard<std::mutex> lock(mtx);
            std::cout << ""Thread "" << id << "" processing: "" << val << std::endl;
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<std::thread> threads;

    for (int i = 0; i < 4; ++i) {
        threads.emplace_back(process_data, input, i);
    }

    for (auto& t : threads) {
        t.join();
    }

    return 0;
}",code_defect,data_racing,,qwen/qwen3-32b
Java,"public class UserDAO { private static final String DB_PASSWORD = ""mysecretpassword""; private Connection connection; public UserDAO() { try { Class.forName(""com.mysql.cj.jdbc.Driver""); connection = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""myuser"", DB_PASSWORD); } catch (Exception e) { System.out.println(""Error connecting to database: "" + e.getMessage()); } } public List<User> getAllUsers() { List<User> users = new ArrayList<>(); try { Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(""SELECT * FROM users""); while (resultSet.next()) { User user = new User(); user.setId(resultSet.getInt(""id"")); user.setName(resultSet.getString(""name"")); users.add(user); } } catch (Exception e) { System.out.println(""Error retrieving users: "" + e.getMessage()); } return users; } }",code_smell,hardcoded_secrets,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if(worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void process() {
        while(!stopFlag) {
            std::string msg;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if(!queue.empty()) {
                    msg = queue.front();
                    queue.erase(queue.begin());
                }
            }
            // Simulate processing
            std::cout << ""Processed: "" << msg << std::endl;
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main(){
    LogProcessor lp;
    lp.start();
    for(int i=0;i<5;++i){
        lp.enqueue(""Message "" + std::to_string(i));
    }
    // Missing lp.stop(); leads to thread running after main exits
    return 0;
}
",code_defect,missing_thread_join_on_exit,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

def process_user_data(data):
    processed = []
    for entry in data:
        if entry.get('status') == 'active':
            user = {
                'username': entry['username'],
                'email': entry['email'],
                'joined': datetime.strptime(entry['joined'], '%Y-%m-%d').date(),
                'last_login': entry.get('last_login')
            }
            processed.append(user)

    with open('processed_users.json', 'w') as f:
        json.dump(processed, f, indent=2)

    return processed

# Legacy code, might be removed later
# def old_processing(data):
#     return [x for x in data if x['status'] == 'active']

if __name__ == '__main__':
    with open('users.json', 'r') as f:
        raw_data = json.load(f)
    
    result = process_user_data(raw_data)
    print(f'Processed {len(result)} users.')",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class OrderProcessor { private static final double TAX_RATE = 0.08; public void processOrder(Order order) { double subtotal = 0; for (OrderItem item : order.getItems()) { subtotal += item.getPrice() * item.getQuantity(); } double tax = subtotal * TAX_RATE; double total = subtotal + tax; System.out.println(""Order Total: $"" + String.format(""%.2f"", total)); } } class Order { private List<OrderItem> items; public List<OrderItem> getItems() { return items; } public void setItems(List<OrderItem> items) { this.items = items; } } class OrderItem { private double price; private int quantity; public double getPrice() { return price; } public void setPrice(double price) { this.price = price; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; }}",code_smell,god_class,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize || 10;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn should return a promise resolving to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off-by-one error, pageNumber is 1-based but calculation treats it as 0-based
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    const next = this.currentPage + 1;
    const page = this.getPage(next);
    if (page.length > 0) {
      this.currentPage = next;
    }
    return page;
  }
}

// Example usage
const paginator = new Paginator(5);
await paginator.loadItems(() => Promise.resolve([1,2,3,4,5,6,7,8,9,10]));
console.log('First page:', paginator.getPage(1)); // Expected [1,2,3,4,5] but gets [] due to bug
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processOrders(orders, discount) {
  for (let i = 0; i < orders.length; i++) {
    orders[i].total = orders[i].price * orders[i].quantity;
    if (orders[i].total > 100) {
      orders[i].total *= 1 - discount;
    }
    console.log(`Order processed: ${orders[i].id}, Total: $${orders[i].total.toFixed(2)}`);
  }
}

function calculateMonthlyRevenue(orders) {
  let totalRevenue = 0;
  for (let i = 0; i < orders.length; i++) {
    totalRevenue += orders[i].total;
  }
  return totalRevenue;
}

const ordersData = [
  { id: 1, price: 50, quantity: 2 },
  { id: 2, price: 75, quantity: 1 },
  { id: 3, price: 30, quantity: 4 }
];

processOrders(ordersData, 0.1);
console.log(`Total monthly revenue: $${calculateMonthlyRevenue(ordersData).toFixed(2)}`);",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};
class UserRepository {
public:
    void addUser(User user) { users.push_back(user); }
    User getUser(int index) { return users[index]; }
private:
    std::vector<User> users;
};
int main() {
    UserRepository repository;
    repository.addUser(User(""John Doe"", 30));
    User user = repository.getUser(0);
    std::cout << user.getName() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json, os, logging

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        # Insecure: directly evals file content, allowing code execution if file is tampered
        with open(self.path, 'r') as f:
            data = f.read()
            self.config = eval(data)  # unsafe

    def get(self, key, default=None):
        return self.config.get(key, default)

class UserService:
    def __init__(self, config_path):
        self.cfg = ConfigLoader(config_path)
        self.db_url = self.cfg.get('db_url')
        self.logger = logging.getLogger('UserService')

    def fetch_user(self, user_id):
        # Simulated DB fetch; missing error handling for missing user
        query = f""SELECT * FROM users WHERE id = {user_id}""  # potential SQL injection
        result = self._execute_query(query)
        return result[0]  # may raise IndexError if result empty

    def _execute_query(self, query):
        # Placeholder for DB execution; returns empty list for demo
        self.logger.debug(f""Executing query: {query}"")
        return []

if __name__ == '__main__':
    service = UserService('config.cfg')
    user = service.fetch_user(42)
    print(json.dumps(user))
",code_defect,unsafe_eval_and_sql_injection,,openai/gpt-oss-120b
Python,"import time

class UserManager:
    def __init__(self):
        self.users = []

    def add_user(self, name, email, is_admin=False):
        user = {
            'name': name,
            'email': email,
            'is_admin': is_admin
        }
        self.users.append(user)

    def send_email(self, user_email, subject, content):
        # Simulate sending an email
        print(f""Sending email to {user_email} with subject '{subject}'..."")
        time.sleep(1)  # Simulated delay
        print('Email sent successfully.')

    def notify_users(self, message):
        for user in self.users:
            if user['is_admin']:
                self.send_email(user['email'], 'Admin Message', message)
            else:
                self.send_email(user['email'], 'User Message', message)

    def remove_user(self, email):
        for user in self.users:
            if user['email'] == email:
                self.users.remove(user)
                return True
        return False

# Example usage
if __name__ == ""__main__"":
    manager = UserManager()
    manager.add_user('Alice', 'alice@example.com', True)
    manager.add_user('Bob', 'bob@example.com')
    manager.notify_users('System is going down for maintenance.')
    manager.remove_user('bob@example.com')",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticateUser(String username, String password) {
        if (username == null || password == null) {
            return false;
        }
        return password.equals(DEFAULT_PASSWORD);
    }
}",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}

    void addTransaction(int amount) {
        // No synchronization – race condition when called from multiple threads
        total_ += amount;
    }

    int getTotal() const {
        return total_;
    }

private:
    int total_; // shared mutable state
};

void worker(TransactionProcessor& processor, const std::vector<int>& data) {
    for (int val : data) {
        processor.addTransaction(val);
    }
}

int main() {
    TransactionProcessor processor;
    std::vector<int> batch1 = {10, 20, 30, 40, 50};
    std::vector<int> batch2 = {5, 15, 25, 35, 45};

    std::thread t1(worker, std::ref(processor), std::cref(batch1));
    std::thread t2(worker, std::ref(processor), std::cref(batch2));

    t1.join();
    t2.join();

    std::cout << ""Total: "" << processor.getTotal() << std::endl;
    return 0;
}
",code_defect,race_condition,,openai/gpt-oss-120b
JavaScript,"function processUserTransactions(transactions) {
  let total = 0;
  let summary = '';
  for (let i = 0; i < transactions.length; i++) {
    if (transactions[i].type === 'debit') {
      total -= transactions[i].amount;
    } else if (transactions[i].type === 'credit') {
      total += transactions[i].amount;
    }

    summary += `Processed transaction: ${transactions[i].description} (Amount: $${transactions[i].amount})\n`;
  }

  console.log('Summary:\n' + summary);
  return total;
}

const userTransactions = [
  { type: 'debit', amount: 100, description: 'Groceries' },
  { type: 'credit', amount: 500, description: 'Salary' },
  { type: 'debit', amount: 50, description: 'Entertainment' },
];

const balance = processUserTransactions(userTransactions);
console.log(`Final balance: $${balance}`);",code_smell,large_function,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    Student(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class StudentDatabase {
public:
    void addStudent(Student student) { students.push_back(student); }
    void removeStudent(Student student) {
        for (auto it = students.begin(); it != students.end(); ++it) {
            if (it->getName() == student.getName() && it->getAge() == student.getAge()) {
                students.erase(it);
                break;
            }
        }
    }

    void printStudents() {
        for (const auto& student : students) {
            std::cout << student.getName() << "" "" << student.getAge() << std::endl;
        }
    }

private:
    std::vector<Student> students;
};

int main() {
    StudentDatabase db;
    db.addStudent(Student(""John"", 20));
    db.addStudent(Student(""Alice"", 22));
    db.printStudents();
    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogBuffer {
public:
    void addEntry(const std::string& entry) {
        std::lock_guard<std::mutex> lock(mtx_);
        buffer_.push_back(entry);
    }
    std::vector<std::string> flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        std::vector<std::string> copy = buffer_;
        buffer_.clear();
        return copy;
    }
private:
    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

void worker(LogBuffer& log, int id) {
    for (int i = 0; i < 1000; ++i) {
        log.addEntry(""Thread "" + std::to_string(id) + "" entry "" + std::to_string(i));
    }
}

int main() {
    LogBuffer log;
    std::thread t1(worker, std::ref(log), 1);
    std::thread t2(worker, std::ref(log), 2);
    t1.join();
    // Missing t2.join(); leads to data race on destruction of log
    auto entries = log.flush();
    std::cout << ""Flushed "" << entries.size() << "" entries"" << std::endl;
    return 0;
}
",code_defect,missing_thread_join,,openai/gpt-oss-120b
Python,"import os
import json


class ConfigLoader:
    def __init__(self):
        self._config_path = ""config.json""
        self._config_data = None

    def load_config(self):
        try:
            with open(self._config_path, 'r') as f:
                self._config_data = json.load(f)
        except FileNotFoundError:
            print(""Config file not found. Using default values."")
            self._config_data = {""host"": ""localhost"", ""port"": 8080}

    def get_database_url(self):
        return f""{self._config_data['db_type']}://{self._config_data['user']}:"" \
               f""{self._config_data['password']}@{self._config_data['host']}:"" \
               f""{self._config_data['port']}/{self._config_data['database']}""


if __name__ == ""__main__"":
    config_loader = ConfigLoader()
    config_loader.load_config()
    print(config_loader.get_database_url())",code_defect,missing_error_handling,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

class Person {
public:
    std::string name;
    int age;
    Person(std::string n, int a) : name(n), age(a) {}
};

class PersonDatabase {
public:
    void addPerson(Person p) { people.push_back(p); }
    void sortPeople() { std::sort(people.begin(), people.end(), [](Person a, Person b) { return a.age < b.age; }); }
    void printPeople() {
        for (Person p : people) {
            std::cout << p.name << "" is "" << p.age << "" years old.\n"";
        }
    }
private:
    std::vector<Person> people;
};

int main() {
    PersonDatabase db;
    db.addPerson(Person(""John"", 30));
    db.addPerson(Person(""Alice"", 25));
    db.sortPeople();
    db.printPeople();
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // BUG: If no task was available, task remains 0 and is processed anyway
            std::cout << ""Processing: "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 1; i <= 5; ++i) dp.addTask(i);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}
",code_defect,logic_error_processing_empty_queue,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(std::vector<std::string>& userInputs) {
    std::string input;
    while (true) {
        std::cout << ""Enter input (type 'exit' to quit): "";
        std::getline(std::cin, input);
        if (input == ""exit"") {
            break;
        }
        userInputs.push_back(input);
    }
}

void printUserInputs(const std::vector<std::string>& userInputs) {
    std::cout << ""User inputs:
"";
    for (const auto& input : userInputs) {
        std::cout << input << std::endl;
    }
}

int main() {
    std::vector<std::string> userInputs;
    processUserInput(userInputs);
    printUserInputs(userInputs);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final int MAX_RETRIES = 3; public void processPayment(String paymentId) { for (int i = 0; i < MAX_RETRIES; i++) { try { // Simulate payment processing with potential exceptions throw new RuntimeException(""Payment processing failed""); } catch (RuntimeException e) { if (i < MAX_RETRIES - 1) { System.out.println(""Retrying payment processing...""); } else { System.out.println(""Payment processing failed after "" + MAX_RETRIES + "" retries""); } } } } }",code_defect,infinite_retry_with_unhandled_exception,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cur = self.conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        data TEXT)''')
        self.conn.commit()

    def add_user(self, username, data):
        cur = self.conn.cursor()
        # Directly embedding user input into SQL leads to injection vulnerability
        cur.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')"")
        self.conn.commit()

    def get_user(self, user_id):
        cur = self.conn.cursor()
        cur.execute('SELECT username, data FROM users WHERE id = ?', (user_id,))
        row = cur.fetchone()
        if row:
            username, data_json = row
            return {'username': username, 'data': json.loads(data_json)}
        return None

    def delete_all(self):
        # Dangerous operation without confirmation
        cur = self.conn.cursor()
        cur.execute('DELETE FROM users')
        self.conn.commit()

# Example usage
if __name__ == '__main__':
    manager = UserManager('users.db')
    manager.add_user('admin', {'role': 'admin', 'token': os.getenv('ADMIN_TOKEN')})
    user = manager.get_user(1)
    print(user)",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"function processUserData(userData) {
  let result = [];
  for (let i = 0; i < userData.length; i++) {
    if (userData[i].type === 'active') {
      for (let j = 0; j < userData.length; j++) {
        if (userData[i].id === userData[j].id) {
          result.push(userData[j]);
        }
      }
    }
  }
  return result;
}

function fetchActiveUsers() {
  const allUsers = [
    { id: 1, name: 'Alice', type: 'active' },
    { id: 2, name: 'Bob', type: 'inactive' },
    { id: 1, name: 'Alice', type: 'active' },
    { id: 3, name: 'Charlie', type: 'active' }
  ];
  return processUserData(allUsers);
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Python,"
class UserDatabase:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username in self.users:
            return False
        self.users[username] = password
        return True

    def authenticate(self, username, password):
        if username not in self.users:
            return False
        return self.users[username] == password

    def get_all_users(self):
        return list(self.users.keys())

    def delete_user(self, username):
        if username not in self.users:
            return False
        del self.users[username]
        return True

db = UserDatabase()
db.add_user('admin', 'password123')
print(db.authenticate('admin', 'password123'))  # prints: True
print(db.get_all_users())  # prints: ['admin']
db.delete_user('admin')
print(db.get_all_users())  # prints: []
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i]; // out‑of‑bounds read may crash
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << "" Odd sum: "" << processor.getOddSum() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.users = [];
  }

  registerUser(username, password, email, isVerified, role, preferences) {
    const user = {
      username,
      password,
      email,
      isVerified,
      role,
      preferences
    };

    this.users.push(user);
  }

  authenticateUser(username, password) {
    const user = this.users.find(u => u.username === username && u.password === password);
    if (!user) {
      throw new Error('Invalid credentials');
    }

    return user;
  }

  sendVerificationEmail(user) {
    if (!user.email) {
      throw new Error('User email is missing');
    }

    // Simulate sending an email
    console.log(`Verification email sent to ${user.email}`);
  }
}

// Usage
const auth = new UserAuth();
auth.registerUser('john_doe', 'securepassword123', 'john@example.com', false, 'user', { theme: 'dark' });

try {
  const user = auth.authenticateUser('john_doe', 'securepassword123');
  auth.sendVerificationEmail(user);
} catch (error) {
  console.error(error.message);
}",code_smell,long_parameter_list,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(merchantId, apiKey) {
         this.merchantId = merchantId;
         this.apiKey = apiKey;
         this.cache = {};
      }

      async processPayment(amount, customerId) {
         const cacheKey = `${amount}-${customerId}`;
         if (this.cache[cacheKey]) {
            return this.cache[cacheKey];
         }

         const response = await fetch('https://api.example.com/payment', {
            method: 'POST',
            headers: {
               'Authorization': `Bearer ${this.apiKey}`,
               'Content-Type': 'application/json'
            },
            body: JSON.stringify({
               amount: amount,
               customerId: customerId,
               merchantId: this.merchantId
            })
         });

         const result = await response.json();
         this.cache[cacheKey] = result;
         return result;
      }
   }

   const processor = new PaymentProcessor('12345', 'abcdefg');
   processor.processPayment(100, 'customer1').then(result => {
      console.log(result);
   });
   ",code_smell,inefficient_caching,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }
    void flush() {
        for (const auto& line : logs_) {
            std::cout << line << std::endl;
        }
        logs_.clear();
    }
private:
    std::vector<std::string> logs_;
    std::mutex mtx_;
};

void worker(LogAggregator* agg, int id) {
    for (int i = 0; i < 5; ++i) {
        agg->addLog(""Thread "" + std::to_string(id) + "" log "" + std::to_string(i));
    }
    // Missing flush call leads to lost logs if program ends before destructor
}

int main() {
    LogAggregator* aggregator = new LogAggregator();
    std::thread t1(worker, aggregator, 1);
    std::thread t2(worker, aggregator, 2);
    t1.join();
    t2.join();
    // Forget to call aggregator->flush();
    delete aggregator; // Destructor does not flush, logs are lost
    return 0;
}
",code_defect,lost_logs_due_to_missing_flush,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final String DEFAULT_CURRENCY = ""USD"";

    public double calculateTotalPrice(List<OrderItem> items, String currency) {
        double totalPrice = 0;
        for (OrderItem item : items) {
            if (item != null) {
                double price = item.getPrice();
                if (currency.equals(""USD"")) {
                    totalPrice += price * 1.0;
                } else if (currency.equals(""EUR"")) {
                    totalPrice += price * 0.9;
                } else if (currency.equals(""JPY"")) {
                    totalPrice += price * 110.0;
                } else {
                    totalPrice += price * 1.0;
                }
            }
        }
        return totalPrice;
    }

    public boolean isEligibleForDiscount(Order order) {
        if (order == null) {
            return false;
        }
        return order.getItems().size() > 5 && order.getTotalPrice() > 100.0;
    }
}",code_smell,primitive_obsession,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(paymentGateway) {
         this.paymentGateway = paymentGateway;
      }

      processPayment(amount, currency) {
         if (amount <= 0) {
            throw new Error('Invalid amount');
         }
         const exchangeRate = this.getExchangeRate(currency);
         const amountInUSD = amount / exchangeRate;
         this.paymentGateway.chargeCard(amountInUSD);
      }

      getExchangeRate(currency) {
         const exchangeRates = {
            'USD': 1,
            'EUR': 0.88,
            'GBP': 0.76
         };
         return exchangeRates[currency];
      }
   }

   class PaymentGateway {
      chargeCard(amount) {
         // Simulate a payment gateway charge
         console.log(`Charging card with amount: ${amount}`);
      }
   }

   const paymentGateway = new PaymentGateway();
   const paymentProcessor = new PaymentProcessor(paymentGateway);
   paymentProcessor.processPayment(100, 'EUR');
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT NOT NULL,
            password TEXT NOT NULL
        )''')
        self.conn.commit()

    def add_user(self, username, password):
        # Store password in plain text (security flaw)
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, password))
        self.conn.commit()

    def authenticate(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute('SELECT password FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row and row[0] == password:
            return True
        return False

    def export_user_data(self, export_path):
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, username, password FROM users')
        users = cursor.fetchall()
        # Insecurely write raw passwords to a JSON file
        with open(export_path, 'w') as f:
            json.dump([{'id': u[0], 'username': u[1], 'password': u[2]} for u in users], f)

# Usage example
if __name__ == '__main__':
    manager = UserManager('users.db')
    manager.add_user('alice', 's3cr3t')
    manager.add_user('bob', 'p@ssw0rd')
    print('Alice auth:', manager.authenticate('alice', 's3cr3t'))
    manager.export_user_data('export.json')
",code_defect,insecure_password_storage,,openai/gpt-oss-120b
Python,"import json
import requests

API_KEY = '1234567890'


def fetch_weather_data(city):
    url = f'http://api.weatherapi.com/v1/current.json?key={API_KEY}&q={city}'
    response = requests.get(url)
    data = json.loads(response.text)
    
    return {
        'temperature': data['current']['temp_c'],
        'condition': data['current']['condition']['text'],
    }


def get_weather_info():
    city = input('Enter a city name: ')
    weather_data = fetch_weather_data(city)
    print(f""Temperature in {city} is {weather_data['temperature']}°C."")
    print(f""Condition: {weather_data['condition']}."")

if __name__ == '__main__':
    get_weather_info()",code_defect,hardcoded_secrets,,qwen/qwen3-32b
Python,"
class UserDatabase:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password

    def check_credentials(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def update_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
            return True
        return False

    def delete_user(self, username):
        if username in self.users:
            del self.users[username]
            return True
        return False

    def get_all_users(self):
        return list(self.users.keys())

db = UserDatabase()

def main():
    while True:
        print(""1. Add user"")
        print(""2. Check credentials"")
        print(""3. Update password"")
        print(""4. Delete user"")
        print(""5. Get all users"")
        print(""6. Exit"")
        choice = input(""Choose an option: "")

        if choice == '1':
            username = input(""Enter username: "")
            password = input(""Enter password: "")
            db.add_user(username, password)
        elif choice == '2':
            username = input(""Enter username: "")
            password = input(""Enter password: "")
            if db.check_credentials(username, password):
                print(""Credentials are correct"")
            else:
                print(""Credentials are incorrect"")
        elif choice == '3':
            username = input(""Enter username: "")
            new_password = input(""Enter new password: "")
            if db.update_password(username, new_password):
                print(""Password updated successfully"")
            else:
                print(""User not found"")
        elif choice == '4':
            username = input(""Enter username: "")
            if db.delete_user(username):
                print(""User deleted successfully"")
            else:
                print(""User not found"")
        elif choice == '5':
            print(db.get_all_users())
        elif choice == '6':
            break
        else:
            print(""Invalid choice"")
",code_smell,god_class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String domainFilter) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // insecure concatenation, vulnerable to SQL injection
            String query = ""SELECT email FROM users WHERE email LIKE '"" + domainFilter + ""%'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception, lose error info
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (i != j && data[i] == data[j]) {
                std::cout << ""Duplicate found at indices "" << i << "" and "" << j << std::endl;
            }
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 2, 4, 5, 1};
    processData(input);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>

   class Student {
   public:
       Student(std::string name, int grade) : name(name), grade(grade) {}
       std::string getName() { return name; }
       int getGrade() { return grade; }
   private:
       std::string name;
       int grade;
   };

   std::vector<Student> filterStudents(const std::vector<Student>& students, int minGrade) {
       std::vector<Student> filtered;
       for (const auto& student : students) {
           if (student.getGrade() >= minGrade) {
               filtered.push_back(student);
           }
       }
       return filtered;
   }

   int main() {
       std::vector<Student> students = {Student(""Alice"", 90), Student(""Bob"", 80), Student(""Charlie"", 95)};
       std::vector<Student> filtered = filterStudents(students, 85);
       for (const auto& student : filtered) {
           std::cout << student.getName() << "" "" << student.getGrade() << std::endl;
       }
       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(int id) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(id);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int id = -1;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    id = queue.back();
                    queue.pop_back();
                }
            }
            if (id != -1) {
                // Simulate processing
                std::cout << ""Processing log "" << id << std::endl;
            }
        }
    }
    std::vector<int> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(i);
    }
    // Missing lp.stop(); leads to thread running after main exits
    return 0;
}
",code_defect,resource_leak_thread_not_joined,,openai/gpt-oss-120b
Java,"public class ReportGenerator {
    private String reportFormat;

    public ReportGenerator(String reportFormat) {
        this.reportFormat = reportFormat;
    }

    public void generateReport() {
        if (reportFormat.equals(""PDF"")) {
            System.out.println(""Generating PDF report..."");
            System.out.println(""Report content: Placeholder"");
            System.out.println(""Report generated."");
        } else if (reportFormat.equals(""CSV"")) {
            System.out.println(""Generating CSV report..."");
            System.out.println(""Report content: Placeholder"");
            System.out.println(""Report generated."");
        } else if (reportFormat.equals(""XML"")) {
            System.out.println(""Generating XML report..."");
            System.out.println(""Report content: Placeholder"");
            System.out.println(""Report generated.
        }
    }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>

   class Employee {
   public:
       std::string name;
       int salary;

       Employee(std::string name, int salary) : name(name), salary(salary) {}

       bool operator<(const Employee& other) const {
           return salary < other.salary;
       }
   };

   void sortEmployees(std::vector<Employee>& employees) {
       std::sort(employees.begin(), employees.end());
   }

   int main() {
       std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
       sortEmployees(employees);

       for (const auto& employee : employees) {
           std::cout << employee.name << "" "" << employee.salary << std::endl;
       }

       return 0;
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize || 10;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn returns a promise resolving to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off‑by‑one error – should use pageNumber - 1
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    const next = this.currentPage + 1;
    const page = this.getPage(next);
    if (page.length > 0) {
      this.currentPage = next;
      return page;
    }
    return [];
  }
}

// Usage example (not part of the library)
const paginator = new Paginator(5);
await paginator.loadItems(() => Promise.resolve([1,2,3,4,5,6,7,8,9,10]));
console.log('First page:', paginator.getPage(1)); // Expected [1,2,3,4,5] but gets [] due to bug",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

void processData(std::string data) {
    int count = 0;
    std::string processedData;

    for (size_t i = 0; i < data.length(); ++i) {
        if (data[i] >= 'A' && data[i] <= 'Z') {
            processedData += data[i];
            ++count;
        }
    }

    std::cout << ""Processed data length: "" << processedData.length() << std::endl;
    std::cout << ""Capital letter count: "" << count << std::endl;
}

int main() {
    std::string input = ""ExampleInput123"";
    processData(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor() {
            this.users = [];
         }

         async loadUsers() {
            const response = await fetch('https://example.com/users');
            const data = await response.json();
            this.users = data;
         }

         getUser(id) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === id) {
                  return this.users[i];
               }
            }
            return null;
         }
      }

      const userService = new UserService();
      userService.loadUsers();
      const user = userService.getUser(1);
      console.log(user);
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Simulate processing
            std::cout << ""Processing "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 0; i < 5; ++i) dp.addTask(i);
    // Missing dp.stop(); leads to thread running after main exits
    return 0;
}
",code_defect,resource_leak_thread_not_joined,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let results = [];
  for (let i = 0; i < data.length; i++) {
    let item = data[i];
    if (item && item.value && item.value > 0) {
      let processedItem = {
        id: item.id,
        value: item.value * 2
      };
      results.push(processedItem);
    }
  }
  return results;
}

function updateDatabase(records) {
  for (let i = 0; i < records.length; i++) {
    let record = records[i];
    console.log(`Updating record ID: ${record.id}, Value: ${record.value}`);
    // Simulate a database update
    if (record.value % 2 === 0) {
      console.log('Update successful');
    } else {
      console.log('Update failed');
    }
  }
}

function main() {
  let rawData = [
    { id: 1, value: 10 },
    { id: 2, value: 5 },
    { id: 3, value: -3 },
    { id: 4, value: 7 }
  ];
  let processed = processData(rawData);
  updateDatabase(processed);
}

main();",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
    
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
    
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn returns a promise that resolves to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off‑by‑one error – should use pageNumber - 1
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    const next = this.currentPage + 1;
    const page = this.getPage(next);
    if (page.length > 0) {
      this.currentPage = next;
    }
    return page;
  }
}

// Usage example
const paginator = new Paginator(10);
await paginator.loadItems(() => fetch('/api/items').then(r => r.json()));
console.log('First page:', paginator.getPage(1)); // Returns items 10‑19 instead of 0‑9",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class DataProcessor {
  constructor(data) {
    this.data = data;
    this.cache = {};
  }

  process() {
    const result = [];
    for (let i = 0; i < this.data.length; i++) {
      const item = this.data[i];
      let processed = this.cache[item.id];
      
      if (!processed) {
        processed = this._processItem(item);
        this.cache[item.id] = processed;
      }

      result.push(processed);
    }
    return result;
  }

  _processItem(item) {
    let value = item.value;
    if (item.type === 'string') {
      value = value.toUpperCase();
    } else if (item.type === 'number') {
      value = Math.sqrt(value);
    } else if (item.type === 'boolean') {
      value = !value;
    } else {
      value = null;
    }
    return { id: item.id, value };
  }
}

// Example usage
const data = [
  { id: 1, value: 'hello', type: 'string' },
  { id: 2, value: 25, type: 'number' },
  { id: 3, value: true, type: 'boolean' },
  { id: 4, value: 'world', type: 'string' }
];

const processor = new DataProcessor(data);
const output = processor.process();",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,class PaymentProcessor { constructor() { this.payments = []; } addPayment(amount) { this.payments.push(amount); } calculateTotal() { let total = 0; for (let i = 0; i < this.payments.length; i++) { total += this.payments[i]; } return total; } applyDiscount(discountPercentage) { let total = this.calculateTotal(); let discountAmount = total * (discountPercentage / 100); return total - discountAmount; } },code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,hardcoded_credentials_and_sql_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor() {
        orders = new ArrayList<>();
    }

    public void addOrder(Order order) {
        orders.add(order);
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                if (order.getStatus().equals(""PENDING"")) {
                    if (order.getTotal() > 0) {
                        System.out.println(""Processing order: "" + order.getOrderId());
                        sendOrderToInventory(order);
                        sendOrderToShipping(order);
                        markAsProcessed(order);
                    }
                }
            }
        }
    }

    private void sendOrderToInventory(Order order) {
        // simulate API call
        System.out.println(""Sent order to inventory: "" + order.getOrderId());
    }

    private void sendOrderToShipping(Order order) {
        // simulate API call
        System.out.println(""Sent order to shipping: "" + order.getOrderId());
    }

    private void markAsProcessed(Order order) {
        order.setStatus(""PROCESSED"");
    }
}",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
     constructor() {
       this.users = [];
     }

     addUser(user) {
       this.users.push(user);
     }

     removeUser(userId) {
       for (let i = 0; i < this.users.length; i++) {
         if (this.users[i].id === userId) {
           this.users.splice(i, 1);
           break;
         }
       }
     }

     getUserCount() {
       return this.users.length;
     }
   }

   function main() {
     const userManager = new UserManager();
     userManager.addUser({ id: 1, name: 'John Doe' });
     userManager.addUser({ id: 2, name: 'Jane Doe' });
     console.log(userManager.getUserCount());
     userManager.removeUser(1);
     console.log(userManager.getUserCount());
   }

   main();
 ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL,
                profile TEXT
            )
        ''')
        self.conn.commit()

    def create_user(self, username, password):
        # NOTE: Insecure password handling for demo purposes
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, password_hash) VALUES (?, ?)', (username, password))
        self.conn.commit()
        return cursor.lastrowid

    def get_user_profile(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT profile FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            # Potential unsafe deserialization
            return json.loads(row[0])
        return None

    def update_profile(self, user_id, profile_dict):
        cursor = self.conn.cursor()
        profile_json = json.dumps(profile_dict)
        cursor.execute('UPDATE users SET profile = ? WHERE id = ?', (profile_json, user_id))
        self.conn.commit()

    def delete_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE id = ?', (user_id,))
        self.conn.commit()

# Usage example (would be called from elsewhere)
manager = UserManager(os.getenv('DB_PATH', ':memory:'))
uid = manager.create_user('alice', 'password123')
manager.update_profile(uid, {'age': 30, 'email': 'alice@example.com'})
profile = manager.get_user_profile(uid)
print('Loaded profile:', profile)
",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  findUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  getAllUsers() {
    return this.users;
  }

  updateUserEmail(user, newEmail) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === user.id) {
        this.users[i].email = newEmail;
      }
    }
  }
}

const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com' },
  { id: 2, name: 'Bob', email: 'bob@example.com' }
];

const userManager = new UserManager(users);
userManager.updateUserEmail({ id: 1 }, 'alice_new@example.com');",code_smell,mutation_of_immutable_data,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    DataProcessor(const std::vector<int>& data) : data_(data) {}
    void process() {
        for (int i = 0; i < data_.size(); ++i) {
            std::cout << data_[i] << std::endl;
        }
    }
private:
    std::vector<int> data_;
};

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    DataProcessor processor(data);
    processor.process();
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    """"""Loads configuration from a JSON file.

    The path is taken from an environment variable. If the file is missing or malformed,
    the application falls back to defaults.
    """"""
    DEFAULT_CONFIG = {
        ""retry_count"": 3,
        ""timeout"": 30,
        ""api_key"": """"
    }

    def __init__(self):
        self.config_path = os.getenv('APP_CONFIG_PATH', '/etc/app/config.json')
        self.config = self.DEFAULT_CONFIG.copy()
        self._load()

    def _load(self):
        try:
            with open(self.config_path, 'r') as f:
                data = json.load(f)
                self.config.update(data)
        except Exception as e:
            logger.warning(f""Failed to load config from {self.config_path}: {e}"")

    def get(self, key):
        return self.config.get(key)

class DataProcessor:
    """"""Processes incoming data records and stores them in a database.

    The `process` method expects a dictionary with specific fields.
    """"""
    def __init__(self, db_connection):
        self.db = db_connection
        self.allowed_fields = {'id', 'value', 'timestamp'}

    def _validate(self, record):
        # Missing check for extra unexpected fields
        return all(k in self.allowed_fields for k in record.keys())

    def process(self, record):
        if not self._validate(record):
            raise ValueError(""Invalid record fields"")
        # Direct string interpolation leads to SQL injection vulnerability
        query = f""INSERT INTO records (id, value, timestamp) VALUES ({record['id']}, '{record['value']}', '{record['timestamp']}')""
        self.db.execute(query)

# Example usage (would be called by the application entry point)
if __name__ == '__main__':
    import sqlite3
    conn = sqlite3.connect(':memory:')
    conn.execute('CREATE TABLE records (id INTEGER, value TEXT, timestamp TEXT)')
    processor = DataProcessor(conn)
    sample = {'id': 1, 'value': ""test"", 'timestamp': '2025-01-01T00:00:00'}
    processor.process(sample)
    conn.commit()
    conn.close()",code_defect,SQL_injection,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  getAllUsersWithRole(role) {
    const result = [];
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].role === role) {
        result.push(this.users[i]);
      }
    }
    return result;
  }

  addUser(newUser) {
    this.users.push(newUser);
  }

  removeUserByEmail(email) {
    this.users = this.users.filter(user => user.email !== email);
  }
}

const usersData = [
  { name: 'Alice', email: 'alice@example.com', role: 'admin' },
  { name: 'Bob', email: 'bob@example.com', role: 'user' },
  { name: 'Charlie', email: 'charlie@example.com', role: 'user' }
];

const userManager = new UserManager(usersData);",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getUsers() { const users = await this.userRepository.getAllUsers(); return users.map(user => ({ id: user.id, name: user.name })); } async getUserById(id) { const user = await this.userRepository.getUserById(id); if (!user) { throw new Error('User not found'); } return user; } }",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""SELECT balance FROM accounts WHERE user_id = ?"";
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, userId);
            rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    // Update balance without transaction safety
                    String updateSql = ""UPDATE accounts SET balance = balance - ? WHERE user_id = ?"";
                    PreparedStatement updateStmt = conn.prepareStatement(updateSql);
                    updateStmt.setDouble(1, amount);
                    updateStmt.setString(2, userId);
                    updateStmt.executeUpdate();
                    // Log transaction (ignores failures)
                    logTransaction(userId, amount);
                    return true;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
        return false;
    }

    private void logTransaction(String userId, double amount) {
        // Simplified logging, no error handling
        System.out.println(""Transaction: user="" + userId + "", amount="" + amount);
    }
}
",code_defect,missing_transaction_handling,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(String userId, String productId, int quantity, String paymentMethod, boolean isExpressDelivery, String shippingAddress) {
        if (userId == null || productId == null || quantity <= 0) {
            return;
        }

        boolean isPaymentValid = validatePayment(paymentMethod);
        if (!isPaymentValid) {
            return;
        }

        String finalAddress = shippingAddress;
        if (isExpressDelivery) {
            finalAddress = getExpressDeliveryAddress();
        }

        if (finalAddress == null) {
            return;
        }

        // TODO: Check if product is in stock
        boolean isAvailable = checkProductAvailability(productId);
        if (!isAvailable) {
            return;
        }

        // Placeholder for actual order processing logic
        System.out.println(""Order processed for user "" + userId + "", product "" + productId);
        System.out.println(""Quantity: "" + quantity + "", Address: "" + finalAddress);
    }

    private boolean validatePayment(String method) {
        // Dummy validation logic
        return method != null && !method.isEmpty();
    }

    private String getExpressDeliveryAddress() {
        return ""123 Fast Lane"";
    }

    private boolean checkProductAvailability(String productId) {
        // Simulate product availability
        return productId != null && productId.length() > 3;
    }
}",code_smell,,,qwen/qwen3-32b
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            conn.setAutoCommit(false);
            // Deduct balance
            String updateSql = ""UPDATE accounts SET balance = balance - ? WHERE user_id = ?"";
            try (PreparedStatement ps = conn.prepareStatement(updateSql)) {
                ps.setDouble(1, amount);
                ps.setString(2, userId);
                int rows = ps.executeUpdate();
                if (rows != 1) {
                    conn.rollback();
                    return false;
                }
            }
            // Log transaction
            String insertSql = ""INSERT INTO transactions (user_id, amount) VALUES (?, ?)"";
            try (PreparedStatement ps = conn.prepareStatement(insertSql)) {
                ps.setString(1, userId);
                ps.setDouble(2, amount);
                ps.executeUpdate();
            }
            conn.commit();
            return true;
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ex) {}
            return false;
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException e) {}
        }
    }

    // Vulnerable method: SQL injection via orderBy parameter
    public ResultSet getUserTransactions(String userId, String orderBy) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String query = ""SELECT * FROM transactions WHERE user_id = '"" + userId + ""' ORDER BY "" + orderBy;
        PreparedStatement stmt = conn.prepareStatement(query);
        return stmt.executeQuery(); // connection never closed, potential resource leak
    }
}
",code_defect,sql_injection_and_resource_leak,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class DataProcessor {
public:
    void process(const vector<string>& input) {
        for (const auto& str : input) {
            if (str.empty()) {
                continue;
            }
            if (str.length() > 10) {
                cout << ""Long string: "" << str << endl;
            } else {
                cout << ""Short string: "" << str << endl;
            }
        }
    }
};

int main() {
    vector<string> input = {""example123"", ""short"", """", ""anotherLongString""};
    DataProcessor processor;
    processor.process(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email

    def login(self, password):
        if self.password == password:
            return True
        else:
            return False

    def change_password(self, old_password, new_password):
        if self.password == old_password:
            self.password = new_password
            return True
        else:
            return False

class UserManager:
    def __init__(self):
        self.accounts = {}

    def create_account(self, username, password, email):
        if username in self.accounts:
            return False
        self.accounts[username] = UserAccount(username, password, email)
        return True

    def get_account(self, username):
        return self.accounts.get(username)

# Example usage
manager = UserManager()
manager.create_account('test_user', 'test_password', 'test@example.com')
account = manager.get_account('test_user')
if account.login('test_password'):
    print('Login successful')
else:
    print('Login failed')
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }
    void flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        for (const auto& line : logs_) {
            std::cout << line << std::endl;
        }
        logs_.clear();
    }
private:
    std::vector<std::string> logs_;
    std::mutex mtx_;
};

void worker(LogAggregator* agg, int id) {
    for (int i = 0; i < 100; ++i) {
        agg->addLog(""Worker "" + std::to_string(id) + "" iteration "" + std::to_string(i));
    }
    // Missing call to flush leads to data loss if program exits before flush
}

int main() {
    LogAggregator aggregator;
    std::thread t1(worker, &aggregator, 1);
    std::thread t2(worker, &aggregator, 2);
    t1.join();
    t2.join();
    // aggregator.flush(); // Intentionally omitted, causing logs to be lost
    return 0;
}
",code_defect,lost_logs_due_to_missing_flush,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processUserInput(const std::string& input) {
    std::string processed = input;
    if (input.length() > 0) {
        for (char& c : processed) {
            if (c == 'a') {
                c = 'A';
            } else if (c == 'e') {
                c = 'E';
            } else if (c == 'i') {
                c = 'I';
            } else if (c == 'o') {
                c = 'O';
            } else if (c == 'u') {
                c = 'U';
            }
        }
    }
    return processed;
}

int main() {
    std::string input;
    std::cout << ""Enter a string: "";
    std::getline(std::cin, input);

    std::string result = processUserInput(input);
    std::cout << ""Processed string: "" << result << std::endl;

    return 0;
}",code_smell,long_method,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger logger = LoggerFactory.getLogger(UserService.class); public void saveUser(User user) { try { User existingUser = userRepository.findByUsername(user.getUsername()); if (existingUser != null) { existingUser.setEmail(user.getEmail()); existingUser.setName(user.getName()); userRepository.save(existingUser); } else { userRepository.save(user); } } catch (Exception e) { logger.error(""Error saving user"", e); } } }",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class LogProcessor {
    constructor(logFilePath) {
        this.logFilePath = logFilePath;
        this.buffer = [];
    }

    // Reads the entire log file into memory and processes each line
    processLogs() {
        const data = fs.readFileSync(this.logFilePath, 'utf8');
        const lines = data.split('\n');
        for (let i = 0; i <= lines.length; i++) { // off‑by‑one error: i can equal lines.length
            const line = lines[i];
            if (line && line.includes('ERROR')) {
                this.buffer.push(this._parseError(line));
            }
        }
        this._writeReport();
    }

    _parseError(line) {
        const parts = line.split(' ');
        return {
            timestamp: parts[0],
            level: parts[1],
            message: parts.slice(2).join(' ')
        };
    }

    _writeReport() {
        const reportPath = this.logFilePath + '.report.json';
        fs.writeFileSync(reportPath, JSON.stringify(this.buffer, null, 2));
    }
}

module.exports = LogProcessor;",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import requests

def fetch_and_process_data(url, auth_token=None, timeout=10, max_retries=3):
    headers = {'Authorization': f'Bearer {auth_token}'} if auth_token else {}
    data = None
    for retry in range(max_retries):
        try:
            response = requests.get(url, headers=headers, timeout=timeout)
            if response.status_code == 200:
                data = response.json()
                break
            elif response.status_code == 401:
                raise Exception('Authentication failed')
        except requests.RequestException as e:
            print(f'Request failed: {e}')
            continue
    return data

result = fetch_and_process_data('https://api.example.com/data', auth_token='12345')",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Person {
public:
    string name;
    int age;
    Person(string n, int a) : name(n), age(a) {}
};

class PersonDatabase {
public:
    vector<Person> people;
    void addPerson(Person p) { people.push_back(p); }
    Person getOldestPerson() {
        if (people.empty()) return Person("""", -1);
        return *max_element(people.begin(), people.end(), [](const Person& a, const Person& b) { return a.age < b.age; });
    }
};

int main() {
    PersonDatabase db;
    db.addPerson(Person(""John"", 30));
    db.addPerson(Person(""Alice"", 25));
    Person oldest = db.getOldestPerson();
    cout << oldest.name << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""admin123""; // hardcoded credentials

    public List<String> getPendingTransactions() throws Exception {
        List<String> ids = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(""SELECT id FROM transactions WHERE status='PENDING'"");
        while (rs.next()) {
            ids.add(rs.getString(""id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return ids;
    }

    public void processAll() throws Exception {
        List<String> pending = getPendingTransactions();
        for (String id : pending) {
            processTransaction(id);
        }
    }

    private void processTransaction(String transactionId) throws Exception {
        // Vulnerable to SQL injection if transactionId is manipulated
        String query = ""UPDATE transactions SET status='COMPLETED' WHERE id='"" + transactionId + ""'"";
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        Statement stmt = conn.createStatement();
        stmt.executeUpdate(query);
        stmt.close();
        conn.close();
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

using namespace std;

string processUserInput(string input) {
    string result = input;
    for (int i = 0; i < input.length(); i++) {
        if (input[i] == 'a') {
            result[i] = 'A';
        } else if (input[i] == 'e') {
            result[i] = 'E';
        } else if (input[i] == 'i') {
            result[i] = 'I';
        } else if (input[i] == 'o') {
            result[i] = 'O';
        } else if (input[i] == 'u') {
            result[i] = 'U';
        }
    }
    return result;
}

int main() {
    string user_input;
    cout << ""Enter a string: "";
    getline(cin, user_input);
    cout << ""Processed string: "" << processUserInput(user_input) << endl;
    return 0;
}",code_smell,long_function,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
        else:
            self.users[user_id].update(user_data)

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            raise Exception('User not found')

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
        else:
            raise Exception('User not found')

    def get_all_users(self):
        return list(self.users.values())

# usage
user_manager = UserManager()
user_manager.add_user('1', {'name': 'John', 'age': 30})
user_manager.add_user('2', {'name': 'Alice', 'age': 25})
print(user_manager.get_all_users())
",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3
from typing import List, Dict

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_db()

    def _ensure_db(self):
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        email TEXT NOT NULL,
                        data TEXT
                    )''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str, data: Dict):
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        # BUG: Directly embedding user-provided data into SQL leads to SQL injection
        c.execute(f""INSERT INTO users (username, email, data) VALUES ('{username}', '{email}', '{json.dumps(data)}')"")
        conn.commit()
        conn.close()

    def get_user(self, user_id: int) -> Dict:
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        c.execute('SELECT id, username, email, data FROM users WHERE id = ?', (user_id,))
        row = c.fetchone()
        conn.close()
        if row:
            return {'id': row[0], 'username': row[1], 'email': row[2], 'data': json.loads(row[3])}
        return {}

    def list_all_users(self) -> List[Dict]:
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        c.execute('SELECT id, username, email, data FROM users')
        rows = c.fetchall()
        conn.close()
        return [{'id': r[0], 'username': r[1], 'email': r[2], 'data': json.loads(r[3])} for r in rows]

# Example usage (would be removed in production)
if __name__ == '__main__':
    repo = UserRepository(os.getenv('USER_DB', 'users.db'))
    repo.add_user('alice', 'alice@example.com', {'role': 'admin'})
    print(repo.get_user(1))
    print(repo.list_all_users())
",code_defect,sql_injection_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    void process(const std::vector<int>& data) {
        if (data.empty()) {
            std::cerr << ""Error: empty data provided."" << std::endl;
            return;
        }

        for (size_t i = 0; i < data.size(); ++i) {
            if (data[i] % 2 == 0) {
                std::cout << ""Even number: "" << data[i] << std::endl;
            } else {
                std::cout << ""Odd number: "" << data[i] << std::endl;
            }
        }
    }
};

int main() {
    DataProcessor processor;
    std::vector<int> input = {2, 3, 4, 5, 6};
    processor.process(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public synchronized void addUser(User user) { users.put(user.getUsername(), user); } public synchronized User getUser(String username) { return users.get(username); } public synchronized void removeUser(String username) { users.remove(username); } }",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&TransactionProcessor::processQueue, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(int amount) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(amount);
    }
private:
    void processQueue() {
        while (!stopFlag) {
            int item = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    item = queue.back();
                    queue.pop_back();
                }
            }
            // Process the item without checking if queue was empty
            // This can lead to processing a default-initialized value (0)
            // which may represent an invalid transaction.
            processTransaction(item);
        }
    }
    void processTransaction(int amount) {
        // Simulate a critical operation that must not receive zero
        if (amount == 0) {
            std::cerr << ""Error: Invalid transaction amount!"" << std::endl;
            // Missing proper error handling; continue processing
        }
        std::cout << ""Processed transaction of $"" << amount << std::endl;
    }
    std::vector<int> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    TransactionProcessor tp;
    tp.start();
    tp.enqueue(100);
    tp.enqueue(200);
    // No more enqueues; thread will keep processing zeros indefinitely
    std::this_thread::sleep_for(std::chrono::seconds(2));
    tp.stop();
    return 0;
}
",code_defect,logic_error_due_to_unchecked_empty_queue,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrder(order) {
    if (!order || !order.items || !order.customer) {
      return 'Invalid order';
    }

    let totalPrice = 0;
    for (let i = 0; i < order.items.length; i++) {
      const item = order.items[i];
      totalPrice += item.price * item.quantity;
    }

    if (totalPrice <= 0) {
      return 'Total price must be greater than zero';
    }

    if (order.customer.type === 'VIP') {
      totalPrice *= 0.9;
    }

    if (order.payment.method === 'credit_card') {
      // Simulate payment processing
      if (!order.payment.cardNumber || !order.payment.expiry) {
        return 'Payment information incomplete';
      }
      // Simulate external payment API call
      if (!this._simulatePayment(order.payment)) {
        return 'Payment failed';
      }
    }

    return `Order processed successfully. Total: $${totalPrice.toFixed(2)}`;
  }

  _simulatePayment(payment) {
    // Simulate a failed payment when card number is even-length
    return payment.cardNumber.length % 2 === 1;
  }
}",code_defect,logic_error,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = []

    def add_user(self, user_id, username):
        for user in self.users:
            if user['id'] == user_id:
                user['username'] = username
                return
        self.users.append({'id': user_id, 'username': username})

    def get_user(self, user_id):
        for user in self.users:
            if user['id'] == user_id:
                return user
        return None

    def update_user(self, user_id, username):
        user = self.get_user(user_id)
        if user:
            user['username'] = username
        else:
            self.add_user(user_id, username)

    def delete_user(self, user_id):
        self.users = [user for user in self.users if user['id'] != user_id]
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a log file
    async getUserProfile(userId) {
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            throw new Error('User not found');
        }
        // Write audit log (potential race condition)
        fs.appendFile('audit.log', `User ${userId} accessed at ${new Date().toISOString()}\n`, (err) => {
            if (err) {
                console.error('Failed to write audit log');
            }
        });
        return user;
    }

    // Updates user email without proper validation (security defect)
    async updateEmail(userId, newEmail) {
        // Directly interpolates user input into SQL query
        const query = `UPDATE users SET email = '${newEmail}' WHERE id = ${userId}`;
        await this.db.execute(query);
        // No verification that email format is correct
        return true;
    }
}

module.exports = UserService;",code_defect,SQL_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final String DISCOUNT_CODE = ""SUMMER20"";

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        double totalPrice = calculateTotalPrice(order.getItems());
        if (DISCOUNT_CODE.equals(order.getDiscountCode())) {
            totalPrice *= 0.8;
        }

        System.out.println(""Processing order: "" + order.getOrderId());
        System.out.println(""Total price after discount: "" + totalPrice);

        sendOrderToWarehouse(order);
    }

    private double calculateTotalPrice(List<Item> items) {
        double total = 0;
        for (Item item : items) {
            total += item.getPrice() * item.getQuantity();
        }
        return total;
    }

    private void sendOrderToWarehouse(Order order) {
        System.out.println(""Order sent to warehouse: "" + order.getOrderId());
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"const fs = require('fs');
const path = require('path');
const _ = require('lodash'); // unused import

class UserProcessor {
    constructor(baseDir) {
        this.baseDir = baseDir;
    }

    // Processes all JSON user files in the directory
    processAll() {
        const files = fs.readdirSync(this.baseDir);
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            if (path.extname(file) !== '.json') continue;
            const data = fs.readFileSync(path.join(this.baseDir, file), 'utf8');
            const user = JSON.parse(data);
            this._processUser(user);
        }
    }

    _processUser(user) {
        // Simulate heavy computation
        for (let i = 0; i < 1000000; i++) {
            user.score += Math.sqrt(i);
        }
        console.log(`Processed user ${user.id} with score ${user.score}`);
    }
}

module.exports = UserProcessor;",code_smell,unused_import,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processUserInput(std::vector<int>& inputList, int threshold) {
    for (size_t i = 0; i < inputList.size(); ++i) {
        if (inputList[i] > threshold) {
            std::cout << inputList[i] << "" is above threshold."" << std::endl;
        } else {
            std::cout << inputList[i] << "" is below threshold."" << std::endl;
        }
    }
}

int main() {
    std::vector<int> userValues = {5, 15, 20, 10, 30};
    int thresholdValue = 20;

    processUserInput(userValues, thresholdValue);

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private Map<String, User> users = new HashMap<>(); public synchronized void addUser(User user) { users.put(user.getUsername(), user); } public synchronized User getUser(String username) { return users.get(username); } public void updateUser(User user) { users.put(user.getUsername(), user); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // Missing try/catch: if file is malformed JSON, JSON.parse throws and crashes the process
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function getUserPreference(userId) {
  const loader = new ConfigLoader('./user_prefs.json');
  const prefs = loader.load();
  // Assume prefs is an object keyed by userId
  return prefs[userId] || {};
}

async function updatePreference(userId, key, value) {
  const loader = new ConfigLoader('./user_prefs.json');
  const prefs = loader.load();
  if (!prefs[userId]) prefs[userId] = {};
  prefs[userId][key] = value;
  // Write back without atomic write: possible race condition if multiple calls overlap
  await fs.promises.writeFile('./user_prefs.json', JSON.stringify(prefs, null, 2));
}

module.exports = { getUserPreference, updatePreference };",code_defect,missing_error_handling_and_race_condition,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processItems(const std::vector<int>& items) {
    for (size_t i = 0; i < items.size(); ++i) {
        std::cout << ""Item "" << i << "": "" << items[i] << std::endl;
    }

    // Legacy code for debugging
    // std::cout << ""Size: "" << items.size() << std::endl;
}

int main() {
    std::vector<int> data = {10, 20, 30, 40, 50};

    processItems(data);

    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userDao) {
         this.userDao = userDao;
      }

      async getAllUsers() {
         const users = await this.userDao.findAll();
         return users.map(user => ({ id: user.id, name: user.name }));
      }

      async getUserById(id) {
         const user = await this.userDao.findById(id);
         if (!user) {
            throw new Error('User not found');
         }
         return { id: user.id, name: user.name };
      }
   }

   class UserDao {
      async findAll() {
         // Assume this is a mock database call
         return [
            { id: 1, name: 'John Doe' },
            { id: 2, name: 'Jane Doe' }
         ];
      }

      async findById(id) {
         // Assume this is a mock database call
         const users = await this.findAll();
         return users.find(user => user.id === id);
      }
   }

   const userDao = new UserDao();
   const userService = new UserService(userDao);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL,
            data TEXT NOT NULL
        )''')
        self.conn.commit()

    def save_user(self, username, data):
        cursor = self.conn.cursor()
        # Insecure: directly embedding user data into SQL string
        query = f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')""
        cursor.execute(query)
        self.conn.commit()

    def load_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def delete_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage
if __name__ == '__main__':
    manager = UserManager('users.db')
    manager.save_user('admin', {'role': 'superuser', 'token': os.getenv('ADMIN_TOKEN')})
    user_data = manager.load_user('admin')
    print('Loaded user data:', user_data)
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.users = [];
  }

  addUser(id, username, password) {
    this.users.push({ id, username, password });
  }

  authenticate(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        if (this.users[i].password === password) {
          return true;
        } else {
          return false;
        }
      }
    }
    return false;
  }

  getAllUsers() {
    return this.users;
  }
}

// Example usage
const auth = new UserAuth();
auth.addUser(1, 'admin', 'securepassword');
auth.authenticate('admin', 'securepassword');",code_defect,security_issue,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger logger = LoggerFactory.getLogger(UserService.class); public User getUser(String username) { try { User user = UserRepository.getInstance().findUserByUsername(username); if (user == null) { throw new RuntimeException(""User not found""); } return user; } catch (Exception e) { logger.error(""Error getting user"", e); return null; } } }",code_smell,swallowing_exceptions,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigManager:
    """"""Loads configuration from a JSON file and provides access to settings.""""""
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, config_path='config.json'):
        # Singleton pattern, but flawed: config_path is ignored on subsequent calls
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super(ConfigManager, cls).__new__(cls)
                    cls._instance._load(config_path)
        return cls._instance

    def _load(self, path):
        with open(path, 'r') as f:
            self._data = json.load(f)
        # Missing validation of required keys

    def get(self, key, default=None):
        return self._data.get(key, default)

    def set(self, key, value):
        self._data[key] = value
        # Writes back to file without atomicity
        with open('config.json', 'w') as f:
            json.dump(self._data, f)

def process_user_input(user_input):
    """"""Processes raw user input and returns a sanitized command string.""""""
    # Vulnerable to command injection: directly concatenates input
    command = ""ls "" + user_input
    os.system(command)
    return command

def main():
    cfg = ConfigManager('/etc/app/config.json')
    timeout = cfg.get('timeout', 30)
    # Timeout is retrieved but never used
    while True:
        inp = input('Enter directory: ')
        if inp == 'exit':
            break
        process_user_input(inp)

if __name__ == '__main__':
    main()",code_defect,command_injection,,openai/gpt-oss-120b
Python,"import os
import time

class FileProcessor:
    def __init__(self, directory):
        self.directory = directory
        self.files = []
        self.load_files()

    def load_files(self):
        for file in os.listdir(self.directory):
            if file.endswith('.txt'):
                self.files.append(file)

    def process_files(self):
        for file in self.files:
            with open(os.path.join(self.directory, file), 'r') as f:
                content = f.read()
                self._do_processing(content)

    def _do_processing(self, content):
        processed = content.replace('old', 'new')
        print(processed[:100])

    def save_results(self):
        for file in self.files:
            with open(f'results/{file}_processed', 'w') as f:
                f.write('')

if __name__ == '__main__':
    processor = FileProcessor('data')
    processor.process_files()
    processor.save_results()",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final int MAX_RETRIES = 5; public void processPayment(String paymentId, double amount) { for (int i = 0; i < MAX_RETRIES; i++) { try { // Simulating a payment processing service call Thread.sleep(100); System.out.println(""Payment processed: "" + paymentId); break; } catch (InterruptedException e) { System.out.println(""Error processing payment: "" + e.getMessage()); } } } }",code_smell,magic_number,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // BUG: If no task was available, task remains 0 and is processed incorrectly
            processTask(task);
        }
    }
    void processTask(int value) {
        // Simulate work
        std::cout << ""Processing: "" << value << std::endl;
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    dp.addTask(42);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
Python,"import requests
import time

def fetch_and_process_data(url):
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        for item in data:
            if item['status'] == 'active':
                time.sleep(0.5)
                print(f""Processing {item['id']}..."")
                if 'content' in item:
                    process_content(item['content'])
                else:
                    print(f""No content found for {item['id']}"")

                if 'metadata' in item:
                    process_metadata(item['metadata'])
                else:
                    print(f""No metadata found for {item['id']}"")

            else:
                print(f""Skipping inactive item {item['id']}"")

    else:
        print(""Failed to fetch data"")

    return True

def process_content(content):
    # Dummy processing
    pass

def process_metadata(metadata):
    # Dummy processing
    pass

if __name__ == ""__main__"":
    fetch_and_process_data(""https://api.example.com/data"")",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor() {
            this.users = [];
         }

         addUser(user) {
            this.users.push(user);
         }

         getUserById(id) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === id) {
                  return this.users[i];
               }
            }
            return null;
         }

         getAllUsers() {
            return this.users;
         }
      }

      class User {
         constructor(id, name) {
            this.id = id;
            this.name = name;
         }
      }

      let userService = new UserService();
      let user1 = new User(1, 'John Doe');
      let user2 = new User(2, 'Jane Doe');
      userService.addUser(user1);
      userService.addUser(user2);
      console.log(userService.getAllUsers());
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String domain) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // insecure string concatenation leads to SQL injection
            String sql = ""SELECT email FROM users WHERE email LIKE '"" + ""%@"" + domain + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception silently
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,sql_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrders(List<Order> orders, String clientType) {
        for (Order order : orders) {
            if (clientType.equals(""premium"")) {
                order.applyDiscount(10);
            } else if (clientType.equals(""standard"")) {
                order.applyDiscount(5);
            } else {
                order.applyDiscount(0);
            }
            
            if (order.getItems().isEmpty()) {
                continue;
            }
            
            for (Item item : order.getItems()) {
                if (item.getQuantity() <= 0) {
                    item.setPrice(0);
                }
                
                if (clientType.equals(""premium"")) {
                    item.setPrice(item.getPrice() * 0.9);
                } else if (clientType.equals(""standard"")) {
                    item.setPrice(item.getPrice() * 0.95);
                }
            }
        }
    }
}

class Order {
    private List<Item> items = new ArrayList<>();
    private double total = 0;

    public List<Item> getItems() {
        return items;
    }

    public void applyDiscount(double discountPercentage) {
        total *= (1 - discountPercentage / 100);
    }
}

class Item {
    private int quantity;
    private double price;

    public int getQuantity() {
        return quantity;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }
}",code_smell,duplicate_code,,qwen/qwen3-32b
Python,"
class OrderProcessor:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def process_order(self, order_id):
        order_data = self.db_connection.get_order(order_id)
        if order_data['status'] == 'pending':
            # Perform some external API calls
            external_api_call(order_data['customer_id'])
            self.db_connection.update_order_status(order_id, 'processing')
            # Simulate some long-running operation
            import time
            time.sleep(5)
            self.db_connection.update_order_status(order_id, 'completed')
        else:
            print('Order is not pending')

def external_api_call(customer_id):
    # Simulate an external API call
    import requests
    response = requests.get(f'https://example.com/api/customers/{customer_id}')
    if response.status_code != 200:
        raise Exception('Failed to retrieve customer data')

class DatabaseConnection:
    def __init__(self):
        self.orders = {}

    def get_order(self, order_id):
        return self.orders.get(order_id)

    def update_order_status(self, order_id, status):
        if order_id in self.orders:
            self.orders[order_id]['status'] = status

    def add_order(self, order_id, order_data):
        self.orders[order_id] = order_data

# Usage
db_connection = DatabaseConnection()
db_connection.add_order('order1', {'status': 'pending', 'customer_id': 'customer1'})
order_processor = OrderProcessor(db_connection)
order_processor.process_order('order1')
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : total_(0) {}
    void addData(const std::vector<int>& data) {
        std::lock_guard<std::mutex> lock(mtx_);
        for (int v : data) {
            buffer_.push_back(v);
        }
    }
    void process() {
        // Process data in parallel, but shares total_ without proper synchronization
        std::vector<std::thread> workers;
        for (size_t i = 0; i < buffer_.size(); ++i) {
            workers.emplace_back([this, i]() {
                // Simulate work
                int value = buffer_[i] * 2;
                // Bug: race condition on total_
                total_ += value;
            });
        }
        for (auto& t : workers) {
            if (t.joinable()) t.join();
        }
    }
    int getTotal() const { return total_; }
private:
    std::vector<int> buffer_;
    int total_;
    mutable std::mutex mtx_;
};

int main() {
    DataProcessor dp;
    dp.addData({1, 2, 3, 4, 5});
    dp.process();
    std::cout << ""Total: "" << dp.getTotal() << std::endl;
    return 0;
}",code_defect,race_condition,,openai/gpt-oss-120b
Python,"import os
import sqlite3
from datetime import datetime

def process_user_data(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user_data = cursor.fetchone()

    if user_data:
        print(f'User {user_id} found: {user_data}')
        cursor.execute(f""UPDATE users SET last_accessed = '{datetime.now()}' WHERE id = {user_id}"")
        conn.commit()
    else:
        print(f'User {user_id} not found.')

    conn.close()

    # TODO: Handle error cases

if __name__ == '__main__':
    process_user_data(1)",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class ShoppingCart {
public:
    void addItem(const std::string& item) {
        items_.push_back(item);
    }

    void removeItem(const std::string& item) {
        for (auto it = items_.begin(); it != items_.end(); ++it) {
            if (*it == item) {
                items_.erase(it);
                break;
            }
        }
    }

    void displayItems() {
        for (const auto& item : items_) {
            std::cout << item << std::endl;
        }
    }

private:
    std::vector<std::string> items_;
};

int main() {
    ShoppingCart cart;
    cart.addItem(""Apple"");
    cart.addItem(""Banana"");
    cart.removeItem(""Apple"");
    cart.displayItems();
    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json, os, logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = {}
        self.load()

    def load(self):
        # Insecure: directly eval user-controlled file content
        with open(self.config_path, 'r') as f:
            data = f.read()
        self._config = eval(data)  # unsafe deserialization
        logger.info('Configuration loaded')

    def get(self, key, default=None):
        return self._config.get(key, default)

class DataProcessor:
    def __init__(self, cfg_loader):
        self.cfg = cfg_loader
        self.batch_size = self.cfg.get('batch_size', 100)

    def process(self, records):
        # Off-by-one error: should process up to batch_size, but uses >
        for i in range(self.batch_size + 1):
            record = records[i]
            self._handle(record)

    def _handle(self, record):
        # Simulated processing
        print(f""Processing {record}"")

if __name__ == '__main__':
    cfg = ConfigLoader('config.txt')
    processor = DataProcessor(cfg)
    sample_data = [f""item{i}"" for i in range(200)]
    processor.process(sample_data)",code_defect,unsafe_deserialization_and_off_by_one,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    private String dbPassword = ""secret123"";

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        if (order.getItems().isEmpty()) {
            System.out.println(""No items in order. Skipping..."");
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getPrice() <= 0) {
                continue;
            }
            if (item.getQuantity() <= 0) {
                continue;
            }
            // TODO: implement inventory check
            // if (inventoryAvailable(item)) {
            //     deductInventory(item);
            // }
        }

        saveToDatabase(order);
    }

    private void saveToDatabase(Order order) {
        String query = ""INSERT INTO orders VALUES ("" + order.getId() + "", '"" + order.getCustomer() + ""')"";
        // Simulate DB operation
        System.out.println(""Executing query: "" + query);
    }
}",code_defect,security_issue,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getUser(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return user;
         }

         async getUsers() {
            const users = await this.userRepository.findAll();
            return users;
         }

         async createUser(user) {
            const existingUser = await this.userRepository.findByEmail(user.email);
            if (existingUser) {
               throw new Error('User with this email already exists');
            }
            const newUser = await this.userRepository.create(user);
            return newUser;
         }
      }

      class UserRepository {
         constructor(db) {
            this.db = db;
         }

         async findById(id) {
            return this.db.query(`SELECT * FROM users WHERE id = ${id}`);
         }

         async findAll() {
            return this.db.query('SELECT * FROM users');
         }

         async findByEmail(email) {
            return this.db.query(`SELECT * FROM users WHERE email = '${email}'`);
         }

         async create(user) {
            return this.db.query(`INSERT INTO users (name, email) VALUES ('${user.name}', '${user.email}')`);
         }
      }
   ",code_smell,sql_injection_vulnerability,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}

    void addTransaction(int amount) {
        // No validation of amount; negative values allowed
        std::lock_guard<std::mutex> lock(mtx_);
        transactions_.push_back(amount);
        total_ += amount; // Potential overflow, no check
    }

    int computeTotal() const {
        // Returns cached total, but if addTransaction is called concurrently without lock, race occurs
        return total_;
    }

    void processAll() {
        // Launch a thread for each transaction (inefficient and may exhaust resources)
        std::vector<std::thread> workers;
        for (int amt : transactions_) {
            workers.emplace_back([this, amt]() {
                // Simulate work
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                // Intentional bug: subtract instead of add
                std::lock_guard<std::mutex> lock(mtx_);
                total_ -= amt;
            });
        }
        for (auto &t : workers) t.join();
    }

private:
    std::vector<int> transactions_;
    mutable std::mutex mtx_;
    int total_; // Not atomic, accessed without proper synchronization in computeTotal
};

int main() {
    TransactionProcessor tp;
    tp.addTransaction(100);
    tp.addTransaction(200);
    tp.processAll();
    std::cout << ""Final total: "" << tp.computeTotal() << std::endl;
    return 0;
}",code_defect,logic_error_subtract_instead_of_add_and_race_condition,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      if (order.status === 'pending') {
        this.processOrder(order);
      }
    }
  }

  processOrder(order) {
    const user = this.getUserById(order.userId);
    const product = this.getProductById(order.productId);

    if (!user || !product) {
      return;
    }

    if (product.stock <= 0) {
      console.log(`Product ${product.id} is out of stock. Cannot process order.`);
      return;
    }

    product.stock -= order.quantity;
    user.points += order.quantity * product.pointsPerUnit;

    console.log(`Order processed for user ${user.id}, product ${product.id}.`);
  }

  getUserById(userId) {
    // Simulated database lookup
    return {
      id: userId,
      points: 0
    };
  }

  getProductById(productId) {
    // Simulated database lookup
    return {
      id: productId,
      stock: 100,
      pointsPerUnit: 5
    };
  }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserService {
public:
    vector<User> users;
    void addUser(User u) { users.push_back(u); }
    User* getUserByName(string name) {
        for (auto& u : users) {
            if (u.name == name) return &u;
        }
        return nullptr;
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User* user = service.getUserByName(""John"");
    if (user) cout << user->name << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserCache {
  constructor(filePath) {
    this.filePath = filePath;
    this.cache = {};
    this._load();
  }

  _load() {
    try {
      const data = fs.readFileSync(this.filePath, 'utf8');
      this.cache = JSON.parse(data);
    } catch (e) {
      // ignore errors, start with empty cache
    }
  }

  getUser(id) {
    if (this.cache[id]) {
      return this.cache[id];
    }
    // Simulate DB fetch (synchronous for simplicity)
    const user = { id, name: 'User' + id };
    this.cache[id] = user;
    return user;
  }

  // BUG: does not wait for write to finish, may lose data on process exit
  save() {
    const data = JSON.stringify(this.cache);
    fs.writeFile(this.filePath, data, (err) => {
      if (err) console.error('Failed to write cache');
    });
  }
}

// Usage example
const cache = new UserCache('./userCache.json');
cache.getUser(42);
cache.save();
",code_defect,asynchronous_write_loss,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrders(orders, discountCode, taxRate) {
    let total = 0;

    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      let orderTotal = 0;

      for (let j = 0; j < order.items.length; j++) {
        const item = order.items[j];
        const itemPrice = item.price * item.quantity;
        orderTotal += itemPrice;
      }

      if (discountCode === 'SUMMER20') {
        orderTotal *= 0.8;
      }

      total += orderTotal * (1 + taxRate);
    }

    return total;
  }

  applyDiscount(orderTotal, discountCode) {
    if (discountCode === 'SUMMER20') {
      return orderTotal * 0.8;
    }

    if (discountCode === 'FALL30') {
      return orderTotal * 0.7;
    }

    return orderTotal;
  }

  calculateTax(orderTotal, taxRate) {
    return orderTotal * (1 + taxRate);
  }
}

const orders = [
  {
    items: [
      { price: 10, quantity: 2 },
      { price: 20, quantity: 1 }
    ]
  }
];

const processor = new OrderProcessor();
console.log(processor.processOrders(orders, 'SUMMER20', 0.1));",code_smell,duplicated_code,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
            return True
        return False

    def get_user(self, user_id):
        for key in self.users:
            if key == user_id:
                return self.users[key]
        return None

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id] = user_data
            return True
        return False

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
            return True
        return False

# example usage
manager = UserManager()
manager.add_user('1', {'name': 'John', 'age': 30})
print(manager.get_user('1'))
manager.update_user('1', {'name': 'Jane', 'age': 30})
print(manager.get_user('1'))
manager.delete_user('1')
print(manager.get_user('1'))
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogManager {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        buffer_.push_back(msg);
        if (buffer_.size() > 1000) {
            flush();
        }
    }

    void flush() {
        // Simulate writing to disk (omitted)
        buffer_.clear();
    }

private:
    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

class Worker {
public:
    Worker(int id, LogManager& logger) : id_(id), logger_(logger) {}
    void operator()() {
        for (int i = 0; i < 10000; ++i) {
            // Bug: using i without proper bounds check leads to out-of-range when i == 9999
            logger_.log(""Worker "" + std::to_string(id_) + "" processed item "" + std::to_string(i));
        }
    }
private:
    int id_;
    LogManager& logger_;
};

int main() {
    LogManager logger;
    std::vector<std::thread> threads;
    for (int i = 0; i < 5; ++i) {
        threads.emplace_back(Worker(i, logger));
    }
    for (auto& t : threads) {
        t.join();
    }
    // Missing final flush may lose logs
    return 0;
}
",code_defect,missing final flush leading to lost logs and potential data race on logger buffer,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, logger) {
    this.users = users;
    this.logger = logger;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      if (user.isActive) {
        this.logger.log(`Processing user: ${user.name}`);
        this._validateUser(user);
        this._updateUser(user);
        this._notifyUser(user);
      }
    }
  }

  _validateUser(user) {
    if (!user.email) {
      throw new Error(`User ${user.id} has no email`);
    }
    if (user.age < 18) {
      throw new Error(`User ${user.id} is underage`);
    }
  }

  _updateUser(user) {
    user.status = 'processed';
    user.lastProcessed = new Date();
  }

  _notifyUser(user) {
    // Simulate sending email
    console.log(`Email sent to ${user.email}`);
  }
}

// Usage
const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com', age: 25, isActive: true },
  { id: 2, name: 'Bob', email: '', age: 16, isActive: true },
  { id: 3, name: 'Charlie', email: 'charlie@example.com', age: 30, isActive: false }
];

const logger = {
  log: (message) => console.log(`[LOG] ${message}`)
};

const processor = new UserProcessor(users, logger);
processor.processUsers();",code_defect,error_handling_issue,,qwen/qwen3-32b
Python,"class UserManager:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, new_email):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET email = %s WHERE id = %s"", (new_email, user_id))
        self.db_connection.commit()
    
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : log_file(file) {}
    void process() {
        std::vector<std::string> lines = readLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off‑by‑one error
            std::string line = lines[i];
            if (line.find(""ERROR"") != std::string::npos) {
                std::lock_guard<std::mutex> lock(mtx);
                error_count++;
            }
        }
    }
    int getErrorCount() const { return error_count; }
private:
    std::vector<std::string> readLines() {
        // Dummy implementation
        return {""INFO start"", ""ERROR failed"", ""INFO end""};
    }
    std::string log_file;
    int error_count = 0;
    std::mutex mtx;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    std::thread t1([&lp](){ lp.process(); });
    std::thread t2([&lp](){ lp.process(); });
    t1.join();
    t2.join();
    std::cout << ""Total errors: "" << lp.getErrorCount() << std::endl;
    return 0;
}",code_defect,off_by_one_error_and_data_race,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    DataProcessor() {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i < data.size(); ++i) {
            if (data[i] % 2 == 0) {
                std::cout << data[i] << "" is even"" << std::endl;
            } else {
                std::cout << data[i] << "" is odd"" << std::endl;
            }
            if (data[i] == 42) {
                std::cout << ""Found the meaning of life!"" << std::endl;
            }
        }
    }
};

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 42, 5, 6, 7, 8, 9, 10};
    DataProcessor dp;
    dp.process(numbers);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) {
        users.push_back(user);
    }

    User* getUserByName(std::string name) {
        for (auto& user : users) {
            if (user.getName() == name) {
                return &user;
            }
        }
        return nullptr;
    }

private:
    std::vector<User> users;
};

int main() {
    UserService userService;
    userService.addUser(User(""John"", 30));
    User* user = userService.getUserByName(""John"");
    if (user != nullptr) {
        std::cout << user->getName() << std::endl;
    }
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        // Reads config file synchronously each time, ignoring cache
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }

    get(key) {
        // If config not loaded yet, load it lazily
        if (!this.cache) {
            this.load();
        }
        return this.cache[key];
    }
}

function processUserInput(input) {
    // Directly eval user input – security defect
    return eval(input);
}

function main() {
    const config = new ConfigLoader('./config.json');
    const userCommand = process.argv[2] || '""2 + 2""';
    const result = processUserInput(userCommand);
    console.log('Result:', result);
    console.log('Config version:', config.get('version'));
}

main();",code_defect,unsafe_eval,,openai/gpt-oss-120b
Python,"import os
import requests

def fetch_weather(city):
    url = f""http://api.weatherapi.com/v1/current.json?key=1234567890&city={city}""
    response = requests.get(url)
    data = response.json()

    if data.get('error'):
        return None

    temp = data['current']['temp_c']
    condition = data['current']['condition']['text']
    
    return {
        'city': city,
        'temperature': temp,
        'condition': condition,
    }


def main():
    city = input(""Enter city name: "")
    weather = fetch_weather(city)
    
    if weather:
        print(f""{weather['city']}: {weather['temperature']}°C, {weather['condition']}"")
    else:
        print(""Could not fetch weather data."")

if __name__ == ""__main__"":
    main()",code_defect,hardcoded_secret,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, user_data):
        query = ""UPDATE users SET name = '"" + user_data['name'] + ""', email = '"" + user_data['email'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()

# usage
import mysql.connector
db_connection = mysql.connector.connect(host='localhost', database='mydb', user='myuser', password='mypass')
user_service = UserService(db_connection)
user_data = user_service.get_user(1)
print(user_data)
user_service.update_user(1, {'name': 'John Doe', 'email': 'johndoe@example.com'})
",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''CREATE TABLE IF NOT EXISTS users (
                                id INTEGER PRIMARY KEY,
                                username TEXT NOT NULL,
                                data TEXT
                             )''')
        self.conn.commit()

    def add_user(self, username, data):
        # Directly interpolate user input into SQL -> SQL injection risk
        query = f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')""
        self.conn.execute(query)
        self.conn.commit()

    def get_user_data(self, username):
        cursor = self.conn.execute(f""SELECT data FROM users WHERE username = '{username}'"")
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def delete_user(self, username):
        # Missing error handling; if username does not exist, nothing happens silently
        self.conn.execute(f""DELETE FROM users WHERE username = '{username}'"")
        self.conn.commit()

# Usage example (would be in production code)
if __name__ == ""__main__"":
    manager = UserManager('/tmp/users.db')
    manager.add_user('admin', {'role': 'superuser', 'token': os.getenv('ADMIN_TOKEN')})
    user_data = manager.get_user_data('admin')
    print('User data:', user_data)
    manager.delete_user('admin')
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        String customerEmail = order.getCustomerEmail();
        double totalAmount = order.getTotalAmount();

        if (totalAmount > 100) {
            sendEmail(customerEmail, ""Your order has been processed."");
            updateInventory(order.getItems());
        } else {
            sendEmail(customerEmail, ""Your order is being processed."");
            // TODO: Implement low-value order handling
        }

        // Legacy code below
        // if (totalAmount < 0) {
        //     refundOrder(order);
        // }
    }

    private void sendEmail(String email, String message) {
        // Simulated email sending
    }

    private void updateInventory(List<Item> items) {
        // Simulated inventory update
    }

    // Unused method
    private void refundOrder(Order order) {
        // Not in use anymore
    }
}",code_smell,,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async getAllUsers() {
            const users = await this.userDao.getAllUsers();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async getUserById(id) {
            const user = await this.userDao.getUserById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return user;
         }
      }

      class UserDao {
         async getAllUsers() {
            // assume db connection
            return [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }];
         }

         async getUserById(id) {
            // assume db connection
            return { id: 1, name: 'John' };
         }
      }

      const userDao = new UserDao();
      const userService = new UserService(userDao);
      const allUsers = userService.getAllUsers();
      const userById = userService.getUserById(1);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        // Synchronously read config file each time load is called
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }

    get(key) {
        // If cache is empty, load config (but load may throw)
        if (!this.cache) {
            this.load();
        }
        return this.cache[key];
    }
}

// Usage example
function initializeApp() {
    const config = new ConfigLoader('/etc/app/config.json');
    const port = config.get('port');
    const mode = config.get('mode');
    startServer(port, mode);
}

function startServer(port, mode) {
    // Assume server.start is async but we don't handle errors
    server.start({ port, mode })
        .then(() => console.log(`Server started on ${port} in ${mode} mode`))
        .catch(err => console.error('Failed to start server:', err));
}

initializeApp();",code_defect,synchronous_file_read_blocking,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    public void processUsers(List<User> users) {
        for (User user : users) {
            if (user.getEmail() != null && !user.getEmail().isEmpty()) {
                if (isValidEmail(user.getEmail())) {
                    sendWelcomeEmail(user);
                }
            }
            if (user.getRegistrationDate() != null) {
                if (isEligibleForDiscount(user.getRegistrationDate())) {
                    applyDiscount(user);
                }
            }
            if (user.getStatus() != null && user.getStatus().equals(""active"")) {
                updateActivityStatus(user);
            }
        }
    }

    private boolean isValidEmail(String email) {
        // Incomplete regex for email validation
        return email.matches(""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"");
    }

    private void sendWelcomeEmail(User user) {
        // Simulate email sending logic
    }

    private boolean isEligibleForDiscount(Date registrationDate) {
        return registrationDate.before(new Date());
    }

    private void applyDiscount(User user) {
        // Simulate discount application logic
    }

    private void updateActivityStatus(User user) {
        // Simulate activity status update
    }
}",code_smell,long_method,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, account_number, balance=0.0):
        self.account_number = account_number
        self.balance = balance
    
    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
        
    def withdraw(self, amount):
        if amount > 0 and self.balance >= amount:
            self.balance -= amount
        
    def get_balance(self):
        return self.balance

account = BankAccount('123456789', 1000.0)
print(account.get_balance())",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation on limit
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void deleteUser(String username) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // SQL injection vulnerability
            String sql = ""DELETE FROM users WHERE username = '"" + username + ""'"";
            stmt.executeUpdate(sql);
        } catch (Exception e) {
            // ignore
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,SQL injection vulnerability and hardcoded credentials,,openai/gpt-oss-120b
Python,"import os
import time

class UserManager:
    def __init__(self):
        self.users = []

    def add_user(self, name, email, is_admin=False):
        user = {
            'name': name,
            'email': email,
            'is_admin': is_admin,
            'created_at': time.time()
        }
        self.users.append(user)

    def get_admin_users(self):
        admins = []
        for user in self.users:
            if user['is_admin']:
                admins.append(user)
        return admins

    def send_notifications(self, message):
        for user in self.users:
            # Simulate sending email notification
            print(f""Sending to {user['email']}: {message}"")
            time.sleep(0.1)

    def delete_inactive_users(self):
        active_users = []
        for user in self.users:
            if (time.time() - user['created_at']) < 86400:
                active_users.append(user)
        self.users = active_users

# Unused function
# def old_delete_users(users):
#     users.clear()

if __name__ == '__main__':
    manager = UserManager()
    manager.add_user('Alice', 'alice@example.com', True)
    manager.add_user('Bob', 'bob@example.com')
    manager.add_user('Charlie', 'charlie@example.com')
    manager.delete_inactive_users()
    manager.send_notifications('Hello from the system!')",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(merchantId, apiKey) {
         this.merchantId = merchantId;
         this.apiKey = apiKey;
      }

      async processPayment(amount, currency, paymentMethod) {
         const paymentData = {
            amount,
            currency,
            paymentMethod
         };

         try {
            const response = await fetch('https://api.example.com/payment', {
               method: 'POST',
               headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${this.apiKey}`
               },
               body: JSON.stringify(paymentData)
            });

            if (response.status !== 200) {
               throw new Error('Payment failed');
            }

            return await response.json();
         } catch (error) {
            console.error(error);
            return { success: false, message: 'Payment failed' };
         }
      }
   }

   const processor = new PaymentProcessor('12345', 'abc123');
   processor.processPayment(10.99, 'USD', 'credit_card').then(result => console.log(result));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    // Loads JSON config file; caches result but never invalidates it
    loadConfig() {
        if (this.cache) {
            return this.cache;
        }
        const data = fs.readFileSync(this.path, 'utf8');
        // No try/catch: malformed JSON will crash the process
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function initializeApp() {
    const loader = new ConfigLoader('./config.json');
    const config = loader.loadConfig();
    // Assume config has a ""port"" field
    const server = require('http').createServer((req, res) => {
        res.writeHead(200, {'Content-Type': 'text/plain'});
        res.end('Server running');
    });
    server.listen(config.port);
    console.log(`Server listening on port ${config.port}`);
}

initializeApp();",code_defect,unhandled_JSON_parse_error,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    if (user && user.id && user.name) {
      this.users.push(user);
    }
  }

  deleteUser(userId) {
    this.users = this.users.filter(u => u.id !== userId);
  }

  getUserById(userId) {
    return this.users.find(u => u.id === userId);
  }

  getAllUsers() {
    return this.users;
  }

  updateUserName(userId, newName) {
    const user = this.getUserById(userId);
    if (user) {
      user.name = newName;
    }
  }
}

const userManager = new UserManager();
userManager.addUser({ id: 1, name: 'Alice' });
userManager.addUser({ id: 2, name: 'Bob' });
userManager.updateUserName(1, 'Alice Smith');",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
      constructor() {
         this.users = [];
      }

      addUser(user) {
         this.users.push(user);
      }

      removeUser(username) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].username === username) {
               this.users.splice(i, 1);
               break;
            }
         }
      }

      getUser(username) {
         for (let user of this.users) {
            if (user.username === username) {
               return user;
            }
         }
         return null;
      }
   }

   class User {
      constructor(username, password) {
         this.username = username;
         this.password = password;
      }
   }

   let userManager = new UserManager();
   let user = new User('johnDoe', 'password123');
   userManager.addUser(user);
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    // Loads JSON config synchronously; caches result for future calls
    load() {
        if (this.cache) return this.cache;
        // NOTE: No validation of file existence or JSON structure
        const raw = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(raw);
        return this.cache;
    }
}

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user by ID; expects numeric ID
    getUser(id) {
        // Off-by-one error: IDs start at 1 but query uses 0-based index
        const query = `SELECT * FROM users WHERE id = ${id - 1}`;
        return this.db.query(query);
    }
}

// Example usage
const config = new ConfigLoader('./config.json').load();
const db = require('some-db-lib').connect(config.dbUrl);
const userService = new UserService(db);

// This will fetch the wrong user due to the off-by-one bug
userService.getUser(5).then(user => {
    console.log('User:', user);
}).catch(err => {
    console.error('Error:', err);
});",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json

def load_user_preferences(user_id):
    file_path = f'./preferences/{user_id}.json'

    if not os.path.exists(file_path):
        return {}

    try:
        with open(file_path, 'r') as f:
            preferences = json.load(f)
            return preferences
    except Exception as e:
        print(f'Error loading preferences for {user_id}: {e}')
        return {}


def apply_user_settings(user_id, settings):
    file_path = f'./preferences/{user_id}.json'
    
    try:
        with open(file_path, 'w') as f:
            json.dump(settings, f, indent=2)
    except Exception as e:
        print(f'Error saving settings for {user_id}: {e}')


def update_user_theme(user_id, theme):
    prefs = load_user_preferences(user_id)
    
    if 'theme' in prefs and prefs['theme'] == theme:
        print(f""Theme '{theme}' is already set for user {user_id}."")
        return

    prefs['theme'] = theme
    apply_user_settings(user_id, prefs)
    
    print(f""Theme updated to '{theme}' for user {user_id}"")",code_defect,missing_error_handling,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor() {
         this.users = [];
      }

      async addUser(user) {
         try {
            const response = await fetch('https://example.com/api/users', {
               method: 'POST',
               headers: { 'Content-Type': 'application/json' },
               body: JSON.stringify(user)
            });

            if (response.ok) {
               this.users.push(user);
            } else {
               throw new Error('Failed to add user');
            }
         } catch (error) {
            console.error(error);
         }
      }

      getUsers() {
         return this.users;
      }
   }

   const userService = new UserService();

   async function main() {
      await userService.addUser({ name: 'John Doe', email: 'john@example.com' });
      console.log(userService.getUsers());
   }

   main();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT NOT NULL,
            data TEXT
        )''')
        self.conn.commit()

    def add_user(self, username, data):
        # Directly interpolating user input into SQL – SQL injection risk
        query = f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')""
        self.conn.execute(query)
        self.conn.commit()

    def get_user_data(self, username):
        cursor = self.conn.execute(f""SELECT data FROM users WHERE username = '{username}'"")
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def close(self):
        self.conn.close()

# Example usage
if __name__ == ""__main__"":
    manager = UserManager('/tmp/users.db')
    manager.add_user('admin', {'role': 'admin', 'prefs': {}})
    # Potentially unsafe: passing raw input directly to get_user_data
    user_input = os.getenv('TARGET_USER') or 'admin'
    data = manager.get_user_data(user_input)
    print(f""Data for {user_input}: {data}"")
    manager.close()",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor() {
    this.orderData = [];
    this.validStatuses = ['pending', 'shipped', 'delivered'];
  }

  processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      if (this.validStatuses.includes(order.status)) {
        this.orderData.push(order);
      }
    }
  }

  getTotalOrders() {
    return this.orderData.length;
  }

  getOrdersByStatus(status) {
    return this.orderData.filter(order => order.status === status);
  }

  updateOrderStatus(orderId, newStatus) {
    for (let i = 0; i < this.orderData.length; i++) {
      const order = this.orderData[i];
      if (order.id === orderId) {
        if (this.validStatuses.includes(newStatus)) {
          order.status = newStatus;
        } else {
          console.warn(`Invalid status: ${newStatus}`);
        }
        break;
      }
    }
  }
}

// Example usage:
const processor = new OrderProcessor();
processor.processOrders([
  { id: 1, status: 'pending' },
  { id: 2, status: 'shipped' }
]);
processor.updateOrderStatus(1, 'delivered');",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

private:
    std::string name;
    int salary;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    void removeEmployee(std::string name) {
        for (auto it = employees.begin(); it != employees.end(); ++it) {
            if (it->getName() == name) {
                employees.erase(it);
                return;
            }
        }
    }

    int calculateTotalSalary() {
        int totalSalary = 0;
        for (const auto& employee : employees) {
            totalSalary += employee.getSalary();
        }
        return totalSalary;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John Doe"", 50000));
    manager.addEmployee(Employee(""Jane Doe"", 60000));

    std::cout << ""Total salary: "" << manager.calculateTotalSalary() << std::endl;

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,hardcoded_credentials_and_sql_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final String DATABASE_URL = ""jdbc:mysql://localhost:3306/mydb"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""password123!"";

    public void processOrder(Order order) {
        try {
            Connection conn = DriverManager.getConnection(DATABASE_URL, DB_USER, DB_PASSWORD);
            String query = ""UPDATE orders SET status = 'PROCESSED' WHERE id = "" + order.getId();
            Statement stmt = conn.createStatement();
            stmt.executeUpdate(query);
            stmt.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>
   #include <string>

   class User {
   public:
       std::string name;
       int age;

       User(std::string n, int a) : name(n), age(a) {}
   };

   bool compareUsers(const User& u1, const User& u2) {
       return u1.age < u2.age;
   }

   void sortUsers(std::vector<User>& users) {
       std::sort(users.begin(), users.end(), compareUsers);
   }

   int main() {
       std::vector<User> users = {User(""John"", 25), User(""Alice"", 30), User(""Bob"", 20)};
       sortUsers(users);

       for (const auto& user : users) {
           std::cout << user.name << "" is "" << user.age << "" years old."" << std::endl;
       }

       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file for each call
    async getUserInfo(userId) {
        // Bad practice: opening a file synchronously inside async flow
        const log = fs.openSync('user_requests.log', 'a');
        try {
            const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
            if (!user) {
                throw new Error('User not found');
            }
            // Inefficient: converting to JSON twice
            const userJson = JSON.stringify(user);
            fs.writeSync(log, `Fetched user: ${userJson}\n`);
            return JSON.parse(userJson);
        } finally {
            // Missing close for the file descriptor leads to descriptor leak
        }
    }

    // Large method with many responsibilities
    async updateUser(userId, data) {
        // Validate input (poor validation)
        if (!data || typeof data !== 'object') {
            throw new Error('Invalid data');
        }
        // Directly mutating the input object
        data.updatedAt = new Date();
        // Multiple DB calls in a loop
        for (const key in data) {
            await this.db.query(`UPDATE users SET ${key} = ? WHERE id = ?`, [data[key], userId]);
        }
        // No transaction, partial updates possible
        return true;
    }
}

module.exports = UserService;",code_smell,resource_leak_and_poor_error_handling,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex m;

void processData(const std::vector<int>& data, int start, int end) {
    int sum = 0;
    for (int i = start; i < end; ++i) {
        sum += data[i];
    }

    std::lock_guard<std::mutex> lock(m);
    static int totalSum = 0;
    totalSum += sum;
}

void processInParallel(const std::vector<int>& data) {
    std::thread t1(processData, std::ref(data), 0, data.size() / 2);
    std::thread t2(processData, std::ref(data), data.size() / 2, data.size());

    t1.join();
    t2.join();
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8};
    processInParallel(data);

    std::cout << ""Total sum: "" << totalSum << std::endl;
    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(paymentGateway) {
         this.paymentGateway = paymentGateway;
      }

      processPayment(amount, currency) {
         if (amount <= 0) {
            return false;
         }
         const paymentResult = this.paymentGateway.chargeCard(amount, currency);
         if (paymentResult === 'success') {
            // Introduce subtle timing-related issue here
            setTimeout(() => {
               this.paymentGateway.updateTransactionStatus('paid');
            }, 1000);
            return true;
         } else {
            return false;
         }
      }
   }

   class PaymentGateway {
      chargeCard(amount, currency) {
         // Simulate payment processing delay
         const delay = Math.floor(Math.random() * 2000);
         setTimeout(() => {
            // Assume payment is successful for demonstration
            return 'success';
         }, delay);
      }

      updateTransactionStatus(status) {
         // Simulate database update
         console.log(`Transaction status updated to ${status}`);
      }
   }

   const paymentGateway = new PaymentGateway();
   const paymentProcessor = new PaymentProcessor(paymentGateway);
   paymentProcessor.processPayment(100, 'USD');
   ",code_defect,race_condition,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails() {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception, no logging
        } finally {
            // missing close for stmt and conn leads to resource leak
        }
        return emails;
    }

    public boolean deleteUser(int userId) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // SQL injection vulnerability: userId is concatenated directly
            String sql = ""DELETE FROM users WHERE id = "" + userId;
            int rows = stmt.executeUpdate(sql);
            return rows > 0;
        } catch (Exception e) {
            return false;
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,SQL injection and resource leak,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order != null) {
            if (order.getItems() != null && !order.getItems().isEmpty()) {
                for (OrderItem item : order.getItems()) {
                    if (item.getProduct() != null && item.getQuantity() > 0) {
                        if (item.getProduct().getPrice() > 0) {
                            double totalItemCost = item.getQuantity() * item.getProduct().getPrice();
                            double discount = applyDiscount(order, item);
                            double finalCost = totalItemCost - discount;

                            System.out.println(""Item "" + item.getProduct().getName() + "" cost: "" + finalCost);
                        }
                    }
                }
            }
        }
    }

    private double applyDiscount(Order order, OrderItem item) {
        if (item.getProduct().getName().equalsIgnoreCase(""VIP_ITEM"")) {
            return item.getQuantity() * item.getProduct().getPrice() * 0.2;
        }
        return 0;
    }
}",code_smell,nested_conditionals,,qwen/qwen3-32b
Java,"public class UserDAO { private static final String DB_URL = ""jdbc:mysql://localhost:3306/mydb""; private static final String USERNAME = ""root""; private static final String PASSWORD = ""password""; public User getUserById(int id) { try { Class.forName(""com.mysql.cj.jdbc.Driver""); Connection conn = DriverManager.getConnection(DB_URL, USERNAME, PASSWORD); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""SELECT * FROM users WHERE id = "" + id); User user = null; if (rs.next()) { user = new User(rs.getInt(""id""), rs.getString(""name""), rs.getString(""email"")); } rs.close(); stmt.close(); conn.close(); return user; } catch (Exception e) { return null; } } } class User { private int id; private String name; private String email; public User(int id, String name, String email) { this.id = id; this.name = name; this.email = email; } public int getId() { return id; } public String getName() { return name; } public String getEmail() { return email; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import logging
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.config = {}
        self._load()

    def _load(self):
        # No error handling; will raise if file missing
        with open(self.config_path, 'r') as f:
            self.config = json.load(f)

    def get(self, key, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, db_conn, cache):
        self.db = db_conn
        self.cache = cache
        self.logger = logging.getLogger('DataProcessor')

    def process_batch(self, batch_ids):
        results = []
        for i in range(len(batch_ids)):
            # Inefficient: fetching each record individually
            record = self.db.fetch_one('SELECT * FROM data WHERE id = %s' % batch_ids[i])
            if record is None:
                self.logger.warning('Missing record for id %s', batch_ids[i])
                continue
            transformed = self._transform(record)
            results.append(transformed)
        # Store all results at once
        self.db.insert_many('processed_data', results)
        return results

    def _transform(self, record):
        # Very large function, does many unrelated things
        value = record['value']
        # Hardcoded multiplier
        value *= 42
        # Unvalidated external input used in eval (security risk)
        expr = record.get('calc')
        if expr:
            try:
                value = eval(expr, {'__builtins__': None}, {'value': value})
            except Exception as e:
                self.logger.error('Eval failed: %s', e)
        # Cache result
        self.cache.set(record['id'], value)
        return {'id': record['id'], 'result': value}

# Usage example (not part of library)
if __name__ == '__main__':
    cfg = ConfigLoader(os.getenv('CONFIG_PATH', 'config.json'))
    db = MyDatabaseConnection(cfg.get('db_conn_string'))
    cache = SimpleCache()
    processor = DataProcessor(db, cache)
    ids = [1, 2, 3, 4, 5]
    processor.process_batch(ids)
",code_smell,inefficient_loop_and_unsafe_eval,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    void process(std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) {
            if (i % 2 == 0) {
                data[i] *= 2;
            }
        }
    }
};

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    DataProcessor processor;
    processor.process(data);
    for (int val : data) {
        std::cout << val << "" "";
    }
    return 0;
}",code_defect,off_by_one_error,,qwen/qwen3-32b
JavaScript,"
      class UserAccount {
         constructor(username, password, email) {
            this.username = username;
            this.password = password;
            this.email = email;
            this.loginAttempts = 0;
         }

         authenticate(password) {
            if (this.password === password) {
               this.loginAttempts = 0;
               return true;
            } else {
               this.loginAttempts++;
               return false;
            }
         }

         getAccountInfo() {
            return {
               username: this.username,
               email: this.email,
               loginAttempts: this.loginAttempts
            };
         }
      }

      function main() {
         let account = new UserAccount('testUser', 'password123', 'test@example.com');
         console.log(account.getAccountInfo());
         console.log(account.authenticate('wrongpassword'));
         console.log(account.authenticate('password123'));
      }

      main();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        // Synchronous read blocks event loop – potential performance issue
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }

    get(key) {
        if (!this.cache) {
            this.load();
        }
        return this.cache[key];
    }
}

class UserService {
    constructor(db) {
        this.db = db;
        this.config = new ConfigLoader('./config.json');
    }

    // Defect: missing await, returns a pending promise instead of result
    async getUserProfile(userId) {
        const user = this.db.findUserById(userId);
        const settings = this.config.get('defaultSettings');
        return { ...user, settings };
    }
}

// Mock database with async method
const mockDb = {
    async findUserById(id) {
        return { id, name: 'Alice' };
    }
};

const service = new UserService(mockDb);
service.getUserProfile(42).then(profile => {
    console.log('User profile:', profile);
});",code_defect,missing_await_async_bug,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

std::string processString(const std::string& input) {
    std::string result = input;

    for (size_t i = 0; i < result.size(); ++i) {
        if (result[i] >= 'a' && result[i] <= 'z') {
            result[i] -= 32;
        }
    }

    for (size_t i = 0; i < result.size(); ++i) {
        if (result[i] == 'A') {
            result[i] = '@';
        }
    }

    return result;
}

int main() {
    std::string input = ""Hello World"";
    std::string output = processString(input);
    std::cout << output << std::endl;
    return 0;
}",code_smell,inefficient_loops,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
   ",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}

    void addTransaction(int amount) {
        // No validation of amount, negative values allowed
        std::lock_guard<std::mutex> lock(mtx_);
        transactions_.push_back(amount);
        total_ += amount; // potential overflow, no check
    }

    int computeTotal() const {
        return total_; // returns possibly overflowed sum
    }

    void processAll() {
        // Launch a thread per transaction (inefficient and can exhaust resources)
        std::vector<std::thread> workers;
        for (int amt : transactions_) {
            workers.emplace_back([this, amt]() {
                // Simulate work
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                // Incorrectly updates total without synchronization -> data race
                total_ += amt;
            });
        }
        for (auto &t : workers) {
            if (t.joinable()) t.join();
        }
    }

private:
    std::vector<int> transactions_;
    mutable std::mutex mtx_;
    int total_; // not atomic, accessed without lock in processAll
};

int main() {
    TransactionProcessor tp;
    tp.addTransaction(100);
    tp.addTransaction(-50);
    tp.addTransaction(200);
    tp.processAll();
    std::cout << ""Total: "" << tp.computeTotal() << std::endl;
    return 0;
}",code_defect,data_race_and_overflow,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

std::vector<int> processNumbers(const std::vector<int>& numbers) {
    std::vector<int> result;
    for (size_t i = 0; i < numbers.size(); ++i) {
        for (size_t j = 0; j < numbers.size(); ++j) {
            if (i != j) {
                result.push_back(numbers[i] + numbers[j]);
            }
        }
    }
    return result;
}

int main() {
    std::vector<int> data = {1, 2, 3, 4};
    std::vector<int> output = processNumbers(data);

    for (int val : output) {
        std::cout << val << "" "";
    }

    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Java,public class UserManager { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUser(int index) { return users.get(index); } public void removeUser(int index) { users.remove(index); } public int getCount() { return users.size(); } },code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class LogProcessor {
    constructor(logFilePath) {
        this.logFilePath = logFilePath;
        this.buffer = [];
    }

    // Reads the entire log file into memory and processes each line
    async processLogs() {
        const data = await fs.promises.readFile(this.logFilePath, 'utf8');
        const lines = data.split('\n');
        for (let i = 0; i <= lines.length; i++) { // off‑by‑one error: should be i < lines.length
            const line = lines[i];
            if (line.trim() === '') continue;
            this.buffer.push(this.parseLogLine(line));
        }
        this.flushBuffer();
    }

    parseLogLine(line) {
        const parts = line.split(' ');
        return {
            timestamp: parts[0],
            level: parts[1],
            message: parts.slice(2).join(' ')
        };
    }

    // Writes buffered log entries to a JSON file
    flushBuffer() {
        const outputPath = this.logFilePath + '.json';
        fs.writeFileSync(outputPath, JSON.stringify(this.buffer, null, 2));
    }
}

// Usage example (would be called elsewhere in the app)
const processor = new LogProcessor('/var/log/app.log');
processor.processLogs().catch(err => console.error('Failed to process logs:', err));",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import requests

def get_user_data(user_id):
    response = requests.get(f'https://api.example.com/users/{user_id}')
    if response.status_code == 200:
        return response.json()
    else:
        return None

def process_user_data(data):
    if not data:
        return

    user_name = data.get('name')
    email = data.get('email')

    if not user_name or not email:
        return

    with open(f'{user_name}_profile.txt', 'w') as file:
        file.write(f'Name: {user_name}\n')
        file.write(f'Email: {email}\n')

    print(f'Processed {user_name} successfully.')

def main():
    user_ids = [1, 2, 3, 4, 5]
    for user_id in user_ids:
        user_data = get_user_data(user_id)
        process_user_data(user_data)

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
      constructor(username, password) {
         this.username = username;
         this.password = password;
         this.isLoggedIn = false;
      }

      login() {
         this.isLoggedIn = true;
      }

      logout() {
         this.isLoggedIn = false;
      }

      changePassword(newPassword) {
         this.password = newPassword;
      }
   }

   function authenticateUser(username, password) {
      const users = [
         { username: 'admin', password: 'password123' },
         { username: 'user', password: 'password456' }
      ];

      for (let i = 0; i < users.length; i++) {
         if (users[i].username === username && users[i].password === password) {
            return true;
         }
      }

      return false;
   }

   const user = new UserAccount('admin', 'password123');
   if (authenticateUser(user.username, user.password)) {
      user.login();
   } else {
      console.log('Authentication failed');
   }
   ",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}

    void addTransaction(int amount) {
        std::lock_guard<std::mutex> lock(mtx_);
        transactions_.push_back(amount);
        // Intentional bug: total is updated without holding the lock after push_back
        total_ += amount; // race condition
    }

    int getTotal() const {
        return total_; // may return inconsistent value
    }

    void processAll() {
        std::vector<std::thread> workers;
        for (size_t i = 0; i < transactions_.size(); ++i) {
            workers.emplace_back([this, i]() {
                // Simulate processing delay
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                // No synchronization here, potential data race on transactions_
                int val = transactions_[i];
                std::cout << ""Processed: "" << val << std::endl;
            });
        }
        for (auto &t : workers) t.join();
    }

private:
    std::vector<int> transactions_;
    mutable std::mutex mtx_;
    int total_; // not protected consistently
};

int main() {
    TransactionProcessor tp;
    for (int i = 0; i < 100; ++i) {
        tp.addTransaction(i);
    }
    tp.processAll();
    std::cout << ""Total: "" << tp.getTotal() << std::endl;
    return 0;
}
",code_defect,race_condition,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order, boolean isPriority, String customerEmail, String paymentMethod, boolean isInternational) {
        if (order == null) {
            return;
        }

        if (isPriority) {
            sendPriorityNotification(customerEmail);
        }

        if (paymentMethod.equals(""CREDIT_CARD"")) {
            if (isInternational) {
                applyAdditionalCharges(order);
            }
            chargeCreditCard(order.getTotal());
        } else if (paymentMethod.equals(""PAYPAL"")) {
            processPaypal(order.getTotal());
        } else {
            // TODO: Handle other payment methods
        }

        if (order.getItems().isEmpty()) {
            return;
        }

        for (Item item : order.getItems()) {
            if (item.getQuantity() > 0) {
                item.setProcessed(true);
            }
        }

        // Legacy code that is no longer used
        // if (customerEmail.contains(""test"")) {
        //     sendTestEmail();
        // }

        updateOrderStatus(order, ""PROCESSED"");
    }

    private void sendPriorityNotification(String email) {
        // Implementation not shown
    }

    private void applyAdditionalCharges(Order order) {
        // Implementation not shown
    }

    private void chargeCreditCard(double amount) {
        // Implementation not shown
    }

    private void processPaypal(double amount) {
        // Implementation not shown
    }

    private void updateOrderStatus(Order order, String status) {
        // Implementation not shown
    }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    std::string name;
    int salary;

    Employee(std::string n, int s) : name(n), salary(s) {}

    bool operator<(const Employee& other) const {
        return salary < other.salary;
    }
};

class Company {
public:
    std::vector<Employee> employees;

    void addEmployee(Employee e) {
        employees.push_back(e);
    }

    void sortEmployees() {
        std::sort(employees.begin(), employees.end());
    }

    Employee getHighestPaidEmployee() {
        if (employees.empty()) {
            return Employee("""", 0);
        }
        return *std::max_element(employees.begin(), employees.end());
    }
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));
    company.sortEmployees();
    Employee highestPaid = company.getHighestPaidEmployee();
    std::cout << ""Highest paid employee: "" << highestPaid.name << "" with salary: "" << highestPaid.salary << std::endl;
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigManager:
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, config_path='config.json'):
        # Singleton pattern but flawed: race condition possible
        if not cls._instance:
            with cls._lock:
                if not cls._instance:
                    cls._instance = super(ConfigManager, cls).__new__(cls)
                    cls._instance._load(config_path)
        return cls._instance

    def _load(self, path):
        # Insecure: directly reads file without validation
        with open(path, 'r') as f:
            self.settings = json.load(f)

    def get(self, key, default=None):
        return self.settings.get(key, default)

    def set(self, key, value):
        self.settings[key] = value
        self._save()

    def _save(self):
        # Vulnerable: writes back to the same file without atomic operation
        with open('config.json', 'w') as f:
            json.dump(self.settings, f, indent=2)

def process_user_input(user_input):
    # Missing validation leads to potential injection
    cfg = ConfigManager()
    if user_input.startswith('set '):
        _, key, val = user_input.split(' ', 2)
        cfg.set(key, val)
    elif user_input.startswith('get '):
        _, key = user_input.split(' ', 1)
        print(f""{key} = {cfg.get(key)}"")
    else:
        print('Unknown command')

# Example usage (would be called from a network handler in real app)
if __name__ == '__main__':
    while True:
        cmd = input('> ')
        if cmd == 'exit':
            break
        process_user_input(cmd)",code_defect,race_condition_and_insecure_file_handling,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(userData) {
    this.userData = userData;
  }

  processUsers() {
    const results = [];
    for (let i = 0; i < this.userData.length; i++) {
      const user = this.userData[i];
      if (user.isActive) {
        const processedUser = {
          id: user.id,
          name: user.name.toUpperCase(),
          email: user.email,
          created: new Date().toISOString()
        };
        results.push(processedUser);
      }
    }
    return results;
  }

  getActiveUsersCount() {
    return this.processUsers().length;
  }
}

const userProcessor = new UserProcessor([
  { id: 1, name: 'Alice', email: 'alice@example.com', isActive: true },
  { id: 2, name: 'Bob', email: 'bob@example.com', isActive: false },
  { id: 3, name: 'Charlie', email: 'charlie@example.com', isActive: true }
]);

const activeCount = userProcessor.getActiveUsersCount();
console.log(`Active users count: ${activeCount}`);",code_smell,duplicated_code,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <algorithm>
      
      class Employee {
      public:
         Employee(std::string name, int salary) : name(name), salary(salary) {}
      
         std::string getName() { return name; }
         int getSalary() { return salary; }
      
      private:
         std::string name;
         int salary;
      };
      
      class EmployeeDatabase {
      public:
         void addEmployee(Employee employee) { employees.push_back(employee); }
         Employee getEmployeeWithHighestSalary() {
            if (employees.empty()) {
               throw std::runtime_error(""No employees in the database"");
            }
            return *std::max_element(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
               return a.getSalary() < b.getSalary();
            });
         }
      
      private:
         std::vector<Employee> employees;
      };
      
      int main() {
         EmployeeDatabase database;
         database.addEmployee(Employee(""John Doe"", 50000));
         database.addEmployee(Employee(""Jane Doe"", 60000));
         Employee highestPaid = database.getEmployeeWithHighestSalary();
         std::cout << ""The employee with the highest salary is: "" << highestPaid.getName() << std::endl;
         return 0;
      }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password""; // hardcoded secret

    public List<Payment> getPendingPayments() throws SQLException {
        List<Payment> pending = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, status FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Payment p = new Payment();
            p.setId(rs.getInt(""id""));
            p.setAmount(rs.getDouble(""amount""));
            p.setStatus(rs.getString(""status""));
            pending.add(p);
        }
        // Missing close of ResultSet, Statement, and Connection (resource leak)
        return pending;
    }

    public void processPayments() {
        try {
            List<Payment> payments = getPendingPayments();
            for (Payment p : payments) {
                // Simulate external API call
                boolean success = externalCharge(p.getAmount());
                updatePaymentStatus(p.getId(), success ? ""COMPLETED"" : ""FAILED"");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private boolean externalCharge(double amount) {
        // Placeholder for real payment gateway integration
        return amount > 0; // simplistic check, may approve zero or negative amounts elsewhere
    }

    private void updatePaymentStatus(int paymentId, String newStatus) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""UPDATE payments SET status = ? WHERE id = ?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, newStatus);
            stmt.setInt(2, paymentId);
            stmt.executeUpdate();
            // Missing commit/close, potential transaction issues
        } catch (SQLException e) {
            // Swallowing exception silently
        }
    }
}

class Payment {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}
",code_defect,resource_leak_and_silent_exception,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor() {
    this._orders = [];
  }

  addOrder(order) {
    this._orders.push(order);
  }

  processOrders() {
    for (let i = 0; i < this._orders.length; i++) {
      const order = this._orders[i];
      this._validateOrder(order);
      this._chargeCustomer(order);
      this._shipOrder(order);
    }
  }

  _validateOrder(order) {
    if (!order.customer || !order.items || order.items.length === 0) {
      throw new Error('Invalid order: missing customer or items');
    }
  }

  _chargeCustomer(order) {
    // Simulated charge logic
    console.log(`Charging customer ${order.customer.id} for $${order.total}`);
  }

  _shipOrder(order) {
    // Simulated shipping logic
    console.log(`Shipping order ${order.id} to ${order.shippingAddress}`);
  }
}

// Example usage
const processor = new OrderProcessor();
processor.addOrder({ id: 1, customer: { id: 101 }, items: [{ product: 'Book', price: 10 }], total: 10, shippingAddress: '123 Main St' });
processor.processOrders();",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
       constructor(paymentGateway) {
           this.paymentGateway = paymentGateway;
       }

       processPayment(order) {
           const paymentMethod = order.paymentMethod;
           if (paymentMethod === 'credit_card') {
               this.paymentGateway.chargeCreditCard(order.amount, order.creditCardNumber);
           } else if (paymentMethod === 'paypal') {
               this.paymentGateway.chargePayPal(order.amount, order.payPalEmail);
           }
           // TODO: add more payment methods in the future
           return true;
       }
   }

   class PaymentGateway {
       chargeCreditCard(amount, creditCardNumber) {
           // simulate a credit card charge
           console.log(`Charged $${amount} to credit card ${creditCardNumber}`);
       }

       chargePayPal(amount, payPalEmail) {
           // simulate a PayPal charge
           console.log(`Charged $${amount} to PayPal account ${payPalEmail}`);
       }
   }

   const paymentGateway = new PaymentGateway();
   const paymentProcessor = new PaymentProcessor(paymentGateway);
   const order = {
       amount: 100,
       paymentMethod: 'credit_card',
       creditCardNumber: '1234-5678-9012-3456'
   };

   paymentProcessor.processPayment(order);
   ",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  // Loads JSON config file. Caches result but never invalidates.
  load() {
    if (this.cache) {
      return this.cache;
    }
    const data = fs.readFileSync(this.path, 'utf8');
    // BUG: JSON.parse can throw, but error is not caught, causing the whole process to crash.
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function initializeApp() {
  const loader = new ConfigLoader('./config.json');
  const config = loader.load();
  // Assume config has a ""port"" property.
  const server = require('http').createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('Server running');
  });
  server.listen(config.port);
}

initializeApp();",code_defect,unhandled_exception,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor() {
        this.orders = new ArrayList<>();
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                if (order.getTotal() > 0) {
                    if (order.getCustomerId() != null) {
                        order.markAsProcessed();
                        sendConfirmationEmail(order);
                    }
                }
            }
        }
    }

    private void sendConfirmationEmail(Order order) {
        // Email sending logic
        System.out.println(""Email sent for order: "" + order.getId());
    }

    public void addOrder(Order order) {
        this.orders.add(order);
    }
}",code_smell,nested_conditionals,,qwen/qwen3-32b
Python,"
class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        return self.balance

    def withdraw(self, amount):
        if amount > self.balance:
            return 'Insufficient funds'
        self.balance -= amount
        return self.balance

    def get_balance(self):
        return self.balance

    def transfer(self, amount, recipient_account):
        if amount > self.balance:
            return 'Insufficient funds'
        self.balance -= amount
        recipient_account.deposit(amount)
        return self.balance

account1 = BankAccount(1000)
account2 = BankAccount(500)
print(account1.get_balance())
print(account2.get_balance())
account1.transfer(200, account2)
print(account1.get_balance())
print(account2.get_balance())
   ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        if (this.cache) return this.cache;
        // Synchronous file read without error handling – may throw and crash the process
        const data = fs.readFileSync(this.path, 'utf8');
        // Assume JSON, but no try/catch for malformed content
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function processUserInput(input) {
    // Directly uses user input in a shell command – command injection risk
    const exec = require('child_process').exec;
    exec(`ls ${input}`, (err, stdout, stderr) => {
        if (err) {
            console.error('Execution error');
            return;
        }
        console.log('Files:', stdout);
    });
}

function calculateDiscount(price, discount) {
    // Off‑by‑one error: should be price * (1 - discount/100)
    return price - (price * discount) / 100 - 1;
}

module.exports = { ConfigLoader, processUserInput, calculateDiscount };",code_defect,command_injection_and_off_by_one,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

struct User {
    std::string name;
    int age;
    std::string email;
};

void sendEmail(const std::string& to, const std::string& subject, const std::string& body) {
    std::cout << ""Sending email to "" << to << "" with subject: "" << subject << std::endl;
}

void notifyUsers(const std::vector<User>& users) {
    for (const auto& user : users) {
        if (user.email.empty()) {
            std::cerr << ""User "" << user.name << "" has no email address.\n"";
            continue;
        }
        
        std::string subject = ""Welcome, "" + user.name;
        std::string body = ""Dear "" + user.name + "",\n\nWelcome to our platform!"";
        
        sendEmail(user.email, subject, body);
    }
}

int main() {
    std::vector<User> users = {
        {""Alice"", 28, ""alice@example.com""},
        {""Bob"", 35, ""bob@example.com""},
        {""Charlie"", 22, """"},
        {""Diana"", 31, ""diana@example.org""}
    };

    notifyUsers(users);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user data and writes a report file
  async generateUserReport(userId) {
    // Potential race condition: no lock, multiple calls may interleave
    const user = await this.db.getUserById(userId);
    if (!user) {
      throw new Error('User not found');
    }

    const orders = await this.db.getOrdersForUser(userId);
    const total = orders.reduce((sum, o) => sum + o.amount, 0);

    const report = {
      id: user.id,
      name: user.name,
      email: user.email,
      totalSpent: total,
      orderCount: orders.length,
    };

    // BUG: Asynchronous write without awaiting, may cause incomplete file
    fs.writeFile('reports/' + user.id + '.json', JSON.stringify(report), (err) => {
      if (err) console.error('Failed to write report', err);
    });

    return report;
  }
}

module.exports = UserService;",code_defect,async_file_write_without_await,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users || [];
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  addUser(user) {
    this.users.push(user);
  }

  deleteUserByEmail(email) {
    const index = this.users.findIndex(user => user.email === email);
    if (index !== -1) {
      this.users.splice(index, 1);
    }
  }

  getAllUsers() {
    return this.users;
  }
}

const user1 = { id: 1, name: 'Alice', email: 'alice@example.com' };
const user2 = { id: 2, name: 'Bob', email: 'bob@example.com' };
const userManager = new UserManager([user1, user2]);",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, String> users = new HashMap<>(); public synchronized void addUser(String username, String password) { if (!users.containsKey(username)) { users.put(username, password); } } public synchronized String getPassword(String username) { return users.get(username); } public static void main(String[] args) { UserService userService = new UserService(); userService.addUser(""user1"", ""password1""); System.out.println(userService.getPassword(""user1"")); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it in memory.""""""
    _cache = {}
    _lock = threading.Lock()

    @classmethod
    def get_config(cls, path: str) -> dict:
        # NOTE: No validation of path, potential path traversal
        with cls._lock:
            if path in cls._cache:
                return cls._cache[path]
            with open(path, 'r') as f:
                data = json.load(f)
                cls._cache[path] = data
                return data

class UserService:
    def __init__(self, config_path: str):
        self.config = ConfigLoader.get_config(config_path)
        self.db_conn_str = self.config.get('db_connection')
        # Directly using the connection string without sanitization
        self._connect_to_db()

    def _connect_to_db(self):
        # Simulated insecure DB connection (e.g., using eval on connection string)
        # This is a placeholder for actual DB connection logic
        self.db = eval(self.db_conn_str)  # Dangerous: executes arbitrary code

    def get_user(self, user_id: int) -> dict:
        # Potential SQL injection if query were built with string formatting
        query = f""SELECT * FROM users WHERE id = {user_id}""
        # Simulated DB fetch (placeholder)
        result = self.db.execute(query)
        return result.fetchone()

def main():
    service = UserService('/etc/app/config.json')
    user = service.get_user(42)
    print(json.dumps(user))

if __name__ == '__main__':
    main()",code_defect,unsafe_eval_and_sql_injection,,openai/gpt-oss-120b
Python,"import requests
import json

API_URL = 'https://api.example.com/data'
API_KEY = 'myhardcodedapikey123'

def fetch_and_process_data():
    headers = {'Authorization': f'Bearer {API_KEY}'}
    response = requests.get(API_URL, headers=headers)
    if response.status_code != 200:
        print('Failed to fetch data')
        return

    data = json.loads(response.text)

    results = []
    for item in data:
        if 'id' in item and 'name' in item:
            results.append({
                'id': item['id'],
                'name': item['name'],
                'formatted_name': f""{item['name'].title()} (ID: {item['id']})""
            })

    return results

# TODO: Add data validation and error handling

if __name__ == '__main__':
    output = fetch_and_process_data()
    if output:
        print(json.dumps(output, indent=2))",code_defect,hardcoded_secret,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string name, int age) : name(name), age(age) {}
};

class UserService {
public:
    std::vector<User> users;

    void addUser(User user) {
        users.push_back(user);
    }

    User* getUserByName(std::string name) {
        for (User& user : users) {
            if (user.name == name) {
                return &user;
            }
        }
        return nullptr;
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    service.addUser(User(""Alice"", 25));

    User* user = service.getUserByName(""John"");
    if (user != nullptr) {
        std::cout << user->name << std::endl;
    }

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // BUG: If no task was available, task remains 0 and is processed anyway
            std::cout << ""Processing: "" << task << std::endl;
            std::this_thread::sleep_for(std::chrono::milliseconds(10));
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 1; i <= 5; ++i) dp.addTask(i);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
Python,"import requests

class UserAuthHandler:
    def __init__(self):
        self.base_url = 'https://api.example.com/v1'
        self.api_key = 'super-secret-key'  # Hardcoded secret
        self.headers = {'Authorization': f'Bearer {self.api_key}'}

    def fetch_user(self, user_id):
        url = f'{self.base_url}/user/{user_id}'
        response = requests.get(url, headers=self.headers)
        if response.status_code == 200:
            return response.json()
        else:
            return None

    def update_user(self, user_id, data):
        url = f'{self.base_url}/user/{user_id}'
        response = requests.patch(url, json=data, headers=self.headers)
        return response.status_code == 200

# Example usage
if __name__ == '__main__':
    auth_handler = UserAuthHandler()
    user_data = auth_handler.fetch_user(12345)
    print(user_data)
    auth_handler.update_user(12345, {'name': 'New Name'})",code_defect,hardcoded_secret,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(paymentGateway) {
         this.paymentGateway = paymentGateway;
      }

      processPayment(order) {
         const paymentMethod = order.paymentMethod;
         if (paymentMethod === 'creditCard') {
            this.paymentGateway.chargeCard(order.amount, order.creditCardNumber, order.expirationDate, order.cvv);
         } else if (paymentMethod === 'paypal') {
            this.paymentGateway.chargePaypal(order.amount, order.paypalEmail);
         }
      }
   }

   class PaymentGateway {
      chargeCard(amount, cardNumber, expirationDate, cvv) {
         // Simulate a successful charge
         console.log(`Charged $${amount} to card ${cardNumber}`);
      }

      chargePaypal(amount, paypalEmail) {
         // Simulate a successful charge
         console.log(`Charged $${amount} to PayPal account ${paypalEmail}`);
      }
   }

   const paymentGateway = new PaymentGateway();
   const paymentProcessor = new PaymentProcessor(paymentGateway);
   const order = {
      amount: 100,
      paymentMethod: 'creditCard',
      creditCardNumber: '1234567890',
      expirationDate: '12/25',
      cvv: '123'
   };
   paymentProcessor.processPayment(order);
   ",code_smell,Tight Coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class LogProcessor {
public:
    LogProcessor(const std::vector<std::string>& logs) : logs_(logs) {}

    // Returns the most frequent log entry length
    size_t mostFrequentLength() const {
        std::vector<size_t> lengths;
        lengths.reserve(logs_.size());
        for (const auto& entry : logs_) {
            lengths.push_back(entry.size());
        }
        std::sort(lengths.begin(), lengths.end());
        size_t maxCount = 0;
        size_t currentCount = 1;
        size_t mostFreq = 0;
        for (size_t i = 1; i <= lengths.size(); ++i) { // BUG: off‑by‑one, accesses out of bounds
            if (i < lengths.size() && lengths[i] == lengths[i - 1]) {
                ++currentCount;
            } else {
                if (currentCount > maxCount) {
                    maxCount = currentCount;
                    mostFreq = lengths[i - 1];
                }
                currentCount = 1;
            }
        }
        return mostFreq;
    }

private:
    std::vector<std::string> logs_;
};

int main() {
    std::vector<std::string> logs = {""error"", ""warning"", ""info"", ""debug"", ""error"", ""error""};
    LogProcessor processor(logs);
    std::cout << ""Most frequent length: "" << processor.mostFrequentLength() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    DataProcessor() : processed_count(0) {}

    void process(const std::vector<int>& data) {
        for (int i = 0; i < data.size(); ++i) {
            if (data[i] > 0) {
                processed_count++;
            }
        }
    }

    int getProcessedCount() const {
        return processed_count;
    }

private:
    int processed_count;
};

int main() {
    std::vector<int> input = {1, -2, 3, 0, 5, -1};
    DataProcessor dp;
    dp.process(input);
    std::cout << ""Processed items: "" << dp.getProcessedCount() << std::endl;
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>

   class PriorityQueue {
   private:
       std::vector<int> queue;

   public:
       void push(int value) {
           queue.push_back(value);
           std::sort(queue.begin(), queue.end(), std::greater<int>());
       }

       int pop() {
           if (queue.empty()) {
               return -1; // Return -1 if queue is empty
           }
           int value = queue[0];
           queue.erase(queue.begin());
           return value;
       }
   };

   int main() {
       PriorityQueue pq;
       pq.push(3);
       pq.push(1);
       pq.push(2);

       std::cout << pq.pop() << std::endl; // prints 3
       std::cout << pq.pop() << std::endl; // prints 2
       std::cout << pq.pop() << std::endl; // prints 1
       std::cout << pq.pop() << std::endl; // prints -1

       return 0;
   }
   ",code_smell,inefficient_data_structure,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String role) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String sql = ""SELECT email FROM users WHERE role = '"" + role + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, lose stack trace
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    // Unused method, dead code
    private void logAccess(String userId) {
        System.out.println(""User accessed: "" + userId);
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"class DataProcessor {
  constructor() {
    this.cache = {};
  }

  process(data) {
    if (!data || data.length === 0) {
      return [];
    }

    let processed = [];
    for (let i = 0; i < data.length; i++) {
      let item = data[i];
      if (this.cache[item.id]) {
        processed.push(this.cache[item.id]);
        continue;
      }

      let result = this._compute(item);
      this.cache[item.id] = result;
      processed.push(result);
    }

    return processed;
  }

  _compute(item) {
    let value = Math.sqrt(item.value);
    let status = 'active';

    if (value < 5) {
      status = 'low';
    } else if (value < 10) {
      status = 'medium';
    } else {
      status = 'high';
    }

    return {
      id: item.id,
      value: value.toFixed(2),
      status: status
    };
  }
}

module.exports = DataProcessor;",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }
        if (username.equals(""admin"") && password.equals(DEFAULT_PASSWORD)) {
            return true;
        }
        // Legacy authentication logic
        return username.equals(password);
    }
}",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String role) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // SQL injection vulnerability: role is concatenated directly
            String sql = ""SELECT email FROM users WHERE role='"" + role + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallowing exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processItems(const std::vector<int>& items) {
    for (size_t i = 0; i < items.size(); ++i) {
        for (size_t j = 0; j < items.size(); ++j) {
            if (items[i] == items[j]) {
                std::cout << ""Duplicate found at ("" << i << "", "" << j << "")"" << std::endl;
            }
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 2, 4};
    processItems(data);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Java,"public class UserManager { private static final int MAX_RETRIES = 3; public void createUser(String username, String password) { for (int i = 0; i < MAX_RETRIES; i++) { try { // Simulate a delay to represent a database operation Thread.sleep(100); System.out.println(""User created: "" + username); break; } catch (InterruptedException e) { System.out.println(""Error creating user: "" + e.getMessage()); } } } }",code_smell,inefficient_error_handling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self._config = None
        self._lock = threading.Lock()

    def load(self):
        # No error handling; assumes file exists and contains valid JSON
        with open(self.path, 'r') as f:
            data = f.read()
        # Unsafe deserialization: using eval on file content
        self._config = eval(data)
        return self._config

    def get(self, key, default=None):
        with self._lock:
            return self._config.get(key, default) if self._config else default

# Usage example
loader = ConfigLoader('/etc/app/config.cfg')
config = loader.load()
api_key = config.get('API_KEY')
print('API key loaded:', api_key)
",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

struct DataProcessor {
    std::vector<int> process(const std::vector<int>& input) {
        std::vector<int> result;
        for (int i = 0; i < input.size(); ++i) {
            for (int j = 0; j < input.size(); ++j) {
                if (i != j && input[i] > input[j]) {
                    result.push_back(input[i]);
                }
            }
        }
        return result;
    }
};

int main() {
    std::vector<int> data = {3, 1, 4, 1, 5};
    DataProcessor dp;
    std::vector<int> processed = dp.process(data);
    for (int val : processed) {
        std::cout << val << "" "";
    }
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public synchronized User getUser(String username) { if (!users.containsKey(username)) { User user = new User(username); users.put(username, user); return user; } return users.get(username); } public static class User { private final String username; public User(String username) { this.username = username; } public String getUsername() { return username; } } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i]; // may read out of bounds
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1,2,3,4,5};
    std::thread t([&](){ processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << "" Odd sum: "" << processor.getOddSum() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

using namespace std;

int process_data(vector<int>& data) {
    int result = 0;
    for (int i = 0; i < data.size(); i++) {
        for (int j = 0; j < data.size(); j++) {
            if (data[i] == data[j]) {
                result++;
            }
        }
    }
    return result;
}

int main() {
    vector<int> input = {1, 2, 3, 2, 1};
    int output = process_data(input);
    cout << ""Result: "" << output << endl;
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <algorithm>

      class Employee {
      public:
         Employee(std::string name, int salary) : name(name), salary(salary) {}

         std::string getName() { return name; }
         int getSalary() { return salary; }

      private:
         std::string name;
         int salary;
      };

      std::vector<Employee> sortEmployees(std::vector<Employee>& employees) {
         std::sort(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
            return a.getSalary() < b.getSalary();
         });
         return employees;
      }

      int main() {
         std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
         std::vector<Employee> sortedEmployees = sortEmployees(employees);

         for (const auto& employee : sortedEmployees) {
            std::cout << employee.getName() << "" - "" << employee.getSalary() << std::endl;
         }

         return 0;
      }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"class UserService {
    constructor(db) {
        this.db = db;
    }

    // Fetch a page of users, page numbers start at 1
    async getUsersPage(page, pageSize) {
        const offset = (page - 1) * pageSize;
        const limit = pageSize;
        const rows = await this.db.query('SELECT * FROM users LIMIT ?, ?', [offset, limit]);
        return rows;
    }

    // Delete a user by ID without proper permission check
    async deleteUser(userId) {
        // Assume admin check is performed elsewhere
        await this.db.execute('DELETE FROM users WHERE id = ?', [userId]);
        console.log(`User ${userId} deleted`);
    }
}

// Usage example
(async () => {
    const db = require('mysql2/promise').createPool({
        host: 'localhost',
        user: 'root',
        password: 'root', // hardcoded secret
        database: 'app'
    });
    const service = new UserService(db);
    const users = await service.getUsersPage(1, 10);
    console.log('First page users:', users);
    // Off‑by‑one bug: requesting page 0 returns the last page instead of error
    const invalidPage = await service.getUsersPage(0, 10);
    console.log('Invalid page users:', invalidPage);
})();",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (i != j && data[i] == data[j]) {
                std::cout << ""Duplicate found at indices "" << i << "" and "" << j << std::endl;
            }
        }
    }
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 2, 4, 5, 3};
    processData(numbers);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Python,"
class BankAccount:
    def __init__(self, account_number, balance=0):
        self.account_number = account_number
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        if amount > self.balance:
            self.balance = 0
        else:
            self.balance -= amount

    def get_balance(self):
        return self.balance

class Bank:
    def __init__(self):
        self.accounts = {}

    def create_account(self, account_number, balance=0):
        if account_number not in self.accounts:
            self.accounts[account_number] = BankAccount(account_number, balance)
        else:
            print('Account already exists')

    def get_account(self, account_number):
        return self.accounts.get(account_number)

    def transfer(self, from_account_number, to_account_number, amount):
        from_account = self.get_account(from_account_number)
        to_account = self.get_account(to_account_number)
        if from_account and to_account:
            from_account.withdraw(amount)
            to_account.deposit(amount)
        else:
            print('One or both accounts do not exist')

bank = Bank()
bank.create_account('12345', 1000)
bank.create_account('67890', 500)
bank.transfer('12345', '67890', 200)
print(bank.get_account('12345').get_balance())
print(bank.get_account('67890').get_balance())
",code_defect,inconsistent_state_management,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String domain) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            stmt = conn.createStatement();
            // SQL injection vulnerability: domain is concatenated directly
            String query = ""SELECT email FROM users WHERE email LIKE '%"" + domain + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        } catch (Exception e) {
            // Swallowing exception, no logging
        } finally {
            // Resources not closed properly, may leak connections
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_resource_leak,,openai/gpt-oss-120b
Python,"import json
import requests

def fetch_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        return {
            'id': data['id'],
            'name': data['name'],
            'email': data['email'],
        }
    else:
        return None

def send_welcome_email(email):
    payload = {'to': email, 'subject': 'Welcome!', 'body': 'Thank you for signing up.'}
    requests.post('https://api.example.com/email/send', json=payload)


def onboard_new_user(user_id):
    user_data = fetch_user_data(user_id)
    if user_data:
        send_welcome_email(user_data['email'])
        print(f""Welcome email sent to {user_data['name']}."")
    else:
        print(f""Failed to fetch user data for ID {user_id}."")

# Example usage
if __name__ == '__main__':
    onboard_new_user(123)",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Student {
public:
    string name;
    int grade;
    Student(string n, int g) : name(n), grade(g) {}
};

bool compareStudents(Student a, Student b) {
    return a.grade > b.grade;
}

void sortStudents(vector<Student>& students) {
    sort(students.begin(), students.end(), compareStudents);
}

int main() {
    vector<Student> students = {Student(""John"", 90), Student(""Alice"", 95), Student(""Bob"", 80)};
    sortStudents(students);
    for (auto& student : students) {
        cout << student.name << "" "" << student.grade << endl;
    }
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.config = {}
        self._load()

    def _load(self):
        # Insecure: directly eval the config file content
        with open(self.config_path, 'r') as f:
            data = f.read()
            self.config = eval(data)  # unsafe deserialization

    def get(self, key, default=None):
        return self.config.get(key, default)

class UserService:
    def __init__(self, db_connection):
        self.db = db_connection
        self.cache = {}

    def get_user(self, user_id):
        if user_id in self.cache:
            return self.cache[user_id]
        # Missing error handling for DB failures
        result = self.db.execute(f""SELECT * FROM users WHERE id = {user_id}"")
        user = result.fetchone()
        self.cache[user_id] = user
        return user

# Usage example (would be in production code)
config = ConfigLoader('/etc/app/config.cfg')
service = UserService(db_connection=os.getenv('DB_CONN'))
print(json.dumps(service.get_user(42)))",code_defect,unsafe_deserialization_and_sql_injection,,openai/gpt-oss-120b
Python,"import requests

def fetch_data_from_api(url, headers=None):
    response = requests.get(url, headers=headers)
    return response.json()


def process_user_data(user_data):
    users = []
    for user in user_data:
        if user['status'] == 'active':
            user_profile = {
                'id': user['id'],
                'name': user['name'],
                'email': user['email']
            }
            users.append(user_profile)
    return users


def main():
    api_url = 'https://api.example.com/users'
    headers = {
        'Authorization': 'Bearer 1234567890',
        'Content-Type': 'application/json'
    }

    raw_data = fetch_data_from_api(api_url, headers)
    active_users = process_user_data(raw_data)
    print(f'Active users: {active_users}')

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string name, int age) : name(name), age(age) {}
};

class UserService {
private:
    std::vector<User> users;

public:
    void addUser(User user) {
        users.push_back(user);
    }

    User* getUserByName(std::string name) {
        for (auto& user : users) {
            if (user.name == name) {
                return &user;
            }
        }
        return nullptr;
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User* user = service.getUserByName(""John"");
    if (user != nullptr) {
        std::cout << user->name << std::endl;
    }
    return 0;
}
",code_defect,dangling_pointer,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cur = self.conn.cursor()
        cur.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, email: str):
        cur = self.conn.cursor()
        cur.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page - 1) * page_size
        cur = self.conn.cursor()
        cur.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cur.fetchall()
        # Off‑by‑one bug: should return empty list when page is out of range, but returns last page again
        if not rows and page > 1:
            # incorrectly fetch previous page instead of empty
            cur.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset - page_size))
            rows = cur.fetchall()
        return [dict(id=r[0], username=r[1], email=r[2]) for r in rows]

# Example usage (would be in production code)
repo = UserRepository('users.db')
repo.add_user('alice', 'alice@example.com')
repo.add_user('bob', 'bob@example.com')
print(repo.get_users_page(2))",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import requests
import json

def fetch_user_data(user_id):
    url = 'https://api.example.com/users/' + str(user_id)
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if 'name' in data and 'email' in data:
            return {
                'name': data['name'],
                'email': data['email']
            }
        else:
            return None
    else:
        return None

def process_user_data(user_data):
    if user_data is None:
        print('User data is missing.')
        return

    full_name = user_data['name'].strip().title()
    email = user_data['email'].strip().lower()

    if '@' not in email:
        print('Invalid email format.')
        return

    print(f'Processing user: {full_name}, Email: {email}')

    # Additional processing logic can be added here


def main():
    user_id = input('Enter user ID: ')
    user_data = fetch_user_data(user_id)
    process_user_data(user_data)

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <string>
   class UserManager {
   public:
       void registerUser(const std::string& username, const std::string& password) {
           users[username] = password;
       }
       bool authenticateUser(const std::string& username, const std::string& password) {
           if (users.find(username) != users.end()) {
               return users[username] == password;
           }
           return false;
       }
   private:
       std::map<std::string, std::string> users;
   };
   int main() {
       UserManager userManager;
       userManager.registerUser(""user123"", ""password123"");
       std::cout << std::boolalpha << userManager.authenticateUser(""user123"", ""password123"") << std::endl;
       return 0;
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file for each call
    async getUserData(userId) {
        // Bad practice: opening and closing file on every request
        const logStream = fs.createWriteStream('user_access.log', { flags: 'a' });
        try {
            const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
            logStream.write(`User ${userId} accessed at ${new Date().toISOString()}\n`);
            return user[0];
        } catch (err) {
            logStream.write(`Error fetching user ${userId}: ${err.message}\n`);
            throw err;
        } finally {
            logStream.end();
        }
    }

    // Updates user profile; large parameter list and mutable arguments
    async updateUserProfile(userId, firstName, lastName, email, address, phone, preferences) {
        // Mutating the preferences object directly
        preferences.lastUpdated = new Date();
        const sql = `UPDATE users SET first_name = ?, last_name = ?, email = ?, address = ?, phone = ?, preferences = ? WHERE id = ?`;
        const params = [firstName, lastName, email, address, phone, JSON.stringify(preferences), userId];
        return this.db.execute(sql, params);
    }
}

module.exports = UserService;",code_smell,resource_leak_and_large_parameter_list,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

struct User {
    std::string name;
    int age;
    std::string email;
};

void processUser(const User& user) {
    std::cout << ""Processing user: "" << user.name << std::endl;
    if (user.age < 18) {
        std::cout << ""User is a minor. No action taken."" << std::endl;
        return;
    }

    std::string emailDomain = user.email.substr(user.email.find('@') + 1);
    if (emailDomain != ""example.com"") {
        std::cout << ""User email domain is not allowed."" << std::endl;
        return;
    }

    std::cout << ""User is valid. Proceeding..."" << std::endl;
    // Simulate some processing
}

int main() {
    std::vector<User> users = {
        {""Alice"", 25, ""alice@example.com""},
        {""Bob"", 17, ""bob@untrusted.com""},
        {""Charlie"", 30, ""charlie@unknown.org""},
        {""David"", 22, ""david@example.com""}
    };

    for (const auto& user : users) {
        processUser(user);
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        if user_data:
            return {'id': user_data[0], 'name': user_data[1], 'email': user_data[2]}
        else:
            return None
    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute('UPDATE users SET name = %s, email = %s WHERE id = %s', (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigManager:
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, config_path='config.json'):
        # Singleton pattern, but flawed: race condition possible
        if not cls._instance:
            with cls._lock:
                if not cls._instance:
                    cls._instance = super(ConfigManager, cls).__new__(cls)
                    cls._instance._load(config_path)
        return cls._instance

    def _load(self, path):
        # Insecure: loads JSON without validation, may contain malicious content
        with open(path, 'r') as f:
            self.settings = json.load(f)
        # Hardcoded secret fallback
        if 'api_key' not in self.settings:
            self.settings['api_key'] = 'DEFAULT_INSECURE_KEY'

    def get(self, key, default=None):
        return self.settings.get(key, default)

    def set(self, key, value):
        self.settings[key] = value
        # Missing persistence: changes are not saved to disk

# Usage example
if __name__ == '__main__':
    cfg = ConfigManager('/tmp/config.json')
    print('API Key:', cfg.get('api_key'))
    cfg.set('debug', True)
    # The program continues without persisting the new setting
",code_defect,race_condition_and_missing_persistence,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor(order, discountCodes) {
    this.order = order;
    this.discountCodes = discountCodes;
  }

  processOrder() {
    const total = this.calculateTotal();
    const finalAmount = this.applyDiscounts(total);
    this.sendConfirmationEmail();
    return finalAmount;
  }

  calculateTotal() {
    let total = 0;
    for (let i = 0; i < this.order.items.length; i++) {
      total += this.order.items[i].price * this.order.items[i].quantity;
    }
    return total;
  }

  applyDiscounts(total) {
    if (this.discountCodes.includes('SAVE10')) {
      return total * 0.9;
    } else if (this.discountCodes.includes('SAVE20')) {
      return total * 0.8;
    } else {
      return total;
    }
  }

  sendConfirmationEmail() {
    console.log('Email sent to customer');
  }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

class Person {
public:
    std::string name;
    int age;
    Person(std::string n, int a) : name(n), age(a) {}
};

typedef std::vector<Person> PersonList;

void sortPeople(PersonList& people) {
    std::sort(people.begin(), people.end(), [](const Person& a, const Person& b) {
        return a.age < b.age;
    });
}

int main() {
    PersonList people = {Person(""John"", 30), Person(""Alice"", 25), Person(""Bob"", 40)};
    sortPeople(people);
    for (const auto& person : people) {
        std::cout << person.name << "" is "" << person.age << "" years old."" << std::endl;
    }
    return 0;
}",code_smell,unused_import,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user profile and writes audit log asynchronously
  async getUserProfile(userId) {
    const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
    // Fire-and-forget logging, but forgetting to await may cause unhandled rejections
    this.logAccess(userId);
    return user[0];
  }

  // Logs access to a file; returns a promise but callers ignore it
  async logAccess(userId) {
    const logEntry = `${new Date().toISOString()} - User ${userId} accessed profile\n`;
    return new Promise((resolve, reject) => {
      fs.appendFile('access.log', logEntry, err => {
        if (err) reject(err);
        else resolve();
      });
    });
  }
}

// Example usage
(async () => {
  const db = { query: async (sql, params) => [{ id: params[0], name: 'Alice' }] };
  const service = new UserService(db);
  const profile = await service.getUserProfile(42);
  console.log('Profile:', profile);
})();",code_defect,unhandled_promise_rejection_due_to_missing_await,,openai/gpt-oss-120b
Python,"import os
import time

def process_files(directory, file_ext='.txt'):
    files = os.listdir(directory)
    results = []

    for file in files:
        if file.endswith(file_ext):
            file_path = os.path.join(directory, file)
            with open(file_path, 'r') as f:
                content = f.read()
                lines = content.split('\n')
                processed_lines = []
                for line in lines:
                    if line.strip() != '':
                        processed_lines.append(line.strip().upper())
                results.append(processed_lines)
                time.sleep(0.1)  # Simulate processing delay
    return results

# Example usage:
# data = process_files('input_data')
# print(data)",code_smell,inefficient_code,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async getUsers() {
            try {
               const users = await this.userDao.getUsers();
               return users.map(user => ({ id: user.id, name: user.name }));
            } catch (error) {
               console.error('Error fetching users:', error);
               return [];
            }
         }

         async getUserById(id) {
            try {
               const user = await this.userDao.getUserById(id);
               if (!user) {
                  throw new Error(`User with id ${id} not found`);
               }
               return { id: user.id, name: user.name };
            } catch (error) {
               console.error('Error fetching user:', error);
               throw error;
            }
         }
      }

      class UserDao {
         async getUsers() {
            // simulate database query
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' },
            ];
         }

         async getUserById(id) {
            // simulate database query
            const users = await this.getUsers();
            return users.find(user => user.id === id);
         }
      }

      const userDao = new UserDao();
      const userService = new UserService(userDao);
      userService.getUsers().then(users => console.log(users));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Bug: processing zero when no tasks were available
            std::cout << ""Processing: "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main(){
    DataProcessor dp;
    dp.start();
    dp.addTask(42);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

class DataProcessor:
    def __init__(self):
        self.data = []

    def load_data(self, file_path):
        if not os.path.exists(file_path):
            return

        with open(file_path, 'r') as f:
            self.data = json.load(f)

    def process(self):
        for item in self.data:
            if 'timestamp' not in item:
                continue

            # Convert timestamp to datetime
            item['datetime'] = datetime.fromtimestamp(item['timestamp'])

            # Calculate some arbitrary metric
            item['metric'] = item['value'] * 2

    def save_results(self, output_path):
        with open(output_path, 'w') as f:
            json.dump(self.data, f, indent=2)

    def run(self, input_path, output_path):
        self.load_data(input_path)
        self.process()
        self.save_results(output_path)

# Legacy code, not in use anymore
# def old_process(data):
#     results = []
#     for d in data:
#         results.append(d['value'])
#     return results

if __name__ == '__main__':
    processor = DataProcessor()
    processor.run('input.json', 'output.json')",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserManager { private static final String DB_PASSWORD = ""mysecretpassword""; private Connection dbConnection; public UserManager() { try { Class.forName(""com.mysql.cj.jdbc.Driver""); dbConnection = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""myuser"", DB_PASSWORD); } catch (Exception e) { System.out.println(""Error connecting to database: "" + e.getMessage()); } } public void addUser(String username, String password) { try { PreparedStatement statement = dbConnection.prepareStatement(""INSERT INTO users (username, password) VALUES (?, ?)""); statement.setString(1, username); statement.setString(2, password); statement.executeUpdate(); } catch (Exception e) { System.out.println(""Error adding user: "" + e.getMessage()); } } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it in memory.""""""
    _cache = {}
    _lock = threading.Lock()

    @classmethod
    def get_config(cls, path: str) -> dict:
        # Missing validation of path leads to potential path traversal
        with cls._lock:
            if path in cls._cache:
                return cls._cache[path]
            with open(path, 'r') as f:
                data = json.load(f)
                cls._cache[path] = data
                return data

class UserService:
    def __init__(self, config_path: str):
        self.config = ConfigLoader.get_config(config_path)
        self.db_conn_str = self.config.get('db_connection')
        # Directly using the connection string without sanitization
        self._connect_to_db(self.db_conn_str)

    def _connect_to_db(self, conn_str: str):
        # Placeholder for actual DB connection logic
        print(f""Connecting to DB with: {conn_str}"")
        # Simulate a connection object
        self.db = conn_str

    def get_user(self, user_id: int) -> dict:
        # SQL injection vulnerability: user_id is interpolated directly
        query = f""SELECT * FROM users WHERE id = {user_id}""
        print(f""Executing query: {query}"")
        # Simulated DB response
        return {""id"": user_id, ""name"": ""John Doe""}

    def update_user_email(self, user_id: int, new_email: str) -> bool:
        # No validation of email format; could store invalid data
        query = ""UPDATE users SET email = ? WHERE id = ?""
        print(f""Executing prepared statement with email={new_email}, id={user_id}"")
        # Simulate successful update
        return True

# Example usage (would be removed in production)
if __name__ == ""__main__"":
    service = UserService('config.json')
    user = service.get_user(42)
    print(user)
    service.update_user_email(42, 'new.email@example.com')",code_defect,sql_injection_vulnerability,,openai/gpt-oss-120b
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<User> getActiveUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id, username, email FROM users WHERE status = 'active'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            User u = new User();
            u.setId(rs.getInt(""id""));
            u.setUsername(rs.getString(""username""));
            u.setEmail(rs.getString(""email""));
            users.add(u);
        }
        // Missing rs.close(), stmt.close(), and conn.close() leads to resource leak
        return users;
    }

    public void deleteUserById(int userId) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""DELETE FROM users WHERE id = "" + userId; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        // Resources not closed
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
JavaScript,"class UserSession {
  constructor(userId, token) {
    this.userId = userId;
    this.token = token;
    this.lastActivity = new Date();
  }

  updateActivity() {
    this.lastActivity = new Date();
  }

  isExpired(timeout = 300000) {
    const now = new Date();
    const diff = now - this.lastActivity;
    return diff > timeout;
  }

  async validateSession() {
    const response = await fetch('/api/session/validate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.token}`
      }
    });

    if (!response.ok) {
      return false;
    }

    const data = await response.json();
    return data.valid;
  }
}

// Usage
const session = new UserSession('user123', 'abc123xyz');
setInterval(() => {
  session.updateActivity();
}, 60000);",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getAllUsers() {
            const users = await this.userRepository.findAll();
            return users.map(user => ({
               id: user.id,
               name: user.name,
               email: user.email
            }));
         }

         async getUserById(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return {
               id: user.id,
               name: user.name,
               email: user.email
            };
         }
      }

      class UserRepository {
         async findAll() {
            // simulate a database query
            return [
               { id: 1, name: 'John Doe', email: 'john@example.com' },
               { id: 2, name: 'Jane Doe', email: 'jane@example.com' }
            ];
         }

         async findById(id) {
            // simulate a database query
            const users = await this.findAll();
            return users.find(user => user.id === id);
         }
      }

      const userRepository = new UserRepository();
      const userService = new UserService(userRepository);

      async function main() {
         const users = await userService.getAllUsers();
         console.log(users);

         const user = await userService.getUserById(1);
         console.log(user);
      }

      main();
   ",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void process() {
        while (!stopFlag) {
            std::string msg;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    msg = queue.front();
                    queue.erase(queue.begin());
                }
            }
            // BUG: If queue was empty, msg is empty string and still processed
            std::cout << ""Processing: "" << msg << std::endl;
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    lp.enqueue(""Init complete"");
    lp.enqueue(""User login"");
    std::this_thread::sleep_for(std::chrono::seconds(1));
    lp.stop();
    return 0;
}",code_defect,logic_error_unchecked_empty_queue,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.getStatus().equals(""PENDING"")) {
                if (order.getAmount() > 0 && order.getCustomer() != null && order.getItems() != null && !order.getItems().isEmpty()) {
                    String paymentId = generatePaymentId();
                    String transactionId = generateTransactionId();
                    String confirmationCode = generateConfirmationCode();

                    System.out.println(""Processing order: "" + order.getId());
                    System.out.println(""Payment ID: "" + paymentId);
                    System.out.println(""Transaction ID: "" + transactionId);
                    System.out.println(""Confirmation Code: "" + confirmationCode);

                    // TODO: Add payment processing logic
                    // TODO: Add email confirmation logic
                }
            }
        }
    }

    private String generatePaymentId() {
        return UUID.randomUUID().toString();
    }

    private String generateTransactionId() {
        return UUID.randomUUID().toString();
    }

    private String generateConfirmationCode() {
        int length = 8;
        String characters = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < length; i++) {
            int index = (int) (Math.random() * characters.length());
            sb.append(characters.charAt(index));
        }
        return sb.toString();
    }
}",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getUsers() {
            const users = await this.userRepository.findAll();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async getUserById(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return { id: user.id, name: user.name };
         }
      }

      class UserRepository {
         async findAll() {
            // simulate database query
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' }
            ];
         }

         async findById(id) {
            // simulate database query
            const users = await this.findAll();
            return users.find(user => user.id === id);
         }
      }

      const userRepository = new UserRepository();
      const userService = new UserService(userRepository);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize || 10;
    this.currentPage = 0;
    this.items = [];
  }

  loadAll(items) {
    this.items = items;
  }

  getPage(page) {
    // Off‑by‑one error: should use (page - 1) * this.pageSize
    const start = page * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  next() {
    const nextPage = this.currentPage + 1;
    const pageData = this.getPage(nextPage);
    if (pageData.length === 0) return null; // no more data
    this.currentPage = nextPage;
    return pageData;
  }
}

// Usage example (bug manifests when requesting first page)
const paginator = new Paginator(5);
paginator.loadAll([1,2,3,4,5,6,7,8,9,10]);
console.log('First page:', paginator.getPage(1)); // Returns [] due to off‑by‑one
console.log('Next page:', paginator.next()); // Returns [1,2,3,4,5] unexpectedly
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json

def load_config(config_path='config.json'):
    with open(config_path, 'r') as f:
        config = json.load(f)
    return config

def process_data(data):
    result = []
    for item in data:
        if 'id' in item and 'value' in item:
            processed = {
                'identifier': item['id'],
                'score': item['value'] * 2
            }
            result.append(processed)
    return result

def main():
    config = load_config()
    data_path = config.get('data_path', 'data.json')
    
    with open(data_path, 'r') as f:
        raw_data = json.load(f)
    
    processed = process_data(raw_data)
    
    output_path = config.get('output_path', 'output.json')
    with open(output_path, 'w') as f:
        json.dump(processed, f)

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor() {
         this.transactions = [];
      }

      addTransaction(amount) {
         this.transactions.push(amount);
      }

      calculateTotal() {
         let total = 0;
         for (let i = 0; i < this.transactions.length; i++) {
            total += this.transactions[i];
         }
         return total;
      }

      processPayment(cardNumber, expirationDate, securityCode) {
         if (this.calculateTotal() > 1000) {
            return 'Payment exceeds limit';
         }
         // Simulate payment processing time
         const processingTime = Math.floor(Math.random() * 2000);
         setTimeout(() => {
            console.log('Payment processed successfully');
         }, processingTime);
      }
   }

   const paymentProcessor = new PaymentProcessor();
   paymentProcessor.addTransaction(500);
   paymentProcessor.addTransaction(600);
   paymentProcessor.processPayment('1234-5678-9012-3456', '12/25', '123');
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Fetch user data and write a report file
  async generateUserReport(userId) {
    const user = await this.db.getUserById(userId);
    if (!user) {
      throw new Error('User not found');
    }
    const orders = await this.db.getOrdersForUser(userId);
    const total = orders.reduce((sum, o) => sum + o.amount, 0);
    const report = `User: ${user.name}\nTotal Orders: ${orders.length}\nTotal Amount: $${total}`;
    // BUG: Asynchronous write without awaiting, may cause race condition when caller expects file to exist
    fs.writeFile('reports/' + userId + '.txt', report, (err) => {
      if (err) console.error('Failed to write report', err);
    });
    return report;
  }
}

module.exports = UserService;",code_defect,async_file_write_race_condition,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

struct User {
    std::string name;
    int age;
    std::string email;
};

bool validateUser(const User& user) {
    if (user.name.empty()) {
        return false;
    }

    if (user.age < 18) {
        return false;
    }

    if (user.email.find('@') == std::string::npos) {
        return false;
    }

    return true;
}

void registerUser(const User& user) {
    if (validateUser(user)) {
        std::cout << ""User registered: "" << user.name << std::endl;
    } else {
        std::cout << ""User registration failed."" << std::endl;
    }
}

int main() {
    User user = {"""", 16, ""testemail.com""};
    registerUser(user);
    return 0;
}",code_defect,invalid_data_handling,,qwen/qwen3-32b
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""p@ssw0rd""; // hardcoded secret

    public List<User> getActiveUsers() {
        List<User> users = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // SQL injection risk: concatenating user input directly
            String sql = ""SELECT id, username, email FROM users WHERE status='ACTIVE'"";
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                users.add(user);
            }
        } catch (Exception e) {
            // Swallowing exception, no logging
        } finally {
            // Missing close of ResultSet, Statement, and Connection leads to resource leak
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,resource_leak_and_exception_swallowing,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    if (data[i].status === 'active') {
      let processed = {};
      processed.id = data[i].id;
      processed.name = data[i].name.toUpperCase();
      processed.total = 0;
      for (let j = 0; j < data[i].items.length; j++) {
        processed.total += data[i].items[j].quantity * data[i].items[j].price;
      }
      result.push(processed);
    }
  }
  return result;
}

function filterAndProcess(data) {
  let filtered = [];
  for (let i = 0; i < data.length; i++) {
    if (data[i].status === 'active') {
      filtered.push(data[i]);
    }
  }
  return processData(filtered);
}",code_smell,duplicated_code,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>
   class Employee {
   public:
       std::string name;
       int salary;
       Employee(std::string n, int s) : name(n), salary(s) {}
   };
   class Company {
   public:
       std::vector<Employee> employees;
       void addEmployee(Employee e) { employees.push_back(e); }
       int getTotalSalary() {
           int sum = 0;
           for (auto &e : employees) {
               sum += e.salary;
           }
           return sum;
       }
   };
   int main() {
       Company c;
       c.addEmployee(Employee(""John"", 50000));
       c.addEmployee(Employee(""Alice"", 60000));
       std::cout << c.getTotalSalary() << std::endl;
       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String role) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            stmt = conn.createStatement();
            // insecure concatenation leads to SQL injection
            String query = ""SELECT email FROM users WHERE role = '"" + role + ""'"";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        } catch (Exception e) {
            // swallow exception, lose stack trace
        } finally {
            // resources not closed properly, potential leak
            try { if (rs != null) rs.close(); } catch (Exception ignored) {}
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_resource_leak,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor() {
    this.cache = {};
  }

  async getUserDetails(userId) {
    if (this.cache[userId]) {
      return this.cache[userId];n
    }

    const user = await fetchUserFromDatabase(userId);

    if (user && user.isActive) {
      this.cache[userId] = user;
      return user;
    }

    return null;
  }

  async processUsers(userIds) {
    const results = [];
    for (let i = 0; i < userIds.length; i++) {
      const user = await this.getUserDetails(userIds[i]);
      if (user) {
        results.push(user);
      }
    }
    return results;
  }
}

async function fetchUserFromDatabase(userId) {
  // Simulate a database call
  return new Promise((resolve) => {
    setTimeout(() => {
      if (userId === 1) {
        resolve({ id: 1, name: 'Alice', isActive: true });
      } else {
        resolve(null);
      }
    }, 100);
  });
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class ShoppingCart {
         constructor() {
            this.items = [];
         }

         addItem(item) {
            this.items.push(item);
         }

         removeItem(item) {
            const index = this.items.indexOf(item);
            if (index !== -1) {
               this.items.splice(index, 1);
            }
         }

         calculateTotal() {
            let total = 0;
            for (let i = 0; i < this.items.length; i++) {
               total += this.items[i].price * this.items[i].quantity;
            }
            return total;
         }

         applyDiscount(discountPercentage) {
            let total = this.calculateTotal();
            return total * (1 - discountPercentage / 100);
         }
      }

      function main() {
         const cart = new ShoppingCart();
         cart.addItem({ price: 10, quantity: 2 });
         cart.addItem({ price: 20, quantity: 1 });
         console.log(cart.applyDiscount(10));
      }

      main();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserCache:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                data TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def get_user(self, user_id):
        cursor = self.conn.execute('SELECT data FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def set_user(self, user_id, user_obj):
        # Serialize user object to JSON and store it
        data = json.dumps(user_obj)
        self.conn.execute('INSERT OR REPLACE INTO users (id, data) VALUES (?, ?)', (user_id, data))
        self.conn.commit()

    def close(self):
        self.conn.close()

# Global cache instance (singleton pattern misuse)
CACHE = UserCache(os.getenv('USER_DB_PATH', ':memory:'))

def get_user_profile(user_id):
    # Directly returns mutable dict from cache; caller may modify it unintentionally
    profile = CACHE.get_user(user_id)
    if profile is None:
        profile = {'id': user_id, 'name': 'Anonymous', 'settings': {}}
        CACHE.set_user(user_id, profile)
    return profile

def update_user_setting(user_id, key, value):
    profile = get_user_profile(user_id)
    # Bug: modifies the cached dict but does not persist changes back to DB
    profile['settings'][key] = value
    # Missing CACHE.set_user call leads to loss of updates after process restart
    return True
",code_defect,state_not_persisted,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& input, std::vector<int>& output) {
    for (size_t i = 0; i < input.size(); ++i) {
        output.push_back(input[i] * 2);
    }

    for (size_t i = 0; i < output.size(); ++i) {
        if (output[i] > 100) {
            output[i] = 0;
        }
    }
}

int main() {
    std::vector<int> data = {50, 60, 110, 30};
    std::vector<int> result;

    processData(data, result);

    for (int val : result) {
        std::cout << val << ' ';
    }
    std::cout << std::endl;

    return 0;
}",code_smell,inefficient_looping,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string name, int age) : name(name), age(age) {}
};

class UserRepository {
private:
    std::vector<User> users;

public:
    void addUser(User user) {
        users.push_back(user);
    }

    User* getUserByName(std::string name) {
        for (auto& user : users) {
            if (user.name == name) {
                return &user;
            }
        }
        return nullptr;
    }
};

int main() {
    UserRepository repo;
    repo.addUser(User(""John"", 30));
    User* user = repo.getUserByName(""John"");
    if (user) {
        std::cout << user->name << std::endl;
    }
    return 0;
}
",code_defect,dangling_pointer,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3
from typing import List, Dict

class UserRepository:
    def __init__(self, db_path: str = 'users.db'):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        data TEXT NOT NULL)''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, data: Dict):
        # Directly serializing user-provided data without validation
        serialized = json.dumps(data)
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        # SQL injection vulnerability: username is interpolated directly
        cur.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{serialized}')"")
        conn.commit()
        conn.close()

    def get_user(self, user_id: int) -> Dict:
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('SELECT data FROM users WHERE id = ?', (user_id,))
        row = cur.fetchone()
        conn.close()
        if row:
            return json.loads(row[0])
        return {}

def bulk_import_users(csv_path: str, repo: UserRepository):
    # Reads a CSV file where each line is: username, json_data
    with open(csv_path, 'r') as f:
        for line in f:
            parts = line.strip().split(',')
            if len(parts) != 2:
                continue
            username, json_str = parts
            # No error handling for malformed JSON
            data = json.loads(json_str)
            repo.add_user(username, data)

if __name__ == '__main__':
    repo = UserRepository()
    bulk_import_users('users.csv', repo)
    print('Import complete')
",code_defect,SQL injection and unsafe deserialization,,openai/gpt-oss-120b
Java,"public class ReportGenerator {
    public void generateReport(String reportType, List<User> users, String outputFormat) {
        if (reportType == null || users == null || outputFormat == null) {
            return;
        }

        if (reportType.equals(""summary"")) {
            if (outputFormat.equals(""pdf"")) {
                generateSummaryPDF(users);
            } else if (outputFormat.equals(""csv"")) {
                generateSummaryCSV(users);
            }
        } else if (reportType.equals(""detailed"")) {
            if (outputFormat.equals(""pdf"")) {
                generateDetailedPDF(users);
            } else if (outputFormat.equals(""csv"")) {
                generateDetailedCSV(users);
            }
        }
    }

    private void generateSummaryPDF(List<User> users) {
        // PDF generation logic for summary report
    }

    private void generateSummaryCSV(List<User> users) {
        // CSV generation logic for summary report
    }

    private void generateDetailedPDF(List<User> users) {
        // PDF generation logic for detailed report
    }

    private void generateDetailedCSV(List<User> users) {
        // CSV generation logic for detailed report
    }
}",code_smell,conditional_complexity,,qwen/qwen3-32b
Python,"
class UserDatabase:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, username, email):
        if user_id in self.users:
            return
        self.users[user_id] = {'username': username, 'email': email}

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, username=None, email=None):
        if user_id not in self.users:
            return
        if username:
            self.users[user_id]['username'] = username
        if email:
            self.users[user_id]['email'] = email

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]

database = UserDatabase()

def main():
    database.add_user(1, 'john_doe', 'johndoe@example.com')
    print(database.get_user(1))
    database.update_user(1, email='johndoe2@example.com')
    print(database.get_user(1))
    database.delete_user(1)
    print(database.get_user(1))

main()
",code_smell,god_class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogManager {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        buffer_.push_back(msg);
        if (buffer_.size() > 10) {
            flush();
        }
    }
private:
    void flush() {
        for (const auto& line : buffer_) {
            std::cout << line << std::endl;
        }
        buffer_.clear();
    }
    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

void processData(LogManager& logger, const std::vector<int>& data) {
    for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
        int value = data[i]; // may read out of bounds
        if (value % 2 == 0) {
            logger.log(""Even: "" + std::to_string(value));
        } else {
            logger.log(""Odd: "" + std::to_string(value));
        }
    }
}

int main() {
    LogManager logger;
    std::vector<int> numbers = {1,2,3,4,5};
    std::thread t1(processData, std::ref(logger), std::cref(numbers));
    std::thread t2(processData, std::ref(logger), std::cref(numbers));
    t1.join();
    t2.join();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import random

def generate_random_data():
    data = []
    for _ in range(1000000):
        data.append(random.randint(1, 100))
    return data

def process_data(data):
    result = []
    for i in range(len(data)):
        for j in range(len(data)):
            result.append(data[i] * data[j])
    return result

if __name__ == '__main__':
    raw_data = generate_random_data()
    output = process_data(raw_data)
    print(f'Processed {len(output)} entries.')",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            self.users[user_id] = user_data

    def remove_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            raise Exception('User not found')

    def get_all_users(self):
        return list(self.users.values())
   ",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    // Synchronous read blocks event loop
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

class UserService {
  constructor(db) {
    this.db = db;
    this.config = new ConfigLoader('./config.json');
  }

  async getUserProfile(userId) {
    const cfg = this.config.load(); // potential race if config changes
    const user = await this.db.query('SELECT * FROM users WHERE id = ' + userId);
    if (!user) {
      throw new Error('User not found');
    }
    // Missing sanitization leads to SQL injection
    return {
      id: user.id,
      name: user.name,
      role: cfg.defaultRole // uses config that may be stale
    };
  }
}

module.exports = { ConfigLoader, UserService };",code_defect,SQL_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void processData(const std::vector<int>& data) {
    for (int val : data) {
        std::this_thread::sleep_for(std::chrono::milliseconds(10)); // simulate processing
        mtx.lock();
        std::cout << ""Processing: "" << val << std::endl;
        mtx.unlock();
    }
}

void workerThread(const std::vector<int>& data) {
    processData(data);
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};

    std::thread t1(workerThread, data);
    std::thread t2(workerThread, data);

    t1.join();
    t2.join();

    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    Employee getOldestEmployee() {
        if (employees.empty()) {
            throw std::runtime_error(""No employees"");
        }
        return *std::max_element(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
            return a.getAge() < b.getAge();
        });
    }
private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 30));
    manager.addEmployee(Employee(""Alice"", 25));
    manager.addEmployee(Employee(""Bob"", 40));
    try {
        Employee oldest = manager.getOldestEmployee();
        std::cout << ""Oldest employee: "" << oldest.getName() << std::endl;
    } catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
    }
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class UserProfileManager:
    def __init__(self, storage_path):
        self.storage_path = storage_path
        if not os.path.isdir(storage_path):
            os.makedirs(storage_path)
        self.cache = {}

    def load_user(self, user_id):
        """"""Load a user profile from disk, using a simple JSON file per user.""""""
        if user_id in self.cache:
            return self.cache[user_id]
        file_path = os.path.join(self.storage_path, f""{user_id}.json"")
        with open(file_path, 'r') as f:
            data = json.load(f)
        self.cache[user_id] = data
        return data

    def save_user(self, user_id, profile_data):
        """"""Save a user profile to disk and update cache.""""""
        file_path = os.path.join(self.storage_path, f""{user_id}.json"")
        # BUG: Using insecure eval on user-provided data before writing
        safe_data = eval(profile_data)  # unsafe deserialization
        with open(file_path, 'w') as f:
            json.dump(safe_data, f)
        self.cache[user_id] = safe_data

    def delete_user(self, user_id):
        """"""Delete a user profile from disk and cache.""""""
        file_path = os.path.join(self.storage_path, f""{user_id}.json"")
        if os.path.exists(file_path):
            os.remove(file_path)
        self.cache.pop(user_id, None)

    def list_all_users(self):
        """"""Return a list of all user IDs present in storage.""""""
        return [fname.split('.')[0] for fname in os.listdir(self.storage_path) if fname.endswith('.json')]

def main():
    manager = UserProfileManager('/tmp/user_profiles')
    user_id = '12345'
    profile = '{""name"": ""Alice"", ""age"": 30}'
    manager.save_user(user_id, profile)
    loaded = manager.load_user(user_id)
    logger.info(f""Loaded profile: {loaded}"")

if __name__ == '__main__':
    main()
",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class DataProcessor {
public:
    DataProcessor() {}
    
    void process(const vector<string>& input) {
        for (const auto& line : input) {
            if (line.empty()) continue;
            
            for (size_t i = 0; i < line.length(); ++i) {
                if (line[i] == 'X') {
                    cout << ""Found X at position "" << i << "" in line: "" << line << endl;
                }
            }
        }
    }
};

int main() {
    vector<string> input = {""ExampleX"", ""NoXHere"", ""XAnotherExample"", """"};
    DataProcessor processor;
    processor.process(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private Map<String, User> users = new HashMap<>(); public void addUser(User user) { users.put(user.getUsername(), user); } public User getUser(String username) { return users.get(username); } public void updateUser(User user) { users.put(user.getUsername(), user); } public void deleteUser(String username) { users.remove(username); } public List<User> getAllUsers() { return new ArrayList<>(users.values()); } }",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<String> getUserEmailsByRole(String role) {
        List<String> emails = new ArrayList<>();
        String query = ""SELECT email FROM users WHERE role = '"" + role + ""'""; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return emails;
    }

    public void updateUserLastLogin(int userId) {
        String sql = ""UPDATE users SET last_login = NOW() WHERE id = ?"";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, userId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            // Swallow exception, no logging
        }
    }
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  getUsers() {
    return this.users;
  }

  deleteUser(id) {
    this.users = this.users.filter(user => user.id !== id);
  }

  findUser(id) {
    return this.users.find(user => user.id === id);
  }

  updateUsername(id, newUsername) {
    const user = this.findUser(id);
    if (user) {
      user.username = newUsername;
    }
  }

  updateEmail(id, newEmail) {
    const user = this.findUser(id);
    if (user) {
      user.email = newEmail;
    }
  }
}

// Example usage:
const userManager = new UserManager();
userManager.addUser({ id: 1, username: 'johndoe', email: 'john@example.com' });
userManager.updateEmail(1, 'johnnew@example.com');",code_smell,large_class,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    Student(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

bool compareStudents(const Student& s1, const Student& s2) {
    return s1.getAge() < s2.getAge();
}

void sortStudents(std::vector<Student>& students) {
    std::sort(students.begin(), students.end(), compareStudents);
}

int main() {
    std::vector<Student> students = {Student(""John"", 20), Student(""Alice"", 22), Student(""Bob"", 19)};
    sortStudents(students);

    for (const auto& student : students) {
        std::cout << student.getName() << "" is "" << student.getAge() << "" years old."" << std::endl;
    }

    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_schema()

    def _ensure_schema(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> int:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        conn.commit()
        user_id = cursor.lastrowid
        conn.close()
        return user_id

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cursor.fetchall()
        conn.close()
        # Off‑by‑one bug: returns one extra record when page is 1
        if page == 1:
            rows = rows[:-1]
        return [{'id': r[0], 'username': r[1], 'email': r[2]} for r in rows]

# Example usage (not part of the library)
repo = UserRepository('users.db')
for i in range(25):
    repo.add_user(f'user{i}', f'user{i}@example.com')
print(repo.get_users_page(1))
print(repo.get_users_page(2))",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        String customerEmail = order.getCustomer().getEmail();
        double total = 0;
        for (OrderItem item : order.getItems()) {
            total += item.getPrice() * item.getQuantity();
        }

        if (total > 0) {
            sendConfirmationEmail(customerEmail, total);
        }

        if (order.getStatus() == OrderStatus.PENDING) {
            order.setStatus(OrderStatus.PROCESSED);
        }

        saveOrderToDatabase(order);
    }

    private void sendConfirmationEmail(String email, double total) {
        // Email sending logic here
    }

    private void saveOrderToDatabase(Order order) {
        // Database persistence logic here
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
       constructor() {
           this.users = [];
       }

       addUser(user) {
           this.users.push(user);
       }

       removeUser(username) {
           for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].username === username) {
                   this.users.splice(i, 1);
                   break;
               }
           }
       }

       getUser(username) {
           for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].username === username) {
                   return this.users[i];
               }
           }
           return null;
       }
   }

   function main() {
       let userManager = new UserManager();
       userManager.addUser({ username: 'john', password: 'hello' });
       console.log(userManager.getUser('john'));
       userManager.removeUser('john');
       console.log(userManager.getUser('john'));
   }

   main();
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<Transaction> getPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction tx = new Transaction();
            tx.setId(rs.getInt(""id""));
            tx.setAmount(rs.getDouble(""amount""));
            tx.setStatus(rs.getString(""status""));
            list.add(tx);
        }
        // Missing close of ResultSet, Statement, and Connection -> resource leak
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = getPendingTransactions();
            for (Transaction tx : pending) {
                // Simulate processing
                if (tx.getAmount() < 0) {
                    // Incorrect logic: negative amounts should be rejected, but code proceeds
                    tx.setStatus(""COMPLETED"");
                } else {
                    tx.setStatus(""COMPLETED"");
                }
                updateTransactionStatus(tx);
            }
        } catch (SQLException e) {
            // Swallowing exception, no logging
        }
    }

    private void updateTransactionStatus(Transaction tx) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""UPDATE transactions SET status=? WHERE id=?"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, tx.getStatus());
        stmt.setInt(2, tx.getId());
        stmt.executeUpdate();
        // Missing close of Statement and Connection -> resource leak
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_logic_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processText(const std::string& input, const std::string& prefix, const std::string& suffix, bool capitalize, bool trim) {
    std::string result = input;

    if (trim) {
        // Remove leading and trailing whitespace
        size_t first = result.find_first_not_of(' ');
        size_t last = result.find_last_not_of(' ');
        if (first != std::string::npos && last != std::string::npos) {
            result = result.substr(first, last - first + 1);
        }
    }

    if (capitalize) {
        if (!result.empty()) {
            result[0] = toupper(result[0]);
        }
    }

    result = prefix + result + suffix;

    return result;
}

int main() {
    std::vector<std::string> data = {""hello"", ""  world  "", ""test\n""};
    std::string processed;

    for (const auto& text : data) {
        processed = processText(text, ""<<"", ""_END_"", true, true);
        std::cout << processed << std::endl;
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
    
    def login(self, input_username, input_password):
        if input_username == self.username and input_password == self.password:
            return True
        else:
            return False
    
    def change_password(self, new_password):
        self.password = new_password

account = UserAccount('admin', 'password123', 'admin@example.com')
print(account.login('admin', 'password123'))  # Expected output: True
print(account.login('admin', 'wrong_password'))  # Expected output: False
account.change_password('new_password')
print(account.login('admin', 'new_password'))  # Expected output: True",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk if limit derived from user input
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""id""));
        }
        // Missing close of ResultSet, Statement, and Connection
        return payments;
    }

    public void processPayments() {
        try {
            List<String> pending = getPendingPayments(100);
            for (String paymentId : pending) {
                // Simulate processing
                Thread.sleep(10);
                // Update status without transaction handling
                updatePaymentStatus(paymentId, ""COMPLETED"");
            }
        } catch (Exception e) {
            // Swallowing exception, no logging
        }
    }

    private void updatePaymentStatus(String paymentId, String status) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""UPDATE payments SET status = ? WHERE id = ?"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, status);
        stmt.setString(2, paymentId);
        stmt.executeUpdate();
        // Missing close of Statement and Connection
    }
}
",code_defect,resource_leak_and_missing_error_handling,,openai/gpt-oss-120b
Python,"import os
import time
import sqlite3

def process_user_data(user_id):
    db_path = os.path.join('/var/db/users', f'users.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute(f""SELECT * FROM users WHERE id = {user_id}"")
    user = cursor.fetchone()

    if user:
        username = user[1]
        print(f""Processing user {username}..."")
        time.sleep(2)
        print(f""User {username} processed successfully."")
    else:
        print(f""User with ID {user_id} not found."")

    cursor.close()
    conn.close()

    return user

if __name__ == ""__main__"":
    process_user_data(1)",code_defect,SQL injection vulnerability,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>

class BankAccount {
private:
    double balance;
public:
    BankAccount(double initialBalance) : balance(initialBalance) {}
    void withdraw(double amount) {
        if (amount > balance) {
            std::cout << ""Insufficient funds"" << std::endl;
            // Intentionally not updating the balance here
        } else {
            balance -= amount;
        }
    }
    double getBalance() {
        return balance;
    }
};

int main() {
    BankAccount account(1000.0);
    account.withdraw(500.0);
    account.withdraw(600.0);
    std::cout << ""Final balance: "" << account.getBalance() << std::endl;
    return 0;
}",code_defect,inconsistent_state,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i] * 2;
            results_.push_back(value);
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& results() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1,2,3,4,5};
    std::thread t([&](){ processor.process(input); });
    t.join();
    for (int v : processor.results()) {
        std::cout << v << "" "";
    }
    std::cout << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class DataProcessor {
public:
    void process(const vector<string>& data) {
        for (const auto& item : data) {
            if (!item.empty()) {
                string cleaned = removeLeadingWhitespace(item);
                cout << cleaned << endl;
            }
        }
    }

private:
    string removeLeadingWhitespace(const string& input) {
        size_t firstNonSpace = input.find_first_not_of(' ');
        return (firstNonSpace == string::npos) ? """" : input.substr(firstNonSpace);
    }
};",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
      constructor() {
         this.users = [];
      }

      addUser(username, password) {
         const user = { username, password };
         this.users.push(user);
      }

      removeUser(username) {
         this.users = this.users.filter(user => user.username !== username);
      }

      authenticate(username, password) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].username === username && this.users[i].password === password) {
               return true;
            }
         }
         return false;
      }
   }

   const userManager = new UserManager();
   userManager.addUser('admin', 'password123');
   console.log(userManager.authenticate('admin', 'password123')); // true
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json, os, logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # Loads JSON config without any validation
        with open(self.config_path, 'r') as f:
            self.settings = json.load(f)
        logger.info('Configuration loaded')

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, db_conn_str):
        self.db_conn_str = db_conn_str
        self._connect()

    def _connect(self):
        # Unsafe: directly uses connection string without sanitization
        self.conn = self.db_conn_str  # placeholder for actual DB connection
        logger.debug('Connected to DB')

    def fetch_user_data(self, user_id):
        # SQL injection vulnerability
        query = f""SELECT * FROM users WHERE id = {user_id}""
        logger.debug(f'Executing query: {query}')
        # Simulate execution
        return {'id': user_id, 'name': 'John Doe'}

    def process(self, user_id):
        data = self.fetch_user_data(user_id)
        # Assume some complex processing here
        result = data['name'].upper()
        logger.info(f'Processed data for user {user_id}')
        return result

if __name__ == '__main__':
    cfg = ConfigLoader(os.getenv('APP_CONFIG', 'config.json'))
    processor = DataProcessor(cfg.get('db_connection'))
    user_input = input('Enter user ID: ')
    print(processor.process(user_input))
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import os
import sqlite3
from datetime import datetime

def process_user_data(user_id, db_path='data.db'):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()

    if user:
        cursor.execute('UPDATE users SET last_active = ? WHERE id = ?',
                         (datetime.now(), user_id))
        conn.commit()

        # Legacy code from v1.0
        # cursor.execute('INSERT INTO logs (user_id, action) VALUES (?, ?)',
        #                (user_id, 'login'))

    cursor.close()
    conn.close()

    return user

# Hardcoded credentials for some external API
API_KEY = 'supersecretkey123'
API_SECRET = 'notsosecret'",code_smell,"dead_code, hardcoded_credentials",,qwen/qwen3-32b
JavaScript,"
   class UserManager {
      constructor() {
         this.users = [];
      }

      addUser(user) {
         this.users.push(user);
      }

      removeUser(userId) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].id === userId) {
               this.users.splice(i, 1);
               break;
            }
         }
      }

      getUserCount() {
         return this.users.length;
      }
   }

   function main() {
      let userManager = new UserManager();
      userManager.addUser({ id: 1, name: 'John Doe' });
      userManager.addUser({ id: 2, name: 'Jane Doe' });
      console.log(userManager.getUserCount());
   }

   main();
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""root"";
    private static final String DB_PASSWORD = ""rootpass""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            conn.setAutoCommit(false);
            // Debit the account
            String debitSql = ""UPDATE accounts SET balance = balance - ? WHERE account_id = ?"";
            try (PreparedStatement debitStmt = conn.prepareStatement(debitSql)) {
                debitStmt.setDouble(1, amount);
                debitStmt.setString(2, accountId);
                int rows = debitStmt.executeUpdate();
                if (rows != 1) {
                    conn.rollback();
                    return false;
                }
            }
            // Credit the merchant
            String creditSql = ""UPDATE merchants SET balance = balance + ? WHERE merchant_id = 'DEFAULT'""; // hardcoded merchant
            try (PreparedStatement creditStmt = conn.prepareStatement(creditSql)) {
                creditStmt.setDouble(1, amount);
                creditStmt.executeUpdate();
            }
            conn.commit();
            return true;
        } catch (SQLException e) {
            try {
                if (conn != null) conn.rollback();
            } catch (SQLException ex) {
                // ignore
            }
            return false;
        } finally {
            try {
                if (conn != null) conn.close();
            } catch (SQLException e) {
                // ignore
            }
        }
    }

    // Retrieves the balance but mistakenly uses string concatenation leading to SQL injection
    public double getAccountBalance(String accountId) {
        String query = ""SELECT balance FROM accounts WHERE account_id = '"" + accountId + ""'"";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            if (rs.next()) {
                return rs.getDouble(""balance"");
            }
        } catch (SQLException e) {
            // log error
        }
        return 0.0;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processUserInput(const std::string& input) {
    std::vector<int> numbers;
    std::string currentNum;
    
    for (char ch : input) {
        if (ch == ',') {
            if (!currentNum.empty()) {
                numbers.push_back(std::stoi(currentNum));
                currentNum.clear();
            }
        } else {
            currentNum += ch;
        }
    }

    if (!currentNum.empty()) {
        numbers.push_back(std::stoi(currentNum));
    }

    for (int num : numbers) {
        std::cout << num * num << ""\n"";
    }
}

int main() {
    std::string input;
    std::getline(std::cin, input);
    processUserInput(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async getUserById(id) {
            return this.userDao.getUserById(id);
         }

         async getUsers() {
            const users = await this.userDao.getUsers();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async createUser(user) {
            if (!user.name || !user.email) {
               throw new Error('Name and email are required');
            }
            return this.userDao.createUser(user);
         }
      }

      class UserDao {
         async getUserById(id) {
            // simulate database query
            return { id: 1, name: 'John Doe', email: 'john@example.com' };
         }

         async getUsers() {
            // simulate database query
            return [{ id: 1, name: 'John Doe', email: 'john@example.com' }, { id: 2, name: 'Jane Doe', email: 'jane@example.com' }];
         }

         async createUser(user) {
            // simulate database insert
            return { id: 3, name: user.name, email: user.email };
         }
      }

      const userDao = new UserDao();
      const userService = new UserService(userDao);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public User getUserById(int userId) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String query = ""SELECT id, username, email FROM users WHERE id = "" + userId; // insecure concatenation
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();
        User user = null;
        if (rs.next()) {
            user = new User();
            user.setId(rs.getInt(""id""));
            user.setUsername(rs.getString(""username""));
            user.setEmail(rs.getString(""email""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return user;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection vulnerability due to string concatenation and hardcoded credentials,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final int MAX_RETRIES = 3;

    public void processOrder(Order order) {
        int retryCount = 0;
        boolean success = false;

        while (retryCount <= MAX_RETRIES) {
            try {
                success = validateOrder(order);
                if (success) {
                    persistOrder(order);
                    sendOrderConfirmation(order);
                    break;
                }
            } catch (Exception e) {
                retryCount++;
                if (retryCount > MAX_RETRIES) {
                    logError(""Max retries reached for order: "" + order.getId(), e);
                    sendOrderFailureNotification(order);
                }
            }
        }
    }

    private boolean validateOrder(Order order) {
        if (order.getItems().isEmpty()) {
            return false;
        }
        if (order.getTotalPrice() <= 0) {
            return false;
        }
        return true;
    }

    private void persistOrder(Order order) {
        // Simulated database call
    }

    private void sendOrderConfirmation(Order order) {
        // Simulated email or notification call
    }

    private void logError(String message, Exception e) {
        // Simulated logging
    }

    private void sendOrderFailureNotification(Order order) {
        // Simulated notification
    }
}",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
      class UserAccount {
         constructor(username, password) {
            this.username = username;
            this.password = password;
         }

         authenticate(username, password) {
            if (this.username === username && this.password === password) {
               return true;
            }
            return false;
         }

         changePassword(oldPassword, newPassword) {
            if (this.password === oldPassword) {
               this.password = newPassword;
            }
         }
      }

      let user = new UserAccount('johnDoe', 'password123');
      console.log(user.authenticate('johnDoe', 'password123')); // true
      user.changePassword('password123', 'newPassword');
      console.log(user.authenticate('johnDoe', 'newPassword')); // true
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> int:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        user_id = cursor.lastrowid
        conn.commit()
        conn.close()
        return user_id

    def get_users_page(self, page: int, page_size: int = 10):
        # Off-by-one error: should offset = (page - 1) * page_size
        offset = page * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cursor.fetchall()
        conn.close()
        return [{'id': r[0], 'username': r[1], 'email': r[2]} for r in rows]

# Example usage (would be removed in production)
repo = UserRepository('users.db')
repo.add_user('alice', 'alice@example.com')
repo.add_user('bob', 'bob@example.com')
print(repo.get_users_page(0))",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    void process(std::vector<int>& data) {
        for (size_t i = 0; i < data.size(); ++i) {
            data[i] *= 2;
        }
    }

    void logData(std::vector<int>& data) {
        for (size_t i = 0; i < data.size(); ++i) {
            std::cout << data[i] << "" "";
        }
        std::cout << std::endl;
    }

    void processData(std::vector<int>& data) {
        process(data);
        logData(data);
    }
};

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    DataProcessor processor;
    processor.processData(data);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUsers() { let users = await this.userDao.getAllUsers(); for (let i = 0; i < users.length; i++) { users[i].fullName = users[i].firstName + ' ' + users[i].lastName; } return users; } },code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""p@ssw0rd""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            String query = ""SELECT email FROM users LIMIT "" + limit; // unsafe concatenation
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            try { if (rs != null) rs.close(); } catch (Exception ignored) {}
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL injection vulnerability and hardcoded credentials,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    private List<User> users;

    public UserProcessor(List<User> users) {
        this.users = users;
    }

    public void processUsers() {
        for (User user : users) {
            if (user != null && user.isActive()) {
                if (user.getRole().equalsIgnoreCase(""ADMIN"")) {
                    user.grantAccess();
                } else {
                    user.denyAccess();
                }
            }
        }
    }

    public void resetAllUsers() {
        for (User user : users) {
            user.setActive(false);
        }
    }

    public void addNewUser(String name, String email) {
        User newUser = new User(name, email);
        users.add(newUser);
    }

    public List<User> getUsers() {
        return users;
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final String DEFAULT_PASSWORD = ""password123""; public User createUser(String username, String email) { User user = new User(username, email); user.setPassword(DEFAULT_PASSWORD); return user; } public void updateUserPassword(User user, String newPassword) { user.setPassword(newPassword); } } class User { private String username; private String email; private String password; public User(String username, String email) { this.username = username; this.email = email; } public void setPassword(String password) { this.password = password; } }",code_smell,hardcoded_secrets,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    LogAggregator() : stopFlag(false) {
        worker = std::thread(&LogAggregator::processQueue, this);
    }
    ~LogAggregator() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void logMessage(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void processQueue() {
        while (!stopFlag) {
            std::vector<std::string> localCopy;
            {
                std::lock_guard<std::mutex> lock(mtx);
                localCopy.swap(queue);
            }
            for (const auto& m : localCopy) {
                std::cout << m << std::endl;
            }
            // Intentional bug: missing sleep leads to busy-wait consuming 100% CPU
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogAggregator logger;
    for (int i = 0; i < 5; ++i) {
        logger.logMessage(""Event "" + std::to_string(i));
    }
    // Program exits without giving worker thread time to flush messages
    return 0;
}",code_defect,busy_wait_cpu_spike,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processUserData(const std::string& data, int flag) {
    std::string result = data;
    if (flag == 1) {
        result += ""_processed"";
    } else if (flag == 2) {
        result += ""_enhanced"";
    } else if (flag == 3) {
        result += ""_transformed"";
    } else {
        // Legacy behavior
        result += ""_default"";
    }
    return result;
}

int main() {
    std::vector<std::string> inputs = {""user1"", ""user2"", ""user3""};
    for (const auto& input : inputs) {
        std::string processed = processUserData(input, 1);
        std::cout << processed << std::endl;
    }
    return 0;
}",code_smell,poor_function_design,,qwen/qwen3-32b
JavaScript,"
      class UserManager {
         constructor() {
            this.users = {};
         }

         addUser(username, password) {
            if (!this.users[username]) {
               this.users[username] = password;
            }
         }

         authenticate(username, password) {
            return this.users[username] === password;
         }
      }

      const userManager = new UserManager();
      userManager.addUser('admin', 'password123');
      console.log(userManager.authenticate('admin', 'password123')); // true
      console.log(userManager.authenticate('admin', 'wrongpassword')); // false
   ",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path
        self._conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self._conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL
            )
        ''')
        self._conn.commit()

    def find_user(self, username, password_hash):
        # Vulnerable to SQL injection because user input is directly concatenated
        query = f""SELECT * FROM users WHERE username = '{username}' AND password_hash = '{password_hash}'""
        cursor = self._conn.cursor()
        cursor.execute(query)
        return cursor.fetchone()

    def add_user(self, username, password_hash):
        cursor = self._conn.cursor()
        cursor.execute('INSERT INTO users (username, password_hash) VALUES (?, ?)', (username, password_hash))
        self._conn.commit()

# Example usage
repo = UserRepository('app.db')
repo.add_user('alice', 'hash123')
# The following line is insecure and can be exploited if username contains malicious SQL
user = repo.find_user(""alice' OR '1'='1"", 'anyhash')
print('Found user:', user)",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import os
import json

CONFIG_PATH = 'config.json'

def load_config():
    with open(CONFIG_PATH, 'r') as f:
        config = json.load(f)
    return config

def process_data(data):
    results = []
    for item in data:
        processed = {
            'id': item['id'],
            'value': item['value'] * 2,
            'status': 'active' if item['enabled'] else 'inactive'
        }
        results.append(processed)
    return results

def main():
    config = load_config()
    data = config['data']
    output = process_data(data)
    print(json.dumps(output, indent=2))

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final String DEFAULT_PASSWORD = ""password123""; public User createUser(String username, String email) { User user = new User(username, email); user.setPassword(DEFAULT_PASSWORD); return user; } } class User { private String username; private String email; private String password; public User(String username, String email) { this.username = username; this.email = email; } public void setPassword(String password) { this.password = password; } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i] * 2;
            results_.push_back(value);
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& results() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(input); });
    t.join();
    for (int v : processor.results()) {
        std::cout << v << "" "";
    }
    std::cout << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor(database) {
    this.db = database;
    this.orderCount = 0;
    this.lastOrder = null;
  }

  processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      this.orderCount++;
      this.lastOrder = order;
      this.db.save(order);
      this.logOrderDetails(order);
    }
  }

  logOrderDetails(order) {
    console.log(`Order ID: ${order.id}, Customer: ${order.customer}, Total: $${order.total}`);
  }

  getLastOrder() {
    return this.lastOrder;
  }

  getTotalOrdersProcessed() {
    return this.orderCount;
  }
}

// Example usage:
const db = {
  save: (order) => console.log(`Saved order: ${order.id}`)
};

const orders = [
  { id: 1, customer: 'Alice', total: 150 },
  { id: 2, customer: 'Bob', total: 75 },
  { id: 3, customer: 'Charlie', total: 300 }
];

const processor = new OrderProcessor(db);
processor.processOrders(orders);",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

private:
    std::string name;
    int salary;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    void removeEmployee(std::string name) {
        for (auto it = employees.begin(); it != employees.end(); ++it) {
            if (it->getName() == name) {
                employees.erase(it);
                return;
            }
        }
    }

    int calculateTotalSalary() {
        int totalSalary = 0;
        for (const auto& employee : employees) {
            totalSalary += employee.getSalary();
        }
        return totalSalary;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 50000));
    manager.addEmployee(Employee(""Alice"", 60000));
    std::cout << manager.calculateTotalSalary() << std::endl;
    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i]; // may read out of bounds
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::thread t([&]() { processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << ""\n"";
    std::cout << ""Odd sum: "" << processor.getOddSum() << ""\n"";
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor(database, paymentGateway) {
    this.database = database;
    this.paymentGateway = paymentGateway;
  }

  processOrder(order) {
    this.validateOrder(order);

    const customer = this.database.getCustomer(order.customerId);
    const product = this.database.getProduct(order.productId);

    if (!customer || !product) {
      throw new Error('Invalid customer or product');
    }

    if (product.stock < order.quantity) {
      throw new Error('Insufficient product stock');
    }

    const paymentResult = this.paymentGateway.processPayment(order);

    if (!paymentResult.success) {
      throw new Error('Payment processing failed');
    }

    this.database.updateStock(product.id, product.stock - order.quantity);
    this.database.createOrder(order);

    return { status: 'success', orderId: order.id };
  }

  validateOrder(order) {
    if (!order || !order.id || !order.customerId || !order.productId || !order.quantity) {
      throw new Error('Order data incomplete');
    }

    if (order.quantity <= 0) {
      throw new Error('Order quantity must be greater than zero');
    }
  }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public synchronized void addUser(User user) { users.put(user.getId(), user); } public synchronized User getUser(String id) { return users.get(id); } public synchronized void updateUser(User user) { if (users.containsKey(user.getId())) { users.put(user.getId(), user); } } public synchronized void deleteUser(String id) { users.remove(id); } }",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mutex_);
        logs_.push_back(msg);
    }

    void flush() {
        // Simulate writing logs to disk
        for (const auto& entry : logs_) {
            std::cout << entry << std::endl;
        }
        // BUG: logs_ not cleared, leading to unbounded memory growth
    }

private:
    std::vector<std::string> logs_;
    std::mutex mutex_;
};

void worker(LogAggregator& agg, int id) {
    for (int i = 0; i < 1000; ++i) {
        agg.addLog(""Thread "" + std::to_string(id) + "" log "" + std::to_string(i));
    }
}

int main() {
    LogAggregator aggregator;
    std::vector<std::thread> threads;
    for (int i = 0; i < 8; ++i) {
        threads.emplace_back(worker, std::ref(aggregator), i);
    }
    for (auto& t : threads) {
        t.join();
    }
    aggregator.flush();
    return 0;
}",code_defect,memory_leak_due_to_uncleared_buffer,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  processUsers(users) {
    const validUsers = [];
    for (let i = 0; i < users.length; i++) {
      const user = users[i];
      if (user.id && user.name && user.email) {
        validUsers.push({
          id: user.id,
          name: user.name.trim().toLowerCase(),
          email: user.email.trim().toLowerCase()
        });
      }
    }

    for (let i = 0; i < validUsers.length; i++) {
      const user = validUsers[i];
      if (user.email.includes('@example.com')) {
        user.isExampleUser = true;
      }
    }

    return validUsers;
  }

  getUserById(users, userId) {
    for (let i = 0; i < users.length; i++) {
      if (users[i].id === userId) {
        return users[i];
      }
    }
    return null;
  }
}

// Example usage
const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com' },
  { id: 2, name: 'Bob', email: 'bob@acme.com' }
];

const processor = new UserProcessor();
const processedUsers = processor.processUsers(users);
const user1 = processor.getUserById(processedUsers, 1);
console.log(user1);",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
  }

  // Process an order and update inventory
  async process(order) {
    // Validate order
    if (!order || !order.id || !order.items) {
      throw new Error('Invalid order');
    }

    // Update each item stock sequentially
    for (let i = 0; i < order.items.length; i++) {
      const item = order.items[i];
      const product = await this.db.getProduct(item.productId);
      // BUG: No check for negative stock leads to overselling
      product.stock -= item.quantity;
      await this.db.saveProduct(product);
    }

    // Mark order as processed
    await this.db.updateOrderStatus(order.id, 'processed');
    return true;
  }
}

module.exports = OrderProcessor;",code_defect,logic_error,,openai/gpt-oss-120b
Python,"import os
import re
import json

from datetime import datetime
from typing import List, Dict

# User data manager
class UserManager:
    def __init__(self):
        self._user_file = 'users.json'
        self._users = self._load_users()

    def _load_users(self) -> List[Dict]:
        if not os.path.exists(self._user_file):
            return []
        with open(self._user_file, 'r') as f:
            return json.load(f)

    def _save_users(self):
        with open(self._user_file, 'w') as f:
            json.dump(self._users, f)

    def add_user(self, name: str, email: str, role: str = 'user') -> None:
        if not re.match(r'[^@]+@[^@]+\.[^@]+', email):
            raise ValueError('Invalid email format')

        new_user = {
            'name': name,
            'email': email,
            'role': role,
            'created_at': datetime.now().isoformat()
        }
        self._users.append(new_user)
        self._save_users()

    def delete_user(self, email: str) -> None:
        self._users = [u for u in self._users if u['email'] != email]
        self._save_users()

    def get_users(self, role: str = None) -> List[Dict]:
        if role:
            return [u for u in self._users if u['role'] == role]
        return self._users

# Legacy code from previous version
# def legacy_function():
#     pass

if __name__ == '__main__':
    um = UserManager()
    um.add_user('Alice', 'alice@example.com', 'admin')
    um.add_user('Bob', 'bob@example.com', 'user')
    print(um.get_users())",code_smell,long_methods,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
        else:
            self.users[user_id].update(user_data)

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            raise Exception('User not found')

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
        else:
            raise Exception('User not found')

    def get_all_users(self):
        return list(self.users.values())

def main():
    user_manager = UserManager()
    user_manager.add_user('1', {'name': 'John', 'age': 30})
    user_manager.add_user('2', {'name': 'Alice', 'age': 25})
    print(user_manager.get_all_users())
    user_manager.update_user('1', {'age': 31})
    print(user_manager.get_user('1'))

if __name__ == '__main__':
    main()
",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : logFile(file) {}
    void process() {
        std::vector<std::string> lines = readLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off‑by‑one bug
            std::thread t(&LogProcessor::handleLine, this, lines[i]);
            t.detach();
        }
    }
private:
    std::string logFile;
    std::mutex mtx;
    std::vector<std::string> readLines() {
        // dummy implementation
        return {""entry1"", ""entry2"", ""entry3""};
    }
    void handleLine(const std::string& line) {
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << ""Processing: "" << line << std::endl;
    }
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.process();
    std::this_thread::sleep_for(std::chrono::seconds(1)); // wait for threads
    return 0;
}",code_defect,off_by_one_error_and_thread_race,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    private static final String SECRET_KEY = ""mySuperSecretKey123!"";

    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        String hashedPassword = hashPassword(password);

        // Dummy database lookup
        if (""admin"".equals(username) && ""admin123"".equals(hashedPassword)) {
            return true;
        }

        return false;
    }

    private String hashPassword(String password) {
        return password + SECRET_KEY;
    }

    // Unused method that is kept around
    public void oldLegacyMethod() {
        System.out.println(""This method is outdated"");
    }
}",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class UserDAO {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/mydb"";
    private static final String DB_USER = ""root"";
    private static final String DB_PASSWORD = ""password123"";
    
    public User getUserById(int id) {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            Class.forName(""com.mysql.cj.jdbc.Driver"");
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            rs = stmt.executeQuery(""SELECT * FROM users WHERE id = "" + id);
            if (rs.next()) {
                return new User(rs.getInt(""id""), rs.getString(""name""), rs.getString(""email""));
            }
        } catch (Exception e) {
            System.out.println(""Error: "" + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                System.out.println(""Error closing resources: "" + e.getMessage());
            }
        }
        return null;
    }
}",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            std::string msg;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    msg = queue.front();
                    queue.erase(queue.begin());
                }
            }
            // Bug: processing proceeds even if queue was empty, msg is empty string
            std::cout << ""Processing: "" << msg << std::endl;
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    lp.enqueue(""Event A"");
    lp.enqueue(""Event B"");
    std::this_thread::sleep_for(std::chrono::seconds(1));
    lp.stop();
    return 0;
}
",code_defect,logic_error_due_to_unchecked_empty_queue,,openai/gpt-oss-120b
Python,"import requests
import os

def fetch_user_data(user_id):
    url = 'https://api.example.com/users/' + str(user_id)
    headers = {'Authorization': 'Bearer ' + os.getenv('API_KEY')}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        return None

def process_user_data(data):
    if data is None:
        return
    for key, value in data.items():
        if key == 'email' and value:
            send_email_notification(value)


def send_email_notification(email):
    # Dummy implementation for demo
    print(f'Email notification sent to: {email}')

if __name__ == '__main__':
    user_data = fetch_user_data(123)
    process_user_data(user_data)",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}
    std::string name;
    int salary;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) {
        employees.push_back(employee);
    }

    int calculateTotalSalary() {
        int totalSalary = 0;
        for (int i = 0; i < employees.size(); i++) {
            totalSalary += employees[i].salary;
        }
        return totalSalary;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 50000));
    manager.addEmployee(Employee(""Alice"", 60000));
    std::cout << manager.calculateTotalSalary() << std::endl;
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""p@ssw0rd""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // SQL injection vulnerability: limit is concatenated directly
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        } catch (Exception e) {
            // Swallow exception, lose error info
        } finally {
            try { if (rs != null) rs.close(); } catch (Exception ignored) {}
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void deleteUser(String username) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Missing quotes around username leads to SQL error and possible injection
            String sql = ""DELETE FROM users WHERE username = "" + username;
            stmt.executeUpdate(sql);
        } catch (Exception e) {
            // Ignored
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {

    public boolean authenticate(String username, String password, String confirmPassword) {
        if (username == null || username.isEmpty()) {
            return false;
        }

        if (password == null || password.isEmpty()) {
            return false;
        }

        if (!password.equals(confirmPassword)) {
            return false;
        }

        // Legacy check for backward compatibility
        // if (checkLegacySystem(username, password)) {
        //     return true;
        // }

        return verifyDatabaseCredentials(username, password);
    }

    private boolean verifyDatabaseCredentials(String username, String password) {
        // Simulating a database call
        if (username.equals(""admin"") && password.equals(""admin123"")) {
            return true;
        }
        return false;
    }

    // Unused method from a previous implementation
    // private boolean checkLegacySystem(String username, String password) {
    //     return username.equals(""legacy_admin"") && password.equals(""password1"");
    // }

}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserService {
     constructor(userRepository) {
       this.userRepository = userRepository;
     }

     async getAllUsers() {
       const users = await this.userRepository.findAll();
       return users.map(user => ({ id: user.id, name: user.name }));
     }

     async getUserById(id) {
       const user = await this.userRepository.findById(id);
       if (!user) {
         throw new Error('User not found');
       }
       return { id: user.id, name: user.name };
     }
   }

   class UserRepository {
     constructor(db) {
       this.db = db;
     }

     async findAll() {
       return await this.db.query('SELECT * FROM users');
     }

     async findById(id) {
       const result = await this.db.query('SELECT * FROM users WHERE id = $1', [id]);
       return result.rows[0];
     }
   }

   const db = {
     query: async (query, params) => {
       // simulate a database query
       return {
         rows: [
           { id: 1, name: 'John Doe' },
           { id: 2, name: 'Jane Doe' }
         ]
       };
     }
   };

   const userRepository = new UserRepository(db);
   const userService = new UserService(userRepository);

   (async () => {
     const users = await userService.getAllUsers();
     console.log(users);
   })();
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""admin123""; // hardcoded credentials

    public List<String> getPendingPayments() throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String query = ""SELECT payment_id FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        // Missing close of ResultSet, Statement, and Connection
        return payments;
    }

    public void processPayments() {
        try {
            List<String> pending = getPendingPayments();
            for (String paymentId : pending) {
                // Simulate processing
                if (paymentId == null) {
                    continue; // should never happen, but ignored
                }
                // Vulnerable to SQL injection if paymentId is ever derived from user input
                String update = ""UPDATE payments SET status='PROCESSED' WHERE payment_id='"" + paymentId + ""'"";
                try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
                     PreparedStatement stmt = conn.prepareStatement(update)) {
                    stmt.executeUpdate();
                }
            }
        } catch (SQLException e) {
            // Swallow exception, no logging
        }
    }

    public static void main(String[] args) {
        PaymentProcessor processor = new PaymentProcessor();
        processor.processPayments();
    }
}
",code_defect,resource_leak_and_sql_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    private String adminUsername = ""admin"";
    private String adminPassword = ""supersecret123"";

    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        if (username.equals(adminUsername) && password.equals(adminPassword)) {
            System.out.println(""Admin authenticated"");
            return true;
        }

        // Dummy check for regular users (not implemented)
        if (username.length() > 3 && password.length() > 7) {
            System.out.println(""Regular user authenticated"");
            return true;
        }

        return false;
    }
}",code_defect,insecure_authentication,,qwen/qwen3-32b
JavaScript,"
      class UserDatabase {
         constructor() {
            this.users = [];
         }

         async loadUsersFromDatabase() {
            const response = await fetch('https://example.com/users');
            const data = await response.json();
            this.users = data.map(user => ({ id: user.id, name: user.name }));
         }

         getUserById(id) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === id) {
                  return this.users[i];
               }
            }
            return null;
         }
      }

      const db = new UserDatabase();
      db.loadUsersFromDatabase();
      const user = db.getUserById(1);
      console.log(user);
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logging.basicConfig(level=logging.INFO)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None

    def load(self):
        # Loads JSON config file; no validation performed
        with open(self.config_path, 'r') as f:
            self._config = json.load(f)
        return self._config

    def get(self, key, default=None):
        return self._config.get(key, default) if self._config else default

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)
        self.output_dir = self.config.get('output_dir', '/tmp')

    def process(self, data):
        # Process data in batches and write results to files
        for i in range(0, len(data), self.batch_size):
            batch = data[i:i+self.batch_size]
            result = self._process_batch(batch)
            self._write_result(i // self.batch_size, result)

    def _process_batch(self, batch):
        # Simulate some processing
        return [item * 2 for item in batch]

    def _write_result(self, batch_index, result):
        filename = os.path.join(self.output_dir, f""result_{batch_index}.json"")
        with open(filename, 'w') as f:
            json.dump(result, f)
        logging.info(f""Wrote batch {batch_index} to {filename}"")

if __name__ == ""__main__"":
    loader = ConfigLoader('config.json')
    config = loader.load()
    processor = DataProcessor(loader)
    # Example data
    data = list(range(1000))
    processor.process(data)
",code_defect,missing_error_handling,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private List<User> users;

    public UserProcessor() {
        this.users = new ArrayList<>();
    }

    public void processUsers() {
        for (User user : users) {
            if (user.isActive()) {
                String formattedName = user.getFirstName() + "" "" + user.getLastName();
                String message = ""Hello, "" + formattedName + ""! Your account is active."";
                sendNotification(message, user.getEmail());
            }
        }
    }

    private void sendNotification(String message, String email) {
        // Simulated email sending logic
        if (email == null || email.isEmpty()) {
            System.out.println(""Invalid email address for sending notification."");
            return;
        }
        try {
            System.out.println(""Sending: "" + message + "" To: "" + email);
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            // Ignored without rethrowing
            e.printStackTrace();
        }
    }

    public void addUsers(List<User> users) {
        if (users != null) {
            this.users.addAll(users);
        }
    }
}",code_defect,missing_error_handling,,qwen/qwen3-32b
Java,"public class UserProcessor { private static final Logger logger = LoggerFactory.getLogger(UserProcessor.class); public void processUsers(List<User> users) { for (User user : users) { try { Thread.sleep(100); } catch (InterruptedException e) { logger.error(""Error processing user"", e); } if (user.getName() != null && !user.getName().isEmpty()) { logger.info(""Processing user: {}"", user.getName()); } } } }",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    """"""Loads configuration from a JSON file.
    """"""
    def __init__(self, path: str):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        try:
            with open(self.path, 'r') as f:
                # Directly using json.load without validation can lead to code execution if the file contains malicious content
                self.config = json.load(f)
        except Exception as e:
            logger.error(f""Failed to load config: {e}"")
            self.config = {}

    def get(self, key: str, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, config_loader: ConfigLoader):
        self.db_url = config_loader.get('db_url')
        self.batch_size = config_loader.get('batch_size', 100)

    def process(self, data):
        # Assume data is a list of dicts
        for item in data:
            self._process_item(item)

    def _process_item(self, item):
        # Vulnerable to SQL injection because it builds query strings directly
        query = f""INSERT INTO records (id, value) VALUES ({item['id']}, '{item['value']}')""
        self._execute_query(query)

    def _execute_query(self, query: str):
        # Placeholder for actual DB execution
        logger.debug(f""Executing query: {query}"")
        # In real code, this would execute against a database
        pass

if __name__ == ""__main__"":
    loader = ConfigLoader(os.getenv('CONFIG_PATH', 'config.json'))
    processor = DataProcessor(loader)
    sample_data = [{'id': 1, 'value': ""test""}, {'id': 2, 'value': ""example""}]
    processor.process(sample_data)
",code_defect,sql_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  getUserById(id) {
    return this.users.find(user => user.id === id);
  }

  deleteUser(id) {
    this.users = this.users.filter(user => user.id !== id);
  }

  getAllUsers() {
    return this.users;
  }

  updateUserName(id, newName) {
    const user = this.getUserById(id);
    if (user) {
      user.name = newName;
    }
  }
}

// Usage
const manager = new UserManager();
manager.addUser({ id: 1, name: 'Alice' });
manager.addUser({ id: 2, name: 'Bob' });
manager.updateUserName(1, 'Alicia');
console.log(manager.getAllUsers());",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>

class User {
public:
    std::string name;
    int age;
    User(std::string n, int a) : name(n), age(a) {}
};

std::vector<User> users;

void addUser(User u) {
    users.push_back(u);
}

void printUsers() {
    for (auto& u : users) {
        std::cout << u.name << "" is "" << u.age << "" years old.\n"";
    }
}

int main() {
    User u1(""John"", 30);
    User u2(""Alice"", 25);
    addUser(u1);
    addUser(u2);
    printUsers();
    return 0;
}",code_smell,global_variable,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""admin123""; // hardcoded credentials

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String sql = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk if limit is manipulated
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        // Missing close of ResultSet, Statement, and Connection
        return payments;
    }

    public void processPayments() {
        try {
            List<String> pending = getPendingPayments(100);
            for (String paymentId : pending) {
                // Simulate processing
                Thread.sleep(10);
                // Update status without transaction handling
                updatePaymentStatus(paymentId, ""COMPLETED"");
            }
        } catch (Exception e) {
            // Swallow exception, lose error details
        }
    }

    private void updatePaymentStatus(String paymentId, String newStatus) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""UPDATE payments SET status=? WHERE payment_id=?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, newStatus);
            stmt.setString(2, paymentId);
            stmt.executeUpdate();
            // Resources not closed, potential leak
        } catch (SQLException e) {
            // Log suppressed
        }
    }
}
",code_defect,resource_leak_and_unhandled_exceptions,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    private final List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.getStatus() == OrderStatus.PENDING) {
                if (isValid(order)) {
                    chargeCustomer(order);
                    updateInventory(order);
                    updateOrderStatus(order, OrderStatus.PROCESSED);
                }
            } else {
                // Ignoring non-pending orders
            }
        }
    }

    private boolean isValid(Order order) {
        return order.getCustomer() != null && order.getItems() != null && !order.getItems().isEmpty();
    }

    private void chargeCustomer(Order order) {
        // Simulate charging customer
        System.out.println(""Charging customer for order "" + order.getId());
    }

    private void updateInventory(Order order) {
        // Simulate updating inventory
        System.out.println(""Updating inventory for order "" + order.getId());
    }

    private void updateOrderStatus(Order order, OrderStatus status) {
        order.setStatus(status);
        // Simulate saving to database
        System.out.println(""Order "" + order.getId() + "" status updated to "" + status);
    }

    // Unused method that could be removed
    private void sendNotification(String message) {
        System.out.println(""Notification: "" + message);
    }

    // Dead code from a previous version
    // private void oldProcessOrder(Order order) {
    //     System.out.println(""Old processing for order "" + order.getId());
    // }

}",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class UserService { private static Map<String, String> users = new HashMap<>(); public synchronized void addUser(String username, String password) { users.put(username, password); } public synchronized String getPassword(String username) { return users.get(username); } public static void main(String[] args) { UserService userService = new UserService(); userService.addUser(""user1"", ""password1""); System.out.println(userService.getPassword(""user1"")); } }",code_smell,"God class, tight coupling",,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable())
            worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Bug: processing runs even when no task was retrieved (task == 0)
            // This can cause unintended work on default value.
            std::cout << ""Processing: "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 1; i <= 5; ++i) {
        dp.addTask(i * 10);
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}",code_defect,logic_error_unintended_processing,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(String userId, String productId, int quantity) {
        if (userId == null || userId.isEmpty()) {
            userId = ""guest"";
        }

        if (productId == null || productId.isEmpty()) {
            productId = ""default_product"";
        }

        if (quantity <= 0) {
            quantity = 1;
        }

        // Simulating order processing
        System.out.println(""Processing order for user: "" + userId);
        System.out.println(""Product ID: "" + productId);
        System.out.println(""Quantity: "" + quantity);
        System.out.println(""Total price: $"" + calculateTotalPrice(productId, quantity));

        // Simulating external calls to payment gateway
        if (userId.equals(""guest"")) {
            System.out.println(""Redirecting to guest checkout..."");
        } else {
            System.out.println(""Processing secure payment..."");
        }
    }

    private double calculateTotalPrice(String productId, int quantity) {
        double basePrice = 10.0;
        if (productId.equals(""premium_product"")) {
            basePrice = 50.0;
        }

        return basePrice * quantity;
    }
}",code_smell,primitive_obsession,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class PriorityQueue {
public:
   void push(int value) {
       queue.push_back(value);
       std::sort(queue.begin(), queue.end(), std::greater<int>());
   }

   int pop() {
       if (queue.empty()) {
           return -1;
       }
       int max = queue[0];
       queue.erase(queue.begin());
       return max;
   }

private:
   std::vector<int> queue;
};

int main() {
   PriorityQueue pq;
   pq.push(5);
   pq.push(10);
   pq.push(3);
   std::cout << pq.pop() << std::endl;
   std::cout << pq.pop() << std::endl;
   std::cout << pq.pop() << std::endl;
   return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }
    void flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        for (const auto& line : logs_) {
            std::cout << line << std::endl;
        }
        logs_.clear();
    }
private:
    std::vector<std::string> logs_;
    std::mutex mtx_;
};

void worker(LogAggregator* agg, int id) {
    for (int i = 0; i < 5; ++i) {
        agg->addLog(""Worker "" + std::to_string(id) + "" iteration "" + std::to_string(i));
        // Simulate work
        std::this_thread::sleep_for(std::chrono::milliseconds(10));
    }
    // Missing call to agg->flush(); leads to lost logs if aggregator is destroyed before flush
}

int main() {
    LogAggregator* aggregator = new LogAggregator();
    std::thread t1(worker, aggregator, 1);
    std::thread t2(worker, aggregator, 2);
    t1.join();
    t2.join();
    // aggregator->flush(); // Intended flush is commented out, causing data loss
    delete aggregator;
    return 0;
}
",code_defect,resource_leak_and_data_loss,,openai/gpt-oss-120b
Java,"public class UserAuthentication {
    private static final String SECRET_KEY = ""superSecretKey123"";

    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        String storedHashedPassword = retrieveHashedPasswordFromDatabase(username);
        if (storedHashedPassword == null) {
            return false;
        }

        String inputHash = hashPassword(password);
        return storedHashedPassword.equals(inputHash);
    }

    private String hashPassword(String password) {
        return password.hashCode() + """";
    }

    private String retrieveHashedPasswordFromDatabase(String username) {
        // Simulated database lookup
        if (""admin"".equals(username)) {
            return ""-1472765325"";
        }
        return null;
    }
}",code_defect,insecure_hashing,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger LOGGER = LoggerFactory.getLogger(UserService.class); public List<User> getUsers() { List<User> users = new ArrayList<>(); try (Connection connection = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""root"", ""password"")) { Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(""SELECT * FROM users""); while (resultSet.next()) { User user = new User(resultSet.getString(""name""), resultSet.getString(""email"")); users.add(user); } } catch (SQLException e) { LOGGER.error(""Error fetching users"", e); } return users; } }",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a log file synchronously (blocking I/O)
    getUserProfile(userId) {
        const user = this.db.query(`SELECT * FROM users WHERE id = ${userId}`);
        // BUG: If user is not found, user will be undefined and accessing .name throws
        const profile = {
            id: user.id,
            name: user.name,
            email: user.email,
            createdAt: user.created_at
        };
        // Insecure: directly writes user data to a log file without sanitization
        fs.writeFileSync('/var/log/user_profiles.log', JSON.stringify(profile) + '\n', { flag: 'a' });
        return profile;
    }
}

// Simulated DB object with a naive query method (SQL injection risk)
const fakeDb = {
    query: (sql) => {
        // Very simplistic parser, returns undefined for missing user
        const match = /WHERE id = (\d+)/.exec(sql);
        if (!match) return undefined;
        const id = parseInt(match[1], 10);
        if (id === 1) {
            return { id: 1, name: 'Alice', email: 'alice@example.com', created_at: '2023-01-01' };
        }
        // Returns undefined for any other id, leading to runtime error in getUserProfile
        return undefined;
    }
};

const service = new UserService(fakeDb);
// This call will cause a TypeError when userId is not 1
service.getUserProfile(2);",code_defect,null_reference_and_sql_injection_risk,,openai/gpt-oss-120b
Python,"import os
import json

class ConfigManager:
    def __init__(self):
        self.config_file = 'config.json'
        self.config = self.load_config()

    def load_config(self):
        if os.path.exists(self.config_file):
            with open(self.config_file, 'r') as f:
                return json.load(f)
        else:
            return {}

    def get_value(self, key):
        if key in self.config:
            return self.config[key]
        else:
            return None

    def set_value(self, key, value):
        self.config[key] = value
        self.save_config()

    def save_config(self):
        with open(self.config_file, 'w') as f:
            json.dump(self.config, f, indent=4)

    def delete_key(self, key):
        if key in self.config:
            del self.config[key]
            self.save_config()

    def update_config_from_dict(self, new_config):
        for k, v in new_config.items():
            self.config[k] = v
        self.save_config()

    def clear_config(self):
        self.config.clear()
        self.save_config()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class UserDatabase {
    constructor() {
        this.users = [];
    }

    addUser(user) {
        this.users.push(user);
    }

    getUserByEmail(email) {
        for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].email === email) {
                return this.users[i];
            }
        }
        return null;
    }

    removeUserByEmail(email) {
        for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].email === email) {
                this.users.splice(i, 1);
                break;
            }
        }
    }
}

let db = new UserDatabase();
let user1 = { name: 'John', email: 'john@example.com' };
db.addUser(user1);
let user2 = { name: 'Jane', email: 'jane@example.com' };
db.addUser(user2);
db.removeUserByEmail('john@example.com');
console.log(db.getUserByEmail('jane@example.com'));",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ReportGenerator {
    constructor(dbConnection, logger, config, cache, emailService) {
        this.db = dbConnection;
        this.logger = logger;
        this.config = config;
        this.cache = cache;
        this.emailService = emailService;
    }

    // Generates a monthly sales report and emails it
    async generateAndSendReport(userId, startDate, endDate, format, includeCharts, includeSummary, locale, timezone) {
        // Load user preferences (synchronously, blocking the event loop)
        const userPrefs = JSON.parse(fs.readFileSync(`./prefs/${userId}.json`, 'utf8'));

        // Fetch raw sales data
        const rawData = await this.db.query('SELECT * FROM sales WHERE user_id = ? AND date >= ? AND date <= ?', [userId, startDate, endDate]);

        // Apply filters based on user preferences (inefficient loop)
        let filteredData = [];
        for (let i = 0; i < rawData.length; i++) {
            const record = rawData[i];
            if (userPrefs.regions.includes(record.region) && record.amount > 0) {
                filteredData.push(record);
            }
        }

        // Transform data (large monolithic block)
        const reportData = filteredData.map(r => {
            return {
                date: new Date(r.date).toLocaleDateString(locale, { timeZone: timezone }),
                amount: r.amount,
                region: r.region,
                product: r.product_name,
                // duplicate calculation
                tax: r.amount * 0.07,
                total: r.amount + (r.amount * 0.07)
            };
        });

        // Generate report content (hardcoded format handling)
        let content = '';
        if (format === 'csv') {
            content = reportData.map(d => `${d.date},${d.amount},${d.region},${d.product},${d.tax},${d.total}`).join('\n');
        } else if (format === 'json') {
            content = JSON.stringify(reportData, null, 2);
        } else {
            content = 'Unsupported format';
        }

        // Cache the report (ignores cache expiration)
        this.cache.set(`report_${userId}_${startDate}_${endDate}`, content);

        // Email the report (no error handling)
        await this.emailService.send({
            to: userPrefs.email,
            subject: `Monthly Report (${startDate} - ${endDate})`,
            body: includeSummary ? 'Please find the attached report.' : '',
            attachments: [{ filename: `report.${format}`, content }]
        });

        this.logger.info(`Report generated and sent to ${userPrefs.email}`);
    }
}

module.exports = ReportGenerator;",code_smell,large_function_and_blocking_io,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    if (data[i].type === 'A') {
      result.push(data[i].value * 2);
    } else if (data[i].type === 'B') {
      result.push(data[i].value + 10);
    } else if (data[i].type === 'C') {
      result.push(data[i].value ** 3);
    } else {
      result.push(0);
    }
  }
  return result;
}

function main() {
  const input = [
    { type: 'A', value: 5 },
    { type: 'B', value: 3 },
    { type: 'X', value: 2 }
  ];
  const output = processData(input);
  console.log(output);
}

main();",code_smell,large_function,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        cursor.close()
        return user_data
    
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        cursor.close()
        return users_data
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it in memory.""""""
    _cache = {}
    _lock = threading.Lock()

    @classmethod
    def load(cls, path: str) -> dict:
        # Missing validation of path, leading to potential path traversal
        with cls._lock:
            if path in cls._cache:
                return cls._cache[path]
            with open(path, 'r') as f:
                data = json.load(f)
                cls._cache[path] = data
                return data

class UserService:
    def __init__(self, config_path: str):
        self.config = ConfigLoader.load(config_path)
        self.db_path = self.config.get('db_path')

    def get_user(self, user_id: int) -> dict:
        # Directly interpolates user_id into SQL, SQL injection risk
        query = f""SELECT * FROM users WHERE id = {user_id}""
        conn = self._connect_db()
        cursor = conn.cursor()
        cursor.execute(query)
        row = cursor.fetchone()
        conn.close()
        if row:
            return {'id': row[0], 'name': row[1]}
        return {}

    def _connect_db(self):
        # Uses os.getenv without default, may return None and cause crash
        db_file = os.getenv('DB_FILE')
        import sqlite3
        return sqlite3.connect(db_file)

# Example usage (would be called from elsewhere)
service = UserService('/etc/app/config.json')
print(service.get_user(42))",code_defect,SQL_injection_and_missing_env_handling,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  process(order) {
    if (order.items.length === 0) return null;

    let total = 0;
    for (let i = 0; i < order.items.length; i++) {
      const item = order.items[i];
      total += item.price * item.quantity;
    }

    if (total < 100) {
      order.discount = total * 0.05;
    } else if (total >= 100 && total < 500) {
      order.discount = total * 0.1;
    } else {
      order.discount = total * 0.15;
    }

    order.total = total - order.discount;

    if (order.user && order.user.email) {
      this.sendConfirmationEmail(order.user.email, order.total);
    }

    return order;
  }

  sendConfirmationEmail(email, amount) {
    console.log(`Email sent to ${email} for amount $${amount.toFixed(2)}`);
  }
}

const order = {
  items: [
    { price: 49.99, quantity: 2 },
    { price: 29.99, quantity: 1 }
  ],
  user: {
    email: 'user@example.com'
  }
};

const processor = new OrderProcessor();
const processedOrder = processor.process(order);
console.log('Processed Order:', processedOrder);",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
      class UserManager {
         constructor() {
            this.users = [];
         }

         async addUser(user) {
            this.users.push(user);
            await this.persistUsers();
         }

         async persistUsers() {
            const fs = require('fs').promises;
            await fs.writeFile('users.json', JSON.stringify(this.users));
         }

         async removeUser(userId) {
            this.users = this.users.filter(user => user.id !== userId);
            await this.persistUsers();
         }
      }

      const userManager = new UserManager();
      userManager.addUser({ id: 1, name: 'John Doe' });
      userManager.removeUser(1);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.path = configPath;
    this.cache = null;
  }

  load() {
    // Synchronous read, blocks event loop
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) this.load();
    return this.cache[key];
  }
}

function processUserInput(input) {
  // Assume input is a JSON string from an untrusted source
  const obj = JSON.parse(input); // No validation
  if (obj.action === 'delete') {
    // Dangerous: directly using user-provided filename
    fs.unlinkSync(`/var/app/data/${obj.filename}`);
  }
  return obj;
}

module.exports = { ConfigLoader, processUserInput };",code_defect,unsafe_file_deletion,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(String userId, String productId, int quantity, String deliveryAddress, String paymentMethod) {
        if (userId == null || userId.isEmpty()) {
            throw new IllegalArgumentException(""User ID is missing"");
        }

        if (productId == null || productId.isEmpty()) {
            throw new IllegalArgumentException(""Product ID is missing"");
        }

        if (quantity <= 0) {
            throw new IllegalArgumentException(""Invalid quantity"");
        }

        // Simulate fetching user data from DB
        String userEmail = fetchUserEmail(userId);

        // Simulate fetching product price from DB
        double price = fetchProductPrice(productId);

        double totalCost = price * quantity;

        // Simulate sending confirmation email
        sendEmail(userEmail, ""Your order has been processed."");

        // Simulate payment processing
        processPayment(paymentMethod, totalCost);

        // Simulate shipping order
        scheduleShipping(deliveryAddress);
    }

    private String fetchUserEmail(String userId) {
        // Simulate DB call
        return ""user"" + userId + ""@example.com"";
    }

    private double fetchProductPrice(String productId) {
        // Simulate DB call
        return 19.99;
    }

    private void sendEmail(String email, String message) {
        // Simulate email sending
        System.out.println(""Email sent to "" + email + "": "" + message);
    }

    private void processPayment(String paymentMethod, double amount) {
        // Simulate payment processing
        System.out.println(""Processed payment of $"" + amount + "" via "" + paymentMethod);
    }

    private void scheduleShipping(String address) {
        // Simulate shipping scheduling
        System.out.println(""Scheduled shipping to "" + address);
    }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>

   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}

       std::string getName() { return name; }
       int getAge() { return age; }

   private:
       std::string name;
       int age;
   };

   class UserRepository {
   public:
       void addUser(User user) { users.push_back(user); }
       User getUser(int index) { return users[index]; }

   private:
       std::vector<User> users;
   };

   int main() {
       UserRepository repository;
       repository.addUser(User(""John"", 30));
       repository.addUser(User(""Alice"", 25));

       for (int i = 0; i < 3; i++) {
           try {
               User user = repository.getUser(i);
               std::cout << user.getName() << std::endl;
           } catch (...) {
               std::cout << ""Unknown error"" << std::endl;
           }
       }

       return 0;
   }
   ",code_defect,out_of_range_error,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        logs.push_back(msg);
    }
private:
    void process() {
        while (!stopFlag) {
            std::vector<std::string> batch;
            {
                std::lock_guard<std::mutex> lock(mtx);
                batch.swap(logs); // move all pending logs
            }
            for (const auto& entry : batch) {
                // Simulate I/O delay
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                std::cout << ""Processed: "" << entry << std::endl;
            }
        }
    }
    std::vector<std::string> logs;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.addLog(""Event "" + std::to_string(i));
    }
    // Forget to stop the processor before exiting
    return 0;
}
",code_defect,resource_leak_due_to_unjoined_thread,,openai/gpt-oss-120b
Python,"import os
import json

class ConfigLoader:
    def __init__(self, config_path='config.json'):
        self.config_path = config_path

    def load_config(self):
        if not os.path.exists(self.config_path):
            return {}

        with open(self.config_path, 'r') as f:
            config = json.load(f)

        return self._process_config(config)

    def _process_config(self, config):
        processed = {}
        for key, value in config.items():
            if isinstance(value, str) and value.isdigit():
                processed[key] = int(value)
            else:
                processed[key] = value
        return processed

    def get_db_config(self):
        config = self.load_config()
        db_config = config.get('database', {})
        db_config['username'] = db_config.get('username', 'default_user')
        db_config['password'] = db_config.get('password', 'default_pass')
        db_config['host'] = db_config.get('host', 'localhost')
        db_config['port'] = db_config.get('port', 5432)
        return db_config",code_smell,long_method,,qwen/qwen3-32b
Java,"public class UserAccountManager { private Map<String, User> users = new HashMap<>(); public void addUser(User user) { users.put(user.getUsername(), user); } public User getUser(String username) { return users.get(username); } public void updateUser(User user) { users.put(user.getUsername(), user); } public void deleteUser(String username) { users.remove(username); } public boolean usernameExists(String username) { return users.containsKey(username); } }",code_smell,God class,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""admin123""; // hardcoded password

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT balance FROM accounts WHERE user_id = '"" + userId + ""'""; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    double newBalance = balance - amount;
                    String updateSql = ""UPDATE accounts SET balance = "" + newBalance + "" WHERE user_id = '"" + userId + ""'"";
                    stmt.executeUpdate(updateSql);
                    // Log transaction (omitted)
                    return true;
                }
            }
            return false;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    if (!user) return;
    if (!user.name || !user.email) {
      console.error('Invalid user data');
      return;
    }
    this.users.push(user);
  }

  findUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  removeUserByEmail(email) {
    const index = this.users.findIndex(user => user.email === email);
    if (index !== -1) {
      this.users.splice(index, 1);
    }
  }

  getUserCount() {
    return this.users.length;
  }
}

// Example usage
const userManager = new UserManager();
userManager.addUser({ name: 'Alice', email: 'alice@example.com' });
userManager.addUser({ name: 'Bob', email: 'bob@example.com' });
userManager.addUser({ name: 'Charlie', email: 'charlie@example.com' });",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>

class BankAccount {
public:
    BankAccount(double balance) : balance_(balance) {}
    void deposit(double amount) { balance_ += amount; }
    void withdraw(double amount) { balance_ -= amount; }
    double getBalance() { return balance_; }
private:
    double balance_;
};

int main() {
    BankAccount account(1000.0);
    account.deposit(500.0);
    account.withdraw(200.0);
    std::cout << ""Final balance: "" << account.getBalance() << std::endl;
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void process() {
        while (!stopFlag) {
            std::string entry;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    entry = queue.back(); // BUG: should pop from front, leads to out-of-order processing and possible memory growth
                    queue.pop_back();
                }
            }
            if (!entry.empty()) {
                // Simulate I/O delay
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                std::cout << ""Processed: "" << entry << std::endl;
            }
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 100; ++i) {
        lp.enqueue(""msg"" + std::to_string(i));
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    lp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
Python,"import os
import re

def parse_user_input(data):
    cleaned_data = re.sub(r'[^a-zA-Z0-9\s]', '', data)
    return cleaned_data

class UserProcessor:
    def __init__(self):
        self.cache = {}
        self.max_cache_size = 100

    def process_user(self, user_id, user_data):
        if user_id in self.cache:
            print('User already processed, skipping.')
            return self.cache[user_id]

        if len(user_data) > 255:
            user_data = user_data[:255]

        processed = self._sanitize_data(user_data)
        self.cache[user_id] = processed

        if len(self.cache) > self.max_cache_size:
            self.cache.clear()

        return processed

    def _sanitize_data(self, data):
        data = data.strip().lower()
        return re.sub(r'\s+', ' ', data)

    def save_to_file(self, filename, data):
        with open(filename, 'w') as f:
            f.write(data)

# Unused function below
def unused_function():
    print('This function is not used.')

if __name__ == '__main__':
    processor = UserProcessor()
    result = processor.process_user(1, 'John Doe!@#')
    processor.save_to_file('output.txt', result)",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getAllUsers() { const users = await this.userRepository.findAll(); return users.map(user => ({ id: user.id, name: user.name })); } async getUserById(id) { const user = await this.userRepository.findById(id); if (!user) return null; return { id: user.id, name: user.name }; } }",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user data and writes a report file
  async generateUserReport(userId) {
    const user = await this.db.getUserById(userId);
    if (!user) {
      throw new Error('User not found');
    }
    const orders = await this.db.getOrdersForUser(userId);
    const total = orders.reduce((sum, o) => sum + o.amount, 0);
    const report = {
      id: user.id,
      name: user.name,
      email: user.email,
      totalSpent: total,
      orderCount: orders.length,
    };
    // BUG: Asynchronously writing the file without awaiting, may cause race condition if caller expects completion
    fs.writeFile('reports/' + user.id + '.json', JSON.stringify(report), (err) => {
      if (err) console.error('Failed to write report:', err);
    });
    return report;
  }
}

module.exports = UserService;",code_defect,async_file_write_race_condition,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void process_data(int id, const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        int result = data[i] * id;
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << ""Thread "" << id << "" processed "" << data[i] << "" -> "" << result << std::endl;
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<std::thread> threads;

    for (int i = 0; i < 5; ++i) {
        threads.emplace_back(process_data, i + 1, std::ref(data));
    }

    for (auto& t : threads) {
        t.join();
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    std::string name;
    int salary;

    Employee(std::string name, int salary) : name(name), salary(salary) {}

    bool operator<(const Employee& other) const {
        return salary < other.salary;
    }
};

void sortEmployees(std::vector<Employee>& employees) {
    std::sort(employees.begin(), employees.end());
}

void printEmployees(const std::vector<Employee>& employees) {
    for (const auto& employee : employees) {
        std::cout << employee.name << "" - "" << employee.salary << std::endl;
    }
}

int main() {
    std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
    sortEmployees(employees);
    printEmployees(employees);
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // JSON.parse can throw, but we ignore errors -> defect: uncaught exception
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

class UserService {
  constructor(db) {
    this.db = db;
    this.config = new ConfigLoader('./config.json');
  }

  async getUserProfile(userId) {
    const cfg = this.config.load(); // potential race if called concurrently
    const user = await this.db.query('SELECT * FROM users WHERE id = ' + userId);
    // Missing parameterization -> defect: SQL injection
    if (!user) return null;
    return {
      id: user.id,
      name: user.name,
      role: cfg.defaultRole // uses config without validation
    };
  }
}

module.exports = { ConfigLoader, UserService };",code_defect,unhandled_exception_and_sql_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final String API_KEY = ""1234567890abcdef"";

    public void processOrder(String userId, String productId, int quantity) {
        if (quantity <= 0) {
            System.out.println(""Invalid quantity"");
            return;
        }

        String formattedData = userId + "","" + productId + "","" + quantity;
        String encryptedData = encryptData(formattedData);

        boolean success = sendToPaymentGateway(encryptedData);
        if (success) {
            System.out.println(""Order processed successfully"");
        } else {
            System.out.println(""Failed to process order"");
        }
    }

    private String encryptData(String data) {
        return data + ""encrypted""; // Simulated encryption
    }

    private boolean sendToPaymentGateway(String data) {
        // Simulated call to a payment gateway
        if (data.contains(""encrypted"")) {
            return true;
        }
        return false;
    }
}",code_defect,hardcoded_secrets,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
        return self.get_user(user_id)

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
        return True",code_smell,Tight Coupling,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class UserService {
    private Connection dbConnection;
    private static final String SELECT_USER = ""SELECT * FROM users WHERE username = '"" + ""?"" + ""'""; // insecure concatenation

    public UserService(Connection connection) {
        this.dbConnection = connection;
    }

    public Map<String, String> getUserInfo(String username) throws SQLException {
        Statement stmt = dbConnection.createStatement();
        ResultSet rs = stmt.executeQuery(SELECT_USER.replace(""?"", username));
        Map<String, String> userInfo = new HashMap<>();
        if (rs.next()) {
            userInfo.put(""id"", rs.getString(""id""));
            userInfo.put(""email"", rs.getString(""email""));
            userInfo.put(""role"", rs.getString(""role""));
        }
        rs.close();
        stmt.close();
        return userInfo;
    }
}
",code_defect,SQL_injection_via_string_concatenation,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order, String customerEmail, boolean isPriority, String promoCode, int discountPercentage) {
        if (order == null || order.getItems().isEmpty()) {
            return;
        }

        double total = 0;
        for (OrderItem item : order.getItems()) {
            total += item.getPrice() * item.getQuantity();
        }

        if (isPriority) {
            total -= total * 0.1;
        }

        if (promoCode != null && promoCode.equalsIgnoreCase(""SAVE10"")) {
            total -= total * discountPercentage / 100;
        }

        if (total < 0) {
            total = 0;
        }

        // TODO: send confirmation email
        // sendEmail(customerEmail, ""Order processed: $"" + total);

        // TODO: log order in database
        // logOrder(order);

        System.out.println(""Processed order for customer: "" + customerEmail);
    }

    // Unused method left in code
    public void oldCalculateTax(double amount) {
        System.out.println(""Tax: "" + amount * 0.08);
    }

    // Another unused method
    public void deprecatedProcess(Order order) {
        System.out.println(""Legacy processing... "");
    }
}",code_smell,dead_code,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data
    def create_user(self, user_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""INSERT INTO users (name, email) VALUES (%s, %s)"", (user_data['name'], user_data['email']))
        self.db_connection.commit()
        return True",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None
        self._load_lock = threading.Lock()

    def load(self):
        # Double-checked locking pattern (incorrect in Python)
        if self._config is None:
            with self._load_lock:
                if self._config is None:
                    with open(self.config_path, 'r') as f:
                        self._config = json.load(f)
        return self._config

    def get(self, key, default=None):
        cfg = self.load()
        return cfg.get(key, default)

# Global instance (singleton misuse)
config = ConfigLoader('/etc/app/config.json')

def process_user_input(user_input):
    # Unsafe eval leading to code execution vulnerability
    result = eval(user_input)
    return result

def main():
    # Example usage
    db_host = config.get('db_host', 'localhost')
    print(f""Connecting to DB at {db_host}"")
    # Simulate processing untrusted input
    user_cmd = input('Enter command: ')
    output = process_user_input(user_cmd)
    print('Result:', output)

if __name__ == '__main__':
    main()",code_defect,unsafe_eval_execution,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

string processInput(const string& input) {
    string output = input;
    for (int i = 0; i < output.length(); ++i) {
        if (output[i] >= 'a' && output[i] <= 'z') {
            output[i] = toupper(output[i]);
        }
    }
    return output;
}

int main() {
    vector<string> data = {""hello"", ""world""};
    for (const string& s : data) {
        string processed = processInput(s);
        cout << processed << endl;
    }
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) { users.push_back(user); }
    User* getUserByName(std::string name) {
        for (auto& user : users) {
            if (user.getName() == name) {
                return &user;
            }
        }
        return nullptr;
    }
private:
    std::vector<User> users;
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User* user = service.getUserByName(""John"");
    if (user != nullptr) {
        std::cout << user->getName() << std::endl;
    }
    return 0;
}
",code_defect,dangling_pointer,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(int id) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(id);
    }
private:
    void process() {
        while (!stopFlag) {
            int item = -1;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    item = queue.front();
                    queue.erase(queue.begin());
                }
            }
            if (item != -1) {
                // Simulate processing
                std::cout << ""Processing id: "" << item << std::endl;
            }
        }
    }
    std::vector<int> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(i);
    }
    // Missing lp.stop(); leads to thread running indefinitely
    return 0;
}
",code_defect,resource_leak_thread_not_stopped,,openai/gpt-oss-120b
Python,"import os
import requests

def fetch_user_data(user_id):
    base_url = 'https://api.example.com/users/'
    url = base_url + str(user_id)
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return None


def process_user_data(user_data):
    if not user_data:
        return
    user_name = user_data.get('name', 'Unknown')
    user_email = user_data.get('email', 'No email provided')
    print(f'Processing user: {user_name} <{user_email}>')

    # Legacy code for backward compatibility
    # if 'old_field' in user_data:
    #     process_old_format(user_data)


def main():
    user_ids = [1, 2, 3, 4, 5]
    for user_id in user_ids:
        data = fetch_user_data(user_id)
        process_user_data(data)


if __name__ == '__main__':
    main()",code_smell,dead_code,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        cursor.close()
        if user_data:
            return {
                'id': user_data[0],
                'username': user_data[1],
                'email': user_data[2]
            }
        else:
            return None",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""admin123""; // hardcoded password

    public List<Payment> getPendingPayments() throws SQLException {
        List<Payment> pending = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, user_id FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Payment p = new Payment();
            p.setId(rs.getInt(""id""));
            p.setAmount(rs.getDouble(""amount""));
            p.setUserId(rs.getInt(""user_id""));
            pending.add(p);
        }
        // Missing close of ResultSet, Statement, and Connection
        return pending;
    }

    public void processPayments() {
        try {
            List<Payment> payments = getPendingPayments();
            for (Payment p : payments) {
                // Simulate external API call that may throw RuntimeException
                boolean success = externalCharge(p.getUserId(), p.getAmount());
                updatePaymentStatus(p.getId(), success ? ""COMPLETED"" : ""FAILED"");
            }
        } catch (SQLException e) {
            // Swallow exception, no logging
        }
    }

    private boolean externalCharge(int userId, double amount) {
        // Placeholder for real payment gateway integration
        if (amount < 0) {
            throw new IllegalArgumentException(""Negative amount"");
        }
        // Simulate random failure
        return Math.random() > 0.2;
    }

    private void updatePaymentStatus(int paymentId, String status) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""UPDATE payments SET status = ? WHERE id = ?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, status);
            stmt.setInt(2, paymentId);
            stmt.executeUpdate();
            // Missing close of Statement and Connection
        } catch (SQLException e) {
            // Ignored
        }
    }
}

class Payment {
    private int id;
    private double amount;
    private int userId;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
}",code_defect,resource_leak_and_swallowed_exceptions,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processValues(const std::vector<int>& values) {
    for (size_t i = 0; i <= values.size(); ++i) {
        if (i % 2 == 0) {
            std::cout << values[i] << "" "" << values[i] * 2 << std::endl;
        } else {
            std::cout << values[i] << "" "" << values[i] - 1 << std::endl;
        }
    }
}

int main() {
    std::vector<int> data = {10, 20, 30, 40, 50};
    processValues(data);
    return 0;
}",code_defect,out_of_bounds_access,,qwen/qwen3-32b
Java,"public class PaymentProcessor { public void processPayment(String paymentMethod, double amount) { if (paymentMethod.equals(""credit_card"")) { // simulate payment processing delay Thread.sleep(100); } else if (paymentMethod.equals(""paypal"")) { // simulate payment processing delay Thread.sleep(200); } System.out.println(""Payment processed successfully""); } public static void main(String[] args) { PaymentProcessor processor = new PaymentProcessor(); processor.processPayment(""credit_card"", 100.0); } }",code_smell,magic_string,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off-by-one error
            int value = data[i];
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1,2,3,4,5};
    std::thread t([&](){ processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << "" Odd sum: "" << processor.getOddSum() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrders(orders, users, inventory) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      const user = users.find(u => u.id === order.userId);

      if (!user) {
        continue;
      }

      for (let j = 0; j < order.items.length; j++) {
        const item = order.items[j];
        const stock = inventory[item.productId];

        if (stock && stock.quantity >= item.quantity) {
          stock.quantity -= item.quantity;
          this._log(`Processed ${item.quantity} units of ${item.productId} for user ${user.name}`);
        } else {
          this._log(`Insufficient stock for ${item.productId} in order ${order.id}`);
        }
      }
    }
  }

  _log(message) {
    console.log(`[OrderProcessor] ${message}`);
  }
}

const orders = [
  { id: 'order1', userId: 1, items: [{ productId: 'p1', quantity: 2 }] },
  { id: 'order2', userId: 2, items: [{ productId: 'p2', quantity: 5 }] }
];

const users = [
  { id: 1, name: 'Alice' },
  { id: 2, name: 'Bob' }
];

const inventory = {
  'p1': { quantity: 3 },
  'p2': { quantity: 4 }
};

const processor = new OrderProcessor();
processor.processOrders(orders, users, inventory);",code_smell,large_function,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string n, int a) : name(n), age(a) {}

    bool operator<(const User& other) const {
        return age < other.age;
    }
};

void sortUsers(std::vector<User>& users) {
    std::sort(users.begin(), users.end());
}

void printUsers(const std::vector<User>& users) {
    for (const auto& user : users) {
        std::cout << user.name << "" is "" << user.age << "" years old."" << std::endl;
    }
}

int main() {
    std::vector<User> users = {User(""John"", 30), User(""Alice"", 25), User(""Bob"", 40)};
    sortUsers(users);
    printUsers(users);
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data):
        cursor = self.conn.cursor()
        # Directly embedding user-provided data into SQL leads to injection risk
        cursor.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')"")
        self.conn.commit()

    def get_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute(f""SELECT data FROM users WHERE username = '{username}'"")
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def delete_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute(f""DELETE FROM users WHERE username = '{username}'"")
        self.conn.commit()

# Example usage (would be called from elsewhere)
manager = UserManager(os.getenv('USER_DB', ':memory:'))
manager.add_user('alice', {'role': 'admin', 'active': True})
print(manager.get_user('alice'))
manager.delete_user('alice')",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    public boolean authenticate(String username, String password, boolean rememberMe, boolean isTwoFactorEnabled) {
        if (username == null || password == null) {
            return false;
        }

        if (username.trim().isEmpty() || password.trim().isEmpty()) {
            return false;
        }

        // TODO: Check if this is necessary for all cases
        if (rememberMe) {
            // Do something with rememberMe
        }

        if (isTwoFactorEnabled) {
            // Placeholder for 2FA logic
            // Not implemented yet
        }

        String query = ""SELECT * FROM users WHERE username = '"" + username + ""' AND password = '"" + password + ""'"";
        // Simulate DB call
        boolean isValid = executeQuery(query);
        return isValid;
    }

    private boolean executeQuery(String query) {
        // Simulate a database lookup
        return query.contains(""admin"") && query.contains(""1234"");
    }
}",code_smell,security_code_smell,,qwen/qwen3-32b
JavaScript,"class PaymentProcessor { constructor() { this.users = {}; } async processPayment(userId, amount) { const user = this.users[userId]; if (!user) { await new Promise(resolve => setTimeout(resolve, 1000)); this.users[userId] = { id: userId, balance: 0 }; } this.users[userId].balance += amount; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<User> getActiveUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""SELECT id, username, email FROM users WHERE status='ACTIVE'"";
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            while (rs.next()) {
                User u = new User();
                u.setId(rs.getInt(""id""));
                u.setUsername(rs.getString(""username""));
                u.setEmail(rs.getString(""email""));
                users.add(u);
            }
        } finally {
            // Missing close of ResultSet and Statement, and ignoring possible SQLException
            if (conn != null) {
                conn.close(); // may throw SQLException, not handled
            }
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}
",code_defect,resource_leak_and_unhandled_exception,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users) {
    this.users = users;
  }

  authenticateUser(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username && this.users[i].password === password) {
        return true;
      }
    }
    return false;
  }

  getUserRole(username) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        return this.users[i].role;
      }
    }
    return 'guest';
  }
}

// Sample usage
const users = [
  { username: 'admin', password: 'admin123', role: 'admin' },
  { username: 'user', password: 'user123', role: 'user' }
];

const auth = new UserAuth(users);
console.log(auth.authenticateUser('admin', 'admin123')); // true
console.log(auth.getUserRole('admin')); // 'admin'",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getAllUsers() {
            const users = await this.userRepository.findAll();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async getUserById(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return { id: user.id, name: user.name };
         }
      }

      class UserRepository {
         constructor(db) {
            this.db = db;
         }

         async findAll() {
            return this.db.query('SELECT * FROM users');
         }

         async findById(id) {
            return this.db.query('SELECT * FROM users WHERE id = $1', [id]);
         }
      }

      const db = {
         query: (sql, params) => {
            // simulate a database query
            return new Promise(resolve => {
               setTimeout(() => {
                  const result = [
                     { id: 1, name: 'John Doe' },
                     { id: 2, name: 'Jane Doe' }
                  ];
                  resolve(result);
               }, 100);
            });
         }
      };

      const userRepository = new UserRepository(db);
      const userService = new UserService(userRepository);

      (async () => {
         const users = await userService.getAllUsers();
         console.log(users);
      })();
   ",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {
        // Load users from a data source (simulated)
        users = {""alice"", ""bob"", ""carol""};
    }

    // Returns the user name at the given index
    // NOTE: Index is expected to be 1-based for legacy reasons
    std::string getUserById(int id) const {
        // BUG: Off-by-one error – should subtract 1 from id
        if (id < 1 || id > static_cast<int>(users.size())) {
            return """"; // invalid id
        }
        return users[id]; // <-- off-by-one, may access out of bounds
    }

    // Adds a new user
    void addUser(const std::string& name) {
        users.push_back(name);
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""dave"");
    std::cout << ""User 4: "" << um.getUserById(4) << std::endl; // Expected ""dave"", may crash
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processInput(const std::string& input) {
    std::string result;
    for (char c : input) {
        if (c >= 'A' && c <= 'Z') {
            result += c;
        } else if (c >= 'a' && c <= 'z') {
            result += c;
        }
    }
    return result;
}

int main() {
    std::vector<std::string> inputs = {""Hello123"", ""WORLD!@"", ""C++20""};
    for (const std::string& input : inputs) {
        std::string filtered = processInput(input);
        std::cout << ""Processed: "" << filtered << std::endl;
    }
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger logger = LoggerFactory.getLogger(UserService.class); public void updateUser(User user) { if (user.getId() != null) { try { User existingUser = userRepository.findById(user.getId()).orElseThrow(); existingUser.setName(user.getName()); existingUser.setEmail(user.getEmail()); userRepository.save(existingUser); } catch (Exception e) { logger.error(""Error updating user"", e); } } } }",code_smell,god_class,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        # Insecure: directly eval the config file content
        with open(self.path, 'r') as f:
            data = f.read()
            self.config = eval(data)  # code defect: unsafe deserialization

    def get(self, key, default=None):
        return self.config.get(key, default)

class UserService:
    def __init__(self, config_path):
        self.cfg = ConfigLoader(config_path)
        self.db_path = self.cfg.get('db_path')

    def get_user(self, user_id):
        # Simple SQL query without sanitization – code defect: SQL injection risk
        query = f""SELECT * FROM users WHERE id = {user_id}""
        conn = None
        try:
            conn = self._connect()
            cursor = conn.cursor()
            cursor.execute(query)
            result = cursor.fetchone()
            return result
        finally:
            if conn:
                conn.close()

    def _connect(self):
        import sqlite3
        return sqlite3.connect(self.db_path)

# Usage example (would be called from elsewhere)
service = UserService('config.cfg')
print(service.get_user(1))",code_defect,unsafe_deserialization_and_sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    void process(const std::vector<std::string>& data) {
        for (const auto& item : data) {
            if (item.empty()) continue;

            if (item == ""skip"") {
                std::cout << ""Skipping: "" << item << std::endl;
                continue;
            }

            int value = 0;
            try {
                value = std::stoi(item);
            } catch (const std::exception& e) {
                std::cerr << ""Conversion failed for: "" << item << "" - "" << e.what() << std::endl;
                continue;
            }

            if (value > 100) {
                std::cout << ""High value: "" << item << std::endl;
            } else {
                std::cout << ""Low value: "" << item << std::endl;
            }
        }
    }
};

int main() {
    std::vector<std::string> input = { ""123"", ""abc"", ""skip"", """", ""150"", ""-10"" };
    DataProcessor processor;
    processor.process(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        cursor.close()
        return user_data
    
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        cursor.close()
        return users_data
    
    def create_user(self, user_name, user_email):
        cursor = self.db_connection.cursor()
        cursor.execute(""INSERT INTO users (name, email) VALUES (%s, %s)"", (user_name, user_email))
        self.db_connection.commit()
        cursor.close()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // JSON.parse can throw, but we ignore errors
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function processUserInput(input) {
  // Assume input is a string like ""key=value""
  const [key, value] = input.split('=');
  const config = new ConfigLoader('./config.json').load();
  // Directly assign user-provided value to config without validation
  config[key] = value;
  // Write back to file (potential race condition if called concurrently)
  fs.writeFileSync('./config.json', JSON.stringify(config, null, 2));
  return config;
}

module.exports = { processUserInput };",code_defect,unsafe_file_write_and_missing_validation,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(std::string input) {
    std::string command = input.substr(0, input.find(' '));
    std::string value = input.substr(input.find(' ')+1);

    if (command == ""set"") {
        std::cout << ""Setting value to "" << value << std::endl;
    } else if (command == ""get"") {
        std::cout << ""Retrieving value for "" << value << std::endl;
    } else {
        std::cout << ""Unknown command"" << std::endl;
    }
}

int main() {
    std::vector<std::string> inputs = {""set x"", ""get y"", ""delete z""};
    for (const auto& input : inputs) {
        processUserInput(input);
    }
    return 0;
}",code_smell,poor_error_handling,,qwen/qwen3-32b
Python,"
class BankAccount:
    def __init__(self, account_number, balance):
        self.account_number = account_number
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        if amount > self.balance:
            self.balance = 0
        else:
            self.balance -= amount

    def get_balance(self):
        return self.balance

class Bank:
    def __init__(self):
        self.accounts = {}

    def create_account(self, account_number, initial_balance):
        self.accounts[account_number] = BankAccount(account_number, initial_balance)

    def get_account(self, account_number):
        return self.accounts.get(account_number)

bank = Bank()
bank.create_account('12345', 1000)
account = bank.get_account('12345')
account.withdraw(500)
print(account.get_balance())
",code_defect,inconsistent_state,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""P@ssw0rd123""; // hardcoded secret

    public List<Payment> getPendingPayments() throws SQLException {
        List<Payment> pending = new ArrayList<>();
        String sql = ""SELECT id, amount, user_id FROM payments WHERE status='PENDING'"";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                Payment p = new Payment();
                p.setId(rs.getInt(""id""));
                p.setAmount(rs.getDouble(""amount""));
                p.setUserId(rs.getInt(""user_id""));
                pending.add(p);
            }
        }
        return pending;
    }

    public void processPayments() {
        try {
            List<Payment> payments = getPendingPayments();
            for (Payment p : payments) {
                // Simulate external payment gateway call
                boolean success = externalCharge(p.getUserId(), p.getAmount());
                updatePaymentStatus(p.getId(), success ? ""COMPLETED"" : ""FAILED"");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private boolean externalCharge(int userId, double amount) {
        // Placeholder for real implementation
        return amount < 1000; // simplistic rule
    }

    private void updatePaymentStatus(int paymentId, String status) {
        String sql = ""UPDATE payments SET status='"" + status + ""' WHERE id="" + paymentId; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

class Payment {
    private int id;
    private double amount;
    private int userId;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
}",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      if (order.status === 'pending') {
        this.processOrder(order);
      }
    }
  }

  processOrder(order) {
    if (!order || !order.id || !order.items) {
      return;
    }

    for (let i = 0; i < order.items.length; i++) {
      const item = order.items[i];
      if (item.quantity <= 0) {
        continue;
      }
      // Some processing logic
      console.log(`Processing item ${item.id} for order ${order.id}`);
    }

    // Additional processing
    console.log(`Order ${order.id} processed`);

    // Dummy validation logic
    if (order.totalPrice && order.totalPrice < 0) {
      console.warn(`Negative price detected for order ${order.id}`);
    }

    // Simulate external service call
    this.sendOrderToWarehouse(order);
  }

  sendOrderToWarehouse(order) {
    console.log(`Sending order ${order.id} to warehouse`);
  }
}

// Example usage:
const processor = new OrderProcessor();
const orders = [
  { id: 1, status: 'pending', items: [{ id: 101, quantity: 2 }, { id: 102, quantity: 0 }], totalPrice: 100 },
  { id: 2, status: 'completed', items: [{ id: 201, quantity: 1 }], totalPrice: 50 },
];

processor.processOrders(orders);",clean_code,well_structured,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <algorithm>
      class Employee {
         public:
            Employee(std::string name, int salary) : name(name), salary(salary) {}
            std::string name;
            int salary;
      };
      bool compareEmployees(const Employee& a, const Employee& b) {
         return a.salary < b.salary;
      }
      void sortEmployees(std::vector<Employee>& employees) {
         std::sort(employees.begin(), employees.end(), compareEmployees);
      }
      int main() {
         std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
         sortEmployees(employees);
         for (const auto& employee : employees) {
            std::cout << employee.name << "" "" << employee.salary << std::endl;
         }
         return 0;
      }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn should return a promise resolving to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // Off‑by‑one error: pageNumber is 1‑based but calculations treat it as 0‑based
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    this.currentPage++;
    return this.getPage(this.currentPage);
  }
}

// Example usage
const paginator = new Paginator(10);

paginator.loadItems(() => Promise.resolve(Array.from({ length: 95 }, (_, i) => i + 1)))
  .then(() => {
    console.log('First page:', paginator.nextPage()); // Returns items 11‑20 instead of 1‑10
    console.log('Second page:', paginator.nextPage()); // Returns items 21‑30, skipping first page
  });",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processVector(const std::vector<int>& vec) {
    std::vector<int> result;
    for (size_t i = 0; i < vec.size(); ++i) {
        if (vec[i] % 2 == 0) {
            result.push_back(vec[i]);
        }
    }

    // Re-initializing and processing the same vector again
    result.clear();
    for (size_t i = 0; i < vec.size(); ++i) {
        if (vec[i] % 2 == 0) {
            result.push_back(vec[i]);
        }
    }

    for (size_t i = 0; i < result.size(); ++i) {
        std::cout << result[i] << "" "";
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5, 6};
    processVector(input);
    return 0;
}",code_smell,repeated_work,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, String> users = new HashMap<>(); public synchronized void addUser(String username, String password) { users.put(username, password); } public synchronized String getPassword(String username) { return users.get(username); } public static void main(String[] args) { UserService userService = new UserService(); userService.addUser(""user1"", ""password1""); System.out.println(userService.getPassword(""user1"")); } }",code_smell,"God class, tight coupling",,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    // Synchronous file read blocks the event loop
    const data = fs.readFileSync(this.path, 'utf8');
    // No error handling; malformed JSON will throw
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

class UserService {
  constructor(db) {
    this.db = db;
    this.config = new ConfigLoader('./config.json');
  }

  async getUserProfile(userId) {
    const config = this.config.load(); // Potentially throws, not caught
    const user = await this.db.query('SELECT * FROM users WHERE id = ' + userId); // SQL injection risk
    if (!user) return null;
    // Missing await, returns a Promise instead of data
    return this._enrichProfile(user, config);
  }

  _enrichProfile(user, config) {
    // Assume config has a field 'bonusPoints'
    user.bonus = config.bonusPoints;
    return user;
  }
}

module.exports = { ConfigLoader, UserService };",code_defect,SQL_injection_and_unhandled_exception,,openai/gpt-oss-120b
Python,"import os
import subprocess

def run_command(command):
    try:
        result = subprocess.run(command, shell=True, check=True, text=True, capture_output=True)
        print(f""Command output:"")
        print(result.stdout)
        return result
    except subprocess.CalledProcessError as e:
        print(f""Error running command: {e}"")
        return None


def execute_user_input():
    user_input = input(""Enter a shell command to run: "")
    if user_input.strip():
        run_command(user_input)

if __name__ == ""__main__"":
    execute_user_input()",code_defect,security_vulnerability,,qwen/qwen3-32b
Java,"public class UserService { private static final String DEFAULT_PASSWORD = ""password123""; public User createUser(String username, String email) { User user = new User(); user.setUsername(username); user.setEmail(email); user.setPassword(DEFAULT_PASSWORD); return user; } }",code_smell,hardcoded_secret,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}

    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off-by-one error
            int value = data[i]; // may read out of bounds
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }

    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }

private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << ""\n"";
    std::cout << ""Odd sum: "" << processor.getOddSum() << ""\n"";
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  process(order) {
    if (order.status === 'pending') {
      const customer = order.customer;
      const items = order.items;
      let total = 0;

      for (let i = 0; i < items.length; i++) {
        total += items[i].price * items[i].quantity;
      }

      if (total > 0) {
        this.sendEmail(customer.email, 'Order Confirmation', 'Your order has been processed. Thank you!');
        this.updateInventory(items);
        order.status = 'processed';
      } else {
        this.sendEmail(customer.email, 'Order Error', 'Your order could not be processed. Total is zero.');
      }
    }
  }

  sendEmail(to, subject, body) {
    console.log(`Email sent to ${to}: ${subject} - ${body}`);
  }

  updateInventory(items) {
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      item.stock -= item.quantity;
      if (item.stock < 0) {
        item.stock = 0;
      }
    }
  }
}",code_smell,large_class,,qwen/qwen3-32b
Java,"public class UserDatabase { private static UserDatabase instance; private Map<String, User> users = new HashMap<>(); private UserDatabase() {} public static UserDatabase getInstance() { if (instance == null) { instance = new UserDatabase(); } return instance; } public void addUser(User user) { users.put(user.getUsername(), user); } public User getUser(String username) { return users.get(username); } public void removeUser(String username) { users.remove(username); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.cache = {}

    def load(self, key):
        # Load config file each time, ignoring cache
        with open(self.path, 'r') as f:
            data = json.load(f)
        return data.get(key)

    def get_cached(self, key):
        if key in self.cache:
            return self.cache[key]
        value = self.load(key)
        self.cache[key] = value
        return value

class UserService:
    def __init__(self, config_path):
        self.config = ConfigLoader(config_path)

    def is_admin(self, user_id):
        # Security defect: uses eval on untrusted input
        admin_list = self.config.get_cached('admin_ids')
        expr = f""{user_id} in {admin_list}""
        return eval(expr)

    def get_user_profile(self, user_id):
        # Potential race condition: file may be modified between reads
        profile_path = f""/tmp/user_{user_id}.json""
        with open(profile_path, 'r') as f:
            return json.load(f)

# Example usage
service = UserService('/etc/app/config.json')
print(service.is_admin('123'))
",code_defect,unsafe_eval,,openai/gpt-oss-120b
Python,"import time

def process_user_data(data):
    user_data = []
    for item in data:
        if item.get('status') == 'active':
            name = item.get('name')
            email = item.get('email')
            user = {
                'username': name.split()[0].lower() + str(time.time()),
                'email': email,
                'timestamp': time.time()
            }
            user_data.append(user)
    return user_data

# Legacy code for older user formats
def create_usernames_legacy(data):
    users = []
    for entry in data:
        if entry['status'] == 'active':
            users.append(entry['name'].split()[0].lower() + str(time.time()))
    return users

# Uncomment if needed
# print(create_usernames_legacy([{'name': 'John Doe', 'status': 'active'}]))",code_smell,code_smell,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void printInfo() {
        std::cout << ""Name: "" << name << "", Age: "" << age << std::endl;
    }

private:
    std::string name;
    int age;
};

void printUsers(std::vector<User>& users) {
    for (int i = 0; i < users.size(); i++) {
        users[i].printInfo();
    }
}

int main() {
    std::vector<User> users;
    users.push_back(User(""John"", 30));
    users.push_back(User(""Alice"", 25));

    printUsers(users);

    return 0;
}
",code_smell,unused_imports,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserReportGenerator {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> generateReport(String startDate, String endDate) {
        List<String> reportLines = new ArrayList<>();
        String query = ""SELECT username, login_count FROM user_logins WHERE login_date >= '"" + startDate + ""' AND login_date <= '"" + endDate + ""'""; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                String line = rs.getString(""username"") + "": "" + rs.getInt(""login_count"");
                reportLines.add(line);
            }
        } catch (Exception e) {
            // Swallow exception, no logging
        }
        return reportLines;
    }

    public static void main(String[] args) {
        UserReportGenerator gen = new UserReportGenerator();
        List<String> report = gen.generateReport(""2023-01-01"", ""2023-12-31"");
        for (String line : report) {
            System.out.println(line);
        }
    }
}",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
Python,"import requests
import json

def fetch_user_data(user_id, token, url_base='https://api.example.com/v1/users/'):
    headers = {'Authorization': f'Bearer {token}'}
    response = requests.get(f'{url_base}{user_id}', headers=headers)
    if response.status_code == 200:
        return json.loads(response.text)
    return None


def update_user_profile(user_id, token, data):
    headers = {'Authorization': f'Bearer {token}'}
    url_base = 'https://api.example.com/v1/users/'
    response = requests.put(f'{url_base}{user_id}', json=data, headers=headers)
    if response.status_code == 200:
        return True
    return False


def process_user(token, user_id, data):
    user_data = fetch_user_data(user_id, token)
    if user_data:
        updated = update_user_profile(user_id, token, data)
        if updated:
            print('User profile updated successfully.')
        else:
            print('Failed to update user profile.')
    else:
        print('Failed to fetch user data.')",code_smell,hardcoded_dependency,,qwen/qwen3-32b
Java,public class UserService { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUser(int index) { return users.get(index); } public void removeUser(int index) { users.remove(index); } public List<User> getAllUsers() { return users; } },code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {
        // Load users from a data source (simulated)
        users = {""alice"", ""bob"", ""carol""};
    }

    // Returns the user name at the given index, or empty string if out of range
    std::string getUserAt(int index) const {
        // BUG: off-by-one error – should be index >= 0 && index < users.size()
        if (index > 0 && index <= static_cast<int>(users.size())) {
            return users[index];
        }
        return """";
    }

    // Adds a new user
    void addUser(const std::string& name) {
        users.push_back(name);
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""dave"");
    // Expect to retrieve the first user (""alice"")
    std::cout << ""User 0: "" << um.getUserAt(0) << std::endl; // prints empty due to bug
    // Retrieve last user correctly
    std::cout << ""User 4: "" << um.getUserAt(4) << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(String customerId, String productId, int quantity) {
        if (quantity <= 0) {
            System.out.println(""Invalid quantity"");
            return;
        }

        Product product = fetchProduct(productId);
        if (product == null) {
            System.out.println(""Product not found"");
            return;
        }

        Customer customer = fetchCustomer(customerId);
        if (customer == null) {
            System.out.println(""Customer not found"");
            return;
        }

        if (product.getStock() < quantity) {
            System.out.println(""Insufficient stock"");
            return;
        }

        product.setStock(product.getStock() - quantity);
        saveProduct(product);

        Order order = new Order();
        order.setCustomerId(customerId);
        order.setProductId(productId);
        order.setQuantity(quantity);
        order.setStatus(""PROCESSING"");
        saveOrder(order);
    }

    private Product fetchProduct(String productId) {
        // Simulated DB call
        return new Product(productId, ""Laptop"", 100);
    }

    private Customer fetchCustomer(String customerId) {
        // Simulated DB call
        return new Customer(customerId, ""John Doe"");
    }

    private void saveProduct(Product product) {
        // Simulated DB save
    }

    private void saveOrder(Order order) {
        // Simulated DB save
    }

    public static void main(String[] args) {
        OrderProcessor processor = new OrderProcessor();
        processor.processOrder(""C123"", ""P456"", 5);
    }
}

class Product {
    private String id;
    private String name;
    private int stock;

    public Product(String id, String name, int stock) {
        this.id = id;
        this.name = name;
        this.stock = stock;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getStock() {
        return stock;
    }

    public void setStock(int stock) {
        this.stock = stock;
    }
}

class Customer {
    private String id;
    private String name;

    public Customer(String id, String name) {
        this.id = id;
        this.name = name;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

class Order {
    private String customerId;
    private String productId;
    private int quantity;
    private String status;

    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public void setStatus(String status) {
        this.status = status;
    }
}",code_smell,large_function,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string n, int a) : name(n), age(a) {}

    bool operator<(const User& other) const {
        return age < other.age;
    }
};

void sortUsers(std::vector<User>& users) {
    std::sort(users.begin(), users.end());
}

void printUsers(const std::vector<User>& users) {
    for (const auto& user : users) {
        std::cout << user.name << "" is "" << user.age << "" years old."" << std::endl;
    }
}

int main() {
    std::vector<User> users = {User(""John"", 25), User(""Alice"", 30), User(""Bob"", 20)};
    sortUsers(users);
    printUsers(users);
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one bug
            int value = data[i] * 2; // may read out of bounds
            results_.push_back(value);
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& getResults() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(input); });
    t.join();
    for (int v : processor.getResults()) {
        std::cout << v << "" "";
    }
    std::cout << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users, secretKey) {
    this.users = users;
    this.secretKey = secretKey;
  }

  authenticateUser(email, password) {
    const user = this.users.find(u => u.email === email);

    if (!user) {
      return { success: false, message: 'User not found' };
    }

    if (user.password !== password) {
      return { success: false, message: 'Invalid password' };
    }

    return { success: true, token: this.generateToken(user.id) };
  }

  generateToken(userId) {
    return Buffer.from(`${userId}:${this.secretKey}`).toString('base64');
  }
}

const users = [
  { id: 1, email: 'user1@example.com', password: 'pass123' },
  { id: 2, email: 'user2@example.com', password: 'pass456' }
];

const auth = new UserAuth(users, 'my_secret_key');

// Example usage:
console.log(auth.authenticateUser('user1@example.com', 'pass123'));
console.log(auth.authenticateUser('user1@example.com', 'wrongpass'));",code_defect,insecure_authentication,,qwen/qwen3-32b
Python,"
class UserDatabase:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username in self.users:
            return False
        self.users[username] = password
        return True

    def authenticate(self, username, password):
        if username not in self.users:
            return False
        return self.users[username] == password

    def change_password(self, username, old_password, new_password):
        if username not in self.users or self.users[username] != old_password:
            return False
        self.users[username] = new_password
        return True

    def get_all_users(self):
        return list(self.users.keys())

db = UserDatabase()
db.add_user('admin', 'password123')
print(db.authenticate('admin', 'password123'))  # Should print: True
print(db.change_password('admin', 'password123', 'new_password'))  # Should print: True
print(db.authenticate('admin', 'new_password'))  # Should print: True
",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserReportGenerator {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> generateReport(int days) {
        List<String> report = new ArrayList<>();
        String query = ""SELECT username, last_login FROM users WHERE last_login >= DATE_SUB(NOW(), INTERVAL "" + days + "" DAY)"";
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                String line = rs.getString(""username"") + "": "" + rs.getTimestamp(""last_login"");
                report.add(line);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return report;
    }

    // Vulnerable method: directly concatenates user input into SQL
    public int countActiveUsers(String role) {
        String sql = ""SELECT COUNT(*) FROM users WHERE role = '"" + role + ""'""; // SQL injection risk
        int count = 0;
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            if (rs.next()) {
                count = rs.getInt(1);
            }
        } catch (Exception e) {
            // swallow exception silently
        }
        return count;
    }
}",code_defect,sql_injection,,openai/gpt-oss-120b
Python,"import requests
import json

def fetch_and_process_data(url, headers=None, params=None):
    if headers is None:
        headers = {}
    if params is None:
        params = {}

    response = requests.get(url, headers=headers, params=params)

    if response.status_code == 200:
        data = response.json()
        processed_data = []
        for item in data['items']:
            if 'name' in item and 'value' in item:
                processed_item = {
                    'id': item.get('id'),
                    'name': item['name'],
                    'value': item['value']
                }
                processed_data.append(processed_item)
        return processed_data
    else:
        return None

url = 'https://api.example.com/data'
headers = {'Authorization': 'Bearer 12345'}
result = fetch_and_process_data(url, headers)
print(json.dumps(result, indent=2))",code_smell,long_function,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private static final String DEFAULT_PASSWORD = ""password123""; public boolean authenticate(String username, String password) { if (username.equals(""admin"")) { return password.equals(DEFAULT_PASSWORD); } else { return password.length() > 5; } } }",code_defect,insecure_password_validation,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if username contains malicious input
            String query = ""SELECT role FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }

    public boolean isAdmin(String username) {
        List<String> roles = getUserRoles(username);
        return roles.contains(""ADMIN"");
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private final OrderService orderService;
    private final InventoryService inventoryService;
    private final EmailService emailService;

    public OrderProcessor(OrderService orderService, InventoryService inventoryService, EmailService emailService) {
        this.orderService = orderService;
        this.inventoryService = inventoryService;
        this.emailService = emailService;
    }

    public void processOrder(Order order) {
        if (order == null || order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (inventoryService.hasStock(item.getProductId(), item.getQuantity())) {
                inventoryService.deductStock(item.getProductId(), item.getQuantity());
            } else {
                // TODO: Handle out of stock
            }
        }

        orderService.saveOrder(order);
        emailService.sendEmail(order.getCustomerEmail(), ""Order Confirmation"", ""Your order has been processed."");
    }
}",code_smell,incomplete_list,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void setName(std::string name) { this->name = name; }
    void setAge(int age) { this->age = age; }

private:
    std::string name;
    int age;
};

class UserRepository {
public:
    void saveUser(User user) {
        users.push_back(user);
    }

    User getUserByName(std::string name) {
        for (User user : users) {
            if (user.getName() == name) {
                return user;
            }
        }
        // User not found, return a default user
        return User(""Unknown"", 0);
    }

private:
    std::vector<User> users;
};

int main() {
    UserRepository repository;
    User user(""John"", 30);
    repository.saveUser(user);

    User retrievedUser = repository.getUserByName(""John"");
    std::cout << retrievedUser.getName() << std::endl;
    std::cout << retrievedUser.getAge() << std::endl;

    return 0;
}
",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    """"""Loads configuration from a JSON file.
    """"""
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None

    def load(self):
        # Missing error handling if file does not exist or JSON is malformed
        with open(self.config_path, 'r') as f:
            self._config = json.load(f)
        logger.info(""Configuration loaded from %s"", self.config_path)
        return self._config

    def get(self, key, default=None):
        if self._config is None:
            self.load()
        return self._config.get(key, default)

class UserService:
    """"""Service for user operations.""""""
    def __init__(self, db_connection_string):
        self.db_conn_str = db_connection_string
        self._connect()

    def _connect(self):
        # Simulated insecure DB connection using string formatting (SQL injection risk)
        self.conn = f""DB_CONNECTION({self.db_conn_str})""
        logger.debug(""Connected to DB: %s"", self.conn)

    def get_user(self, user_id):
        # Directly interpolates user_id into query without sanitization
        query = f""SELECT * FROM users WHERE id = {user_id}""
        logger.debug(""Executing query: %s"", query)
        # Simulated DB fetch (returns dummy data)
        return {""id"": user_id, ""name"": ""John Doe""}

    def update_user_email(self, user_id, new_email):
        # Off-by-one error: uses wrong placeholder index
        query = ""UPDATE users SET email = %s WHERE id = %d"" % (new_email, user_id + 1)
        logger.debug(""Executing update: %s"", query)
        # Assume execution succeeds
        return True

def main():
    cfg = ConfigLoader('config.json')
    db_str = cfg.get('database_url')
    service = UserService(db_str)
    user = service.get_user(42)
    print(f""User fetched: {user}"")
    # Intentional bug: passing email without validation
    service.update_user_email(42, 'new_email@example.com')

if __name__ == ""__main__"":
    main()",code_defect,SQL_injection_and_off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(String userId, String productId, int quantity, boolean isPriority, String paymentMethod) {
        if (userId == null || productId == null || quantity <= 0) {
            throw new IllegalArgumentException(""Invalid order details"");
        }

        if (isPriority) {
            // Special handling for priority orders
            checkInventory(productId, quantity * 2);
        } else {
            checkInventory(productId, quantity);
        }

        if (""credit_card"".equals(paymentMethod)) {
            processCreditCardPayment(userId, quantity);
        } else if (""paypal"".equals(paymentMethod)) {
            processPayPalPayment(userId, quantity);
        } else {
            throw new UnsupportedOperationException(""Unsupported payment method: "" + paymentMethod);
        }

        confirmOrder(userId, productId, quantity);
    }

    private void checkInventory(String productId, int quantity) {
        // Simulated inventory check
        if (productId.equals(""low_stock_item"") && quantity > 5) {
            throw new RuntimeException(""Not enough stock for product: "" + productId);
        }
    }

    private void processCreditCardPayment(String userId, int quantity) {
        // Simulated payment processing
        System.out.println(""Processed credit card payment for user "" + userId);
    }

    private void processPayPalPayment(String userId, int quantity) {
        // Simulated payment processing
        System.out.println(""Processed PayPal payment for user "" + userId);
    }

    private void confirmOrder(String userId, String productId, int quantity) {
        // Simulated confirmation
        System.out.println(""Order confirmed for user "" + userId + "", product "" + productId + "", quantity "" + quantity);
    }
}",code_smell,long_function,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i]; // may read out of bounds
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1,2,3,4,5};
    std::thread t1([&](){ processor.process(numbers); });
    std::thread t2([&](){ processor.process(numbers); }); // concurrent access without synchronization -> data race on sums
    t1.join();
    t2.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << "" Odd sum: "" << processor.getOddSum() << std::endl;
    return 0;
}",code_defect,off_by_one_and_data_race,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>

class DataProcessor {
public:
    void process(const std::vector<int>& input) {
        std::thread worker([this, input] {
            for (size_t i = 0; i < input.size(); ++i) {
                results.push_back(input[i] * 2);
            }
        });

        worker.join();
    }

    void printResults() const {
        for (int val : results) {
            std::cout << val << "" "";
        }
        std::cout << std::endl;
    }

private:
    mutable std::vector<int> results;
};

int main() {
    DataProcessor processor;
    std::vector<int> input = {1, 2, 3, 4, 5};
    processor.process(input);
    processor.printResults();

    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, user_id, username, password):
        if user_id not in self.users:
            self.users[user_id] = {'username': username, 'password': password}
            with open(self.db_file, 'a') as f:
                f.write(f'{user_id}:{username}:{password}\n')

    def get_user(self, user_id):
        if user_id in self.users:
            return self.users[user_id]
        else:
            with open(self.db_file, 'r') as f:
                for line in f:
                    id, username, password = line.strip().split(':')
                    if id == user_id:
                        return {'username': username, 'password': password}
        return None

    def update_user(self, user_id, username, password):
        if user_id in self.users:
            self.users[user_id]['username'] = username
            self.users[user_id]['password'] = password
            with open(self.db_file, 'r') as f:
                lines = f.readlines()
            with open(self.db_file, 'w') as f:
                for line in lines:
                    id, user, passw = line.strip().split(':')
                    if id == user_id:
                        f.write(f'{id}:{username}:{password}\n')
                    else:
                        f.write(line)
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserCache:
    """"""Simple in‑memory cache for user records fetched from the DB.""""""
    def __init__(self, db_path: str):
        self._db_path = db_path
        self._cache = {}
        self._conn = sqlite3.connect(self._db_path)
        self._conn.row_factory = sqlite3.Row

    def get_user(self, user_id: int) -> dict:
        # Return cached copy if present
        if user_id in self._cache:
            return self._cache[user_id]
        # Otherwise fetch from DB
        cur = self._conn.cursor()
        cur.execute(""SELECT * FROM users WHERE id = ?"", (user_id,))
        row = cur.fetchone()
        if row is None:
            raise ValueError(f""User {user_id} not found"")
        user = dict(row)
        self._cache[user_id] = user
        return user

    def invalidate(self, user_id: int) -> None:
        self._cache.pop(user_id, None)

    def close(self) -> None:
        self._conn.close()

def load_config(config_path: str) -> dict:
    # NOTE: This function trusts the JSON file content without validation
    with open(config_path, ""r"") as f:
        return json.load(f)

def main():
    cfg = load_config(""config.json"")
    cache = UserCache(cfg[""db_path""])
    # Process a batch of user IDs supplied via environment variable
    ids = os.getenv(""USER_IDS"", """").split("","")
    for uid_str in ids:
        if not uid_str:
            continue
        uid = int(uid_str)
        user = cache.get_user(uid)
        print(f""User {uid}: {user['name']} ({user['email']})"")
    cache.close()

if __name__ == ""__main__"":
    main()
",code_defect,unvalidated JSON config leads to potential code injection,,openai/gpt-oss-120b
Java,"public class ReportGenerator {
    private List<String> data;

    public ReportGenerator(List<String> data) {
        this.data = data;
    }

    public String generateReport() {
        StringBuilder report = new StringBuilder();
        report.append(""Report:"").append(""\n"");
        for (int i = 0; i < data.size(); i++) {
            String entry = data.get(i);
            if (entry != null && !entry.isEmpty()) {
                report.append(""Item "").append(i + 1).append("": "").append(entry).append(""\n"");
            }
        }
        return report.toString();
    }

    public void saveReportToFile(String filePath) {
        try {
            Files.write(Paths.get(filePath), generateReport().getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(paymentGateway) {
         this.paymentGateway = paymentGateway;
      }

      processPayment(amount, currency) {
         if (this.paymentGateway === 'paypal') {
            // Simulate a delay for PayPal processing
            setTimeout(() => {
               console.log(`Payment of ${amount} ${currency} processed through PayPal`);
            }, 2000);
         } else if (this.paymentGateway === 'stripe') {
            console.log(`Payment of ${amount} ${currency} processed through Stripe`);
         }
      }
   }

   const paymentProcessor = new PaymentProcessor('paypal');
   paymentProcessor.processPayment(100, 'USD');
   paymentProcessor.processPayment(50, 'EUR');
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<User> getActiveUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""SELECT id, username, email FROM users WHERE active = 1"";
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            while (rs.next()) {
                User u = new User();
                u.setId(rs.getInt(""id""));
                u.setUsername(rs.getString(""username""));
                u.setEmail(rs.getString(""email""));
                users.add(u);
            }
        } finally {
            // Missing close for ResultSet and PreparedStatement, potential resource leak
            if (conn != null) {
                conn.close();
            }
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}
",code_defect,resource_leak_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class UserAuthentication {
    private String currentUser;

    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        if (username.equals(""admin"") && password.equals(""123456"")) {
            currentUser = username;
            return true;
        }

        return false;
    }

    public String getCurrentUser() {
        return currentUser;
    }

    public void logout() {
        currentUser = null;
    }

    // TODO: Add more authentication providers
    // TODO: Store credentials securely
}",code_smell,hardcoded_credentials,,qwen/qwen3-32b
JavaScript,"
      class ShoppingCart {
         constructor() {
            this.items = [];
         }

         addItem(item) {
            this.items.push(item);
         }

         removeItem(itemName) {
            for (let i = 0; i < this.items.length; i++) {
               if (this.items[i].name === itemName) {
                  this.items.splice(i, 1);
                  break;
               }
            }
         }

         calculateTotal() {
            let total = 0;
            for (let item of this.items) {
               total += item.price;
            }
            return total;
         }
      }

      class Product {
         constructor(name, price) {
            this.name = name;
            this.price = price;
         }
      }

      let cart = new ShoppingCart();
      cart.addItem(new Product('Product A', 10.99));
      cart.addItem(new Product('Product B', 5.99));
      console.log(cart.calculateTotal());
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
    constructor(pageSize) {
        this.pageSize = pageSize || 10;
        this.currentPage = 0;
    }

    setData(items) {
        this.items = items || [];
    }

    getPage(pageNumber) {
        // Off‑by‑one bug: pageNumber is 1‑based but calculation uses 0‑based index
        const start = (pageNumber - 1) * this.pageSize;
        const end = start + this.pageSize;
        return this.items.slice(start, end);
    }

    next() {
        if ((this.currentPage + 1) * this.pageSize < this.items.length) {
            this.currentPage++;
        }
        return this.getPage(this.currentPage);
    }

    prev() {
        if (this.currentPage > 0) {
            this.currentPage--;
        }
        return this.getPage(this.currentPage);
    }
}

// Example usage
const paginator = new Paginator(5);
paginator.setData([1,2,3,4,5,6,7,8,9,10,11]);
console.log('Page 1:', paginator.getPage(1)); // Expected [1,2,3,4,5] but gets [] due to bug
console.log('Next page:', paginator.next()); // Returns wrong slice
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  processUser(user) {
    if (!user) return;

    const cleanedUser = this._cleanUser(user);
    const normalizedUser = this._normalizeUser(cleanedUser);
    const validatedUser = this._validateUser(normalizedUser);

    this._storeUser(validatedUser);
    this._logUser(validatedUser);
    this._notifyUser(validatedUser);
  }

  _cleanUser(user) {
    return {
      id: user.id,
      name: user.name.trim(),
      email: user.email.toLowerCase().trim()
    };
  }

  _normalizeUser(user) {
    return {
      ...user,
      status: user.status || 'active',
      created: user.created || new Date().toISOString()
    };
  }

  _validateUser(user) {
    if (!user.name || !user.email) {
      throw new Error('User must have a name and email');
    }

    return user;
  }

  _storeUser(user) {
    // Simulated storage logic
    console.log('Storing user:', user);
  }

  _logUser(user) {
    // Simulated logging logic
    console.log('Logging user:', user);
  }

  _notifyUser(user) {
    // Simulated notification logic
    console.log('Notifying user:', user);
  }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i] * 2;
            results_.push_back(value);
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& getResults() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1,2,3,4,5};
    std::thread t([&](){ processor.process(input); });
    t.join();
    for (int v : processor.getResults()) {
        std::cout << v << "" "";
    }
    std::cout << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json

class ConfigManager:
    def __init__(self, config_file='config.json'):
        self.config_file = config_file
        self.config = self._load_config()

    def _load_config(self):
        if os.path.exists(self.config_file):
            with open(self.config_file, 'r') as f:
                return json.load(f)
        return {}

    def get_config_value(self, key):
        return self.config.get(key)

    def update_config(self, key, value):
        self.config[key] = value
        with open(self.config_file, 'w') as f:
            json.dump(self.config, f)

    def reset_config(self):
        os.remove(self.config_file)
        self.config = self._load_config()

    def __del__(self):
        self.update_config('__last_modified__', 'manual')",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
      class UserManager {
         constructor() {
            this.users = [];
         }

         addUser(user) {
            this.users.push(user);
            return this.users.length - 1;
         }

         removeUser(userId) {
            const index = this.users.findIndex(user => user.id === userId);
            if (index !== -1) {
               this.users.splice(index, 1);
            }
         }

         getUserCount() {
            return this.users.length;
         }
      }

      const userManager = new UserManager();
      userManager.addUser({ id: 1, name: 'John Doe' });
      userManager.addUser({ id: 2, name: 'Jane Doe' });
      console.log(userManager.getUserCount());
   ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    // Loads JSON config file; caches result for subsequent calls
    load() {
        if (this.cache) return this.cache;
        const data = fs.readFileSync(this.path, 'utf8');
        // BUG: JSON.parse can throw, but not caught – leads to uncaught exception
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function getDatabaseConnection() {
    const cfg = new ConfigLoader('./db_config.json').load();
    // Insecure: directly interpolating credentials into connection string
    const connStr = `postgres://${cfg.user}:${cfg.password}@${cfg.host}:${cfg.port}/${cfg.database}`;
    // Simulated connection object (placeholder)
    return { connectionString: connStr };
}

async function fetchUserData(userId) {
    const db = getDatabaseConnection();
    // BUG: SQL injection vulnerability – userId is concatenated without sanitization
    const query = `SELECT * FROM users WHERE id = ${userId}`;
    // Simulated async DB call
    return new Promise((resolve) => {
        setTimeout(() => resolve({ id: userId, name: 'John Doe' }), 100);
    });
}

module.exports = { ConfigLoader, getDatabaseConnection, fetchUserData };",code_defect,unhandled_exception_and_sql_injection,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    public void processUser(User user) {
        if (user == null) {
            return;
        }

        String username = user.getUsername();
        String email = user.getEmail();
        String role = user.getRole();

        if (role.equals(""ADMIN"")) {
            sendEmail(email, ""Welcome, Admin! Your access has been granted."");
        } else if (role.equals(""MODERATOR"")) {
            sendEmail(email, ""Welcome, Moderator! Your access has been granted."");
        } else {
            sendEmail(email, ""Welcome, User! Your access has been granted."");
        }

        if (username.length() > 20) {
            System.out.println(""Username is too long: "" + username);
        }

        // TODO: Implement password validation
        // setPassword(user, generatePassword());
    }

    private void sendEmail(String email, String message) {
        // Simulated email sending logic
        System.out.println(""Sending email to: "" + email);
        System.out.println(""Message: "" + message);
    }
}",code_smell,long_method,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
        else:
            self.users[user_id].update(user_data)

    def get_user(self, user_id):
        return self.users.get(user_id)

    def save_to_db(self):
        import pickle
        with open(self.db_file, 'wb') as f:
            pickle.dump(self.users, f)

    def load_from_db(self):
        import pickle
        try:
            with open(self.db_file, 'rb') as f:
                self.users = pickle.load(f)
        except FileNotFoundError:
            pass

# usage
user_db = UserDatabase('users.db')
user_db.add_user('user1', {'name': 'John', 'age': 30})
user_db.save_to_db()
user_db.load_from_db()
print(user_db.get_user('user1'))",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Bug: if tasks was empty, task remains 0 and is processed erroneously
            process(task);
        }
    }
    void process(int value) {
        // Simulate work
        std::cout << ""Processing: "" << value << std::endl;
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    dp.addTask(42);
    dp.addTask(7);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}
",code_defect,logic_error_processing_empty_queue,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  addUser(user) {
    this.users.push(user);
  }

  removeUser(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        this.users.splice(i, 1);
        return;
      }
    }
  }

  getUserCount() {
    return this.users.length;
  }

  getAllUsers() {
    return this.users;
  }

  getUserRoles(email) {
    const user = this.getUserByEmail(email);
    return user ? user.roles : [];
  }

  hasRole(email, role) {
    const user = this.getUserByEmail(email);
    return user.roles.includes(role);
  }
}

const userManager = new UserManager();
userManager.addUser({ email: 'alice@example.com', roles: ['admin'] });
userManager.addUser({ email: 'bob@example.com', roles: ['user'] });",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final int MAX_RETRIES = 5; public boolean processPayment(String paymentMethod, double amount) { for (int i = 0; i <= MAX_RETRIES; i++) { try { if (processPaymentInternal(paymentMethod, amount)) { return true; } } catch (Exception e) { System.out.println(""Retrying...""); } } return false; } private boolean processPaymentInternal(String paymentMethod, double amount) { // simulate payment processing delay Thread.sleep(100); return Math.random() < 0.8; } }",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<User> findUsersByRole(String role) throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        // Vulnerable to SQL injection because role is concatenated directly
        String sql = ""SELECT id, username, email FROM users WHERE role = '"" + role + ""'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            User user = new User();
            user.setId(rs.getInt(""id""));
            user.setUsername(rs.getString(""username""));
            user.setEmail(rs.getString(""email""));
            users.add(user);
        }
        rs.close();
        stmt.close();
        conn.close();
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Python,"import os
import json

def load_config(path):
    with open(path, 'r') as f:
        config = json.load(f)
    return config

def process_data(data):
    results = []
    for item in data:
        cleaned_item = item.strip()
        if len(cleaned_item) > 0:
            results.append(cleaned_item.upper())
    return results

def main():
    config = load_config('config.json')
    raw_data_path = config['input_path']

    with open(raw_data_path, 'r') as f:
        raw_data = f.readlines()

    processed_data = process_data(raw_data)

    output_path = config['output_path']
    with open(output_path, 'w') as f:
        for line in processed_data:
            f.write(line + '\n')

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class UserManager { constructor() { this.users = []; } addUser(user) { if (this.users.push(user) === 1) { console.log('User added successfully'); } } removeUser(userId) { for (let i = 0; i < this.users.length; i++) { if (this.users[i].id === userId) { this.users.splice(i, 1); console.log('User removed successfully'); break; } } } }",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Missing error handling – if file is missing or malformed, JSON.parse will throw and crash the process
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) {
      this.load();
    }
    // Returns undefined silently if key does not exist – caller may assume a value
    return this.cache[key];
  }
}

// Global singleton used throughout the app
const config = new ConfigLoader('/etc/app/config.json');

function initializeService() {
  const port = config.get('servicePort');
  // If servicePort is undefined, server will listen on undefined causing runtime error
  const server = require('http').createServer((req, res) => {
    res.end('OK');
  });
  server.listen(port);
  console.log(`Service started on port ${port}`);
}

initializeService();",code_defect,missing_error_handling,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUserInput(String input) {
        String processedInput = input.trim().toLowerCase();
        if (processedInput.equals(""admin"")) {
            System.out.println(""Access granted."");
        } else {
            System.out.println(""Access denied."");
        }
    }

    public static void main(String[] args) {
        UserProcessor processor = new UserProcessor();
        processor.processUserInput(""Admin"");
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAccountManager { private Map<String, String> userAccounts = new HashMap<>(); public void addUser(String username, String password) { userAccounts.put(username, password); } public boolean authenticateUser(String username, String password) { String storedPassword = userAccounts.get(username); if (storedPassword != null && storedPassword.equals(password)) { return true; } return false; } public static void main(String[] args) { UserAccountManager manager = new UserAccountManager(); manager.addUser(""john"", ""password123""); System.out.println(manager.authenticateUser(""john"", ""password123"")); } }",code_smell,insecure_password_storage,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user data and writes a report to a file
  async generateUserReport(userId) {
    const user = await this.db.getUserById(userId);
    const orders = await this.db.getOrdersByUserId(userId);
    const report = this._buildReport(user, orders);
    // BUG: Asynchronous write without awaiting, may cause race condition on shutdown
    fs.writeFile('reports/' + userId + '.txt', report, (err) => {
      if (err) console.error('Failed to write report', err);
    });
    return report;
  }

  _buildReport(user, orders) {
    let lines = [];
    lines.push('User Report');
    lines.push('Name: ' + user.name);
    lines.push('Email: ' + user.email);
    lines.push('Orders:');
    // Inefficient loop: concatenates strings inside loop
    for (let i = 0; i < orders.length; i++) {
      lines.push('- Order #' + orders[i].id + ': $' + orders[i].total);
    }
    return lines.join('\n');
  }
}

module.exports = UserService;",code_defect,async_write_without_await_race_condition,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private String databasePassword = ""mySecret123"";

    public void processOrder(String userId, String productId, int quantity) {
        if (quantity <= 0) {
            return;
        }

        try {
            String query = ""SELECT * FROM orders WHERE user_id = '"" + userId + ""' AND product_id = '"" + productId + ""'"";
            // Simulating database connection and query execution
            System.out.println(""Executing query: "" + query);
            if (userId.equals(""admin"")) {
                throw new Exception(""Simulated database error"");
            }
        } catch (Exception e) {
            // Swallowing exception silently
        }
    }
}",code_defect,security_issue,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>

   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };

   class UserRepository {
   public:
       void addUser(User user) { users.push_back(user); }
       User getUser(int index) { return users[index]; }
   private:
       std::vector<User> users;
   };

   int main() {
       UserRepository repo;
       repo.addUser(User(""John"", 30));
       std::cout << repo.getUser(0).getName() << std::endl;
       return 0;
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void deleteAllUsers() {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Dangerous: no WHERE clause, deletes everything
            stmt.executeUpdate(""DELETE FROM users"");
        } catch (Exception e) {
            // Ignored
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,unsafe_sql_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

using namespace std;

class UserProcessor {
public:
    void processUsers(const vector<string>& users) {
        for (const auto& user : users) {
            cout << ""Processing user: "" << user << endl;
            if (user == ""admin"") {
                cout << ""Skipping admin user."" << endl;
                continue;
            }
            string processedUser = user;
            // Legacy code removed
            // processedUser = cleanInput(processedUser);
            processedUser += ""_processed"";
            cout << ""Processed user: "" << processedUser << endl;
        }
    }

private:
    string cleanInput(const string& input) {
        // Simulated input cleaning logic
        return input;
    }
};

int main() {
    UserProcessor processor;
    vector<string> users = {""alice"", ""bob"", ""admin"", ""charlie""};
    processor.processUsers(users);
    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userDao) {
         this.userDao = userDao;
      }

      async getUsers() {
         const users = await this.userDao.getAllUsers();
         return users.map(user => ({ id: user.id, name: user.name }));
      }

      async getUserById(id) {
         const user = await this.userDao.getUserById(id);
         if (!user) {
            throw new Error('User not found');
         }
         return { id: user.id, name: user.name };
      }
   }

   class UserDao {
      async getAllUsers() {
         // simulate database query
         return [
            { id: 1, name: 'John Doe' },
            { id: 2, name: 'Jane Doe' },
            { id: 3, name: 'Bob Smith' }
         ];
      }

      async getUserById(id) {
         // simulate database query
         const users = await this.getAllUsers();
         return users.find(user => user.id === id);
      }
   }

   const userDao = new UserDao();
   const userService = new UserService(userDao);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""admin123""; // hardcoded credentials

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        // Missing rs.close(), stmt.close(), conn.close()
        return payments;
    }

    public void processPayments() {
        try {
            List<String> pending = getPendingPayments(100);
            for (String pid : pending) {
                // Simulate processing
                updatePaymentStatus(pid, ""COMPLETED"");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updatePaymentStatus(String paymentId, String newStatus) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""UPDATE payments SET status = ? WHERE payment_id = ?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, newStatus);
            stmt.setString(2, paymentId);
            stmt.executeUpdate();
            // Missing stmt.close(), conn.close()
        } catch (SQLException e) {
            // Swallow exception, no handling
        }
    }
}
",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processUserInput(const std::vector<int>& input) {
    std::vector<int> processed;
    for (size_t i = 0; i < input.size(); ++i) {
        int temp = input[i];
        for (size_t j = 0; j < input.size(); ++j) {
            if (i != j) {
                temp += input[j];
            }
        }
        processed.push_back(temp);
    }

    for (int val : processed) {
        std::cout << val << "" "";
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4};
    processUserInput(data);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private static final String DEFAULT_PASSWORD = ""password123""; public boolean authenticate(String username, String password) { if (username.equals(""admin"")) { return password.equals(DEFAULT_PASSWORD); } else { return password.equals(username); } } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Simulate processing
            std::cout << ""Processing: "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 0; i < 5; ++i) dp.addTask(i);
    // Missing dp.stop(); leads to thread running forever
    return 0;
}
",code_defect,resource_leak_thread_not_joined,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input, std::vector<int>& output) {
    std::string temp = input;
    for (size_t i = 0; i < temp.length(); ++i) {
        if (temp[i] == ' ') {
            temp.erase(i);
            --i;
        }
    }

    for (size_t i = 0; i < temp.length(); ++i) {
        if (isdigit(temp[i])) {
            output.push_back(temp[i] - '0');
        }
    }
}

int main() {
    std::string input = "" 12a34b56 "";
    std::vector<int> numbers;
    processUserInput(input, numbers);

    std::cout << ""Processed numbers: "";
    for (int num : numbers) {
        std::cout << num << ' ';
    }
    std::cout << std::endl;

    return 0;
}",code_defect,incorrect_conditional_logic,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getUser(id) {
            const user = await this.userRepository.getUser(id);
            if (!user) {
               throw new Error('User not found');
            }
            return user;
         }

         async getUsers() {
            return await this.userRepository.getUsers();
         }

         async createUser(user) {
            if (!user || !user.name || !user.email) {
               throw new Error('Invalid user data');
            }
            return await this.userRepository.createUser(user);
         }
      }

      class UserRepository {
         async getUser(id) {
            // simulate a database query
            return new Promise((resolve) => {
               setTimeout(() => {
                  resolve({ id: 1, name: 'John Doe', email: 'john@example.com' });
               }, 100);
            });
         }

         async getUsers() {
            // simulate a database query
            return new Promise((resolve) => {
               setTimeout(() => {
                  resolve([
                     { id: 1, name: 'John Doe', email: 'john@example.com' },
                     { id: 2, name: 'Jane Doe', email: 'jane@example.com' }
                  ]);
               }, 100);
            });
         }

         async createUser(user) {
            // simulate a database query
            return new Promise((resolve) => {
               setTimeout(() => {
                  resolve(user);
               }, 100);
            });
         }
      }

      const userRepository = new UserRepository();
      const userService = new UserService(userRepository);
      userService.createUser({ name: 'Test User', email: 'test@example.com' }).then((user) => console.log(user));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user data and writes a report file
  async generateUserReport(userId) {
    // Potential race condition: no lock when reading and writing
    const user = await this.db.getUserById(userId);
    const orders = await this.db.getOrdersForUser(userId);
    const report = this._buildReport(user, orders);
    // Insecure: directly using user-provided filename without sanitization
    const filename = `${user.username}_report.txt`;
    fs.writeFileSync('/var/reports/' + filename, report);
    return filename;
  }

  _buildReport(user, orders) {
    let report = `Report for ${user.name}\n`;
    report += 'Orders:\n';
    // Inefficient loop: concatenating strings in a loop
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      report += `- ${order.id}: $${order.amount}\n`;
    }
    return report;
  }
}

module.exports = UserService;",code_defect,insecure_file_write_and_race_condition,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class DataProcessor {
public:
    void process(const vector<string>& input) {
        for (const auto& line : input) {
            if (line.length() > 100) {
                cout << ""Skipping line: "" << line << endl;
            } else {
                processLine(line);
            }
        }
    }

private:
    void processLine(const string& line) {
        // Do some processing
        if (line.empty()) {
            return;
        }

        for (char c : line) {
            if (isalpha(c)) {
                cout << c << endl;
            }
        }
    }
};

int main() {
    vector<string> data = {""Valid line 1"", ""a""};
    DataProcessor processor;
    processor.process(data);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <algorithm>

      class Employee {
      public:
         Employee(std::string name, int salary) : name(name), salary(salary) {}

         std::string getName() { return name; }
         int getSalary() { return salary; }

      private:
         std::string name;
         int salary;
      };

      void sortEmployees(std::vector<Employee>& employees) {
         std::sort(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
            return a.getSalary() < b.getSalary();
         });
      }

      int main() {
         std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
         sortEmployees(employees);

         for (const auto& employee : employees) {
            std::cout << employee.getName() << "" - "" << employee.getSalary() << std::endl;
         }

         return 0;
      }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserCache {
  constructor(filePath) {
    this.filePath = filePath;
    this.cache = {};
    this.load();
  }

  load() {
    const data = fs.readFileSync(this.filePath, 'utf8');
    // Assume file contains JSON object mapping userId to user data
    this.cache = JSON.parse(data);
  }

  getUser(id) {
    // Missing check for undefined leads to crash when id not present
    return this.cache[id];
  }

  updateUser(id, userData) {
    this.cache[id] = userData;
    // Asynchronously write but not waiting for completion; possible race condition
    fs.writeFile(this.filePath, JSON.stringify(this.cache), (err) => {
      if (err) console.error('Failed to write cache');
    });
  }
}

// Global singleton used across modules
const userCache = new UserCache('/etc/app/users.json');

function handleRequest(req, res) {
  const userId = req.query.id;
  const user = userCache.getUser(userId);
  if (!user) {
    res.status(404).send('User not found');
    return;
  }
  // Perform some operation that may throw
  try {
    const result = performSensitiveOperation(user);
    res.send(result);
  } catch (e) {
    // Swallowing error, client gets no indication
    console.error(e);
    res.status(500).end();
  }
}

function performSensitiveOperation(user) {
  // Vulnerable to prototype pollution via user.role
  if (user.role === 'admin') {
    return execSync('rm -rf /important/data'); // Dangerous command execution
  }
  return 'Operation completed';
}

module.exports = { handleRequest, userCache };",code_defect,security_risk,,openai/gpt-oss-120b
Python,"import os
import subprocess

def execute_shell_command(command):
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    
    if process.returncode != 0:
        print(f""Error: {stderr.decode('utf-8')}"")
    else:
        print(stdout.decode('utf-8'))

    return stdout


def main():
    user_input = input(""Enter a command to execute: "")
    execute_shell_command(user_input)

if __name__ == ""__main__"":
    main()",code_defect,command_injection,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>

class BankAccount {
private:
    double balance;
public:
    BankAccount(double initialBalance) : balance(initialBalance) {}
    void deposit(double amount) { balance += amount; }
    void withdraw(double amount) { balance -= amount; }
    double getBalance() { return balance; }
};

int main() {
    BankAccount account(1000.0);
    account.deposit(500.0);
    std::cout << ""Balance: "" << account.getBalance() << std::endl;
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<Transaction> fetchPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction t = new Transaction();
            t.setId(rs.getInt(""id""));
            t.setAmount(rs.getDouble(""amount""));
            t.setStatus(rs.getString(""status""));
            list.add(t);
        }
        rs.close();
        stmt.close();
        conn.close();
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = fetchPendingTransactions();
            for (Transaction tx : pending) {
                // Simulate processing
                if (tx.getAmount() < 0) {
                    // Negative amount should be rejected, but logic mistakenly credits the account
                    creditAccount(tx.getId(), Math.abs(tx.getAmount()));
                } else {
                    debitAccount(tx.getId(), tx.getAmount());
                }
                updateStatus(tx.getId(), ""COMPLETED"");
            }
        } catch (SQLException e) {
            // Swallow exception, no logging
        }
    }

    private void debitAccount(int txId, double amount) {
        // Placeholder for debit logic
    }

    private void creditAccount(int txId, double amount) {
        // Placeholder for credit logic
    }

    private void updateStatus(int txId, String status) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""UPDATE transactions SET status='"" + status + ""' WHERE id="" + txId; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        stmt.close();
        conn.close();
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,logic_error_and_security_flaw,,openai/gpt-oss-120b
JavaScript,"function processOrders(orders) {
  let results = [];
  for (let i = 0; i < orders.length; i++) {
    let order = orders[i];
    let status = '';
    if (order.total > 100) {
      status = 'premium';
    } else {
      status = 'standard';
    }

    let processedOrder = {
      id: order.id,
      items: order.items,
      total: order.total,
      status: status
    };
    results.push(processedOrder);
  }
  return results;
}

// Unused function
function calculateDiscount(price) {
  return price * 0.9;
}

// Legacy commented-out code
// function sendNotification(message) {
//   console.log(message);
// }",code_smell,dead_code,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, user_data):
        query = ""UPDATE users SET name = '"" + user_data['name'] + ""', email = '"" + user_data['email'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()
",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void process() {
        while (!stopFlag) {
            std::string msg;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    msg = queue.back(); // BUG: should use front()
                    queue.pop_back();
                }
            }
            if (!msg.empty()) {
                // Simulate heavy processing
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                std::cout << ""Processed: "" << msg << std::endl;
            }
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(""msg"" + std::to_string(i));
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    lp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
JavaScript,"class UserValidator {
  constructor(userData) {
    this.userData = userData;
  }

  validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  validatePassword(password) {
    return password.length >= 8;
  }

  validateUserData() {
    if (!this.validateEmail(this.userData.email)) {
      return 'Invalid email';
    }

    if (!this.validatePassword(this.userData.password)) {
      return 'Password must be at least 8 characters';
    }

    if (!this.userData.firstName || !this.userData.lastName) {
      return 'First and last names are required';
    }

    return 'Valid';
  }
}

const user = new UserValidator({
  email: 'test@example.com',
  password: '12345678',
  firstName: 'John',
  lastName: 'Doe'
});

console.log(user.validateUserData());",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void setName(std::string name) { this->name = name; }
    void setAge(int age) { this->age = age; }

private:
    std::string name;
    int age;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) {
        employees.push_back(employee);
    }

    Employee getOldestEmployee() {
        if (employees.empty()) {
            return Employee("""", 0);
        }

        Employee oldest = employees[0];
        for (int i = 1; i < employees.size(); i++) {
            if (employees[i].getAge() > oldest.getAge()) {
                oldest = employees[i];
            }
        }
        return oldest;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 30));
    manager.addEmployee(Employee(""Alice"", 25));
    manager.addEmployee(Employee(""Bob"", 40));

    Employee oldest = manager.getOldestEmployee();
    std::cout << ""Oldest Employee: "" << oldest.getName() << std::endl;
    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a report to a file
    generateUserReport(userId) {
        // Fetch user
        const user = this.db.query(`SELECT * FROM users WHERE id = ${userId}`);
        // Fetch orders (inefficient: separate query per order)
        const orders = [];
        for (let i = 0; i < user.orderIds.length; i++) {
            const order = this.db.query(`SELECT * FROM orders WHERE id = ${user.orderIds[i]}`);
            orders.push(order);
        }
        // Build report string
        let report = `Report for ${user.name}\n`;
        for (let i = 0; i < orders.length; i++) {
            report += `Order ${i + 1}: ${orders[i].total}\n`;
        }
        // Write to file (hardcoded path, no error handling)
        fs.writeFileSync('/var/reports/user_report.txt', report);
        return report;
    }
}

module.exports = UserService;",code_smell,inefficient_queries_and_hardcoded_path,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrders(List<Order> orders) {
        for (Order order : orders) {
            if (order != null && order.getStatus() == OrderStatus.PENDING) {
                double total = 0;
                for (OrderItem item : order.getItems()) {
                    if (item != null) {
                        total += item.getPrice() * item.getQuantity();
                    }
                }
                if (total > 0) {
                    applyDiscount(order, total);
                    updateInventory(order);
                    sendConfirmationEmail(order);
                }
            }
        }
    }

    private void applyDiscount(Order order, double total) {
        // hardcoded discount without validation or configuration
        double discountedTotal = total * 0.9;
        order.setTotal(discountedTotal);
    }

    private void updateInventory(Order order) {
        for (OrderItem item : order.getItems()) {
            Item inventoryItem = getItemFromInventory(item.getItemId());
            if (inventoryItem != null) {
                inventoryItem.setStock(inventoryItem.getStock() - item.getQuantity());
            }
        }
    }

    private void sendConfirmationEmail(Order order) {
        // stub for email sending logic
    }

    private Item getItemFromInventory(String itemId) {
        // stub for fetching item from inventory
        return new Item();
    }
}",code_smell,feature envy,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.connection = None
    
    def connect(self):
        import sqlite3
        self.connection = sqlite3.connect(self.db_file)
    
    def get_user(self, user_id):
        if self.connection is None:
            self.connect()
        cursor = self.connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
        return cursor.fetchone()
    
    def update_user(self, user_id, new_data):
        if self.connection is None:
            self.connect()
        cursor = self.connection.cursor()
        cursor.execute('UPDATE users SET name = ?, email = ? WHERE id = ?', (new_data['name'], new_data['email'], user_id))
        self.connection.commit()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void startProcessing() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stopProcessing() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addData(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        dataQueue.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int value = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!dataQueue.empty()) {
                    value = dataQueue.back(); // BUG: should pop_front, but uses back without removal
                }
            }
            // Simulate processing
            std::cout << ""Processing: "" << value << std::endl;
            std::this_thread::sleep_for(std::chrono::milliseconds(10));
        }
    }
    std::vector<int> dataQueue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor proc;
    proc.startProcessing();
    for (int i = 0; i < 5; ++i) {
        proc.addData(i);
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    proc.stopProcessing();
    return 0;
}
",code_defect,logic_error_deadlock,,openai/gpt-oss-120b
Python,"import os
import json

def load_config(config_path):
    with open(config_path, 'r') as f:
        config = json.load(f)
    return config

def process_user_data(user_data):
    if 'username' not in user_data:
        return None
    if user_data['username'].startswith('admin'):
        user_data['role'] = 'admin'
    elif user_data['username'].startswith('guest'):
        user_data['role'] = 'guest'
    else:
        user_data['role'] = 'user'
    return user_data

def main():
    config = load_config('config.json')
    user_data = {
        'username': os.environ.get('USER_NAME', 'default_user')
    }
    processed_data = process_user_data(user_data)
    print(processed_data)

if __name__ == '__main__':
    main()",code_defect,missing_error_handling,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor() {
         this.users = [];
      }

      async addUser(user) {
         this.users.push(user);
         return this.users;
      }

      async getUsers() {
         return this.users;
      }
   }

   class UserController {
      constructor(userService) {
         this.userService = userService;
      }

      async handleGetUsers(req, res) {
         const users = await this.userService.getUsers();
         res.json(users);
      }

      async handleAddUser(req, res) {
         const user = req.body;
         const users = await this.userService.addUser(user);
         res.json(users);
      }
   }

   const userService = new UserService();
   const userController = new UserController(userService);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception, return partial results
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,hardcoded_credentials_and_sql_injection_vulnerability,,openai/gpt-oss-120b
Python,"import requests

class DataProcessor:
    def __init__(self):
        self.base_url = 'https://api.example.com/data'
        self.auth_token = 'mysecretpassword123'

    def fetch_and_process_data(self, user_id, limit=100):
        headers = {'Authorization': f'Bearer {self.auth_token}'}
        params = {'user_id': user_id, 'limit': limit}
        response = requests.get(self.base_url, headers=headers, params=params)
        data = response.json()

        processed = []
        for item in data:
            processed_item = {
                'id': item['id'],
                'name': item['name'],
                'score': item.get('score', 0) * 1.5
            }
            processed.append(processed_item)

        return processed

    def batch_process_users(self, user_ids):
        results = []
        for user_id in user_ids:
            res = self.fetch_and_process_data(user_id)
            results.extend(res)
        return results",code_smell,hardcoded_credential,,qwen/qwen3-32b
Java,"public class UserProcessor { private static final int MAX_USERS = 1000; public void processUsers(List<User> users) { for (int i = 0; i < users.size(); i++) { User user = users.get(i); if (user.isActive()) { // Perform some action System.out.println(user.getName()); } } } public static void main(String[] args) { UserProcessor processor = new UserProcessor(); List<User> users = new ArrayList<>(); for (int i = 0; i < MAX_USERS; i++) { users.add(new User(""User "" + i, true)); } processor.processUsers(users); } } class User { private String name; private boolean active; public User(String name, boolean active) { this.name = name; this.active = active; } public String getName() { return name; } public boolean isActive() { return active; } }",code_smell,unused_imports_and_dead_code,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<User> findUsersByName(String name) throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        // Vulnerable to SQL injection
        String sql = ""SELECT id, username, email FROM users WHERE username = '"" + name + ""'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            User user = new User();
            user.setId(rs.getInt(""id""));
            user.setUsername(rs.getString(""username""));
            user.setEmail(rs.getString(""email""));
            users.add(user);
        }
        rs.close();
        stmt.close();
        conn.close();
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users, sessionStore) {
    this.users = users;
    this.sessionStore = sessionStore;
  }

  authenticateUser(username, password) {
    const user = this.users.find(u => u.username === username);

    if (!user) {
      return 'Invalid credentials';
    }

    if (user.password === password) {
      this.sessionStore[user.id] = true;
      return 'Login successful';
    }

    return 'Invalid credentials';
  }

  logoutUser(userId) {
    delete this.sessionStore[userId];
  }

  resetPassword(userId, newPassword) {
    const user = this.users.find(u => u.id === userId);

    if (!user) {
      return 'User not found';
    }

    user.password = newPassword;
    return 'Password reset successful';
  }
}

const users = [
  { id: 1, username: 'alice', password: 'password123' },
  { id: 2, username: 'bob', password: 'securepass' }
];

const sessionStore = {};

const auth = new UserAuth(users, sessionStore);
console.log(auth.authenticateUser('alice', 'password123'));
console.log(auth.resetPassword(1, 'newpassword123'));
console.log(auth.logoutUser(1));",code_defect,insecure_data_handling,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        query = ""UPDATE users SET name = '"" + new_data['name'] + ""', email = '"" + new_data['email'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()

# Example usage:
# db_connection = establish_database_connection()
# user_service = UserService(db_connection)
# user_service.update_user(1, {'name': 'John Doe', 'email': 'johndoe@example.com'})
",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
        this.cache = {};
    }

    // Loads user data and caches it, but never clears cache
    getUserById(id) {
        if (this.cache[id]) {
            return Promise.resolve(this.cache[id]);
        }
        return this.db.query('SELECT * FROM users WHERE id = ' + id)
            .then(rows => {
                const user = rows[0];
                this.cache[id] = user; // cache grows unbounded
                return user;
            });
    }

    // Updates user but does not invalidate cache
    updateUser(id, data) {
        const fields = Object.keys(data).map(key => `${key}='${data[key]}'`).join(',');
        return this.db.execute(`UPDATE users SET ${fields} WHERE id = ${id}`)
            .then(() => {
                // missing: delete this.cache[id];
                return true;
            });
    }

    // Very large method handling multiple responsibilities
    importUsersFromCsv(filePath) {
        const content = fs.readFileSync(filePath, 'utf8');
        const lines = content.split('\n');
        const promises = [];
        for (let i = 1; i < lines.length; i++) { // skips header
            const [name, email, age] = lines[i].split(',');
            if (!email) continue; // ignore malformed lines
            const user = { name, email, age: parseInt(age, 10) };
            const p = this.db.execute(`INSERT INTO users (name, email, age) VALUES ('${user.name}', '${user.email}', ${user.age})`)
                .then(() => this.getUserById(this.db.lastInsertId()))
                .then(insertedUser => {
                    // send welcome email (side effect inside data layer)
                    this.sendWelcomeEmail(insertedUser);
                })
                .catch(err => {
                    console.error('Failed to import user:', err);
                });
            promises.push(p);
        }
        return Promise.all(promises);
    }

    sendWelcomeEmail(user) {
        // placeholder for email service
        console.log(`Sending welcome email to ${user.email}`);
    }
}

module.exports = UserService;",code_smell,unbounded_cache_and_missing_cache_invalidation,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    const processedUsers = [];
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      if (user.active) {
        const newUser = {
          id: user.id,
          name: user.name,
          email: user.email,
          role: user.role ? user.role.toUpperCase() : 'GUEST'
        };
        processedUsers.push(newUser);
      }
    }
    return processedUsers;
  }

  sendEmails(emailContent) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email) {
        // Simulate email sending
        console.log(`Email sent to ${this.users[i].email}`);
      }
    }
  }

  // Legacy code for backward compatibility
  // updateUserRole(user, role) {
  //   user.role = role;
  // }
}

const userProcessor = new UserProcessor([
  { id: 1, name: 'Alice', email: 'alice@example.com', active: true, role: 'admin' },
  { id: 2, name: 'Bob', email: 'bob@example.com', active: false, role: 'user' },
  { id: 3, name: 'Charlie', email: 'charlie@example.com', active: true }
]);

userProcessor.processUsers();
userProcessor.sendEmails('Welcome message');",code_smell,large_class,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };
   class UserRepository {
   public:
       void addUser(User user) { users.push_back(user); }
       User getUser(int index) { return users[index]; }
   private:
       std::vector<User> users;
   };
   int main() {
       UserRepository repo;
       repo.addUser(User(""John"", 30));
       std::cout << repo.getUser(0).getName() << std::endl;
       return 0;
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getPendingPayments() throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return payments;
    }

    public void processPayments() {
        try {
            List<String> pending = getPendingPayments();
            for (String paymentId : pending) {
                // Simulate processing
                if (paymentId.startsWith(""A"")) {
                    // Incorrectly update status using string concatenation -> SQL injection risk
                    String updateSql = ""UPDATE payments SET status='COMPLETED' WHERE id='"" + paymentId + ""'"";
                    executeUpdate(updateSql);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void executeUpdate(String sql) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        stmt.close();
        conn.close();
    }
}
",code_defect,sql_injection_via_string_concatenation,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {

    private String[] validUsers = {""admin"", ""user123""};
    private String[] validPasswords = {""securepass"", ""p@ssw0rd""};

    public boolean authenticate(String username, String password) {
        for (int i = 0; i < validUsers.length; i++) {
            if (validUsers[i].equals(username)) {
                if (validPasswords[i].equals(password)) {
                    return true;
                } else {
                    return false;
                }
            }
        }
        return false;
    }

    public void logUserIn(String username) {
        System.out.println(""User "" + username + "" logged in."");
        // TODO: Add session management and logging
    }

    public static void main(String[] args) {
        UserAuthenticator auth = new UserAuthenticator();
        if (auth.authenticate(""admin"", ""securepass"")) {
            auth.logUserIn(""admin"");
        }
    }
}",code_smell,data_clump,,qwen/qwen3-32b
JavaScript,"class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getUser(id) { let user = await this.userRepository.findById(id); if (!user) { user = { id, name: 'Default User' }; } return user; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');
const path = require('path');

class ConfigLoader {
  constructor(configDir) {
    this.configDir = configDir;
    this.cache = {};
  }

  // Loads a JSON config file and caches it
  loadConfig(name) {
    const filePath = path.join(this.configDir, `${name}.json`);
    // Asynchronously read file but forget to await, returning a Promise instead of the parsed object
    const dataPromise = fs.promises.readFile(filePath, 'utf8');
    const parsed = JSON.parse(dataPromise);
    this.cache[name] = parsed;
    return parsed;
  }

  getConfig(name) {
    if (this.cache[name]) {
      return this.cache[name];
    }
    return this.loadConfig(name);
  }
}

// Usage example
const loader = new ConfigLoader('./config');
const dbConfig = loader.getConfig('database');
console.log('Database host:', dbConfig.host);
",code_defect,async_handling_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUser(User user, String action) {
        if (action.equals(""approve"")) {
            user.setStatus(""APPROVED"");
            sendNotification(user.getEmail(), ""Your account has been approved."");
        } else if (action.equals(""reject"")) {
            user.setStatus(""REJECTED"");
            sendNotification(user.getEmail(), ""Your account has been rejected."");
        } else {
            // No action
        }
    }

    private void sendNotification(String email, String message) {
        EmailService emailService = new EmailService();
        emailService.send(email, message);
    }

    private static class EmailService {
        public void send(String email, String message) {
            // Simulated email sending logic
        }
    }

    private static class User {
        private String email;
        private String status;

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }
    }
}",code_smell,type_switch_smell,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

    void setName(std::string name) { this->name = name; }
    void setSalary(int salary) { this->salary = salary; }

private:
    std::string name;
    int salary;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }

    Employee getEmployeeWithHighestSalary() {
        if (employees.empty()) {
            return Employee("""", 0);
        }

        Employee highestPaidEmployee = employees[0];
        for (int i = 1; i < employees.size(); i++) {
            if (employees[i].getSalary() > highestPaidEmployee.getSalary()) {
                highestPaidEmployee = employees[i];
            }
        }
        return highestPaidEmployee;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John Doe"", 50000));
    manager.addEmployee(Employee(""Jane Doe"", 60000));

    Employee highestPaid = manager.getEmployeeWithHighestSalary();
    std::cout << ""Highest paid employee: "" << highestPaid.getName() << "" with salary: "" << highestPaid.getSalary() << std::endl;

    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import threading
import time

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self._config = None
        self._load_lock = threading.Lock()
        self._load_config()

    def _load_config(self):
        # NOTE: No error handling; assumes file exists and is valid JSON
        with open(self.path, 'r') as f:
            self._config = json.load(f)

    def get(self, key, default=None):
        return self._config.get(key, default)

class DataProcessor:
    def __init__(self, config_path):
        self.config = ConfigLoader(config_path)
        self.results = []
        self._stop_event = threading.Event()
        self.worker = threading.Thread(target=self._process_loop)
        self.worker.start()

    def _process_loop(self):
        while not self._stop_event.is_set():
            # Simulate fetching data
            data = self._fetch_data()
            if data:
                processed = self._process_data(data)
                self.results.append(processed)
            time.sleep(1)

    def _fetch_data(self):
        # Placeholder for real data fetch; returns None occasionally
        return os.urandom(16)

    def _process_data(self, data):
        # Intentional bug: using mutable default argument
        return self._complex_transform(data, cache={})

    def _complex_transform(self, data, cache={}):
        # Very naive caching that never clears, leading to memory leak
        if data in cache:
            return cache[data]
        # Simulate expensive computation
        result = sum(b for b in data) % 256
        cache[data] = result
        return result

    def stop(self):
        self._stop_event.set()
        self.worker.join()

if __name__ == ""__main__"":
    processor = DataProcessor('config.json')
    try:
        time.sleep(5)
    finally:
        processor.stop()
        print('Processed results:', processor.results)",code_defect,mutable_default_argument_and_memory_leak,,openai/gpt-oss-120b
Python,"import os
import time

def process_user_data(user_id, user_data):
    
    if not user_data:
        return None

    final_data = []
    for i in range(len(user_data)):
        temp = user_data[i].copy()
        temp['id'] = user_id
        temp['ts'] = int(time.time())
        final_data.append(temp)

    # Legacy code - commented out due to performance issues
    # final_data = [x for x in final_data if x['value'] > 0]
    
    # Additional processing
    for item in final_data:
        if item['status'] == 'active':
            item['value'] *= 1.2
        elif item['status'] == 'inactive':
            item['value'] *= 0.8

    return final_data

# Example usage
data = [{'status': 'active', 'value': 100}, {'status': 'inactive', 'value': 50}]
print(process_user_data(123, data))",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
      class UserDatabase {
         constructor() {
            this.users = [];
         }

         async loadUsersFromDatabase() {
            const dbResponse = await fetch('/users');
            const usersData = await dbResponse.json();
            this.users = usersData.map(user => ({ id: user.id, name: user.name }));
         }

         getUser(id) {
            return this.users.find(user => user.id === id);
         }
      }

      async function main() {
         const db = new UserDatabase();
         await db.loadUsersFromDatabase();
         console.log(db.getUser(1));
      }

      main();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    loadConfig() {
        // Asynchronously read file but return before it's ready
        fs.readFile(this.path, 'utf8', (err, data) => {
            if (err) throw err;
            this.cache = JSON.parse(data);
        });
        return this.cache; // Returns null the first time
    }
}

function initializeApp() {
    const loader = new ConfigLoader('./config.json');
    const config = loader.loadConfig();
    // Use config immediately assuming it's loaded
    if (config.enableFeature) {
        startFeature();
    }
}

function startFeature() {
    console.log('Feature started');
}

initializeApp();",code_defect,async_initialization_race_condition,,openai/gpt-oss-120b
Python,"import os
import json

def process_user_data(data):
    user = data.get('user')
    if not user:
        return
    user_id = user.get('id')
    name = user.get('name')
    email = user.get('email')

    if user_id is None or name is None or email is None:
        return

    user_data = {
        'id': user_id,
        'name': name,
        'email': email,
        'active': True
    }

    if data.get('preferences'):
        user_data['preferences'] = data['preferences']

    if data.get('meta'):
        user_data['meta'] = data['meta']

    return user_data


def save_user_to_db(user_data):
    db_path = os.path.join('db', 'users.json')

    if not os.path.exists('db'):
        os.makedirs('db')

    with open(db_path, 'w') as f:
        json.dump(user_data, f, indent=2)


def main():
    raw_data = {
        'user': {
            'id': 123,
            'name': 'Alice',
            'email': 'alice@example.com'
        },
        'preferences': {
            'theme': 'dark',
            'language': 'en'
        }
    }

    processed_data = process_user_data(raw_data)
    if processed_data:
        save_user_to_db(processed_data)

if __name__ == '__main__':
    main()",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
      class PaymentProcessor {
         constructor() {
            this.payments = [];
         }

         addPayment(payment) {
            this.payments.push(payment);
         }

         processPayments() {
            for (let i = 0; i < this.payments.length; i++) {
               const payment = this.payments[i];
               if (payment.amount > 0) {
                  // simulate payment processing
                  console.log(`Processing payment of $${payment.amount} for ${payment.description}`);
               }
            }
         }
      }

      const processor = new PaymentProcessor();
      processor.addPayment({ amount: 100, description: 'Test Payment' });
      processor.addPayment({ amount: 200, description: 'Another Test Payment' });
      processor.processPayments();
   ",code_smell,inefficient_data_structure,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
  }

  // Processes an order and returns a promise that resolves to the order ID
  async processOrder(order) {
    // Validate order fields
    if (!order.userId || !order.items || order.items.length === 0) {
      throw new Error('Invalid order');
    }

    // Insert order record
    const result = await this.db.query('INSERT INTO orders (user_id, total) VALUES (?, ?)', [order.userId, this._calculateTotal(order.items)]);
    const orderId = result.insertId;

    // Insert each item – BUG: uses async inside forEach, which doesn't wait for completion
    order.items.forEach(async (item) => {
      await this.db.query('INSERT INTO order_items (order_id, product_id, qty) VALUES (?, ?, ?)', [orderId, item.productId, item.qty]);
    });

    // Return order ID immediately, before items are saved
    return orderId;
  }

  _calculateTotal(items) {
    return items.reduce((sum, i) => sum + i.price * i.qty, 0);
  }
}

module.exports = OrderProcessor;",code_defect,async_forEach_logic_error,,openai/gpt-oss-120b
Python,"import os
import subprocess

def execute_command(cmd, env_vars=None):
    if env_vars:
        env = os.environ.copy()
        env.update(env_vars)
    else:
        env = os.environ
    
    process = subprocess.Popen(cmd, env=env, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    
    if process.returncode != 0:
        raise Exception(f""Command failed: {cmd} \nError: {stderr.decode()}"")
    
    return stdout.decode()


def deploy_app():
    execute_command('npm install', {'NODE_ENV': 'production'})
    execute_command('npm run build')
    execute_command('docker build -t myapp:latest .')
    execute_command('docker run -d -p 80:80 myapp:latest')

if __name__ == ""__main__"":
    deploy_app()",code_defect,security_vulnerability,,qwen/qwen3-32b
Python,"
class OrderProcessor:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def process_order(self, order_id):
        order_data = self.db_connection.get_order(order_id)
        if order_data:
            total_cost = 0
            for item in order_data['items']:
                total_cost += item['price'] * item['quantity']
            self.db_connection.update_order_total(order_id, total_cost)
            return True
        return False

    def get_order_status(self, order_id):
        order_data = self.db_connection.get_order(order_id)
        if order_data:
            return order_data['status']
        return 'Order not found'

class DatabaseConnection:
    def __init__(self, host, username, password):
        self.host = host
        self.username = username
        self.password = password

    def get_order(self, order_id):
        # Simulating a database query
        orders = {
            1: {'items': [{'price': 10.99, 'quantity': 2}, {'price': 5.99, 'quantity': 1}], 'status': 'pending'},
            2: {'items': [{'price': 7.99, 'quantity': 3}, {'price': 3.99, 'quantity': 2}], 'status': 'shipped'}
        }
        return orders.get(order_id)

    def update_order_total(self, order_id, total_cost):
        # Simulating a database update
        orders = {
            1: {'items': [{'price': 10.99, 'quantity': 2}, {'price': 5.99, 'quantity': 1}], 'status': 'pending', 'total': total_cost},
            2: {'items': [{'price': 7.99, 'quantity': 3}, {'price': 3.99, 'quantity': 2}], 'status': 'shipped'}
        }
        orders[order_id]['total'] = total_cost

db_connection = DatabaseConnection('localhost', 'username', 'password')
order_processor = OrderProcessor(db_connection)
order_processor.process_order(1)
print(order_processor.get_order_status(1))
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.configPath = configPath;
    this.cache = null;
  }

  // Loads config JSON from file; caches result
  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.configPath, 'utf8');
    // BUG: JSON.parse can throw, but not caught – leads to crash on malformed config
    this.cache = JSON.parse(data);
    return this.cache;
  }

  // Reloads config, ignoring cache
  reload() {
    this.cache = null;
    return this.load();
  }
}

// Example usage in a server initialization
function initServer() {
  const loader = new ConfigLoader('/etc/app/config.json');
  const config = loader.load();
  const port = config.port || 3000;
  const server = require('http').createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('Server running');
  });
  server.listen(port);
  console.log(`Server listening on port ${port}`);
}

initServer();",code_defect,unhandled_exception,,openai/gpt-oss-120b
Python,"import os
import json

def process_config(config_path='config.json'):
    with open(config_path, 'r') as f:
        config = json.load(f)

    if 'database' in config:
        db_config = config['database']
        if 'host' in db_config:
            os.environ['DB_HOST'] = db_config['host']
        if 'user' in db_config:
            os.environ['DB_USER'] = db_config['user']
        if 'password' in db_config:
            os.environ['DB_PASSWORD'] = db_config['password']

    return config

config = process_config()
print('Configuration processed.')",code_smell,hardcoded_configuration,,qwen/qwen3-32b
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""P@ssw0rd123""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            conn.setAutoCommit(false);
            // Update account balance
            PreparedStatement updateStmt = conn.prepareStatement(
                ""UPDATE accounts SET balance = balance - ? WHERE account_id = ?"");
            updateStmt.setDouble(1, amount);
            updateStmt.setString(2, accountId);
            int rows = updateStmt.executeUpdate();
            // Insert transaction record
            PreparedStatement insertStmt = conn.prepareStatement(
                ""INSERT INTO transactions (account_id, amount) VALUES (?, ?)"");
            insertStmt.setString(1, accountId);
            insertStmt.setDouble(2, amount);
            insertStmt.executeUpdate();
            // Missing check for rows == 0 leads to silent failure
            conn.commit();
            return true;
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ex) {}
            return false;
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException e) {}
        }
    }

    // Unused method, dead code
    private void logTransaction(String accountId, double amount) {
        // TODO: implement logging
    }
}
",code_defect,missing_validation_of_update_result,,openai/gpt-oss-120b
Python,"import requests
import json
import time

class UserAPI:
    def __init__(self):
        self.base_url = 'https://api.example.com/v1/users'
        self.token = 'abc123supersecret'

    def get_user(self, user_id):
        url = f'{self.base_url}/{user_id}'
        headers = {'Authorization': f'Bearer {self.token}'}
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            return json.loads(response.text)
        else:
            print('Error fetching user data')
            return None

    def update_user(self, user_id, data):
        url = f'{self.base_url}/{user_id}'
        headers = {'Authorization': f'Bearer {self.token}'}
        response = requests.patch(url, headers=headers, json=data)
        if response.status_code == 200:
            return True
        else:
            print('Error updating user data')
            return False

    def get_all_users(self):
        response = requests.get(self.base_url)
        if response.status_code == 200:
            return json.loads(response.text)
        else:
            return []

    def get_user_emails(self):
        users = self.get_all_users()
        emails = []
        for user in users:
            emails.append(user.get('email', ''))
        return emails

    def log_user_emails(self):
        emails = self.get_user_emails()
        for email in emails:
            print(f""Email: {email}"")
            time.sleep(0.5)

if __name__ == '__main__':
    api = UserAPI()
    api.log_user_emails()",code_defect,insecure_hardcoded_secrets,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getAllUsers() { let users = await this.userRepository.findAll(); users.forEach(user => { if (user.role === 'admin') { user.role = 'superuser'; } }); return users; } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = {};
    }

    load() {
        // Reads JSON config file synchronously each call
        const data = fs.readFileSync(this.path, 'utf8');
        const config = JSON.parse(data);
        // Merge with cached values, but cache never updated -> stale data
        return Object.assign({}, this.cache, config);
    }

    get(key) {
        const cfg = this.load();
        return cfg[key];
    }
}

// Usage in server initialization
function initServer() {
    const loader = new ConfigLoader('./config.json');
    const port = loader.get('port') || 3000;
    const server = require('http').createServer((req, res) => {
        // Simple routing
        if (req.url === '/status') {
            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ status: 'ok' }));
        } else {
            res.writeHead(404);
            res.end();
        }
    });
    server.listen(port);
    console.log(`Server listening on port ${port}`);
}

initServer();",code_defect,stale_configuration_due_to_missing_cache_update,,openai/gpt-oss-120b
Python,"import requests

API_URL = 'https://api.example.com/data'

def fetch_and_process_data():
    response = requests.get(API_URL)
    if response.status_code == 200:
        data = response.json()
        processed_data = []
        for item in data:
            if 'id' in item and 'name' in item:
                processed_item = {
                    'id': item['id'],
                    'full_name': f""{item['name']} - fetched at {datetime.now()}""
                }
                processed_data.append(processed_item)
        return processed_data
    else:
        print('Failed to fetch data')
        return None

# Unused function
def calculate_average(numbers):
    return sum(numbers) / len(numbers) if numbers else 0

# Example usage
def main():
    data = fetch_and_process_data()
    if data:
        for item in data:
            print(f""{item['id']}: {item['full_name']}"")

if __name__ == '__main__':
    main()",code_smell,dead_code,,qwen/qwen3-32b
Python,"class UserManager:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, new_data):
        query = ""UPDATE users SET name = '"" + new_data['name'] + ""', email = '"" + new_data['email'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()
",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation on limit
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, lose stack trace
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void deleteUser(int userId) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // SQL injection vulnerability
            String sql = ""DELETE FROM users WHERE id = "" + userId;
            stmt.executeUpdate(sql);
        } catch (Exception e) {
            // ignored
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,SQL injection vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    let result = [];
    for (let i = 0; i < this.users.length; i++) {
      let user = this.users[i];
      let processedUser = {
        id: user.id,
        name: user.firstName + ' ' + user.lastName,
        role: this.determineRole(user),
        status: this.determineStatus(user)
      };
      result.push(processedUser);
    }
    return result;
  }

  determineRole(user) {
    if (user.isAdmin) return 'admin';
    if (user.isManager) return 'manager';
    return 'user';
  }

  determineStatus(user) {
    if (user.lastLogin) {
      let lastLoginDate = new Date(user.lastLogin);
      let today = new Date();
      let diffDays = Math.floor((today - lastLoginDate) / (1000 * 60 * 60 * 24));
      if (diffDays < 30) return 'active';
      else if (diffDays < 90) return 'inactive';
      else return 'dormant';
    } else {
      return 'unknown';
    }
  }
}

export default UserProcessor;",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // BUG: If no task was retrieved, task remains 0 and is processed incorrectly
            std::cout << ""Processing: "" << task << std::endl;
            // Simulate work
            std::this_thread::sleep_for(std::chrono::milliseconds(10));
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 1; i <= 5; ++i) dp.addTask(i);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}",code_defect,logic_error_unchecked_task,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(std::vector<std::string>& inputVector, const std::string& delimiter) {
    for (const auto& input : inputVector) {
        std::string::size_type pos = 0;
        std::string token;
        while ((pos = input.find(delimiter)) != std::string::npos) {
            token = input.substr(0, pos);
            if (!token.empty()) {
                std::cout << token << std::endl;
            }
            input.erase(0, pos + delimiter.length());
        }
        if (!input.empty()) {
            std::cout << input << std::endl;
        }
    }
}

int main() {
    std::vector<std::string> userInputs = {""apple,banana,orange"", ""grape,melon"", """"};
    std::string delimiter = "","";

    processUserInput(userInputs, delimiter);

    return 0;
}",code_smell,inefficient_data_processing,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        cursor.close()
        return user_data
    
    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
        cursor.close()
    
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
        cursor.close()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class UserService {
    private Connection connection;
    private static final String QUERY = ""SELECT * FROM users WHERE username = '"" + ""?"" + ""'""; // insecure concatenation

    public UserService(Connection conn) {
        this.connection = conn;
    }

    public User getUserByUsername(String username) throws SQLException {
        PreparedStatement stmt = connection.prepareStatement(QUERY);
        stmt.setString(1, username);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            User user = new User();
            user.setId(rs.getInt(""id""));
            user.setUsername(rs.getString(""username""));
            user.setEmail(rs.getString(""email""));
            return user;
        }
        return null;
    }
}

class User {
    private int id;
    private String username;
    private String email;
    public void setId(int id) { this.id = id; }
    public void setUsername(String username) { this.username = username; }
    public void setEmail(String email) { this.email = email; }
    // getters omitted for brevity
}",code_defect,SQL injection due to string concatenation in query,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor(database, logger) {
    this.db = database;
    this.logger = logger;
  }

  processOrder(order) {
    this.logger.info(`Processing order: ${order.id}`);

    const customer = this.db.getCustomer(order.customerId);
    const product = this.db.getProduct(order.productId);

    if (!customer || !product) {
      this.logger.warn(`Customer or product not found for order ${order.id}`);
      return;
    }

    if (product.stock <= 0) {
      this.logger.error(`Product ${product.id} is out of stock`);
      return;
    }

    const price = product.price * order.quantity;

    if (price > customer.creditLimit) {
      this.logger.error(`Order exceeds customer's credit limit for order ${order.id}`);
      return;
    }

    this.db.updateStock(product.id, product.stock - order.quantity);
    this.db.createOrderRecord(order, price);

    this.logger.info(`Order ${order.id} processed successfully`);
  }

  validateInput(order) {
    return order && order.id && order.customerId && order.productId && order.quantity;
  }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <string>
using namespace std;

class User {
public:
    User(string name) : name(name) {}
    string getName() { return name; }
    void setName(string name) { this->name = name; }
private:
    string name;
};

class UserService {
public:
    UserService() {}
    User* getUser(string name) {
        // Simulating a database query
        if (name == ""admin"") {
            return new User(name);
        } else {
            return nullptr;
        }
    }
};

int main() {
    UserService service;
    User* user = service.getUser(""admin"");
    if (user) {
        cout << user->getName() << endl;
        delete user;
    }
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public User getUserById(int userId) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // vulnerable to SQL injection if userId were derived from user input elsewhere
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            // Missing close of ResultSet and handling of potential SQLException
            try {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (Exception ex) {
                // ignore
            }
        }
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection vulnerability and resource leak,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

def process_user_data(user_id):
    data_path = 'data/'
    file_name = f'{user_id}_profile.json'
    full_path = os.path.join(data_path, file_name)

    if not os.path.exists(full_path):
        print('File not found, creating default...')
        with open(full_path, 'w') as f:
            json.dump({'user_id': user_id, 'last_login': '1970-01-01'}, f)

    with open(full_path, 'r') as f:
        user_data = json.load(f)

    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    user_data['last_login'] = now

    with open(full_path, 'w') as f:
        json.dump(user_data, f)

    return user_data

# Legacy function, not used anymore
# def update_user_stats(stats):
#     pass",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userRepository) {
         this.userRepository = userRepository;
      }

      async getUser(id) {
         const user = await this.userRepository.getUser(id);
         if (!user) {
            throw new Error('User not found');
         }
         return user;
      }

      async getUsers() {
         return await this.userRepository.getUsers();
      }

      async createUser(user) {
         if (!user || !user.name || !user.email) {
            throw new Error('Invalid user data');
         }
         return await this.userRepository.createUser(user);
      }
   }

   class UserRepository {
      async getUser(id) {
         // simulate database query
         return { id, name: 'John Doe', email: 'john@example.com' };
      }

      async getUsers() {
         // simulate database query
         return [{ id: 1, name: 'John Doe', email: 'john@example.com' }, { id: 2, name: 'Jane Doe', email: 'jane@example.com' }];
      }

      async createUser(user) {
         // simulate database query
         return user;
      }
   }

   const userRepository = new UserRepository();
   const userService = new UserService(userRepository);

   (async () => {
      try {
         const user = await userService.getUser(1);
         console.log(user);
         const users = await userService.getUsers();
         console.log(users);
         const newUser = await userService.createUser({ name: 'New User', email: 'new@example.com' });
         console.log(newUser);
      } catch (error) {
         console.error(error);
      }
   })();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it globally.""""""
    _cache = None
    _lock = threading.Lock()

    @classmethod
    def load(cls, path: str):
        # Double-checked locking pattern (incorrectly implemented)
        if cls._cache is None:
            with cls._lock:
                if cls._cache is None:
                    with open(path, 'r') as f:
                        cls._cache = json.load(f)
        return cls._cache

    @classmethod
    def get(cls, key, default=None):
        cfg = cls.load('config.json')  # Hardcoded path, ignores provided path
        return cfg.get(key, default)

class DataProcessor:
    def __init__(self, source_dir):
        self.source_dir = source_dir
        self.results = []

    def process_all(self):
        files = os.listdir(self.source_dir)
        for fname in files:
            if fname.endswith('.data'):
                full_path = os.path.join(self.source_dir, fname)
                self.results.append(self._process_file(full_path))
        return self.results

    def _process_file(self, path):
        # Reads file, expects each line to be a JSON object
        with open(path, 'r') as f:
            data = [json.loads(line) for line in f]
        # Bug: returns only the first record instead of aggregated result
        return data[0] if data else None

# Usage example (would be in a different module)
processor = DataProcessor('/var/data')
all_results = processor.process_all()
print('Processed', len(all_results), 'files')
",code_defect,logic_error_returns_first_item_only,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>

class LogBuffer {
public:
    LogBuffer(size_t capacity) : capacity_(capacity) {}

    void addEntry(const std::string& entry) {
        std::lock_guard<std::mutex> lock(mtx_);
        if (buffer_.size() >= capacity_) {
            // Drop oldest entry
            buffer_.erase(buffer_.begin());
        }
        buffer_.push_back(entry);
    }

    std::string dump() {
        std::lock_guard<std::mutex> lock(mtx_);
        std::string out;
        for (const auto& e : buffer_) {
            out += e + ""\n"";
        }
        return out;
    }

private:
    size_t capacity_;
    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

// Global logger (shared across threads)
LogBuffer g_logger(100);

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i <= data.size(); ++i) { // BUG: off‑by‑one, may read past end
        int value = data[i];
        if (value % 2 == 0) {
            g_logger.addEntry(""Even: "" + std::to_string(value));
        } else {
            g_logger.addEntry(""Odd: "" + std::to_string(value));
        }
    }
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    processData(numbers);
    std::cout << g_logger.dump();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order, boolean isPriority, String customerEmail, String customerPhone, String promoCode) {
        if (order == null) {
            return;
        }

        if (isPriority) {
            // Priority orders get a 10% discount
            double total = 0;
            for (Item item : order.getItems()) {
                total += item.getPrice();
            }
            order.setTotal(total * 0.9);
        } else {
            // Non-priority orders get no discount
            double total = 0;
            for (Item item : order.getItems()) {
                total += item.getPrice();
            }
            order.setTotal(total);
        }

        // Apply promo code if provided
        if (promoCode != null && promoCode.equals(""SAVE10"")) {
            order.setTotal(order.getTotal() * 0.9);
        }

        // Send confirmation email
        EmailService.sendEmail(customerEmail, ""Order Confirmed"", ""Thank you for your order!"");

        // Log customer contact info
        System.out.println(""Customer Contact: "" + customerEmail + "" | "" + customerPhone);
    }
}",code_smell,duplicated_code,,qwen/qwen3-32b
C++,"#include <iostream>
#include <fstream>
#include <vector>
#include <string>

class LogProcessor {
public:
    LogProcessor(const std::string& path) : filePath(path) {}
    void loadEntries() {
        std::ifstream in(filePath);
        std::string line;
        while (std::getline(in, line)) {
            entries.push_back(line);
        }
    }
    // Returns the nth entry (1-based index) but mistakenly uses 0-based indexing
    std::string getEntry(size_t n) const {
        if (n == 0 || n > entries.size()) {
            return """";
        }
        return entries[n]; // off-by-one: should be entries[n-1]
    }
    void printAll() const {
        for (size_t i = 0; i <= entries.size(); ++i) { // off-by-one loop, may access out of bounds
            std::cout << entries[i] << std::endl;
        }
    }
private:
    std::string filePath;
    std::vector<std::string> entries;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.loadEntries();
    std::cout << ""Second entry: "" << lp.getEntry(2) << std::endl;
    lp.printAll();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }
        String customerEmail = order.getCustomerEmail();
        double total = 0.0;
        for (OrderItem item : order.getItems()) {
            total += item.getPrice() * item.getQuantity();
        }
        if (total <= 0) {
            return;
        }
        // Simulate sending an email
        sendEmail(customerEmail, ""Your order has been processed."", ""Total: $"" + total);
    }

    private void sendEmail(String email, String subject, String body) {
        // Email sending logic
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getUser(id) { let user = await this.userRepository.findById(id); if (!user) return null; user.lastAccessed = new Date(); await this.userRepository.save(user); return user; } async getUsers() { return await this.userRepository.findAll(); } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }
    load() {
        // Missing error handling: if file is missing or malformed, throws
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }
    get(key) {
        if (!this.cache) this.load();
        return this.cache[key];
    }
}

function processUserInput(input) {
    // Unsafe: directly eval user input, leading to code injection
    return eval(input);
}

module.exports = { ConfigLoader, processUserInput };",code_defect,code_injection_via_eval,,openai/gpt-oss-120b
Python,"import random

class DataProcessor:
    def __init__(self):
        self._data = []
        self._processed_data = []

    def load_data(self, data):
        self._data = data

    def process(self):
        for item in self._data:
            processed = self._transform(item)
            self._processed_data.append(processed)

    def _transform(self, item):
        if isinstance(item, int):
            return item * 2
        elif isinstance(item, str):
            return item.upper()
        else:
            return item

    def get_results(self):
        return self._processed_data

    def run(self, data):
        self.load_data(data)
        self.process()
        return self.get_results()

# Example usage
processor = DataProcessor()
example_data = [10, 'hello', 5, 'world', None, True]
results = processor.run(example_data)
print(results)",code_smell,large_class,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
        self.login_attempts = 0

    def login(self, password):
        if self.password == password:
            self.login_attempts += 1
            return True
        else:
            return False

    def get_login_attempts(self):
        return self.login_attempts

    def reset_password(self, new_password, old_password):
        if self.password == old_password:
            self.password = new_password
        else:
            pass

account = UserAccount('test_user', 'test_password', 'test@example.com')
print(account.login('test_password'))
print(account.get_login_attempts())
account.reset_password('new_password', 'wrong_password')
print(account.login('new_password'))",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public User getUserById(int userId) {
        User user = null;
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            Statement stmt = conn.createStatement();
            String query = ""SELECT id, username, email FROM users WHERE id = "" + userId; // SQL injection risk
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return user;
    }
}

class User {
    private int id;
    private String username;
    private String email;
    public void setId(int id) { this.id = id; }
    public void setUsername(String username) { this.username = username; }
    public void setEmail(String email) { this.email = email; }
    public int getId() { return id; }
    public String getUsername() { return username; }
    public String getEmail() { return email; }
}",code_defect,sql_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        String customerName = order.getCustomerName();
        if (customerName == null || customerName.trim().isEmpty()) {
            return;
        }

        List<OrderItem> items = order.getItems();
        if (items == null || items.isEmpty()) {
            return;
        }

        double total = 0;
        for (OrderItem item : items) {
            if (item != null && item.getPrice() > 0 && item.getQuantity() > 0) {
                total += item.getPrice() * item.getQuantity();
            }
        }

        if (total <= 0) {
            return;
        }

        order.setTotal(total);
        saveOrder(order);
    }

    private void saveOrder(Order order) {
        // Simulated database save logic
        System.out.println(""Order saved: "" + order.toString());
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserManager { private Map<String, User> users = new HashMap<>(); public void addUser(String username, String password) { users.put(username, new User(username, password)); } public User getUser(String username) { return users.get(username); } public void changePassword(String username, String newPassword) { User user = users.get(username); if (user != null) { user.setPassword(newPassword); } } public class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } } }",code_smell,God class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String nameFilter) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // vulnerable to SQL injection
            String sql = ""SELECT email FROM users WHERE name LIKE '%"" + nameFilter + ""%'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception silently
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null || order.getItems() == null) {
            return;
        }
        for (Item item : order.getItems()) {
            if (item != null && item.getPrice() > 0) {
                applyDiscount(item);
                calculateTax(item);
                System.out.println(""Processed item: "" + item.getName());
            }
        }
    }

    private void applyDiscount(Item item) {
        if (item.getQuantity() > 5) {
            item.setPrice(item.getPrice() * 0.8);
        }
    }

    private void calculateTax(Item item) {
        double taxRate = 0.0;
        if (item.getCategory().equals(""ELECTRONICS"")) {
            taxRate = 0.15;
        } else if (item.getCategory().equals(""BOOKS"")) {
            taxRate = 0.10;
        } else {
            taxRate = 0.05;
        }
        item.setPrice(item.getPrice() * (1 + taxRate));
    }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}
    std::string getName() { return name; }
    int getSalary() { return salary; }
private:
    std::string name;
    int salary;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    Employee getHighestPaidEmployee() {
        if (employees.empty()) {
            // Handle empty list
            return Employee("""", 0);
        }
        return *std::max_element(employees.begin(), employees.end(), [](Employee& a, Employee& b) {
            return a.getSalary() < b.getSalary();
        });
    }
private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 50000));
    manager.addEmployee(Employee(""Alice"", 60000));
    Employee highestPaid = manager.getHighestPaidEmployee();
    std::cout << ""Highest paid employee: "" << highestPaid.getName() << "" with salary: "" << highestPaid.getSalary() << std::endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }

    std::vector<std::string> getAll() const {
        return logs_; // BUG: returning copy without synchronization
    }

private:
    mutable std::mutex mtx_;
    std::vector<std::string> logs_;
};

void worker(LogAggregator& agg, int id) {
    for (int i = 0; i < 1000; ++i) {
        agg.addLog(""Thread "" + std::to_string(id) + "" log "" + std::to_string(i));
    }
}

int main() {
    LogAggregator agg;
    std::thread t1(worker, std::ref(agg), 1);
    std::thread t2(worker, std::ref(agg), 2);
    t1.join();
    t2.join();
    auto all = agg.getAll();
    std::cout << ""Collected "" << all.size() << "" logs."" << std::endl;
    return 0;
}",code_defect,data_race_on_read,,openai/gpt-oss-120b
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""admin123""; // hardcoded credentials

    public List<Double> getUserPayments(int userId) throws SQLException {
        List<Double> amounts = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT amount FROM transactions WHERE user_id = "" + userId; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            amounts.add(rs.getDouble(""amount""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return amounts;
    }

    public double calculateTotal(int userId) {
        try {
            List<Double> payments = getUserPayments(userId);
            double total = 0.0;
            for (int i = 0; i <= payments.size(); i++) { // off-by-one error
                total += payments.get(i);
            }
            return total;
        } catch (SQLException e) {
            // swallow exception, returns 0 silently
            return 0.0;
        }
    }
}
",code_defect,off_by_one_and_sql_injection,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUser(String username, String email, String role) {
        if (username == null || username.trim().isEmpty()) {
            throw new IllegalArgumentException(""Username cannot be null or empty"");
        }
        
        if (email == null || !email.contains(""@"")) {
            throw new IllegalArgumentException(""Invalid email format"");
        }
        
        String normalizedEmail = email.toLowerCase().trim();
        
        if (role == null || role.trim().isEmpty()) {
            role = ""user"";
        }
        
        if (!role.equals(""user"") && !role.equals(""admin"")) {
            throw new IllegalArgumentException(""Invalid role specified"");
        }
        
        User user = new User();
        user.setUsername(username);
        user.setEmail(normalizedEmail);
        user.setRole(role);
        
        if (role.equals(""admin"")) {
            user.setAdmin(true);
        }
        
        Database.save(user);
    }
}

class User {
    private String username;
    private String email;
    private String role;
    private boolean admin;

    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getRole() { return role; }
    public void setRole(String role) { this.role = role; }

    public boolean isAdmin() { return admin; }
    public void setAdmin(boolean admin) { this.admin = admin; }
}

class Database {
    public static void save(User user) {
        // Simulated database save logic
    }
}",code_smell,poor_error_handling,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, balance=0.0):
        self.balance = balance
    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
    def withdraw(self, amount):
        if amount > 0 and self.balance >= amount:
            self.balance -= amount
    def get_balance(self):
        return self.balance

account = BankAccount(100.0)
account.deposit(50.0)
print(account.get_balance())",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3
from datetime import datetime

class UserManager:
    def __init__(self, db_path='users.db'):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password):
        # NOTE: In real code use proper password hashing
        password_hash = self._hash_password(password)
        cursor = self.conn.cursor()
        cursor.execute(
            f""INSERT INTO users (username, password_hash, created_at) VALUES ('{username}', '{password_hash}', '{datetime.utcnow()}')""
        )
        self.conn.commit()

    def authenticate(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute(
            f""SELECT password_hash FROM users WHERE username = '{username}'""
        )
        row = cursor.fetchone()
        if row:
            stored_hash = row[0]
            return stored_hash == self._hash_password(password)
        return False

    def _hash_password(self, password):
        # Simple insecure hash for illustration
        return str(abs(hash(password)))

    def export_user_data(self, export_path):
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, username, created_at FROM users')
        users = cursor.fetchall()
        # Directly dump to JSON without sanitization
        with open(export_path, 'w') as f:
            json.dump(users, f)

    def close(self):
        self.conn.close()

# Example usage (would be removed in production)
if __name__ == '__main__':
    manager = UserManager()
    manager.add_user('alice', 'password123')
    manager.add_user('bob', 'secure!')
    print('Auth alice:', manager.authenticate('alice', 'password123'))
    manager.export_user_data('users_export.json')
    manager.close()",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.users = [];
  }

  registerUser(username, password, role, status, email) {
    const user = {
      username, 
      password, 
      role, 
      status, 
      email
    };
    this.users.push(user);
  }

  authenticateUser(username, password) {
    const user = this.users.find(u => u.username === username);
    if (!user) {
      return false;
    }
    return user.password === password;
  }

  getUserRoles(username) {
    const user = this.users.find(u => u.username === username);
    return user ? user.role : null;
  }

  sendEmailVerification(email) {
    // Dummy email verification logic
    console.log(`Sending verification email to ${email}`);
  }
}

const auth = new UserAuth();
auth.registerUser('admin', 'password123', 'admin', 'active', 'admin@example.com');
auth.registerUser('user1', 'userpass', 'user', 'pending', 'user1@example.com');",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>

   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}

       std::string getName() { return name; }
       int getAge() { return age; }

   private:
       std::string name;
       int age;
   };

   class UserService {
   public:
       void sortUsers(std::vector<User>& users) {
           std::sort(users.begin(), users.end(), [](const User& a, const User& b) {
               return a.getAge() < b.getAge();
           });
       }

       void printUsers(const std::vector<User>& users) {
           for (const auto& user : users) {
               std::cout << user.getName() << std::endl;
           }
       }
   };

   int main() {
       std::vector<User> users = {User(""John"", 25), User(""Alice"", 30), User(""Bob"", 20)};
       UserService service;
       service.sortUsers(users);
       service.printUsers(users);
       return 0;
   }
   ",code_smell,unused_imports,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user data and writes a report file
  async generateUserReport(userId) {
    // Potential race condition: no lock, multiple calls may interleave
    const user = await this.db.getUserById(userId);
    const orders = await this.db.getOrdersForUser(userId);

    // Inefficient: building a large string with concatenation in a loop
    let report = '';
    report += `Report for ${user.name}\n`;
    report += 'Orders:\n';
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      report += `- Order #${order.id}: $${order.amount}\n`;
    }
    report += `Total: $${orders.reduce((sum, o) => sum + o.amount, 0)}\n`;

    // Bug: using synchronous write while the function is async, can block event loop
    fs.writeFileSync(`/tmp/report_${userId}.txt`, report);
    return `/tmp/report_${userId}.txt`;
  }
}

module.exports = UserService;",code_defect,blocking_io_in_async_function,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrders(List<Order> orders) {
        for (Order order : orders) {
            if (order.getStatus() == OrderStatus.PENDING) {
                String customerName = order.getCustomer().getName();
                String productName = order.getProduct().getName();

                if (customerName != null && !customerName.isEmpty() && productName != null && !productName.isEmpty()) {
                    System.out.println(""Processing order for "" + customerName + "" for product "" + productName);
                    order.setStatus(OrderStatus.PROCESSING);
                    sendConfirmationEmail(order);
                }
            }
        }
    }

    private void sendConfirmationEmail(Order order) {
        // Simulate email sending
        System.out.println(""Email sent to "" + order.getCustomer().getEmail() + "" for order "" + order.getId());
    }
}",code_smell,long_method,,qwen/qwen3-32b
Python,"class UserManager:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        cursor.close()
        return user_data
    
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users')
        users_data = cursor.fetchall()
        cursor.close()
        return users_data
    
    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute('UPDATE users SET name = %s, email = %s WHERE id = %s', (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
        cursor.close()
    
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('DELETE FROM users WHERE id = %s', (user_id,))
        self.db_connection.commit()
        cursor.close()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off-by-one bug
            int value = data[i] * 2; // may read out of bounds
            results_.push_back(value);
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& results() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(input); });
    t.join();
    for (int v : processor.results()) {
        std::cout << v << "" "";
    }
    std::cout << std::endl;
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrders(List<Order> orders) {
        for (Order order : orders) {
            if (order.getStatus() == OrderStatus.PENDING) {
                if (order.getTotalAmount() > 0) {
                    String paymentMethod = order.getPaymentMethod();
                    if (paymentMethod.equals(""CREDIT_CARD"")) {
                        processCreditCardPayment(order);
                    } else if (paymentMethod.equals(""PAYPAL"")) {
                        processPayPalPayment(order);
                    } else {
                        order.setStatus(OrderStatus.FAILED);
                    }
                }
            }
        }
    }

    private void processCreditCardPayment(Order order) {
        // Simulated credit card processing
        System.out.println(""Processing credit card payment for order: "" + order.getId());
        order.setStatus(OrderStatus.PROCESSED);
    }

    private void processPayPalPayment(Order order) {
        // Simulated PayPal processing
        System.out.println(""Processing PayPal payment for order: "" + order.getId());
        order.setStatus(OrderStatus.PROCESSED);
    }
}",code_smell,conditional_complexity,,qwen/qwen3-32b
Python,"import json
import os
import sqlite3
from datetime import datetime

class UserManager:
    def __init__(self, db_path='users.db'):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''CREATE TABLE IF NOT EXISTS users (
                                id INTEGER PRIMARY KEY,
                                username TEXT,
                                password TEXT,
                                created_at TEXT)''')
        self.conn.commit()

    def create_user(self, username, password):
        # Password stored in plain text – security defect
        self.conn.execute('INSERT INTO users (username, password, created_at) VALUES (?, ?, ?)',
                          (username, password, datetime.utcnow().isoformat()))
        self.conn.commit()

    def authenticate(self, username, password):
        cursor = self.conn.execute('SELECT password FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row and row[0] == password:
            return True
        return False

    def export_user_data(self, output_path):
        # Unsafe deserialization – reads raw JSON from file without validation
        with open(output_path, 'r') as f:
            data = json.load(f)
        for user in data.get('users', []):
            self.create_user(user['username'], user['password'])

    def close(self):
        self.conn.close()

# Example usage
if __name__ == '__main__':
    manager = UserManager()
    manager.create_user('alice', 's3cr3t')
    print('Authenticated:', manager.authenticate('alice', 's3cr3t'))
    # Exporting data from an untrusted source can lead to injection
    manager.export_user_data('untrusted_input.json')
    manager.close()",code_defect,security_vulnerability,,openai/gpt-oss-120b
Python,"import json
import os

class ConfigLoader:
    def __init__(self):
        self.config_path = 'config.json'
        self._config = None

    def load_config(self):
        if not os.path.exists(self.config_path):
            self._config = {
                'host': 'localhost',
                'port': 8080,
                'debug': False
            }
            with open(self.config_path, 'w') as f:
                json.dump(self._config, f)
        else:
            with open(self.config_path, 'r') as f:
                self._config = json.load(f)

    def get_config(self):
        return self._config

    def set_debug(self, debug):
        self._config['debug'] = debug
        with open(self.config_path, 'w') as f:
            json.dump(self._config, f)

    def set_host(self, host):
        self._config['host'] = host
        with open(self.config_path, 'w') as f:
            json.dump(self._config, f)

    def set_port(self, port):
        self._config['port'] = port
        with open(self.config_path, 'w') as f:
            json.dump(self._config, f)

    def get_debug(self):
        return self._config.get('debug', False)

    def get_host(self):
        return self._config.get('host', 'localhost')

    def get_port(self):
        return self._config.get('port', 8080)

    def set_all(self, host, port, debug):
        self._config['host'] = host
        self._config['port'] = port
        self._config['debug'] = debug
        with open(self.config_path, 'w') as f:
            json.dump(self._config, f)

config_loader = ConfigLoader()
config_loader.load_config()
print(config_loader.get_config())",code_smell,lack_of_separation_of_concerns,,qwen/qwen3-32b
Java,"public class UserDAO {
    private Connection connection;
    public UserDAO() {
        try {
            Class.forName(""com.mysql.cj.jdbc.Driver"");
            connection = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""root"", ""password"");
        } catch (Exception e) {}
    }
    public List<User> getAllUsers() {
        List<User> users = new ArrayList<>();
        try {
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(""SELECT * FROM users"");
            while (resultSet.next()) {
                User user = new User();
                user.setId(resultSet.getInt(""id""));
                user.setName(resultSet.getString(""name""));
                users.add(user);
            }
        } catch (Exception e) {}
        return users;
    }
}",code_defect,unhandled_sql_exceptions_and_empty_catch_blocks,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : logFile(file) {}
    void process() {
        std::vector<std::string> lines = readLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off‑by‑one error
            std::lock_guard<std::mutex> lock(mtx);
            std::cout << parseLine(lines[i]) << std::endl;
        }
    }
private:
    std::string logFile;
    std::mutex mtx;
    std::vector<std::string> readLines() {
        // Dummy implementation
        return {""entry1"", ""entry2"", ""entry3""};
    }
    std::string parseLine(const std::string& line) {
        // Simple parsing stub
        return ""Parsed:"" + line;
    }
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    std::thread t1(&LogProcessor::process, &lp);
    std::thread t2(&LogProcessor::process, &lp);
    t1.join();
    t2.join();
    return 0;
}
",code_defect,off_by_one_error_and_race_condition,,openai/gpt-oss-120b
Python,"import sqlite3

class UserManager:
    def __init__(self, db_path='users.db'):
        self.conn = sqlite3.connect(db_path)
        self.cursor = self.conn.cursor()
        self.create_table()

    def create_table(self):
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS users 
                             (id INTEGER PRIMARY KEY, name TEXT, email TEXT)''')
        self.conn.commit()

    def add_user(self, name, email):
        self.cursor.execute(f""INSERT INTO users (name, email) VALUES ('{name}', '{email}')"")
        self.conn.commit()

    def get_user_by_email(self, email):
        self.cursor.execute(f""SELECT * FROM users WHERE email = '{email}'"")
        return self.cursor.fetchone()

    def close(self):
        self.conn.close()

# Usage
if __name__ == '__main__':
    manager = UserManager()
    manager.add_user('Alice', 'alice@example.com')
    user = manager.get_user_by_email('alice@example.com')
    print(user)
    manager.close()",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
Python,"class UserManager:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute('UPDATE users SET name = %s, email = %s WHERE id = %s', (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
    
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('DELETE FROM users WHERE id = %s', (user_id,))
        self.db_connection.commit()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}

    void addTransaction(int amount) {
        std::lock_guard<std::mutex> lock(mtx_);
        transactions_.push_back(amount);
        total_ += amount; // BUG: total_ updated without synchronization in processAll()
    }

    void processAll() {
        // Simulate processing each transaction
        for (size_t i = 0; i < transactions_.size(); ++i) {
            // heavy computation placeholder
            std::this_thread::sleep_for(std::chrono::milliseconds(1));
        }
        // Reset after processing
        std::lock_guard<std::mutex> lock(mtx_);
        transactions_.clear();
        // total_ is NOT reset, leading to stale sum on subsequent runs
    }

    int getTotal() const {
        return total_; // data race: reading without lock
    }

private:
    std::vector<int> transactions_;
    int total_;
    mutable std::mutex mtx_;
};

void worker(TransactionProcessor& proc, int id) {
    for (int i = 0; i < 100; ++i) {
        proc.addTransaction(id * 10 + i);
    }
}

int main() {
    TransactionProcessor processor;
    std::thread t1(worker, std::ref(processor), 1);
    std::thread t2(worker, std::ref(processor), 2);
    t1.join();
    t2.join();
    processor.processAll();
    std::cout << ""Total processed: "" << processor.getTotal() << std::endl;
    return 0;
}",code_defect,data_race_and_stale_state,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                order.markAsProcessed();
                if (order.getTotal() > 100) {
                    applyLargeOrderDiscount(order);
                } else {
                    applyStandardDiscount(order);
                }
            }
        }
    }

    private void applyLargeOrderDiscount(Order order) {
        double discount = order.getTotal() * 0.15;
        order.setTotal(order.getTotal() - discount);
    }

    private void applyStandardDiscount(Order order) {
        double discount = order.getTotal() * 0.05;
        order.setTotal(order.getTotal() - discount);
    }

    public static void main(String[] args) {
        List<Order> orders = new ArrayList<>();
        // Assume orders are populated from a database or external source
        OrderProcessor processor = new OrderProcessor(orders);
        processor.processOrders();
    }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    void sortEmployees() { std::sort(employees.begin(), employees.end(), [](Employee a, Employee b) { return a.getAge() < b.getAge(); }); }
    void printEmployees() {
        for (Employee employee : employees) {
            std::cout << employee.getName() << std::endl;
        }
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 30));
    manager.addEmployee(Employee(""Alice"", 25));
    manager.sortEmployees();
    manager.printEmployees();
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""root"";
    private static final String DB_PASSWORD = ""password""; // hardcoded secret

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            conn.setAutoCommit(false);
            if (updateBalance(conn, userId, -amount) && recordTransaction(conn, userId, amount)) {
                conn.commit();
                return true;
            } else {
                conn.rollback();
                return false;
            }
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ignored) {}
            return false;
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }

    private boolean updateBalance(Connection conn, String userId, double delta) throws SQLException {
        String sql = ""UPDATE accounts SET balance = balance + ? WHERE user_id = ?"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setDouble(1, delta);
        stmt.setString(2, userId);
        int rows = stmt.executeUpdate();
        return rows == 1;
    }

    private boolean recordTransaction(Connection conn, String userId, double amount) throws SQLException {
        String sql = ""INSERT INTO transactions (user_id, amount, timestamp) VALUES (?, ?, NOW())"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, userId);
        stmt.setDouble(2, amount);
        int rows = stmt.executeUpdate();
        return rows == 1;
    }

    // Vulnerable method: SQL injection risk
    public double getUserBalance(String userId) {
        double balance = 0.0;
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             Statement stmt = conn.createStatement()) {
            String query = ""SELECT balance FROM accounts WHERE user_id = '"" + userId + ""'""; // unsanitized input
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                balance = rs.getDouble(""balance"");
            }
        } catch (SQLException e) {
            // ignore
        }
        return balance;
    }
}
",code_defect,sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off-by-one error
            int value = data[i] * 2;
            results_.push_back(value);
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& results() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1,2,3,4,5};
    std::thread t([&](){ processor.process(input); });
    t.join();
    for (int v : processor.results()) {
        std::cout << v << "" "";
    }
    std::cout << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <fstream>

void read_and_print_file(const std::string& filename) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << ""Error opening file"" << std::endl;
        return;
    }

    std::string line;
    while (std::getline(file, line)) {
        std::cout << line << std::endl;
    }
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        std::cerr << ""Usage: "" << argv[0] << "" <filename>"" << std::endl;
        return 1;
    }

    read_and_print_file(argv[1]);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserDAO { private static final String DB_URL = ""jdbc:mysql://localhost:3306/mydb""; private static final String USER = ""root""; private static final String PASS = ""password""; public UserDAO() {} public void saveUser(String name, String email) { try { Class.forName(""com.mysql.cj.jdbc.Driver""); Connection conn = DriverManager.getConnection(DB_URL, USER, PASS); String query = ""INSERT INTO users (name, email) VALUES ('"" + name + ""', '"" + email + ""')""; Statement stmt = conn.createStatement(); stmt.executeUpdate(query); } catch (Exception e) { System.out.println(""Error saving user""); } } }",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Reads config file synchronously each time; cache never used
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) this.load();
    return this.cache[key];
  }
}

// Global singleton used across modules
const config = new ConfigLoader('./config.json');

function processData(input) {
  // Assume input is an array of objects with 'value' property
  let sum = 0;
  for (let i = 0; i <= input.length; i++) { // off‑by‑one error, may read undefined
    sum += input[i].value;
  }
  const multiplier = config.get('multiplier') || 1;
  return sum * multiplier;
}

module.exports = { processData, config };",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

struct User {
    std::string username;
    std::string password;
    bool is_active;
};

void processUser(User& user) {
    if (user.username.length() < 3) {
        std::cout << ""Invalid username for user "" << user.username << std::endl;
        return;
    }

    if (user.password.length() < 8) {
        std::cout << ""Password is too weak for user "" << user.username << std::endl;
        return;
    }

    if (!user.is_active) {
        std::cout << ""User "" << user.username << "" is not active. Skipping processing."" << std::endl;
        return;
    }

    // Simulate some processing
    std::cout << ""Processing user: "" << user.username << std::endl;
}

int main() {
    std::vector<User> users = {
        {""john_doe"", ""s3cr3t!@#"", true},
        {""alice_smith"", ""password123"", false},
        {""bob"", ""123456789"", true},
        {""charlie"", ""p@$$w0rd"", true}
    };

    for (auto& user : users) {
        processUser(user);
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
        self.is_active = True

    def deactivate_account(self):
        self.is_active = False

    def change_password(self, new_password):
        if len(new_password) < 8:
            print('Password is too short')
        else:
            self.password = new_password

    def send_email(self, message):
        # Simulating email sending
        print(f'Sending email to {self.email}: {message}')

# Usage
account = UserAccount('john_doe', 'mysecretpassword', 'johndoe@example.com')
account.change_password('newpassword123')
account.send_email('Your account has been updated')",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class UserService {
  constructor(db) {
    this.db = db;
  }

  // Fetch a page of users, 1-indexed page numbers
  async getUsersPage(pageNumber, pageSize) {
    const offset = (pageNumber - 1) * pageSize;
    const limit = pageSize;
    // BUG: off‑by‑one error – should be offset + limit, but uses offset only
    const rows = await this.db.query('SELECT * FROM users ORDER BY id LIMIT $1 OFFSET $2', [limit, offset]);
    return rows;
  }

  // Update user email without validation
  async updateEmail(userId, newEmail) {
    // SECURITY DEFECT: no sanitization, potential SQL injection
    await this.db.query(`UPDATE users SET email = '${newEmail}' WHERE id = ${userId}`);
  }
}

module.exports = UserService;",code_defect,off_by_one_error_and_sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    DataProcessor() : buffer_{} {}

    void addData(int value) {
        buffer_.push_back(value);
    }

    void process() {
        for (int i = 0; i < buffer_.size(); ++i) {
            buffer_[i] = buffer_[i] * 2;
            if (i < buffer_.size() - 1) {
                buffer_[i + 1] += buffer_[i];
            }
        }
    }

    void printResults() {
        for (int val : buffer_) {
            std::cout << val << "" "";
        }
        std::cout << std::endl;
    }

private:
    std::vector<int> buffer_;
};

int main() {
    DataProcessor dp;
    dp.addData(5);
    dp.addData(10);
    dp.addData(15);
    dp.process();
    dp.printResults();
    return 0;
}",code_defect,off_by_one_error,,qwen/qwen3-32b
JavaScript,"class UserAuthenticator {
  constructor(database) {
    this.database = database;
  }

  authenticate(username, password) {
    const users = this.database.users;
    for (let i = 0; i < users.length; i++) {
      if (users[i].username === username) {
        if (users[i].password === password) {
          return true;
        }
      }
    }
    return false;
  }
}
const authenticator = new UserAuthenticator({ users: [{ username: 'admin', password: 'password123' }] });
console.log(authenticator.authenticate('admin', 'password123'));",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"package com.example.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection,,openai/gpt-oss-120b
JavaScript,"const fs = require('fs');
const path = require('path');

class ConfigLoader {
    constructor(configDir) {
        this.configDir = configDir;
        this.cache = {};
    }

    // Loads a JSON config file and caches it
    loadConfig(name) {
        const filePath = path.join(this.configDir, `${name}.json`);
        // Asynchronously read file but return before it's finished
        fs.readFile(filePath, 'utf8', (err, data) => {
            if (err) {
                console.error('Failed to read config:', err);
                return;
            }
            try {
                this.cache[name] = JSON.parse(data);
            } catch (e) {
                console.error('Invalid JSON in config:', e);
            }
        });
        // Returns possibly undefined cached value immediately
        return this.cache[name];
    }
}

// Usage example
const loader = new ConfigLoader('/etc/app/config');
const dbConfig = loader.loadConfig('database');
if (dbConfig) {
    console.log('Database host:', dbConfig.host);
} else {
    console.log('Config not loaded yet');
}
",code_defect,asynchronous_logic_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (data[i] == data[j]) {
                std::cout << ""Duplicate found: "" << data[i] << std::endl;
                return;
            }
        }
    }
    std::cout << ""No duplicates found."";
}

int main() {
    std::vector<int> values = {1, 2, 3, 4, 5, 1};
    processData(values);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        if user_data:
            return {'id': user_data[0], 'name': user_data[1], 'email': user_data[2]}
        else:
            return None
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users')
        users_data = cursor.fetchall()
        users = []
        for user_data in users_data:
            users.append({'id': user_data[0], 'name': user_data[1], 'email': user_data[2]})
        return users",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<Transaction> fetchPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction t = new Transaction();
            t.setId(rs.getInt(""id""));
            t.setAmount(rs.getDouble(""amount""));
            t.setStatus(rs.getString(""status""));
            list.add(t);
        }
        // Missing rs.close(), stmt.close(), conn.close()
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = fetchPendingTransactions();
            for (Transaction tx : pending) {
                if (tx.getAmount() < 0) {
                    // negative amount should be rejected, but logic proceeds
                }
                updateTransactionStatus(tx.getId(), ""COMPLETED"");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateTransactionStatus(int id, String newStatus) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""UPDATE transactions SET status='"" + newStatus + ""' WHERE id="" + id; // SQL injection risk
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.executeUpdate();
            // Missing stmt.close(), conn.close()
        } catch (SQLException e) {
            // Swallow exception, no logging
        }
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }
        List<Item> items = order.getItems();
        for (Item item : items) {
            if (item.getQuantity() > 0) {
                System.out.println(""Processing item: "" + item.getName());
                // Simulate item processing
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    // Ignored intentionally
                }
            }
        }
    }

    // Unused method
    public void calculateTotalPrice(Order order) {
        // Not implemented
    }
}",code_smell,dead_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    Student(std::string name, int grade) : name(name), grade(grade) {}

    std::string getName() { return name; }
    int getGrade() { return grade; }

private:
    std::string name;
    int grade;
};

class StudentDatabase {
public:
    void addStudent(Student student) { students.push_back(student); }
    Student getStudentWithHighestGrade() {
        if (students.empty()) {
            throw std::runtime_error(""No students in database"");
        }
        return *std::max_element(students.begin(), students.end(),
            [](const Student& a, const Student& b) { return a.getGrade() < b.getGrade(); });
    }

private:
    std::vector<Student> students;
};

int main() {
    StudentDatabase db;
    db.addStudent(Student(""Alice"", 90));
    db.addStudent(Student(""Bob"", 95));
    try {
        Student topStudent = db.getStudentWithHighestGrade();
        std::cout << ""Top student: "" << topStudent.getName() << "" with grade "" << topStudent.getGrade() << std::endl;
    } catch (const std::exception& e) {
        std::cerr << ""Error: "" << e.what() << std::endl;
    }
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    LogAggregator() : stopFlag(false) {}
    ~LogAggregator() { stop(); }

    void start() {
        worker = std::thread(&LogAggregator::process, this);
    }

    void stop() {
        stopFlag = true;
        if (worker.joinable())
            worker.join();
    }

    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        buffer.push_back(msg);
    }

private:
    void process() {
        while (!stopFlag) {
            std::vector<std::string> localCopy;
            {
                std::lock_guard<std::mutex> lock(mtx);
                localCopy.swap(buffer);
            }
            for (const auto& line : localCopy) {
                // Simulate I/O delay
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                std::cout << line << std::endl;
            }
        }
    }

    std::vector<std::string> buffer;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogAggregator logger;
    logger.start();
    for (int i = 0; i < 5; ++i) {
        logger.addLog(""Message "" + std::to_string(i));
    }
    // Forgot to stop the logger before exiting
    return 0;
}",code_defect,resource_leak_due_to_unjoined_thread,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final String API_KEY = ""1234567890abcdef"";

    public void processOrder(Order order) {
        if (order != null) {
            String customerEmail = order.getCustomerEmail();
            String productCode = order.getProductCode();
            int quantity = order.getQuantity();

            if (quantity > 0 && productCode != null) {
                System.out.println(""Processing order for "" + customerEmail);
                String message = ""Your order for "" + quantity + "" units of "" + productCode + "" is being processed."";
                sendEmail(customerEmail, message);
                logOrderDetails(order);
            }
        }
    }

    private void sendEmail(String email, String message) {
        // Simulated email sending logic
        System.out.println(""Email sent to "" + email + "": "" + message);
    }

    private void logOrderDetails(Order order) {
        // Simulated logging logic
        System.out.println(""Logged order details: "" + order.toString());
    }
}",code_defect,hardcoded_secret,,qwen/qwen3-32b
JavaScript,"
      class UserAuthenticator {
         constructor(database) {
            this.database = database;
         }

         authenticate(username, password) {
            const users = this.database.getUsers();
            for (let i = 0; i < users.length; i++) {
               if (users[i].username === username) {
                  if (users[i].password === password) {
                     return true;
                  }
               }
            }
            return false;
         }
      }

      class Database {
         constructor() {
            this.users = [
               { username: 'admin', password: 'password123' },
               { username: 'user', password: 'password456' }
            ];
         }

         getUsers() {
            return this.users;
         }
      }

      const database = new Database();
      const authenticator = new UserAuthenticator(database);
      console.log(authenticator.authenticate('admin', 'password123'));
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String domain) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // insecure concatenation leads to SQL injection
            String sql = ""SELECT email FROM users WHERE email LIKE '"" + ""%@"" + domain + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class UserAuthentication {
    private String username;
    private String password;

    public boolean authenticate(String inputUsername, String inputPassword) {
        if (username == null || password == null) {
            return false;
        }

        if (inputUsername.equals(username)) {
            if (inputPassword.equals(password)) {
                return true;
            }
        }
        return false;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}",code_defect,security_vulnerability,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <string>
      
      class User {
      public:
         std::string name;
         int age;
         std::vector<std::string> addresses;
      
         User(std::string n, int a) : name(n), age(a) {}
      
         void addAddress(std::string address) {
            addresses.push_back(address);
         }
      
         void printInfo() {
            std::cout << ""Name: "" << name << std::endl;
            std::cout << ""Age: "" << age << std::endl;
            for (const auto& address : addresses) {
               std::cout << ""Address: "" << address << std::endl;
            }
         }
      };
      
      int main() {
         User user(""John"", 30);
         user.addAddress(""123 Main St"");
         user.addAddress(""456 Elm St"");
         user.printInfo();
         return 0;
      }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails() {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Missing close for Statement and Connection leads to resource leak
        }
        return emails;
    }
}
",code_defect,resource_leak,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  processUser(user) {
    if (!user) return;

    let processedUser = {};

    processedUser.id = user.id;
    processedUser.name = user.name ? user.name : 'Unknown';
    processedUser.email = user.email;

    if (user.roles && user.roles.length > 0) {
      processedUser.role = user.roles[0].toUpperCase();
    } else {
      processedUser.role = 'GUEST';
    }

    if (user.preferences) {
      processedUser.language = user.preferences.language || 'en';
      processedUser.theme = user.preferences.theme || 'light';
    } else {
      processedUser.language = 'en';
      processedUser.theme = 'light';
    }

    return processedUser;
  }

  // Legacy code from v1, to be removed in v2
  // processUserLegacy(user) {
  //   // old processing logic
  // }
}

// Example usage:
const user = {
  id: 123,
  name: 'Alice',
  email: 'alice@example.com',
  roles: ['admin'],
  preferences: {
    language: 'es',
    theme: 'dark'
  }
};

const processor = new UserProcessor();
const result = processor.processUser(user);
console.log(result);",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  removeUser(username) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        this.users.splice(i, 1);
        break;
      }
    }
  }

  getUser(username) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        return this.users[i];
      }
    }
    return null;
  }
}

let userManager = new UserManager();
let user = { username: 'john', password: 'password123' };
userManager.addUser(user);
console.log(userManager.getUser('john'));
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # NOTE: Using eval on file content – insecure!
        with open(self.config_path, 'r') as f:
            data = f.read()
            self.settings = eval(data)  # unsafe deserialization

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, db_conn_str):
        self.db_conn_str = db_conn_str
        self.logger = logging.getLogger(__name__)

    def fetch_user_data(self, user_id):
        # Simulated DB fetch – vulnerable to SQL injection
        query = f""SELECT * FROM users WHERE id = {user_id}""
        self.logger.debug(f""Executing query: {query}"")
        # Placeholder for actual DB call
        return self._execute_query(query)

    def _execute_query(self, query):
        # Mocked response
        return {""id"": 1, ""name"": ""Alice""}

    def process(self, user_id):
        user = self.fetch_user_data(user_id)
        # Assume processing involves JSON serialization
        return json.dumps(user)

if __name__ == ""__main__"":
    cfg = ConfigLoader('config.cfg')
    processor = DataProcessor(cfg.get('db_conn'))
    result = processor.process(os.getenv('USER_ID'))
    print(result)",code_defect,unsafe_deserialization_and_sql_injection,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

def process_user_data(user_data):
    processed_users = []
    for user in user_data:
        user_id = user.get('id')
        name = user.get('name')
        email = user.get('email')
        is_active = user.get('is_active', False)

        if not user_id or not name or not email:
            continue

        processed_users.append({
            'id': user_id,
            'name': name,
            'email': email,
            'is_active': is_active,
            'processed_at': datetime.now().isoformat()
        })

    return processed_users


def load_user_data(file_path):
    if not os.path.exists(file_path):
        return []

    with open(file_path, 'r') as file:
        try:
            return json.load(file)
        except json.JSONDecodeError:
            return []


def save_processed_data(data, output_path):
    with open(output_path, 'w') as file:
        json.dump(data, file, indent=2)


def main():
    input_path = 'users.json'
    output_path = 'processed_users.json'

    user_data = load_user_data(input_path)
    processed_users = process_user_data(user_data)
    save_processed_data(processed_users, output_path)

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getAllUsers() {
            try {
               const users = await this.userRepository.findAll();
               return users.map(user => ({ id: user.id, name: user.name }));
            } catch (error) {
               console.error(error);
               return [];
            }
         }

         async getUserById(id) {
            try {
               const user = await this.userRepository.findById(id);
               if (!user) {
                  throw new Error('User not found');
               }
               return { id: user.id, name: user.name };
            } catch (error) {
               console.error(error);
               throw error;
            }
         }
      }

      class UserRepository {
         async findAll() {
            // Simulating a database query
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' }
            ];
         }

         async findById(id) {
            // Simulating a database query
            const users = await this.findAll();
            return users.find(user => user.id === id);
         }
      }

      const userRepository = new UserRepository();
      const userService = new UserService(userRepository);
      userService.getAllUsers().then(users => console.log(users));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password):
        # NOTE: insecure password handling for demo purposes
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, password_hash) VALUES (?, ?)', (username, password))
        self.conn.commit()

    def authenticate(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute('SELECT password_hash FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row and row[0] == password:
            return True
        return False

    def export_user_data(self, export_path):
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, username, password_hash FROM users')
        users = cursor.fetchall()
        # Vulnerable to insecure deserialization if file is tampered
        with open(export_path, 'w') as f:
            json.dump(users, f)

    def import_user_data(self, import_path):
        # No validation of imported data; may lead to SQL injection or corrupt DB
        with open(import_path, 'r') as f:
            users = json.load(f)
        cursor = self.conn.cursor()
        for user in users:
            cursor.execute('INSERT INTO users (id, username, password_hash) VALUES (?, ?, ?)', user)
        self.conn.commit()

# Example usage
if __name__ == '__main__':
    manager = UserManager('users.db')
    manager.add_user('alice', 'secret123')
    manager.add_user('bob', 'password')
    print('Auth alice:', manager.authenticate('alice', 'secret123'))
    manager.export_user_data('backup.json')
    # Simulate restore
    manager.import_user_data('backup.json')
",code_defect,insecure_data_handling,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

void processData(const vector<string>& input, vector<int>& output) {
    for (size_t i = 0; i < input.size(); ++i) {
        string s = input[i];
        for (size_t j = 0; j < s.length(); ++j) {
            if (s[j] >= '0' && s[j] <= '9') {
                output.push_back(s[j] - '0');
            } else {
                // Re-check character
                if (s[j] >= 'a' && s[j] <= 'z') {
                    output.push_back(10 + (s[j] - 'a'));
                } else if (s[j] >= 'A' && s[j] <= 'Z') {
                    output.push_back(36 + (s[j] - 'A'));
                }
            }
        }
    }
}

int main() {
    vector<string> data = {""abc123"", ""XYZ456""};
    vector<int> result;
    processData(data, result);
    for (int val : result) {
        cout << val << "" "";
    }
    cout << endl;
    return 0;
}",code_smell,inefficient_loop,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = "" + str(user_id))
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, user_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = '"" + user_data['name'] + ""', email = '"" + user_data['email'] + ""' WHERE id = "" + str(user_id))
        self.db_connection.commit()

# usage
import sqlite3
db_connection = sqlite3.connect('users.db')
user_service = UserService(db_connection)
user_data = user_service.get_user(1)
print(user_data)
user_service.update_user(1, {'name': 'John Doe', 'email': 'john@example.com'})
   ",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(configPath) {
        this.configPath = configPath;
        this.cache = null;
    }

    load() {
        // Reads config file synchronously every call, ignoring cache
        const data = fs.readFileSync(this.configPath, 'utf8');
        try {
            this.cache = JSON.parse(data);
        } catch (e) {
            // Swallow parsing errors, return previous cache
            return this.cache;
        }
        return this.cache;
    }
}

function processData(input) {
    // Expects input as an object with numeric 'value'
    if (input && typeof input.value === 'number') {
        // Off‑by‑one error: should be <= 100
        if (input.value > 100) {
            throw new Error('Value out of range');
        }
        return input.value * 2;
    }
    // Missing else branch leads to undefined return
}

// Usage example
const loader = new ConfigLoader('./config.json');
const config = loader.load();
const result = processData(config);
console.log('Result:', result);
",code_defect,off_by_one_error_and_swallowed_exception,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(String userId, String productId, int quantity, String paymentMethod, String shippingAddress) {
        if (userId == null || productId == null || paymentMethod == null || shippingAddress == null) {
            throw new IllegalArgumentException(""Invalid input"");
        }

        if (quantity <= 0) {
            throw new IllegalArgumentException(""Quantity must be positive"");
        }

        // Simulate fetching user from a database
        User user = fetchUserFromDatabase(userId);
        Product product = fetchProductFromDatabase(productId);

        if (user == null) {
            throw new RuntimeException(""User not found"");
        }

        if (product == null || product.getPrice() <= 0) {
            throw new RuntimeException(""Product invalid or price missing"");
        }

        // Simulate payment processing
        boolean paymentSuccessful = processPayment(user, product.getPrice() * quantity, paymentMethod);
        if (!paymentSuccessful) {
            throw new RuntimeException(""Payment failed"");
        }

        // Simulate shipping order
        boolean shippingSuccessful = shipProduct(shippingAddress, quantity);
        if (!shippingSuccessful) {
            throw new RuntimeException(""Shipping failed"");
        }

        // Save order to database
        saveOrderToDatabase(user, product, quantity, paymentMethod, shippingAddress);
    }

    private User fetchUserFromDatabase(String userId) {
        // Simulated DB call
        return new User(userId, ""John Doe"");
    }

    private Product fetchProductFromDatabase(String productId) {
        // Simulated DB call
        return new Product(productId, ""Laptop"", 1200.00);
    }

    private boolean processPayment(User user, double totalCost, String paymentMethod) {
        // Simulated payment processing
        return true;
    }

    private boolean shipProduct(String address, int quantity) {
        // Simulated shipping logic
        return true;
    }

    private void saveOrderToDatabase(User user, Product product, int quantity, String paymentMethod, String shippingAddress) {
        // Simulated DB save
    }

    private static class User {
        String userId;
        String name;

        User(String userId, String name) {
            this.userId = userId;
            this.name = name;
        }
    }

    private static class Product {
        String productId;
        String name;
        double price;

        Product(String productId, String name, double price) {
            this.productId = productId;
            this.name = name;
            this.price = price;
        }

        double getPrice() {
            return price;
        }
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
        self.is_active = True
    def deactivate_account(self):
        self.is_active = False
    def change_password(self, new_password):
        self.password = new_password
    def check_credentials(self, input_username, input_password):
        return self.username == input_username and self.password == input_password

account = UserAccount('test_user', 'password123', 'test@example.com')
print(account.check_credentials('test_user', 'wrong_password'))",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // insecure concatenation, possible SQL injection if limit came from user input
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // missing null checks, may throw NullPointerException
            try { stmt.close(); } catch (Exception ignored) {}
            try { conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void deleteAllUsers() {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // dangerous: deletes all rows without confirmation
            stmt.executeUpdate(""DELETE FROM users"");
        } catch (Exception e) {
            // swallow exception, no logging
        } finally {
            // resources not closed properly if exception occurs before stmt init
            try { stmt.close(); } catch (Exception ignored) {}
            try { conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,hardcoded_credentials_and_sql_injection_risk,,openai/gpt-oss-120b
Python,"import os
import requests

class DataProcessor:
    def __init__(self, url, timeout=5):
        self.url = url
        self.timeout = timeout

    def fetch_and_process(self):
        response = requests.get(self.url, timeout=self.timeout)
        if response.status_code == 200:
            data = response.json()
            processed = self._process_data(data)
            return processed
        else:
            return None

    def _process_data(self, data):
        results = []
        for item in data:
            processed_item = {
                'id': item.get('id'),
                'name': item.get('name'),
                'value': item.get('value')
            }
            results.append(processed_item)
        return results

    def save_results(self, results, filename='output.txt'):
        with open(filename, 'w') as f:
            for result in results:
                f.write(str(result) + '\n')

if __name__ == '__main__':
    processor = DataProcessor('https://api.example.com/data')
    results = processor.fetch_and_process()
    if results:
        processor.save_results(results)
    else:
        print('Failed to fetch and process data.')",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserManager { private static Map<String, User> users = new HashMap<>(); public static void addUser(String username, String password) { users.put(username, new User(username, password)); } public static User getUser(String username) { return users.get(username); } public static class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""P@ssw0rd""; // hardcoded secret

    public User getUserById(int userId) {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // SQL injection vulnerability: userId is concatenated directly
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId;
            rs = stmt.executeQuery(sql);
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Resources not closed properly, may leak connections
        }
        return null;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection_and_resource_leak,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

class User {
public:
    User(const std::string& name, int id) : name_(name), id_(id) {}

    void printInfo() const {
        std::cout << ""Name: "" << name_ << "", ID: "" << id_ << std::endl;
    }

    std::string getName() const {
        return name_;
    }

    int getId() const {
        return id_;
    }

private:
    std::string name_;
    int id_;
};

int main() {
    std::vector<User> users = {
        User(""Alice"", 1),
        User(""Bob"", 2),
        User(""Charlie"", 3)
    };

    for (const auto& user : users) {
        user.printInfo();
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,public class UserManager { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUser(int index) { return users.get(index); } public int getSize() { return users.size(); } },clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Bug: processing even when no task was retrieved (task == 0)
            // This leads to unintended processing of zero values.
            std::cout << ""Processing: "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main(){
    DataProcessor dp;
    dp.start();
    for(int i=1;i<=5;++i) dp.addTask(i);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrders(List<Order> orders) {
        for (Order order : orders) {
            if (order.isValid()) {
                if (order.isDiscountEligible()) {
                    double discountedPrice = order.getTotalPrice() * 0.9;
                    order.setTotalPrice(discountedPrice);
                }
                if (order.isPriority()) {
                    sendToPriorityQueue(order);
                } else {
                    sendToStandardQueue(order);
                }
            }
        }
    }

    private void sendToPriorityQueue(Order order) {
        // Logic to send to priority queue
    }

    private void sendToStandardQueue(Order order) {
        // Logic to send to standard queue
    }

    // TODO: Refactor into smaller methods
    // TODO: Extract business rules into a separate class
    // TODO: Add logging for order processing status
}",code_smell,large_function,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor() {
         this.users = {};
      }

      async getUser(id) {
         return new Promise((resolve) => {
            setTimeout(() => {
               resolve(this.users[id]);
            }, 1000);
         });
      }

      async addUser(user) {
         return new Promise((resolve) => {
            setTimeout(() => {
               this.users[user.id] = user;
               resolve();
            }, 1000);
         });
      }
   }

   class UserController {
      constructor(userService) {
         this.userService = userService;
      }

      async getUserById(id) {
         const user = await this.userService.getUser(id);
         if (!user) {
            throw new Error('User not found');
         }
         return user;
      }

      async addUser(user) {
         await this.userService.addUser(user);
      }
   }

   const userService = new UserService();
   const userController = new UserController(userService);
   ",code_smell,Tight Coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogManager {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
        // Simulate writing to disk (omitted)
    }
    void dump() const {
        for (const auto& m : logs_) {
            std::cout << m << std::endl;
        }
    }
private:
    std::vector<std::string> logs_;
    mutable std::mutex mtx_;
};

// Global logger instance (shared across threads)
LogManager g_logger;

void processData(const std::vector<int>& data) {
    // Intent: compute sum of squares
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) { // BUG: off‑by‑one, accesses out of bounds
        int val = data[i];
        sum += val * val;
    }
    g_logger.log(""Processed sum: "" + std::to_string(sum));
}

int main() {
    std::vector<int> values = {1, 2, 3, 4, 5};
    std::thread t1(processData, std::cref(values));
    std::thread t2(processData, std::cref(values));
    t1.join();
    t2.join();
    g_logger.dump();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import requests
import json

def fetch_data_from_api(url, headers=None):
    response = requests.get(url, headers=headers)
    return response.json()


def process_data(data):
    results = []
    for item in data:
        processed_item = {
            'id': item['id'],
            'name': item.get('name', 'N/A'),
            'status': item.get('status') or 'unknown'
        }
        results.append(processed_item)
    return results


def main():
    api_url = 'https://api.example.com/data'
    auth_header = {'Authorization': 'Bearer 12345'}

    raw_data = fetch_data_from_api(api_url, auth_header)
    processed = process_data(raw_data)

    with open('output.json', 'w') as f:
        json.dump(processed, f, indent=2)

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class Company {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    void sortEmployees() { 
        std::sort(employees.begin(), employees.end(), [](Employee a, Employee b) { return a.getAge() < b.getAge(); }); 
    }
    void printEmployees() { 
        for (auto& employee : employees) { 
            std::cout << employee.getName() << "" is "" << employee.getAge() << "" years old."" << std::endl; 
        } 
    }
private:
    std::vector<Employee> employees;
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 30));
    company.addEmployee(Employee(""Alice"", 25));
    company.sortEmployees();
    company.printEmployees();
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, password))
        self.conn.commit()

    def find_user(self, username):
        cursor = self.conn.cursor()
        # Vulnerable to SQL injection because username is interpolated directly
        query = f""SELECT * FROM users WHERE username = '{username}'""
        cursor.execute(query)
        return cursor.fetchone()

    def close(self):
        self.conn.close()

# Example usage
repo = UserRepository('app.db')
repo.add_user('alice', 's3cr3t')
user = repo.find_user(input('Enter username to search: '))
print('Found user:', user)
repo.close()",code_defect,SQL_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders = new ArrayList<>();

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                if (order.getTotal() > 0) {
                    processPayment(order);
                    sendConfirmationEmail(order);
                }
            }
        }
    }

    private void processPayment(Order order) {
        // Simulate payment processing
        System.out.println(""Processing payment for order "" + order.getId());
    }

    private void sendConfirmationEmail(Order order) {
        // Simulate email sending
        System.out.println(""Sending confirmation email for order "" + order.getId());
    }

    public void addOrder(Order order) {
        orders.add(order);
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserService {
     constructor(userRepository) {
       this.userRepository = userRepository;
     }

     async getUser(id) {
       const user = await this.userRepository.findById(id);
       if (!user) {
         throw new Error('User not found');
       }
       return user;
     }

     async getUsers() {
       return await this.userRepository.findAll();
     }

     async createUser(user) {
       if (!user || !user.name || !user.email) {
         throw new Error('Invalid user data');
       }
       return await this.userRepository.create(user);
     }

     async updateUser(id, user) {
       const existingUser = await this.getUser(id);
       if (!existingUser) {
         throw new Error('User not found');
       }
       return await this.userRepository.update(id, user);
     }

     async deleteUser(id) {
       const user = await this.getUser(id);
       if (!user) {
         throw new Error('User not found');
       }
       return await this.userRepository.delete(id);
     }
   }",code_smell,God class,,llama-3.3-70b-versatile
Java,"package com.example.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void process_data(std::vector<int>& data) {
    for (int i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 0) {
            data[i] *= 2;
        }
    }
}

void thread_task(std::vector<int>& data, int start, int end) {
    for (int i = start; i < end; ++i) {
        if (data[i] % 2 == 0) {
            std::lock_guard<std::mutex> lock(mtx);
            data[i] *= 2;
        }
    }
}

int main() {
    std::vector<int> data = {2, 3, 4, 5, 6, 7, 8, 9};

    std::thread t1(thread_task, std::ref(data), 0, data.size());
    std::thread t2(thread_task, std::ref(data), 0, data.size());

    t1.join();
    t2.join();

    process_data(data);

    for (int val : data) {
        std::cout << val << "" "";
    }

    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
Python,"
class PaymentProcessor:
    def __init__(self):
        self.cache = {}

    def process_payment(self, user_id, amount):
        if user_id in self.cache:
            return self.cache[user_id]
        else:
            # Simulating an external API call
            result = self._external_api_call(user_id, amount)
            self.cache[user_id] = result
            return result

    def _external_api_call(self, user_id, amount):
        # Simulating a delay
        import time
        time.sleep(1)
        return amount * 1.1

    def get_cached_result(self, user_id):
        return self.cache.get(user_id)

processor = PaymentProcessor()
print(processor.process_payment('user1', 100))
print(processor.get_cached_result('user1'))",code_smell,inefficient_caching,,llama-3.3-70b-versatile
Python,"import os
import json
from datetime import datetime

class ConfigManager:
    def __init__(self):
        self.config_path = os.path.join(os.getcwd(), 'config.json')
        self.data = self.load_config()

    def load_config(self):
        try:
            with open(self.config_path, 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            print('Config file not found, creating default.')
            return self.create_default_config()

    def create_default_config(self):
        default = {
            'timeout': 30,
            'retries': 3,
            'log_level': 'INFO',
            'debug': False
        }
        with open(self.config_path, 'w') as f:
            json.dump(default, f)
        return default

    def get_config_value(self, key):
        return self.data.get(key)

    def update_config(self, key, value):
        self.data[key] = value
        with open(self.config_path, 'w') as f:
            json.dump(self.data, f)

    def log_config(self):
        print(f'[{datetime.now()}] Current config: {self.data}')",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password):
        self.username = username
        self.password = password
    def authenticate(self, input_password):
        return self.password == input_password
    def change_password(self, new_password):
        self.password = new_password
    def get_username(self):
        return self.username
    def __str__(self):
        return f'User: {self.username}'

class Authenticator:
    def __init__(self):
        self.accounts = {}
    def add_account(self, account):
        self.accounts[account.username] = account
    def remove_account(self, username):
        if username in self.accounts:
            del self.accounts[username]
    def authenticate_user(self, username, password):
        if username in self.accounts:
            return self.accounts[username].authenticate(password)
        return False

authenticator = Authenticator()
account = UserAccount('test_user', 'test_password')
authenticator.add_account(account)
print(authenticator.authenticate_user('test_user', 'test_password'))",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # BUG: Using eval on file contents leads to code execution vulnerability
        with open(self.config_path, 'r') as f:
            data = f.read()
            self.settings = eval(data)  # unsafe
        logger.info(""Configuration loaded"")

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)

    def process(self, records):
        results = []
        for i in range(0, len(records), self.batch_size):
            batch = records[i:i + self.batch_size]
            results.extend(self._process_batch(batch))
        return results

    def _process_batch(self, batch):
        # Simulate processing
        return [self._transform(r) for r in batch]

    def _transform(self, record):
        # Assume record is a dict with 'value' key
        return record['value'] * 2

if __name__ == ""__main__"":
    cfg = ConfigLoader('config.cfg')
    processor = DataProcessor(cfg)
    sample_data = [{'value': i} for i in range(1000)]
    output = processor.process(sample_data)
    print(json.dumps(output[:10]))",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class UserAuthentication {
    public boolean validateUser(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        String hashedPassword = hashPassword(password);
        User user = fetchUserFromDatabase(username);

        if (user == null) {
            return false;
        }

        // Temporarily commented out for debugging
        // if (!user.isAccountActive()) {
        //     return false;
        // }

        return user.getPasswordHash().equals(hashedPassword);
    }

    private String hashPassword(String password) {
        // Simplified hashing for example purposes
        return password.hashCode() + """";
    }

    private User fetchUserFromDatabase(String username) {
        // Simulated database lookup
        if (""admin"".equals(username)) {
            return new User(""admin"", ""123"", true);
        } else {
            return null;
        }
    }

    private static class User {
        private String username;
        private String passwordHash;
        private boolean accountActive;

        public User(String username, String passwordHash, boolean accountActive) {
            this.username = username;
            this.passwordHash = passwordHash;
            this.accountActive = accountActive;
        }

        public String getPasswordHash() {
            return passwordHash;
        }

        public boolean isAccountActive() {
            return accountActive;
        }
    }
}",code_smell,commented_out_code,,qwen/qwen3-32b
Java,"public class UserService { private static final int MAX_ATTEMPTS = 5; public boolean authenticate(String username, String password) { for (int i = 0; i < MAX_ATTEMPTS; i++) { if (username.equals(""admin"") && password.equals(""password123"")) { return true; } } return false; } }",code_smell,magic_number,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize || 10;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn returns a promise that resolves to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off‑by‑one error – should use pageNumber - 1
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    const next = this.currentPage + 1;
    const page = this.getPage(next);
    if (page.length > 0) {
      this.currentPage = next;
    }
    return page;
  }
}

// Example usage
const paginator = new Paginator(5);
await paginator.loadItems(() => Promise.resolve([1,2,3,4,5,6,7,8,9,10]));
console.log('First page:', paginator.getPage(1)); // Expected [1,2,3,4,5] but gets [] due to bug
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processUserInput(const std::string& input) {
    std::string result;
    for (size_t i = 0; i < input.length(); ++i) {
        if (input[i] >= 'a' && input[i] <= 'z') {
            result += input[i];
        } else if (input[i] >= 'A' && input[i] <= 'Z') {
            result += input[i];
        } else {
            result += '_';
        }
    }

    return result;
}

int main() {
    std::vector<std::string> testInputs = {""Hello, World!"", ""C++ Rocks! 2023"", ""12345""};

    for (const auto& input : testInputs) {
        std::string processed = processUserInput(input);
        std::cout << ""Input: '"" << input << ""' -> Processed: '"" << processed << ""'\n"";
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserDatabase {
         constructor() {
            this.users = {};
         }

         addUser(id, name, email) {
            if (!this.users[id]) {
               this.users[id] = { name, email };
            }
         }

         getUser(id) {
            return this.users[id];
         }

         updateUser(id, name, email) {
            if (this.users[id]) {
               this.users[id].name = name;
               this.users[id].email = email;
            }
         }

         deleteUser(id) {
            if (this.users[id]) {
               delete this.users[id];
            }
         }
      }

      const db = new UserDatabase();
      db.addUser(1, 'John Doe', 'john@example.com');
      db.addUser(2, 'Jane Doe', 'jane@example.com');

      function printUser(id) {
         const user = db.getUser(id);
         if (user) {
            console.log(user.name, user.email);
         }
      }

      printUser(1);
      printUser(2);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class UserService {
    private Connection connection;

    public UserService(Connection connection) {
        this.connection = connection;
    }

    // Retrieves user by ID, but uses string concatenation leading to SQL injection vulnerability
    public Map<String, String> getUserById(String userId) throws SQLException {
        String query = ""SELECT username, email FROM users WHERE id = "" + userId;
        Statement stmt = connection.createStatement();
        ResultSet rs = stmt.executeQuery(query);
        Map<String, String> user = new HashMap<>();
        if (rs.next()) {
            user.put(""username"", rs.getString(""username""));
            user.put(""email"", rs.getString(""email""));
        }
        rs.close();
        stmt.close();
        return user;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, logger) {
    this.users = users;
    this.logger = logger;
    this.cache = {};
  }

  processUsers() {
    for (const user of this.users) {
      const cached = this.cache[user.id];
      if (cached) {
        this.logger.log(`User ${user.id} already processed`);
        continue;
      }

      this.cache[user.id] = true;

      if (!user || !user.name || !user.email) {
        this.logger.error(`Invalid user data for user ${user.id}`);
        continue;
      }

      const normalizedEmail = user.email.trim().toLowerCase();
      if (!this.validateEmail(normalizedEmail)) {
        this.logger.warn(`Invalid email for user ${user.id}`);
        continue;
      }

      this.sendEmail(normalizedEmail, `Hello, ${user.name}`);
    }
  }

  validateEmail(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  }

  sendEmail(email, message) {
    console.log(`Sending email to ${email}: ${message}`);
    // Actual email sending logic would go here
  }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>

   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };

   class UserService {
   public:
       std::vector<User> users;
       void addUser(User user) { users.push_back(user); }
       User getUser(int index) { return users[index]; }
   };

   int main() {
       UserService service;
       service.addUser(User(""John"", 30));
       service.addUser(User(""Alice"", 25));
       std::cout << service.getUser(0).getName() << std::endl;
       return 0;
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(configPath) {
        this.path = configPath;
        this.cache = null;
    }

    load() {
        // Synchronous read for simplicity, but no error handling
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }

    get(key) {
        if (!this.cache) {
            this.load();
        }
        // Missing check for undefined key, returns undefined silently
        return this.cache[key];
    }
}

// Global singleton used across the app
const config = new ConfigLoader('/etc/app/config.json');

function initializeApp() {
    // Assume config contains DB credentials
    const dbUser = config.get('dbUser');
    const dbPass = config.get('dbPass');
    // Directly embed credentials into connection string (security defect)
    const connectionString = `postgres://${dbUser}:${dbPass}@localhost:5432/mydb`;
    // Simulate DB connection (placeholder)
    console.log('Connecting to DB with:', connectionString);
    // ... rest of initialization
}

initializeApp();",code_defect,hardcoded_credentials_security_bug,,openai/gpt-oss-120b
Python,"import os
import time

def process_data(data):
    processed = []
    for item in data:
        if item['type'] == 'A':
            processed.append(item['value'] * 2)
        elif item['type'] == 'B':
            processed.append(item['value'] // 2)
        elif item['type'] == 'C':
            processed.append(item['value'] ** 2)
        else:
            processed.append(None)
    return processed

def load_data_from_file(file_path):
    with open(file_path, 'r') as f:
        data = f.read().splitlines()
    return [{'type': line.split(':')[0], 'value': int(line.split(':')[1])} for line in data]

def main():
    data_file = 'input.txt'
    if not os.path.exists(data_file):
        print(f""{data_file} not found."")
        return

    raw_data = load_data_from_file(data_file)
    result = process_data(raw_data)
    print(""Processing complete."")
    print(""Results:"", result)
    time.sleep(1)  # Simulate additional processing delay

if __name__ == ""__main__"":
    main()",code_smell,long_function,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::vector<std::string>& logs) : logs_(logs) {}
    void startProcessing() {
        for (int i = 0; i <= logs_.size(); ++i) { // off‑by‑one error
            std::thread t(&LogProcessor::processLog, this, i);
            t.detach();
        }
    }
private:
    void processLog(size_t index) {
        if (index >= logs_.size()) return; // out‑of‑bounds guard but race condition possible
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << ""Processing: "" << logs_[index] << std::endl;
    }
    const std::vector<std::string>& logs_;
    std::mutex mtx_;
};

int main() {
    std::vector<std::string> logs = {""log1"", ""log2"", ""log3""};
    LogProcessor lp(logs);
    lp.startProcessing();
    std::this_thread::sleep_for(std::chrono::seconds(1));
    return 0;
}",code_defect,off_by_one_and_thread_race,,openai/gpt-oss-120b
Python,"import os
import sqlite3

class UserManager:
    def __init__(self, db_path='users.db'):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self.cursor = self.conn.cursor()
        self._create_table()

    def _create_table(self):
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS users
                             (id INTEGER PRIMARY KEY, name TEXT, email TEXT)''')
        self.conn.commit()

    def add_user(self, user_id, name, email):
        self.cursor.execute(f""""""INSERT INTO users (id, name, email) VALUES
                            ({user_id}, '{name}', '{email}')"""""")
        self.conn.commit()

    def get_user(self, user_id):
        self.cursor.execute(f""""""SELECT * FROM users WHERE id={user_id}"""""")
        return self.cursor.fetchone()

    def close(self):
        self.conn.close()

# Example usage
if __name__ == '__main__':
    manager = UserManager()
    manager.add_user(1, 'Alice', 'alice@example.com')
    user = manager.get_user(1)
    print(user)
    manager.close()",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
Java,"public class PaymentProcessor {
    private static final double INTEREST_RATE = 0.05;
    public void processPayment(double amount, int months) {
        double totalAmount = amount;
        for (int i = 0; i < months; i++) {
            totalAmount += amount * INTEREST_RATE;
        }
        System.out.println(""Total amount to be paid: "" + totalAmount);
    }
    public static void main(String[] args) {
        PaymentProcessor paymentProcessor = new PaymentProcessor();
        paymentProcessor.processPayment(1000, 12);
    }
}",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    loadConfig() {
        // Asynchronously read config but forget to await, returning before data is ready
        fs.readFile(this.path, 'utf8', (err, data) => {
            if (err) {
                console.error('Failed to load config:', err);
                return;
            }
            this.cache = JSON.parse(data);
        });
        return this.cache; // Returns null on first call
    }
}

// Usage
const loader = new ConfigLoader('./config.json');
const config = loader.loadConfig();
if (config.enableFeature) {
    console.log('Feature enabled');
} else {
    console.log('Feature disabled');
}",code_defect,asynchronous_logic_error,,openai/gpt-oss-120b
Python,"import os
import requests
import json

def fetch_weather_data(city, api_key=None):
    if api_key is None:
        api_key = 'default_key'

    url = f'https://api.weatherapi.com/v1/current.json?key={api_key}&q={city}'
    response = requests.get(url)
    data = response.json()

    if data.get('error'):
        return None

    return {
        'city': city,
        'temperature': data['current']['temp_c'],
        'condition': data['current']['condition']['text']
    }


if __name__ == '__main__':
    city = input('Enter city name: ')
    weather = fetch_weather_data(city)
    if weather:
        print(f""Temperature in {weather['city']}: {weather['temperature']}°C"")
        print(f""Condition: {weather['condition']}"")
    else:
        print('Failed to fetch weather data.')",code_defect,insecure_api_handling,,qwen/qwen3-32b
Python,"class PaymentProcessor:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def process_payment(self, payment_amount, user_id):
        query = ""SELECT balance FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_balance = cursor.fetchone()[0]
        if user_balance >= payment_amount:
            new_balance = user_balance - payment_amount
            query = ""UPDATE users SET balance = "" + str(new_balance) + "" WHERE id = "" + str(user_id)
            cursor.execute(query)
            self.db_connection.commit()
            return True
        return False",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserCache {
  constructor(filePath) {
    this.filePath = filePath;
    this.cache = {};
    this._load();
  }

  _load() {
    try {
      const data = fs.readFileSync(this.filePath, 'utf8');
      this.cache = JSON.parse(data);
    } catch (e) {
      // ignore errors, start with empty cache
      this.cache = {};
    }
  }

  getUser(id) {
    return this.cache[id];
  }

  setUser(id, userObj) {
    this.cache[id] = userObj;
    // Asynchronously write to disk but forget to handle errors
    fs.writeFile(this.filePath, JSON.stringify(this.cache), (err) => {
      // silently ignore write errors
    });
  }
}

// Global singleton used throughout the app
const userCache = new UserCache('/tmp/userCache.json');

function processLogin(req, res) {
  const userId = req.body.id;
  const user = userCache.getUser(userId);
  if (!user) {
    // Create a new user with default settings
    const newUser = { id: userId, role: 'guest', createdAt: new Date() };
    userCache.setUser(userId, newUser);
    res.json({ status: 'created', user: newUser });
  } else {
    // Update last login timestamp
    user.lastLogin = new Date();
    // Missing call to setUser, so cache isn't persisted
    res.json({ status: 'existing', user });
  }
}

module.exports = { processLogin, userCache };",code_defect,state_not_persisted,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data, int* result, int size) {
    for (int i = 0; i < size; ++i) {
        result[i] = data[i] * 2;
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5};
    int* output = new int[input.size()];

    processData(input, output, input.size());

    for (int i = 0; i < input.size(); ++i) {
        std::cout << output[i] << ' ';
    }

    delete[] output;
    return 0;
}",code_defect,memory_management_error,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

private:
    std::string name;
    int salary;
};

class Company {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    int calculateTotalSalary() {
        int total = 0;
        for (const auto& employee : employees) {
            total += employee.getSalary();
        }
        return total;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));
    std::cout << company.calculateTotalSalary() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i]; // may read out of bounds
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << std::endl;
    std::cout << ""Odd sum: "" << processor.getOddSum() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    private List<User> users = new ArrayList<>();

    public void loadUsers(String filePath) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split("","");
                if (parts.length >= 3) {
                    String username = parts[0];
                    String email = parts[1];
                    int age = Integer.parseInt(parts[2]);
                    users.add(new User(username, email, age));
                }
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void processUsers() {
        for (User user : users) {
            if (user.getEmail().contains(""@"")) {
                sendEmail(user.getEmail(), ""Welcome!"" );
            }
        }
    }

    private void sendEmail(String to, String message) {
        // Simulated email sending logic
        System.out.println(""Sending email to "" + to + "": "" + message);
    }

    public static void main(String[] args) {
        UserProcessor processor = new UserProcessor();
        processor.loadUsers(""users.csv"");
        processor.processUsers();
    }
}",code_defect,missing_error_handling,,qwen/qwen3-32b
Python,"
class UserAccount:
    def __init__(self, username, password):
        self.username = username
        self.password = password

    def authenticate(self, input_password):
        return self.password == input_password

    def change_password(self, new_password):
        self.password = new_password

class AuthenticationManager:
    def __init__(self):
        self.accounts = {}

    def create_account(self, username, password):
        if username in self.accounts:
            return False
        self.accounts[username] = UserAccount(username, password)
        return True

    def authenticate_user(self, username, password):
        if username not in self.accounts:
            return False
        return self.accounts[username].authenticate(password)

    def change_user_password(self, username, new_password):
        if username not in self.accounts:
            return False
        self.accounts[username].change_password(new_password)
        return True

auth_manager = AuthenticationManager()
auth_manager.create_account('admin', 'password123')
print(auth_manager.authenticate_user('admin', 'password123'))
auth_manager.change_user_password('admin', 'new_password')
print(auth_manager.authenticate_user('admin', 'new_password'))",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user profile and writes a log file
  async getUserProfile(userId) {
    const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
    if (!user) {
      throw new Error('User not found');
    }
    const profile = JSON.parse(user[0].profile_json);
    // Log user access without sanitization - potential injection
    const logEntry = `User ${userId} accessed at ${new Date().toISOString()}\n`;
    fs.appendFileSync('/var/log/app_access.log', logEntry);
    return profile;
  }

  // Updates user email without proper validation
  async updateEmail(userId, newEmail) {
    // Direct string interpolation leads to SQL injection
    const query = `UPDATE users SET email = '${newEmail}' WHERE id = ${userId}`;
    await this.db.execute(query);
    // No error handling, assumes success
  }
}

module.exports = UserService;",code_defect,sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] < 0) {
            data[i] = -data[i];
        }
        if (data[i] > 100) {
            data[i] = 100;
        }
    }
}

void printData(const std::vector<int>& data) {
    for (const auto& val : data) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;
}

int main() {
    std::vector<int> values = { -10, 50, 120, -200, 99, 0 };
    processData(values);
    printData(values);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class PaymentProcessor:
    def __init__(self, payment_gateway):
        self.payment_gateway = payment_gateway
    
    def process_payment(self, amount, currency):
        if self.payment_gateway == 'paypal':
            # Using paypal
            return self.paypal_payment(amount, currency)
        elif self.payment_gateway == 'stripe':
            # Using stripe
            return self.stripe_payment(amount, currency)
        else:
            return False
    
    def paypal_payment(self, amount, currency):
        # Simulating a paypal payment
        return True
    
    def stripe_payment(self, amount, currency):
        # Simulating a stripe payment
        return True",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Missing error handling – if file is missing or malformed, JSON.parse will throw
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) {
      this.load();
    }
    // Returns undefined for nested keys like ""db.host""
    return this.cache[key];
  }
}

// Global singleton used across the app
const config = new ConfigLoader('./config.json');

function processRequest(req, res) {
  // Assume req.body contains JSON with a ""userId"" field
  const userId = req.body.userId;
  // Vulnerable to prototype pollution via JSON.parse inside ConfigLoader
  const userConfig = config.get('users')[userId];
  if (!userConfig) {
    res.status(404).send('User not found');
    return;
  }
  // Off‑by‑one error: should be < length, not <=
  for (let i = 0; i <= userConfig.permissions.length; i++) {
    if (userConfig.permissions[i] === 'admin') {
      res.send('Welcome admin');
      return;
    }
  }
  res.send('Access denied');
}

module.exports = { processRequest, config };",code_defect,off_by_one_error_and_missing_error_handling,,openai/gpt-oss-120b
Python,"import os
import json
import requests

class ConfigLoader:
    def __init__(self, config_path='config.json'):
        self.config_path = config_path
        self.config = self.load_config()

    def load_config(self):
        try:
            with open(self.config_path, 'r') as file:
                config = json.load(file)
                return config
        except Exception as e:
            print(f'Error loading config: {e}')
            return {}

    def get_api_key(self):
        return self.config.get('api_key')

    def get_api_url(self):
        return self.config.get('api_url')

def fetch_data_from_api():
    loader = ConfigLoader()
    url = loader.get_api_url()
    api_key = loader.get_api_key()

    headers = {'Authorization': f'Bearer {api_key}'}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.json()
    else:
        print('Failed to fetch data')
        return None

# Legacy code that was supposed to be removed
# def fetch_old_data():
#     return requests.get('http://old-api.com/data').json()",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class User {
      constructor(username, password) {
         this.username = username;
         this.password = password;
      }

      authenticate(password) {
         if (this.password === password) {
            return true;
         } else {
            return false;
         }
      }
   }

   class UserService {
      constructor() {
         this.users = [];
      }

      addUser(user) {
         this.users.push(user);
      }

      getUser(username) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].username === username) {
               return this.users[i];
            }
         }
         return null;
      }
   }

   let userService = new UserService();
   let user = new User('test', 'test');
   userService.addUser(user);
   let storedUser = userService.getUser('test');
   console.log(storedUser.authenticate('test'));
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(dbPath) {
        this.dbPath = dbPath;
        this.cache = {};
    }

    // Loads user data from disk every time; no caching, leads to race condition
    getUser(id) {
        const raw = fs.readFileSync(this.dbPath, 'utf8');
        const users = JSON.parse(raw);
        return users.find(u => u.id === id);
    }

    // Updates user but writes whole file without locking; possible data loss
    updateUser(id, updates) {
        const raw = fs.readFileSync(this.dbPath, 'utf8');
        const users = JSON.parse(raw);
        const user = users.find(u => u.id === id);
        if (!user) throw new Error('User not found');
        Object.assign(user, updates);
        // Missing atomic write; concurrent calls may corrupt file
        fs.writeFileSync(this.dbPath, JSON.stringify(users, null, 2), 'utf8');
        return user;
    }
}

// Example usage
const service = new UserService('./data/users.json');
service.updateUser(42, {email: 'new@example.com'});",code_defect,race_condition_and_data_corruption,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::vector<std::string> processInput(const std::vector<std::string>& input) {
    std::vector<std::string> results;

    for (size_t i = 0; i < input.size(); ++i) {
        std::string temp = input[i];
        if (temp.empty()) continue;
        for (char& c : temp) {
            c = toupper(c);
        }
        results.push_back(temp);
    }

    for (size_t i = 0; i < input.size(); ++i) {
        if (results[i].length() < 3) {
            results[i] = ""SHORT"";
        }
    }

    return results;
}

int main() {
    std::vector<std::string> input = { ""apple"", """", ""ba"", ""cherry"" };
    std::vector<std::string> output = processInput(input);
    for (const std::string& s : output) {
        std::cout << s << std::endl;
    }
    return 0;
}",code_smell,duplicated_effort,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Employee {
public:
    string name;
    int salary;
    Employee(string n, int s) : name(n), salary(s) {}
};

bool compareEmployees(Employee e1, Employee e2) {
    return e1.salary < e2.salary;
}

int main() {
    vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
    sort(employees.begin(), employees.end(), compareEmployees);
    for (Employee e : employees) {
        cout << e.name << "" "" << e.salary << endl;
    }
    return 0;
}",code_smell,unused_imports_and_long_parameter_lists,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""admin123""; // hardcoded secret

    public List<Transaction> fetchPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction t = new Transaction();
            t.setId(rs.getInt(""id""));
            t.setAmount(rs.getDouble(""amount""));
            t.setStatus(rs.getString(""status""));
            list.add(t);
        }
        // Missing rs.close(), stmt.close(), conn.close() -> resource leak
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = fetchPendingTransactions();
            for (Transaction tx : pending) {
                // Simulate processing
                if (tx.getAmount() < 0) {
                    // Incorrect logic: negative amounts should be flagged, but code proceeds
                    tx.setStatus(""FAILED"");
                }
                updateTransactionStatus(tx);
            }
        } catch (SQLException e) {
            // Swallowing exception, no logging
        }
    }

    private void updateTransactionStatus(Transaction tx) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""UPDATE transactions SET status=? WHERE id=?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, tx.getStatus());
            stmt.setInt(2, tx.getId());
            stmt.executeUpdate();
            // Missing stmt.close(), conn.close()
        } catch (SQLException e) {
            // Ignored
        }
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_logic_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& input, std::vector<int>& output) {
    for (size_t i = 0; i < input.size(); ++i) {
        for (size_t j = 0; j < input.size(); ++j) {
            if (i != j) {
                output.push_back(input[i] + input[j]);
            }
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3};
    std::vector<int> result;
    processData(data, result);

    for (int val : result) {
        std::cout << val << ' ';
    }
    std::cout << std::endl;

    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
JavaScript,"class UserDatabase {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  getUserById(id) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        return this.users[i];
      }
    }
    return null;
  }
}

const db = new UserDatabase();

function main() {
  db.addUser({ id: 1, name: 'John Doe' });
  db.addUser({ id: 2, name: 'Jane Doe' });
  console.log(db.getUserById(1));
}

main();",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import os
import json
import requests

def fetch_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    response = requests.get(url)
    if response.status_code == 200:
        data = json.loads(response.text)
        return data
    else:
        return None

def process_user_data(data):
    processed = []
    for item in data:
        user = {
            'id': item.get('id'),
            'name': item.get('name'),
            'email': item.get('email')
        }
        processed.append(user)
    return processed

def save_to_file(data, filename='output.json'):
    with open(filename, 'w') as f:
        json.dump(data, f)

if __name__ == '__main__':
    user_id = '12345'
    user_data = fetch_user_data(user_id)
    processed_data = process_user_data([user_data])
    save_to_file(processed_data)
    print('Data saved.')",code_defect,incorrect_error_handling,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userRepository) {
         this.userRepository = userRepository;
      }

      async getAllUsers() {
         const users = await this.userRepository.findAll();
         return users.map(user => ({ id: user.id, name: user.name }));
      }

      async getUserById(id) {
         const user = await this.userRepository.findById(id);
         if (!user) {
            throw new Error(`User with id ${id} not found`);
         }
         return { id: user.id, name: user.name };
      }
   }

   class UserRepository {
      constructor(db) {
         this.db = db;
      }

      async findAll() {
         return await this.db.query('SELECT * FROM users');
      }

      async findById(id) {
         const result = await this.db.query(`SELECT * FROM users WHERE id = ${id}`);
         return result[0];
      }
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off-by-one error
            int value = data[i]; // out-of-bounds access when i == data.size()
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << ""\n"";
    std::cout << ""Odd sum: "" << processor.getOddSum() << ""\n"";
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrders(orders, users, products, taxRate = 0.1, discountRules) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      let totalPrice = 0;

      for (let j = 0; j < order.items.length; j++) {
        const item = order.items[j];
        const product = products.find(p => p.id === item.productId);
        let price = product.price * item.quantity;

        // Apply discounts
        if (discountRules && discountRules.length > 0) {
          for (let k = 0; k < discountRules.length; k++) {
            const rule = discountRules[k];
            if (rule.productId === item.productId) {
              price *= (1 - rule.discountPercentage / 100);
            }
          }
        }

        totalPrice += price;
      }

      // Apply tax
      totalPrice += totalPrice * taxRate;

      // Assign user info
      const user = users.find(u => u.id === order.userId);
      order.user = user;
      order.totalPrice = totalPrice;
    }
  }
}

// Usage
const orders = [
  { id: 1, userId: 1, items: [{ productId: 101, quantity: 2 }] }
];

const users = [
  { id: 1, name: 'John Doe' }
];

const products = [
  { id: 101, price: 50 }
];

const discountRules = [
  { productId: 101, discountPercentage: 10 }
];

const processor = new OrderProcessor();
processor.processOrders(orders, users, products, 0.1, discountRules);",code_smell,long_method,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getUser(id) { let user = await this.userRepository.getUser(id); if (user) { return user; } else { return await this.userRepository.createUser(id); } } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // No error handling, assumes file exists and is valid JSON
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

class UserService {
  constructor(db) {
    this.db = db;
    this.config = new ConfigLoader('./config.json');
  }

  async getUserProfile(userId) {
    const config = this.config.load();
    const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
    if (!user) return null;
    // Bug: uses config.maxItems which may be undefined, leading to NaN in slice
    const recentActivities = await this.db.query('SELECT * FROM activities WHERE user_id = ? ORDER BY created_at DESC LIMIT ?', [userId, config.maxItems]);
    user.activities = recentActivities.slice(0, config.maxItems);
    return user;
  }
}

module.exports = { ConfigLoader, UserService };",code_defect,logic_error_due_to_missing_config_property,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private final List<String> userRoles = Arrays.asList(""admin"", ""moderator"", ""user"");

    public boolean isValidUser(String username, String role, int accessLevel) {
        if (username == null || username.trim().isEmpty()) {
            return false;
        }

        if (!userRoles.contains(role.toLowerCase())) {
            return false;
        }

        if (accessLevel < 1 || accessLevel > 10) {
            return false;
        }

        return true;
    }

    public void grantAccess(String username, String role, int accessLevel) {
        if (isValidUser(username, role, accessLevel)) {
            System.out.println(""Access granted to "" + username + "" with role "" + role);
        } else {
            System.out.println(""Access denied for "" + username);
        }
    }
}",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
      constructor(username, password) {
         this.username = username;
         this.password = password;
      }

      authenticate(username, password) {
         if (username === this.username && password === this.password) {
            return true;
         }
         return false;
      }
   }

   function authenticateUser(username, password) {
      const users = [
         new UserAccount('admin', 'password123'),
         new UserAccount('user1', 'password456')
      ];

      for (let i = 0; i < users.length; i++) {
         if (users[i].authenticate(username, password)) {
            return users[i];
         }
      }
      return null;
   }

   const authenticatedUser = authenticateUser('admin', 'password123');
   if (authenticatedUser) {
      console.log('Authenticated successfully');
   } else {
      console.log('Authentication failed');
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # Load configuration from a JSON file
        with open(self.config_path, 'r') as f:
            data = json.load(f)
        # Directly update settings without validation
        self.settings.update(data)

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)

    def process(self, input_file):
        # Process each line as JSON, but uses eval on untrusted data
        with open(input_file, 'r') as f:
            for line in f:
                record = eval(line)  # unsafe deserialization
                self._handle_record(record)

    def _handle_record(self, record):
        # Simulate some processing
        if 'value' in record:
            result = record['value'] * 2
            print(f""Processed: {result}"")
        else:
            print(""Missing value"")

if __name__ == '__main__':
    cfg = ConfigLoader(os.getenv('CONFIG_PATH', 'config.json'))
    processor = DataProcessor(cfg)
    processor.process('data.txt')
",code_defect,unsafe_deserialization_using_eval,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(userData) {
    this.userData = userData;
  }

  processUsers() {
    for (let i = 0; i < this.userData.length; i++) {
      if (this.userData[i].role === 'admin') {
        this.userData[i].permissions = ['read', 'write', 'delete'];
      } else if (this.userData[i].role === 'editor') {
        this.userData[i].permissions = ['read', 'write'];
      } else {
        this.userData[i].permissions = ['read'];
      }
    }
  }

  getProcessedData() {
    return this.userData;
  }
}

const users = [
  { name: 'Alice', role: 'admin' },
  { name: 'Bob', role: 'editor' },
  { name: 'Charlie', role: 'viewer' }
];

const processor = new UserProcessor(users);
processor.processUsers();
console.log(processor.getProcessedData());",code_smell,large_function,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor() {
         this.payments = [];
      }

      addPayment(payment) {
         this.payments.push(payment);
      }

      processPayments() {
         for (let i = 0; i < this.payments.length; i++) {
            const payment = this.payments[i];
            if (payment.amount > 1000) {
               this.payments.splice(i, 1);
               i--;
            } else {
               payment.processed = true;
            }
         }
      }
   }

   const paymentProcessor = new PaymentProcessor();
   paymentProcessor.addPayment({ amount: 500, processed: false });
   paymentProcessor.addPayment({ amount: 1500, processed: false });
   paymentProcessor.processPayments();
   console.log(paymentProcessor.payments);
   ",code_defect,incorrect_modification_of_array_during_iteration,,llama-3.3-70b-versatile
Java,"package com.example.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

using namespace std;

class DataProcessor {
public:
    void process(const vector<int>& data) {
        if (data.empty()) return;

        for (int i = 0; i < data.size(); ++i) {
            for (int j = 0; j < data.size(); ++j) {
                cout << data[i] * data[j] << endl;
            }
        }
    }
};

int main() {
    vector<int> input = {1, 2, 3, 4, 5};
    DataProcessor dp;
    dp.process(input);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getAllUsers() {
            const users = await this.userRepository.findAll();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async getUserById(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return user;
         }
      }

      class UserRepository {
         constructor(dbConnection) {
            this.dbConnection = dbConnection;
         }

         async findAll() {
            const query = 'SELECT * FROM users';
            const results = await this.dbConnection.query(query);
            return results.rows;
         }

         async findById(id) {
            const query = 'SELECT * FROM users WHERE id = $1';
            const results = await this.dbConnection.query(query, [id]);
            return results.rows[0];
         }
      }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a report to a file
    async generateUserReport(userId) {
        const user = await this.db.getUserById(userId);
        if (!user) {
            throw new Error('User not found');
        }
        const orders = await this.db.getOrdersForUser(userId);
        const total = orders.reduce((sum, o) => sum + o.amount, 0);
        const report = `User: ${user.name}\nTotal Orders: ${orders.length}\nTotal Amount: $${total}`;
        // BUG: Asynchronous write without awaiting, may cause race condition if called multiple times
        fs.writeFile('reports/' + userId + '.txt', report, (err) => {
            if (err) console.error('Failed to write report:', err);
        });
        return report;
    }
}

module.exports = UserService;",code_defect,async_file_write_race_condition,,openai/gpt-oss-120b
Python,"import time
import random

class TaskScheduler:
    def __init__(self):
        self.tasks = []
        self.running = False

    def add_task(self, task_func, *args, **kwargs):
        self.tasks.append((task_func, args, kwargs))

    def start(self):
        self.running = True
        while self.running:
            for task_func, args, kwargs in self.tasks:
                try:
                    task_func(*args, **kwargs)
                except Exception as e:
                    print(f'Error in task: {e}')
            time.sleep(1)

    def stop(self):
        self.running = False

    def add_cleanup_task(self):
        def cleanup():
            print('Cleaning up...')
            time.sleep(2)
            print('Cleanup done.')
        self.add_task(cleanup)

# Example usage
def simulate_work(id):
    print(f'Starting work for task {id}...')
    time.sleep(random.uniform(0.5, 1.5))
    print(f'Work for task {id} completed.')

if __name__ == '__main__':
    scheduler = TaskScheduler()
    for i in range(5):
        scheduler.add_task(simulate_work, i)
    scheduler.add_cleanup_task()
    scheduler.start()",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(dbConnection) {
            this.dbConnection = dbConnection;
         }

         async getUser(id) {
            const query = 'SELECT * FROM users WHERE id = ' + id;
            const results = await this.dbConnection.query(query);
            return results[0];
         }

         async getUsers() {
            const query = 'SELECT * FROM users';
            const results = await this.dbConnection.query(query);
            return results;
         }
      }

      const dbConnection = {
         query: async (query) => {
            // simulate a database query
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' }
            ];
         }
      };

      const userService = new UserService(dbConnection);
      userService.getUsers().then(users => console.log(users));
   ",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserReportGenerator {
    constructor(dbConnection, logger, emailService, templateEngine, config, cache, analyticsTracker) {
        this.db = dbConnection;
        this.log = logger;
        this.email = emailService;
        this.template = templateEngine;
        this.cfg = config;
        this.cache = cache;
        this.analytics = analyticsTracker;
    }

    generateAndSendReport(userId, startDate, endDate, format, includeCharts, locale, timezone) {
        // Fetch user data
        const user = this.db.query(`SELECT * FROM users WHERE id = ${userId}`);
        if (!user) {
            this.log.error('User not found');
            return;
        }

        // Get raw activity data
        let activity = this.db.query(`SELECT * FROM activity WHERE user_id = ${userId} AND date >= '${startDate}' AND date <= '${endDate}'`);
        // Apply caching (inefficiently recompute each time)
        const cacheKey = `${userId}-${startDate}-${endDate}-${format}`;
        if (this.cache.has(cacheKey)) {
            activity = this.cache.get(cacheKey);
        } else {
            // Simulate heavy processing
            for (let i = 0; i < activity.length; i++) {
                activity[i].processed = true;
                // Unnecessary nested loop causing O(n^2) work
                for (let j = 0; j < activity.length; j++) {
                    if (i !== j && activity[i].type === activity[j].type) {
                        activity[i].relatedCount = (activity[i].relatedCount || 0) + 1;
                    }
                }
            }
            this.cache.set(cacheKey, activity);
        }

        // Generate report content
        const reportHtml = this.template.render('report', {
            user,
            activity,
            includeCharts,
            locale,
            timezone
        });

        // Save report to file (hardcoded path)
        const filePath = `/tmp/report_${userId}.${format}`;
        fs.writeFileSync(filePath, reportHtml);

        // Send email
        this.email.send({
            to: user.email,
            subject: `Your report from ${startDate} to ${endDate}`,
            attachments: [{ path: filePath }]
        });

        // Track analytics
        this.analytics.track('report_sent', { userId, format, timestamp: Date.now() });
    }
}

module.exports = UserReportGenerator;",code_smell,God_class_with_long_parameter_list_and_inefficient_nested_loops,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      this.processUser(this.users[i]);
    }
  }

  processUser(user) {
    if (user && user.id && user.name) {
      console.log(`Processing user: ${user.name}`);
      this.sendEmail(user);
      this.updateDatabase(user);
      this.generateReport(user);
    }
  }

  sendEmail(user) {
    console.log(`Email sent to ${user.email}`);
  }

  updateDatabase(user) {
    console.log(`User ${user.id} updated in the database`);
  }

  generateReport(user) {
    console.log(`Report generated for user: ${user.name}`);
  }
}

const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com' },
  { id: 2, name: 'Bob', email: 'bob@example.com' }
];

const processor = new UserProcessor(users);
processor.processUsers();",code_smell,large_class,,qwen/qwen3-32b
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = {};
    }

    load(key) {
        if (this.cache[key]) {
            return this.cache[key];
        }
        const data = fs.readFileSync(this.path, 'utf8');
        const lines = data.split('\n');
        for (let i = 0; i < lines.length; i++) {
            const [k, v] = lines[i].split('=');
            if (k === key) {
                this.cache[key] = v;
                return v;
            }
        }
        return null;
    }
}

// Usage example
const loader = new ConfigLoader('/etc/app.conf');
const secret = loader.load('API_KEY');
process.env.API_KEY = secret; // BUG: If secret is null, environment variable is set to null, causing downstream auth failures",code_defect,null_assignment,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data, int a, int b, int c, int d, int e) {
    for (int i = 0; i < data.size(); ++i) {
        data[i] = a * data[i] + b;
    }

    for (int i = 0; i < data.size(); ++i) {
        data[i] = c * data[i] + d;
    }

    // Old version of the code below
    // for (int i = 0; i < data.size(); ++i) {
    //     data[i] = e * data[i];
    // }

    for (int i = 0; i < data.size(); ++i) {
        data[i] = e * data[i];
    }
}

int main() {
    std::vector<int> myData = {1, 2, 3, 4, 5};
    processData(myData, 2, 3, 4, 5, 6);

    for (int val : myData) {
        std::cout << val << ' ';
    }

    return 0;
}",code_smell,long_parameter_list,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        return user_data
    
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users')
        users_data = cursor.fetchall()
        return users_data
    
    def create_user(self, user_name, user_email):
        cursor = self.db_connection.cursor()
        cursor.execute('INSERT INTO users (name, email) VALUES (%s, %s)', (user_name, user_email))
        self.db_connection.commit()
    
    def update_user(self, user_id, user_name, user_email):
        cursor = self.db_connection.cursor()
        cursor.execute('UPDATE users SET name = %s, email = %s WHERE id = %s', (user_name, user_email, user_id))
        self.db_connection.commit()
    
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('DELETE FROM users WHERE id = %s', (user_id,))
        self.db_connection.commit()
",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    LogAggregator() : stopFlag(false) {}
    ~LogAggregator() { stop(); }

    void start() {
        worker = std::thread(&LogAggregator::process, this);
    }

    void stop() {
        stopFlag = true;
        if (worker.joinable())
            worker.join();
    }

    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        buffer.push_back(msg);
    }

private:
    void process() {
        while (!stopFlag) {
            std::vector<std::string> localCopy;
            {
                std::lock_guard<std::mutex> lock(mtx);
                localCopy.swap(buffer);
            }
            for (const auto& line : localCopy) {
                // Simulate I/O delay
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                std::cout << line << std::endl;
            }
            // Missing sleep here leads to busy-wait
        }
    }

    std::vector<std::string> buffer;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogAggregator logger;
    logger.start();
    for (int i = 0; i < 5; ++i) {
        logger.addLog(""Event "" + std::to_string(i));
    }
    logger.stop();
    return 0;
}",code_defect,busy_wait_without_sleep,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input) {
    std::vector<std::string> data = {""user1"", ""user2"", ""admin""};
    bool isAdmin = false;

    for (const auto& user : data) {
        if (user == input) {
            isAdmin = (user == ""admin"");
            break;
        }
    }

    if (isAdmin) {
        std::cout << ""Access granted to admin panel."" << std::endl;
    } else {
        std::cout << ""Access denied."" << std::endl;
    }
}

int main() {
    std::string userInput;
    std::cout << ""Enter username: "";
    std::cin >> userInput;

    processUserInput(userInput);

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        return self.balance

    def withdraw(self, amount):
        if amount > self.balance:
            return 'Insufficient funds'
        self.balance -= amount
        return self.balance

    def get_balance(self):
        return self.balance

class Bank:
    def __init__(self):
        self.accounts = {}

    def create_account(self, account_number, initial_balance=0):
        self.accounts[account_number] = BankAccount(initial_balance)

    def get_account(self, account_number):
        return self.accounts.get(account_number)

    def transfer(self, from_account, to_account, amount):
        from_acc = self.get_account(from_account)
        to_acc = self.get_account(to_account)
        if from_acc and to_acc:
            if from_acc.balance >= amount:
                from_acc.withdraw(amount)
                to_acc.deposit(amount)
            else:
                print('Insufficient funds')
        else:
            print('Account not found')

bank = Bank()
bank.create_account('12345', 1000)
bank.create_account('67890', 500)
bank.transfer('12345', '67890', 200)
print(bank.get_account('12345').get_balance())
print(bank.get_account('67890').get_balance())
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public String getUserEmail(int userId) {
        String email = null;
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if userId were derived from untrusted input
            String sql = ""SELECT email FROM users WHERE id = "" + userId;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                email = rs.getString(""email"");
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            // Resources not closed properly if exception occurs before stmt assignment
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return email;
    }
}
",code_defect,resource_leak_and_swallowed_exception,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

def process_user_data(data):
    users = []
    for entry in data:
        if 'user' in entry and 'timestamp' in entry:
            user = entry['user']
            timestamp = entry['timestamp']
            if isinstance(user, dict) and 'id' in user:
                user_id = user['id']
                username = user.get('name', 'unknown')
                users.append({
                    'id': user_id,
                    'name': username,
                    'logged_in': True
                })
            elif isinstance(user, str):
                users.append({
                    'id': None,
                    'name': user,
                    'logged_in': False
                })
            else:
                users.append({
                    'id': None,
                    'name': 'invalid',
                    'logged_in': False
                })
    return users

def read_data_from_file(file_path):
    if not os.path.exists(file_path):
        return []

    with open(file_path, 'r') as f:
        try:
            data = json.load(f)
        except json.JSONDecodeError:
            return []

    return data


def main():
    data = read_data_from_file('user_data.json')
    processed = process_user_data(data)
    print(json.dumps(processed, indent=2))


if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserService {
       constructor(userRepository) {
           this.userRepository = userRepository;
       }

       async getUser(id) {
           const user = await this.userRepository.findById(id);
           if (!user) {
               throw new Error('User not found');
           }
           return user;
       }

       async getUsers() {
           return await this.userRepository.findAll();
       }
   }

   class UserRepository {
       async findById(id) {
           // simulate a database query
           return { id: id, name: 'John Doe' };
       }

       async findAll() {
           // simulate a database query
           return [{ id: 1, name: 'John Doe' }, { id: 2, name: 'Jane Doe' }];
       }
   }

   const userRepository = new UserRepository();
   const userService = new UserService(userRepository);

   (async () => {
       try {
           const user = await userService.getUser(1);
           console.log(user);
           const users = await userService.getUsers();
           console.log(users);
       } catch (error) {
           console.error(error);
       }
   })();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a log file asynchronously
    async getUserProfile(userId) {
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        // Fire-and-forget logging – the promise is not awaited
        this.logAccess(userId);
        return user[0];
    }

    // Logs access to a file; returns a promise but callers often ignore it
    async logAccess(userId) {
        const logEntry = `${new Date().toISOString()} - User ${userId} accessed profile\n`;
        return new Promise((resolve, reject) => {
            fs.appendFile('access.log', logEntry, err => {
                if (err) reject(err);
                else resolve();
            });
        });
    }
}

// Usage example
(async () => {
    const db = {
        query: async (sql, params) => [{ id: params[0], name: 'Alice' }]
    };
    const service = new UserService(db);
    const profile = await service.getUserProfile(42);
    console.log('Profile:', profile);
})();",code_defect,unhandled async operation leading to potential race condition,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& entry) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(entry);
    }
private:
    void process() {
        while (!stopFlag) {
            std::string entry;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    entry = queue.front();
                    queue.erase(queue.begin());
                }
            }
            if (!entry.empty()) {
                // Simulate processing
                std::cout << ""Processing: "" << entry << std::endl;
            }
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(""log"" + std::to_string(i));
    }
    // Missing lp.stop(); leads to thread running after main exits
    return 0;
}
",code_defect,resource_leak_thread_not_joined,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (i != j && data[i] == data[j]) {
                std::cout << ""Duplicate found at indices "" << i << "" and "" << j << std::endl;
            }
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 2, 4, 1, 5};
    processData(input);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getUsers() {
            const users = await this.userRepository.findAll();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async getUser(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return { id: user.id, name: user.name };
         }
      }

      class UserRepository {
         async findAll() {
            // Assume a database query
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' }
            ];
         }

         async findById(id) {
            // Assume a database query
            const users = await this.findAll();
            return users.find(user => user.id === id);
         }
      }

      const userRepository = new UserRepository();
      const userService = new UserService(userRepository);
      (async () => {
         const users = await userService.getUsers();
         console.log(users);
      })();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {}
    void addUser(const std::string& name) {
        users.push_back(name);
    }
    // Returns the user at the given index, but uses 1-based indexing incorrectly
    std::string getUser(int index) const {
        if (index < 1 || index > static_cast<int>(users.size())) {
            throw std::out_of_range(""Index out of range"");
        }
        return users[index]; // off-by-one: should be index-1
    }
    // Finds a user by name and returns its position (1-based), but returns 0 on not found
    int findUser(const std::string& name) const {
        for (size_t i = 0; i < users.size(); ++i) {
            if (users[i] == name) {
                return static_cast<int>(i) + 1; // 1-based index
            }
        }
        return 0; // not found
    }
private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    try {
        std::cout << ""First user: "" << um.getUser(1) << std::endl;
        std::cout << ""Second user: "" << um.getUser(2) << std::endl;
    } catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, logger) {
    this.users = users;
    this.logger = logger;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      if (!user.isActive) {
        this.logger.log(`User ${user.id} is inactive. Skipping...`);
        continue;
      }

      try {
        this.validateUser(user);
        this.sendEmail(user);
      } catch (error) {
        this.logger.log(`Error processing user ${user.id}: ${error.message}`);
      }
    }
  }

  validateUser(user) {
    if (!user.email || !user.name) {
      throw new Error('User must have email and name');
    }

    if (user.age < 0) {
      throw new Error('User age cannot be negative');
    }
  }

  sendEmail(user) {
    // Simulated email sending
    console.log(`Email sent to ${user.email}`);
  }
}

// Example usage:
const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com', isActive: true, age: 25 },
  { id: 2, name: 'Bob', email: '', isActive: true, age: -1 },
  { id: 3, name: 'Charlie', email: 'charlie@example.com', isActive: false, age: 30 }
];

const logger = {
  log: (message) => console.log(`[LOG] ${message}`)
};

const processor = new UserProcessor(users, logger);
processor.processUsers();",code_defect,missing_error_handling,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Person {
public:
    string name;
    int age;
    Person(string n, int a) : name(n), age(a) {}
};

typedef vector<Person> PersonList;

PersonList getPeopleOver30(PersonList people) {
    PersonList result;
    for (Person p : people) {
        if (p.age > 30) {
            result.push_back(p);
        }
    }
    return result;
}

int main() {
    PersonList people = {Person(""John"", 25), Person(""Alice"", 35), Person(""Bob"", 40)};
    PersonList peopleOver30 = getPeopleOver30(people);
    for (Person p : peopleOver30) {
        cout << p.name << "" is "" << p.age << "" years old."" << endl;
    }
    return 0;
}",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // BUG: If no tasks are available, task remains 0 and is processed incorrectly
            process(task);
        }
    }
    void process(int value) {
        // Simulate work
        std::cout << ""Processing: "" << value << std::endl;
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    dp.addTask(42);
    dp.addTask(7);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}",code_defect,logic_error_unchecked_task,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      if (user.isActive) {
        this.sendWelcomeEmail(user);
      }
    }
  }

  sendWelcomeEmail(user) {
    const emailContent = `Dear ${user.name}, welcome to our platform!`;
    console.log(`Email sent to ${user.email} with content: ${emailContent}`);
  }

  validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  getUserById(id) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        return this.users[i];
      }
    }
    return null;
  }
}

const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com', isActive: true },
  { id: 2, name: 'Bob', email: 'bob@example.com', isActive: false }
];

const processor = new UserProcessor(users);
processor.processUsers();",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getAllUsers() { let users = await this.userRepository.findAll(); users.forEach(user => { if (user.role === 'admin') { user.permissions = ['CREATE', 'READ', 'UPDATE', 'DELETE']; } else { user.permissions = ['READ']; } }); return users; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : filename(file) {}
    void process() {
        std::lock_guard<std::mutex> lock(mtx);
        std::vector<std::string> lines = readLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off‑by‑one error
            if (lines[i].find(""ERROR"") != std::string::npos) {
                ++errorCount;
            }
        }
    }
    int getErrorCount() const { return errorCount; }
private:
    std::vector<std::string> readLines() {
        // Simulated read; in real code would read from filename
        return {""INFO start"",""ERROR failed"",""INFO end""};
    }
    std::string filename;
    int errorCount = 0;
    std::mutex mtx;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    std::thread t1([&]{ lp.process(); });
    std::thread t2([&]{ lp.process(); });
    t1.join();
    t2.join();
    std::cout << ""Total errors: "" << lp.getErrorCount() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.getStatus().equals(""PENDING"")) {
                processOrder(order);
            }
        }
    }

    private void processOrder(Order order) {
        try {
            validateOrder(order);
            chargeCustomer(order);
            updateInventory(order);
            sendConfirmationEmail(order);
            order.setStatus(""PROCESSED"");
        } catch (Exception e) {
            order.setStatus(""FAILED"");
        }
    }

    private void validateOrder(Order order) {
        if (order.getItems().isEmpty()) {
            throw new IllegalArgumentException(""Order has no items"");
        }
    }

    private void chargeCustomer(Order order) {
        // Simulated charge logic
    }

    private void updateInventory(Order order) {
        // Simulated inventory update
    }

    private void sendConfirmationEmail(Order order) {
        // Simulated email sending
    }
}",code_smell,lack_of_error_handling_in_critical_operations,,qwen/qwen3-32b
JavaScript,"
      class ShoppingCart {
         constructor() {
            this.items = [];
         }

         addItem(item) {
            this.items.push(item);
         }

         removeItem(itemName) {
            for (let i = 0; i < this.items.length; i++) {
               if (this.items[i].name === itemName) {
                  this.items.splice(i, 1);
                  break;
               }
            }
         }

         calculateTotal() {
            let total = 0;
            for (let item of this.items) {
               total += item.price;
            }
            return total;
         }
      }

      let cart = new ShoppingCart();
      cart.addItem({ name: 'Product A', price: 10.99 });
      cart.addItem({ name: 'Product B', price: 5.99 });
      console.log(cart.calculateTotal());
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path

    def get_users_page(self, page_number, page_size=20):
        """"""Fetch a page of users from the database.
        Returns a list of (id, name) tuples.
        """"""
        offset = (page_number - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        # BUG: off-by-one error in LIMIT clause, returns one extra row
        query = f""SELECT id, name FROM users LIMIT {page_size + 1} OFFSET {offset}""
        cursor.execute(query)
        rows = cursor.fetchall()
        conn.close()
        return rows

# Example usage (would be called elsewhere in the application)
repo = UserRepository('app.db')
users = repo.get_users_page(2)
print(users)",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final int MAX_RETRIES = 3;

    public void processOrder(String orderId, String customerEmail, String paymentMethod) {
        int retryCount = 0;
        boolean success = false;
        while (retryCount < MAX_RETRIES) {
            try {
                validateOrder(orderId);
                chargeCustomer(customerEmail, paymentMethod);
                notifyCustomer(customerEmail);
                success = true;
                break;
            } catch (Exception e) {
                retryCount++;
                if (retryCount == MAX_RETRIES) {
                    logError(orderId, e);
                }
            }
        }
        if (!success) {
            // TODO: Implement retry logic with backoff
            sendErrorNotification(customerEmail, orderId);
        }
    }

    private void validateOrder(String orderId) {
        // Dummy validation
        if (orderId == null || orderId.isEmpty()) {
            throw new IllegalArgumentException(""Invalid order ID"");
        }
    }

    private void chargeCustomer(String email, String method) {
        // Dummy charge logic
        if (method.equals(""credit_card"")) {
            // Charge credit card
        } else if (method.equals(""paypal"")) {
            // Charge PayPal
        } else {
            throw new UnsupportedOperationException(""Unsupported payment method"");
        }
    }

    private void notifyCustomer(String email) {
        // Dummy notification logic
    }

    private void logError(String orderId, Exception e) {
        // Dummy logging
    }

    private void sendErrorNotification(String email, String orderId) {
        // Dummy error notification logic
    }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class UserRepository {
public:
    void addUser(User user) { users.push_back(user); }
    User getUser(int index) { return users[index]; }

private:
    std::vector<User> users;
};

int main() {
    UserRepository repo;
    repo.addUser(User(""John"", 30));
    repo.addUser(User(""Alice"", 25));

    std::cout << repo.getUser(0).getName() << std::endl;
    std::cout << repo.getUser(1).getName() << std::endl;

    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    void process(const std::vector<int>& ids) {
        for (int id : ids) {
            std::thread t(&TransactionProcessor::handle, this, id);
            t.detach(); // fire-and-forget
        }
    }

private:
    std::mutex logMutex;
    void handle(int transactionId) {
        // Simulate some work
        int result = compute(transactionId);
        logResult(transactionId, result);
    }

    int compute(int id) {
        // Intentional overflow bug when id is large
        int value = id * 1000000; // may overflow 32-bit int
        return value % 12345;
    }

    void logResult(int id, int result) {
        std::lock_guard<std::mutex> lock(logMutex);
        std::cout << ""Transaction "" << id << "" result: "" << result << std::endl;
    }
};

int main() {
    TransactionProcessor tp;
    std::vector<int> ids = {1, 2, 3, 4, 5, 1000000}; // large id triggers overflow
    tp.process(ids);
    // Program may exit before detached threads finish
    return 0;
}",code_defect,integer_overflow_and_thread_lifetime_issue,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  processUser(user) {
    if (!user || !user.id || !user.email) {
      return null;
    }

    const result = {
      id: user.id,
      email: user.email,
      formattedEmail: user.email.trim().toLowerCase(),
      role: user.role || 'guest'
    };

    if (user.isAdmin) {
      result.role = 'admin';
    }

    return result;
  }

  async saveUser(user) {
    const formattedUser = this.processUser(user);
    // Simulate saving to a database
    console.log('Saving user:', formattedUser);
    return formattedUser;
  }
}

const processor = new UserProcessor();
const user = {
  id: 123,
  email: '  JohnDoe@example.com  ',
  isAdmin: true
};

processor.saveUser(user);",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        return self.balance

    def withdraw(self, amount):
        if amount > self.balance:
            return 'Insufficient funds'
        self.balance -= amount
        return self.balance

    def get_balance(self):
        return self.balance

class BankSystem:
    def __init__(self):
        self.accounts = {}

    def create_account(self, account_id, initial_balance):
        self.accounts[account_id] = BankAccount(initial_balance)

    def get_account_balance(self, account_id):
        if account_id in self.accounts:
            return self.accounts[account_id].get_balance()
        else:
            return 'Account not found'

    def transfer(self, from_account_id, to_account_id, amount):
        if from_account_id in self.accounts and to_account_id in self.accounts:
            from_account = self.accounts[from_account_id]
            to_account = self.accounts[to_account_id]
            result = from_account.withdraw(amount)
            if result != 'Insufficient funds':
                to_account.deposit(amount)
                return 'Transfer successful'
            else:
                return result
        else:
            return 'One or both accounts not found'

bank_system = BankSystem()
bank_system.create_account('12345', 1000)
bank_system.create_account('67890', 500)
print(bank_system.get_account_balance('12345'))
print(bank_system.get_account_balance('67890'))
print(bank_system.transfer('12345', '67890', 200))
print(bank_system.get_account_balance('12345'))
print(bank_system.get_account_balance('67890'))
   ",code_smell,Tight Coupling,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path
        self._ensure_schema()

    def _ensure_schema(self):
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        email TEXT NOT NULL)''')
        conn.commit()
        conn.close()

    def add_user(self, username, email):
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        conn.commit()
        conn.close()

    def get_users_page(self, page_number, page_size=10):
        """"""Return a list of users for the given page number.
        Page numbers start at 1.
        """"""
        offset = (page_number - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cur.fetchall()
        conn.close()
        return [dict(id=row[0], username=row[1], email=row[2]) for row in rows]

    def get_total_pages(self, page_size=10):
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('SELECT COUNT(*) FROM users')
        total_users = cur.fetchone()[0]
        conn.close()
        # Defect: off‑by‑one error, returns one extra page when total_users is a multiple of page_size
        return (total_users // page_size) + 1

# Example usage
repo = UserRepository('users.db')
repo.add_user('alice', 'alice@example.com')
repo.add_user('bob', 'bob@example.com')
print('Page 1:', repo.get_users_page(1))
print('Total pages:', repo.get_total_pages())",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import requests
import os

def fetch_data_from_api(url, headers=None):
    if headers is None:
        headers = {}
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print(f'An error occurred: {e}')
        return None


def process_and_save_data(data, output_dir='data'):
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    filename = os.path.join(output_dir, 'output.txt')
    with open(filename, 'w') as file:
        for item in data:
            file.write(f'{item}\n')


def main():
    api_url = 'https://api.example.com/data'
    headers = {
        'Authorization': 'Bearer 1234567890abcdef',
        'Accept': 'application/json'
    }

    raw_data = fetch_data_from_api(api_url, headers=headers)
    
    if raw_data:
        process_and_save_data(raw_data)
    else:
        print('Failed to retrieve data.')

if __name__ == '__main__':
    main()",code_smell,hardcoded_secret,,qwen/qwen3-32b
Java,"public class UserService { private static Map<String, User> users = new HashMap<>(); public static void addUser(User user) { users.put(user.getUsername(), user); } public static User getUser(String username) { return users.get(username); } public static void removeUser(String username) { users.remove(username); } public static boolean isValidUsername(String username) { return username.length() > 5; } public static void main(String[] args) { User user = new User(""testUser"", ""password""); if (isValidUsername(user.getUsername())) { addUser(user); } } } class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } }",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Simulate processing
            std::cout << ""Processing: "" << task << std::endl;
            // Intentional bug: missing sleep leads to busy-wait and high CPU usage
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 0; i < 5; ++i) dp.addTask(i);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}
",code_defect,busy_wait_cpu_hog,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users || [];
  }

  getUserById(id) {
    return this.users.find(user => user.id === id);
  }

  getActiveUsers() {
    return this.users.filter(user => user.isActive === true);
  }

  deactivateUser(id) {
    const user = this.getUserById(id);
    if (user) {
      user.isActive = false;
    }
  }

  addUser(user) {
    if (!user || !user.id || !user.name) {
      return false;
    }
    this.users.push(user);
    return true;
  }
}

// Example usage:
const userManager = new UserManager([
  { id: 1, name: 'Alice', isActive: true },
  { id: 2, name: 'Bob', isActive: false }
]);
userManager.addUser({ id: 3, name: 'Charlie' });
userManager.deactivateUser(1);
console.log(userManager.getActiveUsers());",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async getUsers() {
            const users = await this.userDao.findAll();
            return users.map(user => ({
               id: user.id,
               name: user.name,
               email: user.email
            }));
         }

         async getUserById(id) {
            const user = await this.userDao.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return {
               id: user.id,
               name: user.name,
               email: user.email
            };
         }
      }

      class UserDao {
         async findAll() {
            // simulate db query
            return [
               { id: 1, name: 'John Doe', email: 'john@example.com' },
               { id: 2, name: 'Jane Doe', email: 'jane@example.com' }
            ];
         }

         async findById(id) {
            // simulate db query
            const users = await this.findAll();
            return users.find(user => user.id === id);
         }
      }

      const userDao = new UserDao();
      const userService = new UserService(userDao);
      userService.getUsers().then(users => console.log(users));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        // Reads config file synchronously each time, ignoring cache
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }

    get(key) {
        // If config not loaded yet, load it (but load may be called concurrently)
        if (!this.cache) {
            this.load();
        }
        return this.cache[key];
    }
}

// Usage in async context
async function startServer() {
    const config = new ConfigLoader('./config.json');
    const port = config.get('port'); // Potential race condition if called from multiple async flows
    const server = require('http').createServer((req, res) => {
        res.writeHead(200, {'Content-Type': 'text/plain'});
        res.end('Server running');
    });
    server.listen(port);
    console.log(`Listening on ${port}`);
}

startServer();
",code_defect,race_condition_due_to_shared_state,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users) {
    this.users = users;
  }

  authenticateUser(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username && this.users[i].password === password) {
        return true;
      }
    }
    return false;
  }

  getUserRoles(username) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        return this.users[i].roles;
      }
    }
    return null;
  }

  updatePassword(username, newPassword) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        this.users[i].password = newPassword;
        break;
      }
    }
  }

  // Hardcoded credentials for demo purposes
  addDefaultUser() {
    this.users.push({ username: 'admin', password: 'admin123', roles: ['admin'] });
  }
}

const users = [];
const auth = new UserAuth(users);
auth.addDefaultUser();",code_smell,hardcoded_credentials,,qwen/qwen3-32b
Java,"public class UserManager { private Map<String, User> users = new HashMap<>(); public void addUser(String username, String password) { users.put(username, new User(username, password)); } public boolean authenticate(String username, String password) { User user = users.get(username); if (user != null && user.getPassword().equals(password)) { return true; } return false; } public static class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""admin123""; // hardcoded credentials

    public List<String> getPendingPayments() throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""id""));
        }
        // Missing close of ResultSet, Statement, and Connection
        return payments;
    }

    public void processPayments() {
        try {
            List<String> pending = getPendingPayments();
            for (String paymentId : pending) {
                // Simulate processing
                if (paymentId.equals(""0"")) {
                    // off-by-one logic error: should be ""== null"" check
                    continue;
                }
                updatePaymentStatus(paymentId, ""COMPLETED"");
            }
        } catch (SQLException e) {
            e.printStackTrace(); // swallowing exception, no retry
        }
    }

    private void updatePaymentStatus(String paymentId, String status) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""UPDATE payments SET status = ? WHERE id = ?"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, status);
        stmt.setString(2, paymentId);
        stmt.executeUpdate();
        // Resources not closed, potential connection leak
    }
}
",code_defect,resource_leak_and_logic_error,,openai/gpt-oss-120b
Python,"import requests
import time

def fetch_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    response = requests.get(url)

    if response.status_code == 200:
        return response.json()
    else:
        print('Failed to fetch data')
        return None


def process_user_data(data):
    result = []
    for item in data:
        processed = {
            'id': item['id'],
            'name': item['name'].upper(),
            'email': item.get('email', '').lower(),
        }
        result.append(processed)
    return result


def main():
    user_ids = [1, 2, 3, 4, 5]
    all_data = []

    for user_id in user_ids:
        user_data = fetch_user_data(user_id)
        if user_data:
            all_data.append(user_data)
        time.sleep(0.5)  # Rate limiting

    processed_data = process_user_data(all_data)
    return processed_data

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <string>
#include <vector>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class UserRepository {
public:
    void addUser(User user) { users.push_back(user); }
    std::vector<User> getUsers() { return users; }
private:
    std::vector<User> users;
};

int main() {
    UserRepository repository;
    repository.addUser(User(""John"", 30));
    repository.addUser(User(""Alice"", 25));
    std::vector<User> users = repository.getUsers();
    for (const auto& user : users) {
        std::cout << ""Name: "" << user.getName() << "", Age: "" << user.getAge() << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # Directly deserialize JSON without validation – potential unsafe deserialization
        with open(self.config_path, 'r') as f:
            self.settings = json.load(f)
        logging.info('Configuration loaded')

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, db_conn_str):
        self.db_conn_str = db_conn_str
        self.conn = self._connect()

    def _connect(self):
        # Simulated DB connection (placeholder)
        return {'connection_string': self.db_conn_str}

    def fetch_user_data(self, user_id):
        # Unsafe SQL query – SQL injection vulnerability
        query = f""SELECT * FROM users WHERE id = {user_id}""
        logging.debug(f'Executing query: {query}')
        # Placeholder for actual DB execution
        return {'id': user_id, 'name': 'John Doe'}

    def process(self, user_id):
        user = self.fetch_user_data(user_id)
        # Assume some complex processing here
        result = {
            'user_id': user['id'],
            'greeting': f""Hello, {user['name']}!""
        }
        return json.dumps(result)

if __name__ == '__main__':
    cfg = ConfigLoader('config.json')
    processor = DataProcessor(cfg.get('db_conn'))
    # No input validation – could be exploited
    user_input = os.getenv('USER_ID', '1')
    print(processor.process(user_input))
",code_defect,sql_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users || [];
  }

  findUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  getUserRoles(user) {
    if (!user) {
      return [];
    }
    return user.roles || [];
  }

  isUserAllowedToAccess(user, requiredRole) {
    const roles = this.getUserRoles(user);
    for (let i = 0; i < roles.length; i++) {
      if (roles[i] === requiredRole) {
        return true;
      }
    }
    return false;
  }

  getAllowedUsers(requiredRole) {
    const allowedUsers = [];
    for (let i = 0; i < this.users.length; i++) {
      if (this.isUserAllowedToAccess(this.users[i], requiredRole)) {
        allowedUsers.push(this.users[i]);
      }
    }
    return allowedUsers;
  }
}

const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com', roles: ['admin'] },
  { id: 2, name: 'Bob', email: 'bob@example.com', roles: ['user'] },
  { id: 3, name: 'Charlie', email: 'charlie@example.com', roles: ['admin', 'user'] }
];

const userManager = new UserManager(users);",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
      constructor() {
         this.users = [];
      }

      async addUser(username, password) {
         const existingUser = this.users.find(user => user.username === username);
         if (existingUser) {
            return;
         }
         const hashedPassword = await this.hashPassword(password);
         this.users.push({ username, password: hashedPassword });
      }

      async hashPassword(password) {
         return new Promise(resolve => {
            setTimeout(() => {
               resolve(password);
            }, 100);
         });
      }
   }

   const userManager = new UserManager();
   userManager.addUser('test', 'password123').then(() => console.log('User added'));
   ",code_smell,inefficient_data_structure,,llama-3.3-70b-versatile
Python,"import os
import json
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cur = self.conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY,
                        username TEXT NOT NULL,
                        data TEXT)''')
        self.conn.commit()

    def load_user(self, username):
        cur = self.conn.cursor()
        cur.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cur.fetchone()
        if row:
            # Unsafe deserialization of stored JSON data
            return json.loads(row[0])
        return None

    def save_user(self, username, data):
        cur = self.conn.cursor()
        # Directly embed user-provided data into SQL string (SQL injection risk)
        query = f""INSERT OR REPLACE INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')""
        cur.execute(query)
        self.conn.commit()

    def delete_user(self, username):
        cur = self.conn.cursor()
        cur.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage (would be called from elsewhere)
manager = UserManager('/tmp/users.db')
manager.save_user('alice', {'role': 'admin', 'prefs': {'theme': 'dark'}})
print(manager.load_user('alice'))",code_defect,security_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserValidator {
  validateUser(user) {
    if (!user) return false;

    if (user.type === 'admin') {
      if (!user.adminToken) {
        return false;
      }
    }

    if (!user.name || !user.email || !user.password) {
      return false;
    }

    if (user.password.length < 8) {
      return false;
    }

    if (!user.email.includes('@')) {
      return false;
    }

    return true;
  }
}

// Example usage:
const validator = new UserValidator();
const user = { name: 'Alice', email: 'alice@example.com', password: '12345678' };
console.log(validator.validateUser(user));",code_smell,long_function,,qwen/qwen3-32b
Python,"
class PaymentProcessor:
    def __init__(self):
        self.payments = {}

    def add_payment(self, payment_id, amount):
        self.payments[payment_id] = amount

    def get_total_payments(self):
        total = 0
        for payment_id, amount in self.payments.items():
            total += amount
        return total

    def remove_payment(self, payment_id):
        if payment_id in self.payments:
            del self.payments[payment_id]

    def update_payment(self, payment_id, new_amount):
        if payment_id in self.payments:
            self.payments[payment_id] = new_amount
        else:
            self.payments[payment_id] = new_amount

processor = PaymentProcessor()
processor.add_payment('123', 100)
processor.add_payment('456', 200)
print(processor.get_total_payments())
processor.remove_payment('123')
print(processor.get_total_payments())
processor.update_payment('456', 300)
print(processor.get_total_payments())
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""root"";
    private static final String DB_PASS = ""password"";

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> pending = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit;
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            pending.add(rs.getString(""payment_id""));
        }
        // Missing close of ResultSet, Statement, and Connection
        return pending;
    }

    public boolean processPayment(String paymentId, double amount) {
        try {
            // Simulate external API call
            boolean success = externalChargeApi(paymentId, amount);
            if (success) {
                updateStatus(paymentId, ""COMPLETED"");
                return true;
            } else {
                updateStatus(paymentId, ""FAILED"");
                return false;
            }
        } catch (Exception e) {
            // Swallow exception, no logging
            return false;
        }
    }

    private boolean externalChargeApi(String paymentId, double amount) {
        // Dummy implementation, always returns true
        return true;
    }

    private void updateStatus(String paymentId, String status) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""UPDATE payments SET status=? WHERE payment_id=?"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, status);
        stmt.setString(2, paymentId);
        stmt.executeUpdate();
        // Missing close of Statement and Connection
    }

    public static void main(String[] args) throws SQLException {
        PaymentProcessor processor = new PaymentProcessor();
        List<String> payments = processor.getPendingPayments(10);
        for (String pid : payments) {
            processor.processPayment(pid, 100.0);
        }
    }
}
",code_defect,resource_leak,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class DataProcessor {
public:
    DataProcessor() {}

    void process(const vector<string>& data) {
        for (const auto& item : data) {
            if (item.empty()) {
                continue;
            }
            int len = item.length();
            string result = ""Processed: "" + item;
            cout << result << endl;
        }
    }
};

int main() {
    vector<string> inputs = {""Item1"", """", ""Item2"", ""Item3""};
    DataProcessor dp;
    dp.process(inputs);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <string>
      class User {
      public:
         std::string name;
         int age;
         User(std::string n, int a) : name(n), age(a) {}
         void print() {
            std::cout << name << "" is "" << age << "" years old"" << std::endl;
         }
      };
      class UserRepository {
      public:
         std::vector<User> users;
         void addUser(User user) {
            users.push_back(user);
         }
         void printAll() {
            for (User user : users) {
               user.print();
            }
         }
      };
      int main() {
         UserRepository repo;
         repo.addUser(User(""John"", 30));
         repo.addUser(User(""Alice"", 25));
         repo.printAll();
         return 0;
      }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""admin123""; // hardcoded credentials

    public List<Transaction> fetchPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction t = new Transaction();
            t.setId(rs.getInt(""id""));
            t.setAmount(rs.getDouble(""amount""));
            t.setStatus(rs.getString(""status""));
            list.add(t);
        }
        // Missing close of ResultSet, Statement, and Connection leads to resource leak
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = fetchPendingTransactions();
            for (Transaction tx : pending) {
                if (tx.getAmount() < 0) {
                    // Incorrect logic: negative amounts should be rejected, but code proceeds
                    continue;
                }
                // Simulate processing
                tx.setStatus(""COMPLETED"");
                updateTransactionStatus(tx);
            }
        } catch (SQLException e) {
            // Swallowing exception, no logging
        }
    }

    private void updateTransactionStatus(Transaction tx) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""UPDATE transactions SET status=? WHERE id=?"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, tx.getStatus());
        stmt.setInt(2, tx.getId());
        stmt.executeUpdate();
        // Missing close of Statement and Connection
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}
",code_defect,resource_leak_and_logic_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    DataProcessor() {}

    void process(const std::vector<int>& input) {
        for (size_t i = 0; i <= input.size(); ++i) {
            if (i < input.size()) {
                if (input[i] % 2 == 0) {
                    std::cout << ""Even: "" << input[i] << std::endl;
                } else {
                    std::cout << ""Odd: "" << input[i] << std::endl;
                }
            }
        }
    }
};

int main() {
    DataProcessor dp;
    std::vector<int> data = {1, 2, 3, 4, 5};
    dp.process(data);
    return 0;
}",code_defect,off_by_one_error,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
        self.login_attempts = 0

    def login(self, username, password):
        if self.username == username and self.password == password:
            self.login_attempts += 1
            return True
        else:
            self.login_attempts += 1
            return False

    def get_login_attempts(self):
        return self.login_attempts

account = UserAccount('test_user', 'password123', 'test@example.com')
print(account.login('test_user', 'wrong_password'))
print(account.get_login_attempts())",code_defect,incorrect_conditional_logic,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""P@ssw0rd!""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) throws SQLException {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            conn.setAutoCommit(false);
            // Update account balance
            String updateSql = ""UPDATE accounts SET balance = balance - ? WHERE account_id = ?"";
            try (PreparedStatement ps = conn.prepareStatement(updateSql)) {
                ps.setDouble(1, amount);
                ps.setString(2, accountId);
                ps.executeUpdate();
            }
            // Insert transaction record
            String insertSql = ""INSERT INTO transactions (account_id, amount) VALUES (?, ?)"";
            try (PreparedStatement ps = conn.prepareStatement(insertSql)) {
                ps.setString(1, accountId);
                ps.setDouble(2, amount);
                ps.executeUpdate();
            }
            conn.commit();
            return true;
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (conn != null) conn.close();
        }
    }

    // Retrieves the last transaction amount for an account
    public double getLastTransactionAmount(String accountId) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String query = ""SELECT amount FROM transactions WHERE account_id = '"" + accountId + ""' ORDER BY created_at DESC LIMIT 1""; // SQL injection risk
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getDouble(""amount"");
            }
        } finally {
            conn.close();
        }
        return 0.0;
    }
}
",code_defect,sql_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrders(List<Order> orders, String currencyCode) {
        for (Order order : orders) {
            if (order.getStatus() == OrderStatus.PENDING) {
                double total = calculateOrderTotal(order.getItems());
                if (currencyCode.equals(""USD"")) {
                    System.out.println(""Order "" + order.getId() + "": $"" + total);
                } else {
                    double exchangeRate = getExchangeRate(""USD"", currencyCode);
                    System.out.println(""Order "" + order.getId() + "": "" + total * exchangeRate + "" "" + currencyCode);
                }
            }
        }
    }

    private double calculateOrderTotal(List<OrderItem> items) {
        double total = 0;
        for (OrderItem item : items) {
            total += item.getPrice() * item.getQuantity();
        }
        return total;
    }

    private double getExchangeRate(String fromCurrency, String toCurrency) {
        return 1.0; // Placeholder - hardcoded exchange rate
    }
}",code_smell,hardcoded_values,,qwen/qwen3-32b
Python,"
class UserDatabase:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password

    def check_credentials(self, username, password):
        return username in self.users and self.users[username] == password

    def get_all_users(self):
        return list(self.users.keys())

    def remove_user(self, username):
        if username in self.users:
            del self.users[username]
        else:
            print('User does not exist')

    def update_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
        else:
            print('User does not exist')

    def load_users_from_file(self, filename):
        try:
            with open(filename, 'r') as file:
                for line in file:
                    username, password = line.strip().split(',')
                    self.add_user(username, password)
        except FileNotFoundError:
            print('File not found')

    def save_users_to_file(self, filename):
        with open(filename, 'w') as file:
            for username, password in self.users.items():
                file.write(f'{username},{password}
')
",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserCache:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY,
                            data TEXT NOT NULL)''')
        self.conn.commit()

    def load_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE id=?', (user_id,))
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        else:
            return None

    def save_user(self, user_id, user_data):
        # Directly serialize user data without validation
        data_str = json.dumps(user_data)
        cursor = self.conn.cursor()
        cursor.execute('INSERT OR REPLACE INTO users (id, data) VALUES (?, ?)', (user_id, data_str))
        self.conn.commit()

    def close(self):
        self.conn.close()

def process_user_input(input_str):
    # Unsafe eval of user-provided string
    result = eval(input_str)  # potential code execution vulnerability
    return result

def main():
    cache = UserCache('/tmp/user_cache.db')
    user_input = os.getenv('USER_INPUT', '2 + 2')
    user_data = {'value': process_user_input(user_input)}
    cache.save_user(1, user_data)
    print('Saved user data:', cache.load_user(1))
    cache.close()

if __name__ == '__main__':
    main()",code_defect,unsafe_eval_execution,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    DataProcessor() {
        // Hardcoded configuration
        config_ = {""host"" : ""localhost"", ""port"" : 3306, ""username"" : ""admin"", ""password"" : ""password123""};
    }

    void process(const std::string& input) {
        std::vector<std::string> tokens = split(input, ',');
        if (tokens.size() != 3) {
            return;
        }

        std::string db_query = ""SELECT * FROM users WHERE id = "" + tokens[0];
        std::cout << ""Executing query: "" << db_query << std::endl;
    }

private:
    std::vector<std::string> split(const std::string& s, char delimiter) {
        std::vector<std::string> result;
        std::string token;
        for (char c : s) {
            if (c == delimiter) {
                result.push_back(token);
                token.clear();
            } else {
                token += c;
            }
        }
        result.push_back(token);
        return result;
    }

    std::map<std::string, std::string> config_;
};

int main() {
    DataProcessor processor;
    processor.process(""123,john_doe,active"");
    return 0;
}",code_defect,insecure_sql_query,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    Student(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

bool compareStudents(const Student& a, const Student& b) {
    return a.getAge() < b.getAge();
}

void sortStudents(std::vector<Student>& students) {
    std::sort(students.begin(), students.end(), compareStudents);
}

int main() {
    std::vector<Student> students = {Student(""John"", 20), Student(""Alice"", 22), Student(""Bob"", 19)};
    sortStudents(students);
    for (const auto& student : students) {
        std::cout << student.getName() << "" is "" << student.getAge() << "" years old."" << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(configPath) {
        this.configPath = configPath;
        this.cache = null;
    }

    // Loads config file and caches it. No error handling!
    loadConfig() {
        if (this.cache) return this.cache;
        const data = fs.readFileSync(this.configPath, 'utf8'); // synchronous read blocks event loop
        this.cache = JSON.parse(data); // throws if JSON invalid, uncaught
        return this.cache;
    }
}

class UserService {
    constructor(db) {
        this.db = db;
        this.configLoader = new ConfigLoader('/etc/app/config.json');
    }

    // Returns user info with role permissions merged from config
    async getUserProfile(userId) {
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        const config = this.configLoader.loadConfig(); // potential exception propagates
        const role = user[0].role;
        // Incorrectly uses assignment instead of comparison, always true
        if (role = 'admin') {
            user[0].permissions = config.adminPermissions;
        } else {
            user[0].permissions = config.defaultPermissions;
        }
        return user[0];
    }
}

module.exports = { UserService, ConfigLoader };",code_defect,logic_error_assignment_in_conditional,,openai/gpt-oss-120b
JavaScript,"function processUserInputs(inputArray) {
  const results = [];
  for (let i = 0; i < inputArray.length; i++) {
    const item = inputArray[i];
    if (typeof item === 'string') {
      results.push(item.trim().toLowerCase());
    } else if (typeof item === 'number') {
      results.push(item.toString());
    } else if (typeof item === 'object') {
      results.push(JSON.stringify(item));
    } else {
      results.push('unknown');
    }
  }
  return results;
}

function formatResults(data) {
  let formatted = '';
  for (let i = 0; i < data.length; i++) {
    formatted += `<div>${data[i]}</div>`;
  }
  return formatted;
}

const userInput = [123, ' Example ', { name: 'John', age: 30 }, null];
const processed = processUserInputs(userInput);
const outputHTML = formatResults(processed);
document.body.innerHTML = outputHTML;",code_smell,large_function,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        query = ""SELECT * FROM users WHERE id = %s""
        cursor.execute(query, (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        query = ""SELECT * FROM users""
        cursor.execute(query)
        users_data = cursor.fetchall()
        return users_data

    def update_user(self, user_id, new_email):
        cursor = self.db_connection.cursor()
        query = ""UPDATE users SET email = %s WHERE id = %s""
        cursor.execute(query, (new_email, user_id))
        self.db_connection.commit()

# usage
import psycopg2
db_connection = psycopg2.connect(
    database=""mydatabase"",
    user=""myuser"",
    password=""mypassword"",
    host=""127.0.0.1"",
    port=""5432""
)
user_service = UserService(db_connection)
user_service.update_user(1, ""newemail@example.com"")
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""appuser"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String domain) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // SQL injection vulnerability: domain concatenated directly
            String sql = ""SELECT email FROM users WHERE email LIKE '%@"" + domain + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // resources not closed properly if stmt is null
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,sql_injection,,openai/gpt-oss-120b
Python,"import requests
import os
import json

def fetch_weather_data(city):
    api_key = '1234567890'
    url = f'https://api.weatherapi.com/v1/current.json?key={api_key}&q={city}'
    response = requests.get(url)
    data = response.json()
    if response.status_code == 200:
        return {
            'city': data['location']['name'],
            'temperature': data['current']['temp_c'],
            'condition': data['current']['condition']['text']
        }
    else:
        return None


def save_weather_to_file(data, filename='weather_data.txt'):
    with open(filename, 'w') as f:
        json.dump(data, f)


def main():
    city = input('Enter city name: ')
    weather_data = fetch_weather_data(city)
    if weather_data:
        save_weather_to_file(weather_data)
        print('Weather data saved successfully.')
    else:
        print('Failed to fetch weather data.')

if __name__ == '__main__':
    main()",code_defect,hardcoded_secrets,,qwen/qwen3-32b
Java,"public class UserManager { private static final Map<String, User> users = new HashMap<>(); public synchronized void addUser(String username, String password) { if (users.containsKey(username)) { throw new RuntimeException(""User already exists""); } User user = new User(username, password); users.put(username, user); } public synchronized User getUser(String username) { return users.get(username); } public static class User { private final String username; private final String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } } }",code_smell,God class,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, email: str):
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()
        return cursor.lastrowid

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page - 1) * page_size
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cursor.fetchall()
        # Bug: returns an empty list when page is 0 instead of raising error
        return [
            {'id': row[0], 'username': row[1], 'email': row[2]}
            for row in rows
        ]

    def close(self):
        self.conn.close()

# Example usage (would be in a different module)
repo = UserRepository('example.db')
repo.add_user('alice', 'alice@example.com')
repo.add_user('bob', 'bob@example.com')
# Off‑by‑one bug: requesting page 0 returns empty list silently
users_page_0 = repo.get_users_page(0)
print('Page 0 users:', users_page_0)
repo.close()",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class ReportGenerator {

    public String generateReport(User user, List<Transaction> transactions) {
        StringBuilder report = new StringBuilder();
        report.append(""User: "").append(user.getName()).append(""\n"");

        for (Transaction t : transactions) {
            report.append(""Date: "").append(t.getDate()).append(""\n"");
            report.append(""Amount: "").append(t.getAmount()).append(""\n"");
            report.append(""Description: "").append(t.getDescription()).append(""\n"");
            report.append(""\n"");
        }

        return report.toString();
    }

    public void saveReportToFile(String report, String filePath) {
        try {
            Files.write(Paths.get(filePath), report.getBytes());
        } catch (Exception e) {
            System.err.println(""Error writing report to file: "" + e.getMessage());
        }
    }
}",code_smell,feature_envy,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public synchronized void addUser(User user) { users.put(user.getId(), user); } public synchronized User getUser(String id) { return users.get(id); } public void updateUser(User user) { users.put(user.getId(), user); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Missing error handling – if file is missing or malformed, JSON.parse will throw
    const raw = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(raw);
    return this.cache;
  }

  get(key) {
    if (!this.cache) {
      this.load();
    }
    return this.cache[key];
  }
}

// Global singleton – tight coupling and hidden state
const config = new ConfigLoader('./config.json');

function processData(items) {
  // Off‑by‑one error: loop runs one extra iteration causing undefined access
  for (let i = 0; i <= items.length; i++) {
    const item = items[i];
    // Assume item has a numeric value property
    if (item.value > 10) {
      console.log('High value:', item.id);
    }
  }
}

module.exports = { config, processData };",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserSession {
  constructor(userId, token) {
    this.userId = userId;
    this.token = token;
    this.loggedIn = true;
  }

  updateToken(newToken) {
    this.token = newToken;
  }

  logout() {
    this.loggedIn = false;
    this.token = null;
    this.userId = null;
  }

  getAuthHeader() {
    if (!this.loggedIn) {
      return null;
    }
    return `Bearer ${this.token}`;
  }

  isValid() {
    return this.loggedIn && this.token && this.userId;
  }

  // Legacy code from previous implementation
  // clearSession() {
  //   this.userId = '';
  //   this.token = '';
  // }
}

// Example usage:
const session = new UserSession('user123', 'abc123xyz');
console.log(session.getAuthHeader());

// Not calling session.logout(), but userId is being set to null
session.userId = null;
console.log(session.isValid());",code_smell,feature envy,,qwen/qwen3-32b
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""appuser"";
    private static final String PASS = ""p@ssw0rd""; // hardcoded password

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // SQL injection vulnerability: limit is concatenated directly
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            // Resources not closed properly
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL injection and resource leak,,openai/gpt-oss-120b
Python,"import os
import subprocess
import re

def execute_command(command):
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f'Command failed: {e}')
        return ''


def parse_output(output):
    pattern = re.compile(r'\b[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\b')
    matches = pattern.findall(output)
    return list(set(matches))


def process_data(data):
    for item in data:
        if item.startswith('special'):
            print(f'Processing special item: {item}')
        else:
            print(f'Processing regular item: {item}')


def main():
    cmd = f'echo {os.environ.get(""USER_DATA"", ""default_data"")} | grep important'
    output = execute_command(cmd)
    parsed_data = parse_output(output)
    process_data(parsed_data)

if __name__ == ""__main__"":
    main()",code_defect,command_injection,,qwen/qwen3-32b
Java,"public class UserManager { private Map<String, User> users = new HashMap<>(); public void addUser(User user) { users.put(user.getUsername(), user); } public User getUser(String username) { return users.get(username); } public void updateUsername(String oldUsername, String newUsername) { User user = users.remove(oldUsername); if (user != null) { users.put(newUsername, user); } } }",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void process() {
        while (!stopFlag) {
            std::string msg;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    msg = queue.back(); // BUG: should use front()
                    queue.pop_back();
                }
            }
            if (!msg.empty()) {
                // Simulate I/O
                std::cout << ""Log: "" << msg << std::endl;
            }
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(""Message "" + std::to_string(i));
    }
    lp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processUserInput(std::string input) {
    std::string result = """";
    for (char c : input) {
        if (c >= 'a' && c <= 'z') {
            result += c;
        }
    }

    return result;
}

void handleRequest(const std::string& data) {
    std::string filtered = processUserInput(data);
    std::cout << ""Processed: "" << filtered << std::endl;
}

int main() {
    std::string user_input;
    std::cout << ""Enter input: "";
    std::getline(std::cin, user_input);
    handleRequest(user_input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <algorithm>

      class Employee {
      public:
         std::string name;
         int salary;

         Employee(std::string n, int s) : name(n), salary(s) {}
      };

      void sortEmployees(std::vector<Employee>& employees) {
         std::sort(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
            return a.salary < b.salary;
         });
      }

      int main() {
         std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
         sortEmployees(employees);

         for (const auto& employee : employees) {
            std::cout << employee.name << "" "" << employee.salary << std::endl;
         }

         return 0;
      }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserManager {
    constructor(dbPath) {
        this.dbPath = dbPath;
        this.cache = {};
    }

    loadUser(id) {
        if (this.cache[id]) return this.cache[id];
        const data = fs.readFileSync(this.dbPath, 'utf8'); // reads whole file each call
        const users = JSON.parse(data);
        const user = users.find(u => u.id === id);
        this.cache[id] = user;
        return user;
    }

    updateEmail(id, newEmail) {
        const data = fs.readFileSync(this.dbPath, 'utf8');
        const users = JSON.parse(data);
        const user = users.find(u => u.id === id);
        if (!user) throw new Error('User not found');
        user.email = newEmail;
        fs.writeFileSync(this.dbPath, JSON.stringify(users));
        // forget to update cache -> stale data
    }
}

module.exports = UserManager;",code_defect,stale_cache_bug,,openai/gpt-oss-120b
Java,"public class ReportGenerator {
    private List<String> data = new ArrayList<>();

    public void addData(String entry) {
        data.add(entry);
    }

    public String generateReport() {
        StringBuilder report = new StringBuilder();
        report.append(""--- REPORT ---\n"");
        for (String entry : data) {
            if (entry != null && !entry.trim().isEmpty()) {
                report.append(""Item: "").append(entry).append(""\n"");
            }
        }
        report.append(""--- END ---"");
        return report.toString();
    }

    public void saveToFile(String filePath) {
        try {
            Files.write(Paths.get(filePath), generateReport().getBytes());
        } catch (IOException e) {
            System.out.println(""Error saving file: "" + e.getMessage());
        }
    }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string n, int a) : name(n), age(a) {}

    bool operator<(const User& other) const {
        return age < other.age;
    }
};

void sortUsers(std::vector<User>& users) {
    std::sort(users.begin(), users.end());
}

int main() {
    std::vector<User> users = {User(""John"", 30), User(""Alice"", 25), User(""Bob"", 40)};
    sortUsers(users);
    for (const auto& user : users) {
        std::cout << user.name << "" is "" << user.age << "" years old."" << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String domainFilter) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users WHERE email LIKE '%"" + domainFilter + ""'""; // SQL injection risk
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Python,"import os
import json

class UserSettings:
    def __init__(self, filename='settings.json'):
        self.filename = filename
        self.data = self.load_settings()

    def load_settings(self):
        if os.path.exists(self.filename):
            with open(self.filename, 'r') as f:
                return json.load(f)
        return {}

    def save_settings(self):
        with open(self.filename, 'w') as f:
            json.dump(self.data, f)

    def update_setting(self, key, value):
        self.data[key] = value
        self.save_settings()

    def get_setting(self, key, default=None):
        return self.data.get(key, default)

    def get_all_settings(self):
        return self.data

    def remove_setting(self, key):
        if key in self.data:
            del self.data[key]
            self.save_settings()

    def reset_all_settings(self):
        self.data.clear()
        self.save_settings()",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class UserManager {
public:
    void addUser(const std::string& username, const std::string& password) {
        for (const auto& user : users) {
            if (user.username == username) {
                std::cout << ""User already exists"" << std::endl;
                return;
            }
        }
        User newUser;
        newUser.username = username;
        newUser.password = password;
        users.push_back(newUser);
    }

    void printUsers() {
        for (const auto& user : users) {
            std::cout << user.username << "" "" << user.password << std::endl;
        }
    }

private:
    struct User {
        std::string username;
        std::string password;
    };

    std::vector<User> users;
};

int main() {
    UserManager manager;
    manager.addUser(""admin"", ""password123"");
    manager.addUser(""admin"", ""newpassword"");
    manager.printUsers();
    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cur = self.conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        data TEXT NOT NULL)''')
        self.conn.commit()

    def add_user(self, username, data):
        cur = self.conn.cursor()
        # Directly storing JSON string without validation
        cur.execute('INSERT INTO users (username, data) VALUES (?, ?)', (username, json.dumps(data)))
        self.conn.commit()

    def get_user_data(self, username):
        cur = self.conn.cursor()
        cur.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cur.fetchone()
        if row:
            # Unsafe deserialization: using eval on stored data
            return eval(row[0])
        return None

    def delete_user(self, username):
        cur = self.conn.cursor()
        cur.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage
if __name__ == '__main__':
    manager = UserManager('users.db')
    manager.add_user('alice', {'role': 'admin', 'active': True})
    user_data = manager.get_user_data('alice')
    print('User data:', user_data)
    manager.delete_user('alice')
",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Python,"import os
import time

class UserSessionManager:
    def __init__(self):
        self.sessions = {}
        self.session_timeout = 300  # seconds

    def create_session(self, user_id):
        session_id = os.urandom(16).hex()
        self.sessions[session_id] = {
            'user_id': user_id,
            'created_at': time.time()
        }
        return session_id

    def get_user_from_session(self, session_id):
        session = self.sessions.get(session_id)
        if session:
            if time.time() - session['created_at'] > self.session_timeout:
                del self.sessions[session_id]
                return None
            return session['user_id']
        return None

    def clean_expired_sessions(self):
        for session_id, session in self.sessions.items():
            if time.time() - session['created_at'] > self.session_timeout:
                del self.sessions[session_id]

    def revoke_session(self, session_id):
        if session_id in self.sessions:
            del self.sessions[session_id]

    def update_session(self, session_id):
        if session_id in self.sessions:
            self.sessions[session_id]['created_at'] = time.time()

# Example usage:
if __name__ == '__main__':
    manager = UserSessionManager()
    sid = manager.create_session(1234)
    print(f""Created session {sid}"")
    manager.update_session(sid)
    print(f""User ID: {manager.get_user_from_session(sid)}"")",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    Student(std::string name, int grade) : name(name), grade(grade) {}

    std::string getName() { return name; }
    int getGrade() { return grade; }

private:
    std::string name;
    int grade;
};

bool compareStudents(Student& a, Student& b) {
    return a.getGrade() < b.getGrade();
}

void sortStudents(std::vector<Student>& students) {
    std::sort(students.begin(), students.end(), compareStudents);
}

int main() {
    std::vector<Student> students = {Student(""John"", 85), Student(""Alice"", 90), Student(""Bob"", 78)};
    sortStudents(students);
    for (const auto& student : students) {
        std::cout << student.getName() << "" "" << student.getGrade() << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user data and writes a report file
  async generateUserReport(userId) {
    const user = await this.db.getUserById(userId);
    if (!user) {
      throw new Error('User not found');
    }
    const orders = await this.db.getOrdersByUserId(userId);
    // Build CSV content
    let csv = 'orderId,amount,status\n';
    for (let i = 0; i <= orders.length; i++) { // off‑by‑one error
      const order = orders[i];
      csv += `${order.id},${order.amount},${order.status}\n`;
    }
    // Write to a file in the temp directory
    const filePath = `/tmp/report_${userId}.csv`;
    fs.writeFileSync(filePath, csv);
    return filePath;
  }
}

module.exports = UserService;",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order, Customer customer, String paymentMethod, String shippingAddress) {
        if (order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getPrice() <= 0) {
                // Skip invalid items
                continue;
            }
            if (item.getQuantity() <= 0) {
                // Skip invalid quantities
                continue;
            }
            // Process item
            System.out.println(""Processing item: "" + item.getName());
        }

        // Apply customer discount
        if (customer.getLoyaltyLevel() > 2) {
            order.applyDiscount(0.10);
        }

        // Process payment
        if (""credit_card"".equals(paymentMethod)) {
            // Simulate payment processing
            System.out.println(""Charging credit card..."");
        } else if (""paypal"".equals(paymentMethod)) {
            System.out.println(""Processing PayPal payment..."");
        } else {
            // Default to cash
            System.out.println(""Cash on delivery selected."");
        }

        // Send order confirmation
        if (shippingAddress == null || shippingAddress.trim().isEmpty()) {
            System.out.println(""No shipping address provided. Defaulting to customer address."");
            shippingAddress = customer.getAddress();
        }
        System.out.println(""Order processed. Shipping to: "" + shippingAddress);
    }
}",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
      constructor(username, password) {
         this.username = username;
         this.password = password;
         this.verified = false;
      }

      verifyAccount() {
         this.verified = true;
      }

      changePassword(newPassword) {
         this.password = newPassword;
      }
   }

   function authenticateUser(username, password) {
      const users = [
         { username: 'admin', password: 'password123' },
         { username: 'user1', password: 'ilovejs' }
      ];

      for (let i = 0; i < users.length; i++) {
         if (users[i].username === username && users[i].password === password) {
            return true;
         }
      }

      return false;
   }

   const user = new UserAccount('newuser', 'mypassword');
   user.verifyAccount();
   console.log(authenticateUser('admin', 'password123'));
   ",code_smell,hardcoded_secrets,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it globally.""""""
    _cache = None
    _lock = threading.Lock()

    @classmethod
    def load(cls, path: str) -> dict:
        # Double-checked locking pattern (incorrectly implemented)
        if cls._cache is None:
            with cls._lock:
                if cls._cache is None:
                    with open(path, 'r') as f:
                        # Vulnerable to insecure deserialization if file contains malicious content
                        cls._cache = json.load(f)
        return cls._cache

    @classmethod
    def clear_cache(cls):
        cls._cache = None

class DataProcessor:
    def __init__(self, config_path: str):
        self.config = ConfigLoader.load(config_path)
        self.threshold = self.config.get('threshold', 10)

    def process(self, data: list[int]) -> list[int]:
        # Off‑by‑one error: should iterate over all items but skips the last one
        result = []
        for i in range(len(data) - 1):
            if data[i] > self.threshold:
                result.append(data[i] * 2)
        return result

# Example usage (would be in production code)
if __name__ == ""__main__"":
    processor = DataProcessor('config.json')
    sample_data = [5, 12, 7, 20]
    print(processor.process(sample_data))
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json
import requests

def fetch_data_from_api(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return None

def process_data(data):
    processed = []
    for item in data:
        if item['status'] == 'active':
            processed.append({
                'id': item['id'],
                'name': item['name'],
                'email': item['email']
            })
    return processed

def save_data_to_file(data, filename='output.json'):
    with open(filename, 'w') as f:
        json.dump(data, f)

if __name__ == '__main__':
    api_url = 'https://api.example.com/data'
    raw_data = fetch_data_from_api(api_url)
    if raw_data:
        processed_data = process_data(raw_data)
        save_data_to_file(processed_data)
    else:
        print('Failed to fetch data')",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    std::string name;
    int grade;

    Student(std::string n, int g) : name(n), grade(g) {}

    bool operator<(const Student& other) const {
        return grade < other.grade;
    }
};

void sortStudents(std::vector<Student>& students) {
    std::sort(students.begin(), students.end());
}

int main() {
    std::vector<Student> students = {Student(""John"", 85), Student(""Alice"", 90), Student(""Bob"", 78)};
    sortStudents(students);
    for (const auto& student : students) {
        std::cout << student.name << "" "" << student.grade << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }
    void flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        for (const auto& l : logs_) {
            std::cout << l << std::endl;
        }
        logs_.clear();
    }
private:
    std::vector<std::string> logs_;
    std::mutex mtx_;
};

void worker(LogAggregator& agg, int id) {
    for (int i = 0; i < 100; ++i) {
        agg.addLog(""Thread "" + std::to_string(id) + "" message "" + std::to_string(i));
    }
}

int main() {
    LogAggregator agg;
    std::thread t1(worker, std::ref(agg), 1);
    std::thread t2(worker, std::ref(agg), 2);
    // Missing join leads to undefined behavior on program exit
    agg.flush();
    return 0;
}
",code_defect,missing_thread_join,,openai/gpt-oss-120b
Java,"import java.util.*;

public class UserProcessor {
    private List<String> usernames;
    private Map<String, String> userRoles;

    public UserProcessor(List<String> usernames, Map<String, String> userRoles) {
        this.usernames = usernames;
        this.userRoles = userRoles;
    }

    public void processUsers() {
        for (String username : usernames) {
            String role = userRoles.get(username);
            if (role != null) {
                if (role.equals(""admin"")) {
                    grantAdminAccess(username);
                } else if (role.equals(""editor"")) {
                    grantEditorAccess(username);
                } else if (role.equals(""viewer"")) {
                    grantViewerAccess(username);
                }
            }
        }
    }

    private void grantAdminAccess(String username) {
        // Logic to grant admin access
        System.out.println(""Granting admin access to "" + username);
    }

    private void grantEditorAccess(String username) {
        // Logic to grant editor access
        System.out.println(""Granting editor access to "" + username);
    }

    private void grantViewerAccess(String username) {
        // Logic to grant viewer access
        System.out.println(""Granting viewer access to "" + username);
    }
}",code_smell,type_switching,,qwen/qwen3-32b
JavaScript,"
   class BankAccount {
     constructor(accountNumber, balance) {
       this.accountNumber = accountNumber;
       this.balance = balance;
     }

     withdraw(amount) {
       if (amount > this.balance) {
         console.log('Insufficient funds');
       } else {
         this.balance -= amount;
       }
     }

     deposit(amount) {
       this.balance += amount;
     }

     getBalance() {
       return this.balance;
     }
   }

   function main() {
     let account = new BankAccount('1234567890', 1000.0);
     account.withdraw(500.0);
     console.log(account.getBalance());
   }

   main();
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserReportGenerator {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""p@ssw0rd""; // hardcoded credentials

    public List<String> generateReport(int daysBack) {
        List<String> reportLines = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT username, last_login FROM users WHERE last_login >= DATE_SUB(NOW(), INTERVAL "" + daysBack + "" DAY)"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                String line = rs.getString(""username"") + "": "" + rs.getTimestamp(""last_login"");
                reportLines.add(line);
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return reportLines;
    }
}
",code_defect,SQL injection vulnerability due to concatenating user-controlled 'daysBack' into query,,openai/gpt-oss-120b
JavaScript,"function processUserData(data) {
  let results = [];
  for (let i = 0; i < data.length; i++) {
    let user = data[i];
    if (user.status === 'active') {
      let processed = {};
      processed.id = user.id;
      processed.name = user.firstName + ' ' + user.lastName;
      processed.email = user.email;
      processed.isAdmin = user.role === 'admin';
      results.push(processed);
    }
  }
  return results;
}

function fetchUsers() {
  return [{
    id: 1,
    firstName: 'John',
    lastName: 'Doe',
    email: 'john@example.com',
    status: 'active',
    role: 'user'
  }, {
    id: 2,
    firstName: 'Jane',
    lastName: 'Smith',
    email: 'jane@example.com',
    status: 'inactive',
    role: 'admin'
  }];
}

let users = fetchUsers();
let processedUsers = processUserData(users);
console.log(processedUsers);",code_smell,long_function,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private static final String DEFAULT_PASSWORD = ""password123""; public boolean authenticate(String username, String password) { if (username.equals(""admin"") && password.equals(DEFAULT_PASSWORD)) { return true; } else { return false; } } public static void main(String[] args) { UserAuthenticator authenticator = new UserAuthenticator(); System.out.println(authenticator.authenticate(""admin"", ""password123"")); } }",code_defect,hardcoded_secrets,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Synchronously read config file every time load is called
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) {
      this.load();
    }
    return this.cache[key];
  }
}

// Usage example
const loader = new ConfigLoader('/etc/app/config.json');
const port = loader.get('port');
console.log('Server will start on port:', port);

// Later in the code, another component re-reads the config
function refreshConfig() {
  // Intentionally forgetting to handle errors
  loader.load();
  console.log('Config refreshed');
}

setInterval(refreshConfig, 60000);",code_defect,blocking_io_in_event_loop,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class UserProcessor {
public:
    void processUser(const std::string& username, const std::string& email, const std::string& role, const std::string& status) {
        if (username.empty() || email.empty() || role.empty() || status.empty()) {
            std::cerr << ""Invalid user data provided."" << std::endl;
            return;
        }

        if (role == ""admin"") {
            if (status == ""active"") {
                std::cout << ""Granting admin access to "" << username << std::endl;
            } else {
                std::cout << ""Admin access denied due to inactive status for "" << username << std::endl;
            }
        } else if (role == ""editor"") {
            if (status == ""pending"") {
                std::cout << ""Approving editor access for "" << username << std::endl;
            } else {
                std::cout << ""Editor access denied for "" << username << std::endl;
            }
        } else {
            std::cout << ""Role not recognized for user "" << username << std::endl;
        }
    }
};

int main() {
    UserProcessor processor;
    processor.processUser(""johndoe"", ""johndoe@example.com"", ""admin"", ""inactive"");
    processor.processUser(""janedoe"", ""janedoe@example.com"", ""editor"", ""approved"");
    return 0;
}",code_smell,large_function,,qwen/qwen3-32b
Python,"class OrderProcessor:
    def __init__(self, orders):
        self.orders = orders
    
    def process_orders(self):
        total_cost = 0
        for order in self.orders:
            total_cost += order['price'] * order['quantity']
            # Apply discount if order total exceeds $100
            if total_cost > 100:
                total_cost *= 0.9
        return total_cost
    
    def get_order_details(self, order_id):
        for order in self.orders:
            if order['id'] == order_id:
                return order
        return None
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json, os, logging

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.config = {}
        self._load()

    def _load(self):
        # Insecure: directly deserialize JSON from a file without validation
        with open(self.config_path, 'r') as f:
            self.config = json.load(f)

    def get(self, key, default=None):
        return self.config.get(key, default)

class UserService:
    def __init__(self, db):
        self.db = db
        self.logger = logging.getLogger('UserService')

    def create_user(self, username, password):
        # Password stored in plain text – security defect
        query = f""INSERT INTO users (username, password) VALUES ('{username}', '{password}')""
        self.db.execute(query)
        self.logger.info(f""Created user {username}"")

    def get_user(self, user_id):
        # Potential SQL injection if user_id is not an int
        query = f""SELECT * FROM users WHERE id = {user_id}""
        result = self.db.fetch_one(query)
        return result

class Database:
    def __init__(self, dsn):
        self.dsn = dsn
        self.conn = self._connect()

    def _connect(self):
        # Dummy connection placeholder
        return None

    def execute(self, query):
        # Missing error handling, will silently fail
        print(f""Executing: {query}"")

    def fetch_one(self, query):
        print(f""Fetching: {query}"")
        return {'id': 1, 'username': 'admin'}

# Usage example
if __name__ == '__main__':
    cfg = ConfigLoader('config.json')
    db = Database(cfg.get('database_dsn'))
    service = UserService(db)
    service.create_user('alice', 'password123')
    user = service.get_user('1 OR 1=1')
    print(user)",code_defect,SQL_injection_and_plaintext_password,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    void process(const std::vector<std::string>& inputs) {
        for (const auto& input : inputs) {
            if (!input.empty()) {
                std::string temp = processInput(input);
                store(temp);
            }
        }
    }

private:
    std::string processInput(const std::string& input) {
        std::string result;
        for (char c : input) {
            if (c >= 'A' && c <= 'Z') {
                result += c;
            } else if (c >= 'a' && c <= 'z') {
                result += c;
            }
        }
        return result;
    }

    void store(const std::string& data) {
        // Dummy storage
        std::cout << ""Stored: "" << data << std::endl;
    }
};

int main() {
    DataProcessor dp;
    std::vector<std::string> inputs = {""Hello World! 123"", ""C++ Rocks!"", ""Secret123""};
    dp.process(inputs);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class PaymentProcessor:
    def __init__(self, payment_gateway):
        self.payment_gateway = payment_gateway
    
    def process_payment(self, amount, customer_id):
        try:
            payment_result = self.payment_gateway.charge_card(amount, customer_id)
            if payment_result['status'] == 'success':
                return True
            else:
                return False
        except Exception as e:
            print(f'An error occurred: {e}')
            return False",code_smell,God class,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""P@ssw0rd123""; // hardcoded secret

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT balance FROM accounts WHERE user_id = '"" + userId + ""'""; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    double newBalance = balance - amount;
                    String updateSql = ""UPDATE accounts SET balance = "" + newBalance + "" WHERE user_id = '"" + userId + ""'"";
                    stmt.executeUpdate(updateSql);
                    logTransaction(userId, amount);
                    return true;
                }
            }
            return false;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            // Resources not closed properly if stmt.executeUpdate throws
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }

    private void logTransaction(String userId, double amount) {
        // Simplified logging, ignores failures
        System.out.println(""Transaction logged: user="" + userId + "", amount="" + amount);
    }
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  removeUser(userId) {
    this.users = this.users.filter(user => user.id !== userId);
  }

  getUser(userId) {
    return this.users.find(user => user.id === userId);
  }

  getUsers() {
    return this.users;
  }

  updateUser(userId, updatedData) {
    const user = this.getUser(userId);

    if (user) {
      this.removeUser(userId);
      const updatedUser = { ...user, ...updatedData };
      this.addUser(updatedUser);
    }
  }

  reset() {
    this.users = [];
  }
}

// Example usage:
const userManager = new UserManager();
userManager.addUser({ id: 1, name: 'Alice' });
userManager.addUser({ id: 2, name: 'Bob' });
userManager.updateUser(1, { name: 'Alicia' });
console.log(userManager.getUsers());",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger logger = LoggerFactory.getLogger(UserService.class); public void saveUser(String username, String password) { try { User user = new User(username, password); user.setPassword(Hashing.sha256().hashString(password, StandardCharsets.UTF_8).toString()); if (username.length() > 10) { logger.info(""Username is longer than 10 characters""); } else { logger.info(""Username is 10 characters or less""); } } catch (Exception e) { logger.error(""Error saving user"", e); } } }",code_smell,unused_import,,llama-3.3-70b-versatile
Python,"import json, os, logging

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        # Loads JSON config without validation
        with open(self.path, 'r') as f:
            data = f.read()
        # Unsafe deserialization – allows arbitrary code execution if the file is malicious
        self.config = json.loads(data)

    def get(self, key, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, config_path):
        self.cfg = ConfigLoader(config_path)
        self.threshold = self.cfg.get('threshold', 10)
        self.results = []

    def process(self, items):
        for i in range(len(items)):
            item = items[i]
            if self._is_valid(item):
                transformed = self._transform(item)
                self.results.append(transformed)
        return self.results

    def _is_valid(self, item):
        # Off‑by‑one error: should be >= 0
        return item['value'] > 0

    def _transform(self, item):
        # Potential ZeroDivisionError if divisor is zero
        divisor = item.get('divisor', 1)
        return item['value'] / divisor * self.threshold

# Usage example (would be removed in production)
if __name__ == '__main__':
    processor = DataProcessor('config.json')
    sample = [{'value': 5, 'divisor': 0}, {'value': -3}]
    print(processor.process(sample))
",code_defect,unsafe_deserialization_and_logic_errors,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::vector<std::string> processUserInput(const std::vector<std::string>& inputs) {
    std::vector<std::string> processed;
    for (const auto& input : inputs) {
        std::string cleaned = input;
        for (char c : cleaned) {
            if (c == 'a') {
                cleaned.erase(cleaned.find('a'), 1);
            }
        }
        if (!cleaned.empty()) {
            processed.push_back(cleaned);
        }
    }
    return processed;
}

int main() {
    std::vector<std::string> userInputs = {""banana"", ""apple"", ""grape""};
    std::vector<std::string> result = processUserInput(userInputs);
    for (const auto& str : result) {
        std::cout << str << std::endl;
    }
    return 0;
}",code_smell,inefficient_loop,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute('UPDATE users SET name = %s, email = %s WHERE id = %s', (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
        
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('DELETE FROM users WHERE id = %s', (user_id,))
        self.db_connection.commit()
    
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users')
        users_data = cursor.fetchall()
        return users_data",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // JSON.parse can throw, but we ignore errors
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function processUserInput(input) {
  // Assume input is a JSON string from an untrusted source
  const obj = JSON.parse(input); // unsafe deserialization
  if (obj.command === 'deleteAll') {
    // Dangerous operation without validation
    fs.unlinkSync('/var/app/data.db');
  }
  return obj;
}

module.exports = { ConfigLoader, processUserInput };",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    void process(const std::vector<int>& data) {
        if (data.empty()) return;
        int sum = 0;
        for (size_t i = 0; i < data.size(); ++i) {
            sum += data[i];
        }
        std::cout << ""Average: "" << sum / data.size() << std::endl;
    }
};

int main() {
    DataProcessor dp;
    std::vector<int> values = {10, 20, 30, 40, 50};
    dp.process(values);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        if user_data:
            return {
                'id': user_data[0],
                'username': user_data[1],
                'email': user_data[2]
            }
        else:
            return None

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        users = []
        for user_data in users_data:
            users.append({
                'id': user_data[0],
                'username': user_data[1],
                'email': user_data[2]
            })
        return users
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getPendingTransactions() throws SQLException {
        List<String> ids = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            ids.add(rs.getString(""id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return ids;
    }

    public void processTransactions() throws SQLException {
        List<String> pending = getPendingTransactions();
        for (String txnId : pending) {
            // Simulate processing
            if (process(txnId)) {
                updateStatus(txnId, ""COMPLETED"");
            } else {
                updateStatus(txnId, ""FAILED"");
            }
        }
    }

    private boolean process(String txnId) {
        // Dummy logic: randomly succeed
        return Math.random() > 0.5;
    }

    private void updateStatus(String txnId, String status) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""UPDATE transactions SET status='"" + status + ""' WHERE id='"" + txnId + ""'""; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        stmt.close();
        conn.close();
    }
}
",code_defect,sql_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final int MAX_RETRY_ATTEMPTS = 3;

    public void processOrder(String orderId, String customerEmail, String paymentMethod) {
        int attempt = 0;
        boolean orderProcessed = false;
        while (attempt < MAX_RETRY_ATTEMPTS && !orderProcessed) {
            try {
                System.out.println(""Processing order: "" + orderId);
                if (validateOrder(orderId) && processPayment(orderId, paymentMethod)) {
                    sendConfirmationEmail(customerEmail, orderId);
                    orderProcessed = true;
                } else {
                    System.out.println(""Order validation or payment failed. Retrying..."");
                    attempt++;
                }
            } catch (Exception e) {
                System.out.println(""Error processing order: "" + e.getMessage());
                attempt++;
            }
        }
        if (!orderProcessed) {
            System.out.println(""Failed to process order: "" + orderId);
            logError(""Order failed: "" + orderId);
        }
    }

    private boolean validateOrder(String orderId) {
        // Simulating validation logic
        return Math.random() > 0.2;
    }

    private boolean processPayment(String orderId, String paymentMethod) {
        // Simulating payment processing logic
        return paymentMethod != null && !paymentMethod.isEmpty();
    }

    private void sendConfirmationEmail(String email, String orderId) {
        // Simulating email sending
        System.out.println(""Sent confirmation email to "" + email + "" for order "" + orderId);
    }

    private void logError(String message) {
        // Simulating logging
        System.out.println(""[ERROR] "" + message);
    }
}",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(dbConnection) {
            this.dbConnection = dbConnection;
         }

         async getUser(id) {
            const query = `SELECT * FROM users WHERE id = ${id}`;
            const result = await this.dbConnection.query(query);
            return result.rows[0];
         }
      }

      const dbConnection = {
         query: async (query) => {
            // simulate a database query
            return { rows: [{ id: 1, name: 'John Doe' }] };
         }
      };

      const userService = new UserService(dbConnection);
      userService.getUser(1).then((user) => console.log(user));
   ",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.configPath = configPath;
    this.cache = null;
  }

  load() {
    // Synchronously read config file each call, ignoring cache
    const data = fs.readFileSync(this.configPath, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) {
      this.load();
    }
    return this.cache[key];
  }
}

// Usage in a web server
const http = require('http');
const config = new ConfigLoader('./config.json');

const server = http.createServer((req, res) => {
  // Vulnerable: directly uses query string as file name
  const url = new URL(req.url, `http://${req.headers.host}`);
  const file = url.searchParams.get('file');
  if (file) {
    // Path traversal vulnerability
    const content = fs.readFileSync(`./public/${file}`, 'utf8');
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end(content);
    return;
  }

  const mode = config.get('mode');
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({ status: 'ok', mode }));
});

server.listen(8080, () => console.log('Server running on port 8080'));",code_defect,path_traversal_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final String API_KEY = ""12345-ABCDE-67890"";

    public void processOrder(Order order) {
        if (order == null || order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getPrice() <= 0) {
                continue;
            }

            String productCode = item.getProductCode();
            if (productCode == null || productCode.trim().isEmpty()) {
                continue;
            }

            if (isValidProduct(productCode)) {
                System.out.println(""Processing item: "" + productCode);
                // TODO: Actually perform order processing here
            }
        }
    }

    private boolean isValidProduct(String productCode) {
        // Simulating an external API call
        return productCode.length() == 5 && productCode.matches(""[A-Za-z0-9]+"");
    }
}",code_smell,incomplete_functionality,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger logger = LoggerFactory.getLogger(UserService.class); public List<User> getAllUsers() { List<User> users = new ArrayList<>(); try (Connection conn = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""root"", ""password"")) { Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""SELECT * FROM users""); while (rs.next()) { User user = new User(rs.getInt(""id""), rs.getString(""name""), rs.getString(""email"")); users.add(user); } } catch (SQLException e) { logger.error(""Error fetching users"", e); } return users; }}",code_smell,hardcoded_secrets,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
    constructor(db) {
        this.db = db;
    }

    // Processes an order and updates inventory
    async process(order) {
        // Fetch product details
        const product = await this.db.getProduct(order.productId);
        // Update inventory without checking stock level
        await this.db.updateProductStock(order.productId, product.stock - order.quantity);
        // Save order
        await this.db.saveOrder({
            userId: order.userId,
            productId: order.productId,
            quantity: order.quantity,
            total: product.price * order.quantity,
            status: 'processed'
        });
        return true;
    }
}

module.exports = OrderProcessor;",code_defect,missing_stock_check,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (i != j && data[i] == data[j]) {
                std::cout << ""Duplicate at ("" << i << "", "" << j << "")\n"";
            }
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 2, 4, 1};
    processData(input);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email

    def authenticate(self, input_password):
        return self.password == input_password

    def update_email(self, new_email):
        self.email = new_email

    def get_user_info(self):
        return {'username': self.username, 'email': self.email}

    def save_to_database(self):
        # This is a placeholder for actual database interaction
        print('Saving user data to database...')

# Usage example
account = UserAccount('test_user', 'test_password', 'test@example.com')
print(account.authenticate('test_password'))  # True
print(account.authenticate('wrong_password'))  # False
account.update_email('new_email@example.com')
print(account.get_user_info())  # {'username': 'test_user', 'email': 'new_email@example.com'}
account.save_to_database()  # Saving user data to database...
",code_smell,God class,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class UserService {
    private Connection connection;

    public UserService(Connection connection) {
        this.connection = connection;
    }

    public List<String> getUserRoles(String username) throws SQLException {
        List<String> roles = new ArrayList<>();
        // Vulnerable to SQL injection
        String query = ""SELECT role FROM user_roles WHERE username = '"" + username + ""'"";
        Statement stmt = connection.createStatement();
        ResultSet rs = stmt.executeQuery(query);
        while (rs.next()) {
            roles.add(rs.getString(""role""));
        }
        rs.close();
        stmt.close();
        return roles;
    }
}
",code_defect,sql_injection,,openai/gpt-oss-120b
JavaScript,"class DataProcessor {
  constructor() {
    this.cache = {};
  }

  process(data) {
    if (!data || !data.length) {
      return [];
    }

    const result = [];
    for (let i = 0; i < data.length; i++) {
      const item = data[i];
      const key = item.id;

      if (this.cache[key]) {
        result.push(this.cache[key]);
        continue;
      }

      const processed = this._transform(item);
      this.cache[key] = processed;
      result.push(processed);
    }

    return result;
  }

  _transform(item) {
    const obj = {};
    obj.id = item.id;
    obj.name = item.name.toUpperCase();
    obj.value = item.value * 2;
    return obj;
  }

  clearCache() {
    this.cache = {};
  }
}

export default DataProcessor;",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserManager { private static final String DB_URL = ""jdbc:mysql://localhost:3306/mydb""; private static final String DB_USER = ""root""; private static final String DB_PASSWORD = ""password""; public void updateUser(String username, String email) { try { Class.forName(""com.mysql.cj.jdbc.Driver""); Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD); PreparedStatement stmt = conn.prepareStatement(""UPDATE users SET email = ? WHERE username = ?""); stmt.setString(1, email); stmt.setString(2, username); stmt.executeUpdate(); conn.close(); } catch (Exception e) { System.out.println(""Error updating user""); } } }",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path

    def _get_connection(self):
        return sqlite3.connect(self.db_path)

    def get_users_page(self, page: int, page_size: int = 20):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = self._get_connection()
        cursor = conn.cursor()
        # BUG: Off-by-one error in LIMIT clause, returns one extra record
        cursor.execute(
            ""SELECT id, username, email FROM users ORDER BY id LIMIT ? OFFSET ?"",
            (page_size + 1, offset)
        )
        rows = cursor.fetchall()
        conn.close()
        return [
            {""id"": row[0], ""username"": row[1], ""email"": row[2]}
            for row in rows
        ]

# Example usage (not part of production code)
if __name__ == ""__main__"":
    repo = UserRepository('app.db')
    users = repo.get_users_page(2)
    print(f""Fetched {len(users)} users: {users}"")
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class ReportGenerator {
    public void generateReport(String[] data) {
        for (int i = 0; i < data.length; i++) {
            if (data[i] == null) {
                continue;
            }
            String formatted = data[i].trim().toUpperCase();
            System.out.println(""Entry "" + (i + 1) + "": "" + formatted);
        }
    }

    public static void main(String[] args) {
        String[] input = {""  item1  "", null, ""Item2"", ""  item3  ""};
        ReportGenerator generator = new ReportGenerator();
        generator.generateReport(input);
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments""; private static final String DB_USER = ""root""; private static final String DB_PASSWORD = ""password123""; public void processPayment(String paymentId) { try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) { Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""SELECT * FROM payments WHERE id = '"" + paymentId + ""'""); if (rs.next()) { System.out.println(""Payment processed: "" + rs.getString(""amount"")); } } catch (SQLException e) { System.out.println(""Error processing payment""); } } }",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._cache = {}

    def load(self, section):
        # Load entire config file each call – inefficient and may cause race conditions
        with open(self.config_path, 'r') as f:
            data = json.load(f)
        # No validation of section existence
        return data.get(section, {})

class UserService:
    def __init__(self, db_conn_str):
        self.db_conn_str = db_conn_str
        self.config = ConfigLoader('/etc/app/config.json')
        self.timeout = self.config.load('service')['timeout']  # May be None

    def get_user(self, user_id):
        # Unsafe string formatting leads to SQL injection
        query = f""SELECT * FROM users WHERE id = {user_id}""
        conn = self._connect()
        cursor = conn.cursor()
        cursor.execute(query)
        result = cursor.fetchone()
        conn.close()
        return result

    def _connect(self):
        # Missing error handling, may raise exception and crash
        import psycopg2
        return psycopg2.connect(self.db_conn_str, connect_timeout=self.timeout)
",code_defect,sql_injection,,openai/gpt-oss-120b
Java,"public class UserSessionManager {

    private static final int MAX_LOGIN_ATTEMPTS = 3;

    public void login(String username, String password) {
        int attempts = 0;
        while (attempts < MAX_LOGIN_ATTEMPTS) {
            if (validateUser(username, password)) {
                System.out.println(""Login successful for "" + username);
                return;
            }
            attempts++;
            if (attempts >= MAX_LOGIN_ATTEMPTS) {
                System.out.println(""Too many login attempts for "" + username);
                lockAccount(username);
                return;
            }
            System.out.println(""Invalid credentials. Try again."");
        }
    }

    private boolean validateUser(String username, String password) {
        // Simulated validation logic
        return ""admin"".equals(username) && ""admin123"".equals(password);
    }

    private void lockAccount(String username) {
        // Simulated account lock logic
        System.out.println(""Account for "" + username + "" is locked."");
    }

    public static void main(String[] args) {
        UserSessionManager manager = new UserSessionManager();
        manager.login(""admin"", ""wrongpass"");
        manager.login(""admin"", ""admin123"");
    }
}",code_defect,off_by_one_error,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class PriorityQueue {
public:
    void push(int value) {
        values_.push_back(value);
        std::sort(values_.begin(), values_.end(), std::greater<int>());
    }

    int pop() {
        if (values_.empty()) {
            throw std::runtime_error(""PriorityQueue is empty"");
        }
        int max = values_[0];
        values_.erase(values_.begin());
        return max;
    }

private:
    std::vector<int> values_;
};

int main() {
    PriorityQueue queue;
    queue.push(5);
    queue.push(1);
    queue.push(10);
    std::cout << queue.pop() << std::endl; // prints 10
    std::cout << queue.pop() << std::endl; // prints 5
    std::cout << queue.pop() << std::endl; // prints 1
    return 0;
}
",code_smell,inefficient_algorithm,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigManager:
    """"""Loads configuration from a JSON file and provides access to settings.""""""
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, config_path='config.json'):
        # Singleton pattern, but flawed: race condition possible
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super(ConfigManager, cls).__new__(cls)
                    cls._instance._load(config_path)
        return cls._instance

    def _load(self, path):
        with open(path, 'r') as f:
            self._config = json.load(f)
        # Hardcoded secret exposure
        self.api_key = self._config.get('api_key')
        self.timeout = self._config.get('timeout', 30)

    def get(self, key, default=None):
        return self._config.get(key, default)

    def reload(self):
        # Missing lock, can cause inconsistent state if called concurrently
        self._load('config.json')

# Usage example
if __name__ == '__main__':
    cfg = ConfigManager()
    print('API Key:', cfg.api_key)
    # Simulate concurrent reloads
    threads = []
    for _ in range(5):
        t = threading.Thread(target=cfg.reload)
        t.start()
        threads.append(t)
    for t in threads:
        t.join()
    print('Config reloaded')
",code_defect,race_condition_due_to_missing_lock_on_reload,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(userData) {
    this.userData = userData;
  }

  processUser() {
    for (let i = 0; i < this.userData.length; i++) {
      const user = this.userData[i];
      if (user.role === 'admin') {
        this.grantAdminAccess(user);
      } else {
        this.restrictUserAccess(user);
      }
    }
  }

  grantAdminAccess(user) {
    user.accessLevel = 'admin';
    user.permissions = ['read', 'write', 'delete'];
    this.logActivity(`Admin access granted to ${user.name}`);
  }

  restrictUserAccess(user) {
    user.accessLevel = 'user';
    user.permissions = ['read'];
    this.logActivity(`User access restricted for ${user.name}`);
  }

  logActivity(message) {
    console.log(`[LOG] ${message}`);
  }
}

// Example usage
const users = [
  { name: 'Alice', role: 'admin' },
  { name: 'Bob', role: 'user' },
  { name: 'Charlie', role: 'admin' }
];

const processor = new UserProcessor(users);
processor.processUser();",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, String> users = new HashMap<>(); public static void addUser(String username, String password) { users.put(username, password); } public static String authenticate(String username, String password) { return users.get(username); } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""P@ssw0rd!""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            conn.setAutoCommit(false);
            // Update balance
            PreparedStatement updateStmt = conn.prepareStatement(
                ""UPDATE accounts SET balance = balance - ? WHERE account_id = ?"");
            updateStmt.setDouble(1, amount);
            updateStmt.setString(2, accountId);
            int rows = updateStmt.executeUpdate();
            // Insert transaction log
            PreparedStatement logStmt = conn.prepareStatement(
                ""INSERT INTO transactions(account_id, amount, status) VALUES(?, ?, 'PENDING')"");
            logStmt.setString(1, accountId);
            logStmt.setDouble(2, amount);
            logStmt.executeUpdate();
            // Simulate external service call that may fail
            if (!notifyExternalService(accountId, amount)) {
                // Missing rollback leads to inconsistent state
                conn.commit(); // committing even though notification failed
                return false;
            }
            // Finalize transaction
            PreparedStatement finalizeStmt = conn.prepareStatement(
                ""UPDATE transactions SET status='COMPLETED' WHERE account_id=? AND amount=?"");
            finalizeStmt.setString(1, accountId);
            finalizeStmt.setDouble(2, amount);
            finalizeStmt.executeUpdate();
            conn.commit();
            return true;
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ignored) {}
            return false;
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }

    private boolean notifyExternalService(String accountId, double amount) {
        // Placeholder for external call, returns false randomly
        return Math.random() > 0.5;
    }
}
",code_defect,transaction_inconsistent_state_due_to_missing_rollback_on_notification_failure,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    DataProcessor() {}
    void process(const std::vector<int>& input) {
        if (input.empty()) return;

        for (size_t i = 0; i < input.size(); ++i) {
            if (input[i] % 2 == 0) {
                evenCount++;
            } else {
                oddCount++;
            }
        }

        std::cout << ""Even numbers: "" << evenCount << std::endl;
        std::cout << ""Odd numbers: "" << oddCount << std::endl;
    }

private:
    int evenCount = 0;
    int oddCount = 0;
};

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    DataProcessor processor;
    processor.process(data);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, String> users = new HashMap<>(); public static void addUser(String username, String password) { users.put(username, password); } public static String authenticate(String username, String password) { return users.get(username); } public static void main(String[] args) { UserService.addUser(""user1"", ""password1""); System.out.println(UserService.authenticate(""user1"", ""password1"")); }}",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db; // expects a DB client with query method
  }

  // Processes an array of order objects and updates inventory
  async processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      // Update inventory for each item in the order
      for (const item of order.items) {
        const result = await this.db.query(
          `UPDATE inventory SET quantity = quantity - ${item.qty} WHERE product_id = ${item.id}`
        );
        // Assume query returns affectedRows
        if (result.affectedRows === 0) {
          throw new Error('Inventory update failed for product ' + item.id);
        }
      }
      // Mark order as processed
      await this.db.query(`UPDATE orders SET status='processed' WHERE id=${order.id}`);
    }
    return true;
  }
}

module.exports = OrderProcessor;",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import requests

def fetch_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return None

def process_user_data(user_data):
    processed = {
        'name': user_data.get('name'),
        'email': user_data.get('email'),
        'age': user_data.get('age')
    }
    return processed

def main():
    user_id = 123
    user_data = fetch_user_data(user_id)
    if user_data:
        processed_data = process_user_data(user_data)
        print('Processed data:', processed_data)
    else:
        print('Failed to fetch user data.')

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class Database {
public:
    void addRecord(const string& record) {
        records.push_back(record);
    }
    void removeRecord(const string& record) {
        for (auto it = records.begin(); it != records.end(); ++it) {
            if (*it == record) {
                records.erase(it);
                break;
            }
        }
    }
    void printRecords() {
        for (const auto& record : records) {
            cout << record << endl;
        }
    }
private:
    vector<string> records;
};

typedef Database* DatabasePtr;

void processRecords(DatabasePtr db) {
    db->addRecord(""Record 1"");
    db->addRecord(""Record 2"");
    db->removeRecord(""Record 1"");
    db->printRecords();
}

int main() {
    DatabasePtr db = new Database();
    processRecords(db);
    delete db;
    return 0;
}",code_smell,unused_import,,llama-3.3-70b-versatile
Python,"import os
import json
import sqlite3
from typing import List, Dict

class UserManager:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, data: Dict):
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, data) VALUES (?, ?)',
                       (username, json.dumps(data)))
        self.conn.commit()

    def get_user(self, user_id: int) -> Dict:
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return {}

    def delete_user(self, user_id: int):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE id = ?', (user_id,))
        self.conn.commit()

    def close(self):
        self.conn.close()

def load_config(path: str) -> Dict:
    with open(path, 'r') as f:
        return json.load(f)

def main():
    config = load_config('config.json')
    manager = UserManager(config['db_path'])
    # Add a user
    manager.add_user('alice', {'email': 'alice@example.com', 'role': 'admin'})
    # Retrieve user with id 1
    user_data = manager.get_user(1)
    print('User data:', user_data)
    # Delete the user
    manager.delete_user(1)
    manager.close()

if __name__ == '__main__':
    main()",code_defect,SQL injection vulnerability due to unsafe table name handling in future extensions,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final String DB_PASSWORD = ""superSecretPass123!"";

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }
        if (order.getItems().isEmpty()) {
            return;
        }

        String customerName = order.getCustomer().getName();
        double total = calculateOrderTotal(order);

        String query = ""INSERT INTO orders (customer_name, total) VALUES ('"" + customerName + ""', "" + total + "");"";

        try (Connection conn = DriverManager.getConnection(""jdbc:mysql://localhost:3306/orderdb"", ""admin"", DB_PASSWORD)) {
            Statement stmt = conn.createStatement();
            stmt.executeUpdate(query);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private double calculateOrderTotal(Order order) {
        double total = 0.0;
        for (OrderItem item : order.getItems()) {
            total += item.getPrice() * item.getQuantity();
        }
        return total;
    }
}",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public static void addUser(User user) { users.put(user.getUsername(), user); } public static User getUser(String username) { return users.get(username); } public static void removeUser(String username) { users.remove(username); } public static boolean validateUser(String username, String password) { User user = getUser(username); if (user != null && user.getPassword().equals(password)) { return true; } return false; } } class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : log_file(file) {}
    void start() {
        running = true;
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        running = false;
        if(worker.joinable()) worker.join();
    }
    ~LogProcessor() { stop(); }
private:
    void process() {
        while(running) {
            std::vector<std::string> batch = fetchBatch();
            for(const auto& line : batch) {
                if(line.find(""ERROR"") != std::string::npos) {
                    std::lock_guard<std::mutex> lk(mtx);
                    error_count++;
                }
            }
        }
    }
    std::vector<std::string> fetchBatch() {
        // Simulated fetch; in real code this would read from file
        std::this_thread::sleep_for(std::chrono::milliseconds(10));
        return {""INFO start"", ""ERROR failure"", ""INFO end""};
    }
    std::string log_file;
    bool running = false;
    std::thread worker;
    std::mutex mtx;
    int error_count = 0;
};

int main(){
    LogProcessor lp(""app.log"");
    lp.start();
    // Missing sleep or join; program may exit before thread processes
    return 0;
}
",code_defect,thread_lifetime_bug,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  process(order) {
    if (!order || !order.items || order.items.length === 0) {
      return null;
    }

    let total = 0;
    for (let i = 0; i < order.items.length; i++) {
      const item = order.items[i];
      total += item.price * item.quantity;
    }

    if (order.coupon) {
      if (order.coupon.type === 'percent') {
        total = total - (total * order.coupon.value / 100);
      } else if (order.coupon.type === 'fixed') {
        total = total - order.coupon.value;
      }
    }

    if (total < 0) {
      total = 0;
    }

    order.total = total;
    return order;
  }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final int MAX_RETRIES = 3; public void processPayment(String paymentId) { for (int i = 0; i < MAX_RETRIES; i++) { try { if (makePaymentRequest(paymentId)) { System.out.println(""Payment processed successfully""); return; } } catch (Exception e) { System.out.println(""Error processing payment: "" + e.getMessage()); } } System.out.println(""Failed to process payment after "" + MAX_RETRIES + "" retries""); } private boolean makePaymentRequest(String paymentId) { // simulate payment processing delay Thread.sleep(100); return Math.random() < 0.5; } }",code_smell,magic_number,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""admin123""; // hardcoded credentials

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            conn.setAutoCommit(false);
            if (!deductFromAccount(conn, accountId, amount)) {
                conn.rollback();
                return false;
            }
            if (!recordTransaction(conn, accountId, amount)) {
                conn.rollback();
                return false;
            }
            conn.commit();
            return true;
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ex) {}
            return false;
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException e) {}
        }
    }

    private boolean deductFromAccount(Connection conn, String accountId, double amount) throws SQLException {
        String sql = ""UPDATE accounts SET balance = balance - ? WHERE id = ? AND balance >= ?"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setDouble(1, amount);
            stmt.setString(2, accountId);
            stmt.setDouble(3, amount);
            int rows = stmt.executeUpdate();
            return rows == 1;
        }
    }

    private boolean recordTransaction(Connection conn, String accountId, double amount) throws SQLException {
        // Vulnerable to SQL injection because query string is built with concatenation
        String sql = ""INSERT INTO transactions (account_id, amount, timestamp) VALUES ('"" + accountId + ""', "" + amount + "", NOW())"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            int rows = stmt.executeUpdate();
            return rows == 1;
        }
    }
}
",code_defect,sql_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                String customerEmail = order.getCustomer().getEmail();
                double total = calculateTotal(order);
                
                if (total > 100.0) {
                    sendConfirmationEmail(customerEmail);
                } else {
                    sendBasicEmail(customerEmail);
                }
                
                markOrderAsProcessed(order);
            }
        }
    }

    private double calculateTotal(Order order) {
        double total = 0.0;
        for (OrderItem item : order.getItems()) {
            total += item.getPrice() * item.getQuantity();
        }
        return total;
    }

    private void sendConfirmationEmail(String email) {
        // Simulate sending a confirmation email
    }

    private void sendBasicEmail(String email) {
        // Simulate sending a basic email
    }

    private void markOrderAsProcessed(Order order) {
        order.setProcessed(true);
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,public class UserManager { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUserById(int id) { for (User user : users) { if (user.getId() == id) { return user; } } return null; } public void removeUserById(int id) { for (int i = 0; i < users.size(); i++) { if (users.get(i).getId() == id) { users.remove(i); break; } } } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class LogProcessor {
public:
    LogProcessor(const std::vector<std::string>& logs) : logs_(logs) {}

    // Returns the most frequent log entry length
    size_t mostCommonLength() const {
        std::vector<size_t> lengths;
        lengths.reserve(logs_.size());
        for (const auto& entry : logs_) {
            lengths.push_back(entry.size());
        }
        std::sort(lengths.begin(), lengths.end());
        size_t maxCount = 0;
        size_t currentCount = 1;
        size_t mostCommon = 0;
        for (size_t i = 1; i <= lengths.size(); ++i) { // BUG: off‑by‑one, accesses out of bounds when i == lengths.size()
            if (i < lengths.size() && lengths[i] == lengths[i - 1]) {
                ++currentCount;
            } else {
                if (currentCount > maxCount) {
                    maxCount = currentCount;
                    mostCommon = lengths[i - 1];
                }
                currentCount = 1;
            }
        }
        return mostCommon;
    }

private:
    std::vector<std::string> logs_;
};

int main() {
    std::vector<std::string> logs = {""error"", ""warning"", ""info"", ""error"", ""debug"", ""error""};
    LogProcessor processor(logs);
    std::cout << ""Most common length: "" << processor.mostCommonLength() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private final String apiKey = ""superSecretApiKey123!"";

    public void processUser(User user) {
        if (user == null) {
            return;
        }
        String processedName = user.getName().trim().toLowerCase();
        if (processedName.isEmpty()) {
            return;
        }
        if (user.getAge() < 18) {
            sendNotificationToAdmin(user);
        }
        if (user.getEmail() == null || user.getEmail().isEmpty()) {
            user.setEmail(""default@example.com"");
        }
        if (apiKey != null) {
            sendToExternalService(user);
        }
    }

    private void sendNotificationToAdmin(User user) {
        // Dummy implementation
    }

    private void sendToExternalService(User user) {
        // Code that sends user to external service using apiKey
    }
}",code_defect,hardcoded_secret,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) { users.push_back(user); }
    User* getUserByName(std::string name) {
        for (auto& user : users) {
            if (user.getName() == name) {
                return &user;
            }
        }
        return nullptr;
    }
private:
    std::vector<User> users;
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User* user = service.getUserByName(""John"");
    if (user) {
        std::cout << user->getName() << std::endl;
    }
    return 0;
}",code_defect,dangling_pointer,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Synchronously read config file each time without caching
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    // If cache is stale or never loaded, load again
    if (!this.cache) {
      this.load();
    }
    return this.cache[key];
  }
}

// Usage example
function initApp() {
  const config = new ConfigLoader('/etc/app/config.json');
  const dbHost = config.get('dbHost');
  const dbPort = config.get('dbPort');
  // ... initialize DB connection using dbHost and dbPort
}

module.exports = { ConfigLoader, initApp };",code_defect,blocking_io_on_main_thread,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      this.users[i].processed = true;
      if (this.users[i].role === 'admin') {
        this.users[i].permissions = ['read', 'write', 'delete'];
      } else {
        this.users[i].permissions = ['read'];
      }
    }
    return this.users;
  }

  getUserDetails(userId) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === userId) {
        return {
          name: this.users[i].name,
          role: this.users[i].role
        };
      }
    }
    return null;
  }
}

// Usage
const users = [
  { id: 1, name: 'Alice', role: 'admin' },
  { id: 2, name: 'Bob', role: 'user' }
];

const processor = new UserProcessor(users);
processor.processUsers();
console.log(processor.getUserDetails(2));",code_smell,duplicate_code,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, account_number, balance=0):
        self.account_number = account_number
        self.balance = balance
    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
        else:
            pass
    def withdraw(self, amount):
        if amount > 0 and amount <= self.balance:
            self.balance -= amount
        else:
            pass
    def get_balance(self):
        return self.balance

account = BankAccount('12345', 1000)
account.deposit(500)
account.withdraw(200)
print(account.get_balance())",code_smell,unused_code,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
    constructor(db) {
        this.db = db; // expects a database client with query method
    }

    // Process a batch of orders and update inventory
    async processOrders(orders) {
        for (let i = 0; i <= orders.length; i++) { // off‑by‑one error: should be i < orders.length
            const order = orders[i];
            const result = await this.db.query('SELECT stock FROM products WHERE id = $1', [order.productId]);
            const stock = result.rows[0].stock;
            if (stock >= order.quantity) {
                await this.db.query('UPDATE products SET stock = stock - $1 WHERE id = $2', [order.quantity, order.productId]);
                await this.db.query('INSERT INTO orders (user_id, product_id, quantity) VALUES ($1, $2, $3)', [order.userId, order.productId, order.quantity]);
            } else {
                console.warn(`Insufficient stock for product ${order.productId}`);
            }
        }
    }
}

module.exports = OrderProcessor;",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(String userId, String productId, int quantity, String paymentMethod, boolean isPriority) {
        if (userId == null || productId == null || quantity <= 0) {
            return;
        }

        if (paymentMethod.equals(""credit_card"")) {
            // Hardcoded payment gateway URL is a security and maintainability issue
            String gatewayUrl = ""https://gateway.payment.example.com/charge?amount="" + (quantity * 100);
            System.out.println(""Charging credit card for "" + quantity + "" units..."");
            // Simulate charge with no real validation or error handling
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(""Payment successful"");
        }

        if (isPriority) {
            // Priority processing with no rate limiting or queue management
            System.out.println(""Priority processing started"");
            for (int i = 0; i < quantity; i++) {
                deliverProduct(productId);
            }
        } else {
            System.out.println(""Standard processing started"");
            for (int i = 0; i < quantity; i++) {
                deliverProduct(productId);
            }
        }
    }

    private void deliverProduct(String productId) {
        System.out.println(""Delivering product: "" + productId);
        // No inventory check, no error handling for out-of-stock items
    }
}",code_defect,hardcoded_secrets,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

class Person {
public:
    Person(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class PersonDatabase {
public:
    void addPerson(Person person) { people.push_back(person); }
    std::vector<Person> getPeople() { return people; }
private:
    std::vector<Person> people;
};

int main() {
    PersonDatabase db;
    db.addPerson(Person(""John"", 30));
    db.addPerson(Person(""Jane"", 25));
    for (const auto& person : db.getPeople()) {
        std::cout << person.getName() << "" is "" << person.getAge() << "" years old.\n"";
    }
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data):
        cursor = self.conn.cursor()
        # Directly embedding user input into SQL – SQL injection risk
        cursor.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')"")
        self.conn.commit()

    def get_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute(f""SELECT data FROM users WHERE username = '{username}'"")
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def delete_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute(f""DELETE FROM users WHERE username = '{username}'"")
        self.conn.commit()

# Example usage (would be removed in production)
if __name__ == ""__main__"":
    manager = UserManager('users.db')
    manager.add_user('alice', {'email': 'alice@example.com'})
    print(manager.get_user('alice'))
    manager.delete_user('alice')
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import os
import json

def load_user_data(user_id):
    file_path = f'users/{user_id}.json'
    if os.path.exists(file_path):
        with open(file_path, 'r') as f:
            return json.load(f)
    else:
        return None

def process_user_data(user_id, action='view'):
    data = load_user_data(user_id)
    if data is None:
        print('User not found.')
        return
    
    if action == 'view':
        print(f'User {user_id} data: {data}')
    elif action == 'edit':
        data['last_edited'] = 'now'
        with open(file_path, 'w') as f:
            json.dump(data, f)
        print(f'User {user_id} data edited.')
    else:
        print('Invalid action.')

    return data",code_defect,undefined_variable,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Employee {
public:
    string name;
    int salary;
    Employee(string n, int s) : name(n), salary(s) {}
};

vector<Employee> getHighPaidEmployees(vector<Employee>& employees, int threshold) {
    vector<Employee> highPaid;
    for (auto& employee : employees) {
        if (employee.salary > threshold) {
            highPaid.push_back(employee);
        }
    }
    return highPaid;
}

int main() {
    vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
    vector<Employee> highPaid = getHighPaidEmployees(employees, 45000);
    for (auto& employee : highPaid) {
        cout << employee.name << "" "" << employee.salary << endl;
    }
    return 0;
}",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file for every call
    getUserProfile(userId) {
        // Bad practice: synchronous file write inside a request handler
        const user = this.db.query(`SELECT * FROM users WHERE id = ${userId}`);
        const profile = {
            id: user.id,
            name: user.name,
            email: user.email,
            // ... many more fields
        };
        // Inefficient: writing to disk on every request, blocks event loop
        fs.writeFileSync('/var/log/user_profile.log', JSON.stringify({userId, timestamp: Date.now()}) + '\n', { flag: 'a' });
        return profile;
    }

    // Large method handling multiple responsibilities
    updateUser(userId, data) {
        // Validate input (very shallow)
        if (!data || typeof data !== 'object') throw new Error('Invalid data');
        // Update DB
        this.db.execute(`UPDATE users SET name='${data.name}', email='${data.email}' WHERE id=${userId}`);
        // Invalidate cache (placeholder)
        this.cacheInvalidate(userId);
        // Send notification (synchronous HTTP request)
        const http = require('http');
        const options = {
            hostname: 'notification.service',
            port: 80,
            path: `/notify?user=${userId}`,
            method: 'GET'
        };
        const req = http.request(options, res => {
            // ignore response
        });
        req.end();
        return true;
    }

    cacheInvalidate(userId) {
        // TODO: implement proper cache invalidation
    }
}

module.exports = UserService;",code_smell,inefficient_io_and_large_method,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      if (user.isActive) {
        this.processActiveUser(user);
      } else {
        this.processInactiveUser(user);
      }
    }
  }

  processActiveUser(user) {
    user.lastProcessed = new Date();
    user.statusMessage = 'User is active';
    this.updateUserInDatabase(user);
  }

  processInactiveUser(user) {
    user.lastProcessed = new Date();
    user.statusMessage = 'User is inactive';
    this.updateUserInDatabase(user);
  }

  updateUserInDatabase(user) {
    // Simulate a database update
    console.log(`User ${user.id} updated in database.`);
  }
}

// Example usage:
const users = [
  { id: 1, isActive: true },
  { id: 2, isActive: false },
  { id: 3, isActive: true }
];

const processor = new UserProcessor(users);
processor.processUsers();",code_smell,duplicated_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}
    std::string getName() { return name; }
    int getSalary() { return salary; }
private:
    std::string name;
    int salary;
};

class Company {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    int calculateTotalSalary() {
        int total = 0;
        for (const auto& employee : employees) {
            total += employee.getSalary();
        }
        return total;
    }
private:
    std::vector<Employee> employees;
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));
    std::cout << ""Total salary: "" << company.calculateTotalSalary() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded credentials

    public List<Transaction> getPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction t = new Transaction();
            t.setId(rs.getInt(""id""));
            t.setAmount(rs.getDouble(""amount""));
            t.setStatus(rs.getString(""status""));
            list.add(t);
        }
        // Missing rs.close(), stmt.close(), conn.close()
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = getPendingTransactions();
            for (Transaction tx : pending) {
                if (tx.getAmount() < 0) {
                    // Incorrect logic: negative amounts should be rejected, but code proceeds
                    markAsFailed(tx);
                }
                // Simulate external payment call
                boolean success = externalPaymentGateway(tx);
                if (success) {
                    updateStatus(tx.getId(), ""COMPLETED"");
                } else {
                    updateStatus(tx.getId(), ""FAILED"");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Swallowing exception, no retry or alert
        }
    }

    private boolean externalPaymentGateway(Transaction tx) {
        // Dummy implementation that always returns true
        return true;
    }

    private void updateStatus(int txId, String newStatus) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""UPDATE transactions SET status = ? WHERE id = ?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, newStatus);
            stmt.setInt(2, txId);
            stmt.executeUpdate();
            // Missing stmt.close(), conn.close()
        } catch (SQLException e) {
            // Ignoring update failures
        }
    }

    private void markAsFailed(Transaction tx) {
        tx.setStatus(""FAILED"");
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_logic_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order != null && order.getStatus() == OrderStatus.PENDING) {
                processOrder(order);
            }
        }
    }

    private void processOrder(Order order) {
        double totalPrice = 0;
        for (OrderItem item : order.getItems()) {
            if (item != null) {
                totalPrice += item.getQuantity() * item.getPrice();
            }
        }
        order.setTotalPrice(totalPrice);
        order.setStatus(OrderStatus.PROCESSED);
        persistOrder(order);
    }

    private void persistOrder(Order order) {
        // Simulated persistence
    }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };
   class UserService {
   public:
       void addUser(User user) {
           users.push_back(user);
       }
       User* getUserByName(std::string name) {
           for (auto& user : users) {
               if (user.getName() == name) {
                   return &user;
               }
           }
           return nullptr;
       }
   private:
       std::vector<User> users;
   };
   int main() {
       UserService service;
       service.addUser(User(""John"", 30));
       User* user = service.getUserByName(""John"");
       if (user != nullptr) {
           std::cout << user->getName() << std::endl;
       } else {
           std::cout << ""User not found"" << std::endl;
       }
       return 0;
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""admin123""; // hardcoded credentials

    public List<Transaction> getPendingTransactions() throws SQLException {
        List<Transaction> pending = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction tx = new Transaction();
            tx.setId(rs.getInt(""id""));
            tx.setAmount(rs.getDouble(""amount""));
            tx.setStatus(rs.getString(""status""));
            pending.add(tx);
        }
        // Missing rs.close(), stmt.close(), conn.close()
        return pending;
    }

    public void processTransactions() {
        try {
            List<Transaction> txs = getPendingTransactions();
            for (Transaction tx : txs) {
                // Simulate processing
                if (tx.getAmount() < 0) {
                    // Incorrect logic: negative amounts should be rejected, but they are processed
                    updateTransactionStatus(tx.getId(), ""COMPLETED"");
                } else {
                    updateTransactionStatus(tx.getId(), ""COMPLETED"");
                }
            }
        } catch (SQLException e) {
            // Swallowing exception, no logging
        }
    }

    private void updateTransactionStatus(int id, String newStatus) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""UPDATE transactions SET status='"" + newStatus + ""' WHERE id="" + id; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        // Missing stmt.close(), conn.close()
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,SQL injection and resource leak leading to runtime failures,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void processData(const std::vector<int>& data, int start, int end, int& result) {
    int sum = 0;
    for (int i = start; i < end; ++i) {
        sum += data[i];
    }
    std::lock_guard<std::mutex> lock(mtx);
    result += sum;
}

int main() {
    std::vector<int> data(1000000);
    for (int i = 0; i < 1000000; ++i) {
        data[i] = i;
    }

    int totalSum = 0;

    std::thread t1(processData, std::ref(data), 0, 500000, std::ref(totalSum));
    std::thread t2(processData, std::ref(data), 500000, 1000000, std::ref(totalSum));

    t1.join();
    t2.join();

    std::cout << ""Total Sum: "" << totalSum << std::endl;
    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   class User {
   public:
       std::string name;
       int age;
       User(std::string n, int a) : name(n), age(a) {}
       void printUser() {
           std::cout << name << "" is "" << age << "" years old."" << std::endl;
       }
   };
   class UserService {
   public:
       std::vector<User> users;
       void addUser(User u) {
           users.push_back(u);
       }
       void printUsers() {
           for (User u : users) {
               u.printUser();
           }
       }
   };
   int main() {
       UserService service;
       service.addUser(User(""John"", 30));
       service.addUser(User(""Alice"", 25));
       service.printUsers();
       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize || 10;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn returns a promise resolving to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off‑by‑one error – should use (pageNumber - 1) * this.pageSize
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    this.currentPage++;
    return this.getPage(this.currentPage);
  }

  previousPage() {
    if (this.currentPage > 0) {
      this.currentPage--;
    }
    return this.getPage(this.currentPage);
  }
}

// Example usage
const paginator = new Paginator(5);
await paginator.loadItems(() => Promise.resolve([1,2,3,4,5,6,7,8,9,10]));
console.log('First page:', paginator.nextPage()); // Expected [1,2,3,4,5] but gets [] due to bug
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserSession {
  constructor(userId, token, ipAddress) {
    this.userId = userId;
    this.token = token;
    this.ipAddress = ipAddress;
    this.createdAt = new Date();
  }

  isTokenValid() {
    const validChars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    for (let i = 0; i < this.token.length; i++) {
      if (!validChars.includes(this.token[i])) {
        return false;
      }
    }
    return this.token.length === 32;
  }

  isSessionActive() {
    const now = new Date();
    const diffInMinutes = (now - this.createdAt) / (1000 * 60);
    return diffInMinutes < 30 && this.isTokenValid();
  }
}

const session = new UserSession('user123', 'a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6', '192.168.1.1');
console.log(session.isSessionActive());",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        all_users = cursor.fetchall()
        return all_users

class UserController:
    def __init__(self, user_service):
        self.user_service = user_service

    def handle_get_user_request(self, user_id):
        user_data = self.user_service.get_user(user_id)
        if user_data:
            return {""id"": user_data[0], ""name"": user_data[1], ""email"": user_data[2]}
        else:
            return None

    def handle_update_user_request(self, user_id, new_data):
        self.user_service.update_user(user_id, new_data)
        return {""message"": ""User updated successfully""}

    def handle_delete_user_request(self, user_id):
        self.user_service.delete_user(user_id)
        return {""message"": ""User deleted successfully""}

    def handle_get_all_users_request(self):
        all_users = self.user_service.get_all_users()
        users_list = []
        for user in all_users:
            users_list.append({""id"": user[0], ""name"": user[1], ""email"": user[2]})
        return users_list
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }

    void flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        for (const auto& line : logs_) {
            std::cout << line << std::endl;
        }
        // Intentional bug: logs_ not cleared, causing repeated output on subsequent flushes
    }

private:
    std::vector<std::string> logs_;
    std::mutex mtx_;
};

void worker(LogAggregator& agg, int id) {
    for (int i = 0; i < 5; ++i) {
        agg.addLog(""Worker "" + std::to_string(id) + "" log "" + std::to_string(i));
    }
}

int main() {
    LogAggregator aggregator;
    std::thread t1(worker, std::ref(aggregator), 1);
    std::thread t2(worker, std::ref(aggregator), 2);
    t1.join();
    t2.join();
    aggregator.flush();
    aggregator.flush(); // second flush repeats previous logs
    return 0;
}
",code_defect,state_not_cleared_after_flush,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    if (!user || !user.name || !user.email) {
      return false;
    }

    const isEmailTaken = this.users.some(u => u.email === user.email);
    if (isEmailTaken) {
      return false;
    }

    this.users.push(user);
    return true;
  }

  getUsersByRole(role) {
    return this.users.filter(user => {
      if (role === 'admin') {
        return user.role === 'admin';
      } else if (role === 'moderator') {
        return user.role === 'moderator';
      } else {
        return user.role === 'user';
      }
    });
  }

  deleteUser(email) {
    const index = this.users.findIndex(user => user.email === email);
    if (index === -1) {
      return false;
    }

    this.users.splice(index, 1);
    return true;
  }
}",code_smell,long_function,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}
        self.load_users()

    def load_users(self):
        try:
            with open(self.db_file, 'r') as f:
                for line in f:
                    username, password = line.strip().split(':')
                    self.users[username] = password
        except FileNotFoundError:
            pass

    def authenticate(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def add_user(self, username, password):
        self.users[username] = password
        with open(self.db_file, 'a') as f:
            f.write(f'{username}:{password}\n')

# usage
user_db = UserDatabase('users.txt')
user_db.add_user('admin', 'password123')
print(user_db.authenticate('admin', 'password123'))",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self._db_path = db_path
        self._conn = sqlite3.connect(self._db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self._conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password TEXT NOT NULL
            )
        ''')
        self._conn.commit()

    def add_user(self, username: str, password: str):
        cursor = self._conn.cursor()
        # Direct string formatting leads to SQL injection vulnerability
        query = f""INSERT INTO users (username, password) VALUES ('{username}', '{password}')""
        cursor.execute(query)
        self._conn.commit()

    def find_user(self, username: str):
        cursor = self._conn.cursor()
        # Direct string formatting again
        query = f""SELECT * FROM users WHERE username = '{username}'""
        cursor.execute(query)
        return cursor.fetchone()

    def close(self):
        self._conn.close()

# Example usage
repo = UserRepository('example.db')
repo.add_user('alice', 's3cr3t')
print(repo.find_user('alice'))
repo.close()",code_defect,sql_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private String apiKey = ""hardcoded_secret_123"";

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }
        if (order.getItems().isEmpty()) {
            return;
        }
        try {
            String payload = ""{"" + 
                ""\""order_id\"":\"""" + order.getId() + ""\"",\"""" + 
                ""\""items\"":\"""" + order.getItems().toString() + ""\"""" +
                ""}"";
            String response = sendToExternalSystem(payload);
            if (response.contains(""success"")) {
                order.setStatus(""PROCESSED"");
            }
        } catch (Exception e) {
            // Swallowing exception is bad practice
            e.printStackTrace();
        }
    }

    private String sendToExternalSystem(String payload) {
        // Simulated HTTP call
        return ""success"";
    }
}",code_defect,hardcoded_secrets,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        query = ""UPDATE users SET name = '"" + new_data['name'] + ""', email = '"" + new_data['email'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()

# usage
import mysql.connector
db = mysql.connector.connect(host='localhost', user='root', password='password', database='mydb')
user_service = UserService(db)
user_data = {'name': 'John Doe', 'email': 'johndoe@example.com'}
user_service.update_user(1, user_data)
",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
    constructor(items, pageSize) {
        this.items = items || [];
        this.pageSize = pageSize || 10;
    }

    getPage(pageNumber) {
        // pageNumber is 1-indexed for callers
        const start = (pageNumber - 1) * this.pageSize;
        const end = start + this.pageSize;
        // Off‑by‑one bug: slice's end index is exclusive, but we want inclusive of last item
        return this.items.slice(start, end + 1);
    }

    totalPages() {
        return Math.ceil(this.items.length / this.pageSize);
    }
}

// Example usage
const data = Array.from({ length: 95 }, (_, i) => i + 1);
const paginator = new Paginator(data, 20);
console.log('Page 1:', paginator.getPage(1)); // Returns 21 items instead of 20
console.log('Total pages:', paginator.totalPages());",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input, std::vector<int>& results) {
    for (size_t i = 0; i < input.length(); ++i) {
        if (input[i] >= '0' && input[i] <= '9') {
            results.push_back(input[i] - '0');
        } else {
            // Ignore non-digit characters
            continue;
        }
    }

    for (size_t i = 0; i < results.size(); ++i) {
        results[i] = results[i] * 2; // Some arbitrary processing
    }

    // Unused code from previous implementation
    // for (size_t i = 0; i < results.size(); ++i) {
    //     std::cout << results[i] << "" "";
    // }
}

int main() {
    std::string input = ""a1b2c3d"";
    std::vector<int> results;
    processUserInput(input, results);

    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
Python,"class PaymentProcessor:
    def __init__(self, db_connection):
        self.db_connection = db_connection
        self.cache = {}

    def process_payment(self, payment_id, amount):
        if payment_id in self.cache:
            return self.cache[payment_id]
        query = ""SELECT * FROM payments WHERE id = {}"".format(payment_id)
        result = self.db_connection.execute(query)
        payment_data = result.fetchone()
        if payment_data:
            self.cache[payment_id] = payment_data
            return payment_data
        return None

    def update_payment_status(self, payment_id, status):
        query = ""UPDATE payments SET status = '{}' WHERE id = {}"".format(status, payment_id)
        self.db_connection.execute(query)
",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails() {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception, no logging
        } finally {
            // missing close for stmt and conn leads to resource leak
        }
        return emails;
    }

    public boolean deleteUserById(int userId) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""DELETE FROM users WHERE id = "" + userId; // SQL injection risk
            int rows = stmt.executeUpdate(sql);
            return rows > 0;
        } catch (Exception e) {
            return false;
        } finally {
            // resources not closed
        }
    }
}
",code_defect,SQL injection and resource leak,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.credentials = {};
  }

  validateUser(email, password) {
    const users = this.loadUsers();
    for (let i = 0; i < users.length; i++) {
      if (users[i].email === email && users[i].password === password) {
        return true;
      }
    }
    return false;
  }

  loadUsers() {
    // Simulate fetching from DB
    return [
      { email: 'user1@example.com', password: 'password123' },
      { email: 'user2@example.com', password: 'password456' }
    ];
  }

  authenticate(email, password) {
    if (this.validateUser(email, password)) {
      console.log('Authentication successful');
    } else {
      console.log('Authentication failed');
    }
  }
}

const auth = new UserAuth();
auth.authenticate('user1@example.com', 'password123');",code_defect,insecure_authentication,,qwen/qwen3-32b
JavaScript,"class UserManager { constructor() { this.users = []; } addUser(user) { this.users.push(user); } removeUser(username) { for (let i = 0; i < this.users.length; i++) { if (this.users[i].username === username) { this.users.splice(i, 1); break; } } } getUser(username) { for (let i = 0; i < this.users.length; i++) { if (this.users[i].username === username) { return this.users[i]; } } return null; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None

    def load(self):
        with open(self.config_path, 'r') as f:
            # Unsafe: directly eval user-controlled JSON content
            self._config = eval(f.read())
        return self._config

    def get(self, key, default=None):
        return self._config.get(key, default) if self._config else default

class DataProcessor:
    def __init__(self, config_loader):
        self.config_loader = config_loader
        self.batch_size = self.config_loader.get('batch_size', 100)
        self.output_dir = self.config_loader.get('output_dir', '/tmp')

    def process(self, data_items):
        results = []
        for i in range(0, len(data_items), self.batch_size):
            batch = data_items[i:i+self.batch_size]
            processed = [self._process_item(item) for item in batch]
            results.extend(processed)
            self._save_batch(processed, i // self.batch_size)
        return results

    def _process_item(self, item):
        # Simulate some processing
        return {'id': item['id'], 'value': item['value'] * 2}

    def _save_batch(self, batch, batch_index):
        filename = os.path.join(self.output_dir, f'batch_{batch_index}.json')
        with open(filename, 'w') as f:
            json.dump(batch, f)
        logger.info(f'Saved batch {batch_index} to {filename}')

if __name__ == '__main__':
    loader = ConfigLoader('config.cfg')
    config = loader.load()
    processor = DataProcessor(loader)
    sample_data = [{'id': i, 'value': i} for i in range(1000)]
    processor.process(sample_data)
",code_defect,unsafe_deserialization_using_eval,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class UserProcessor {
public:
    void processUsers(const std::vector<std::string>& usernames) {
        for (const auto& user : usernames) {
            if (!user.empty()) {
                std::string trimmedUser = trimUsername(user);
                if (trimmedUser.length() > 0) {
                    std::string role = determineRole(trimmedUser);
                    grantAccess(trimmedUser, role);
                }
            }
        }
    }

private:
    std::string trimUsername(const std::string& username) {
        size_t first = username.find_first_not_of(' ');
        size_t last = username.find_last_not_of(' ');
        return username.substr(first, last - first + 1);
    }

    std::string determineRole(const std::string& username) {
        if (username == ""admin"") {
            return ""admin"";
        } else if (username == ""moderator"") {
            return ""moderator"";
        } else {
            return ""user"";
        }
    }

    void grantAccess(const std::string& username, const std::string& role) {
        std::cout << ""Granting access to "" << username << "" with role: "" << role << std::endl;
    }
};

int main() {
    std::vector<std::string> users = {"" admin"", ""moderator"", "" user123 "", """"};
    UserProcessor processor;
    processor.processUsers(users);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getAllUsers() {
            const users = await this.userRepository.findAll();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async getUserById(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return { id: user.id, name: user.name };
         }
      }

      class UserRepository {
         async findAll() {
            // simulate database query
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' }
            ];
         }

         async findById(id) {
            // simulate database query
            const users = await this.findAll();
            return users.find(user => user.id === id);
         }
      }

      const userRepository = new UserRepository();
      const userService = new UserService(userRepository);
      (async () => {
         const users = await userService.getAllUsers();
         console.log(users);
      })();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            username TEXT NOT NULL,
                            data TEXT
                         )''')
        self.conn.commit()

    def add_user(self, username, data_dict):
        # Directly serializing user-provided dict without validation
        data_json = json.dumps(data_dict)
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, data) VALUES (?, ?)', (username, data_json))
        self.conn.commit()

    def get_user_data(self, username):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            # Unsafe deserialization using eval on stored JSON string
            return eval(row[0])
        return None

    def delete_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage (would be in production code)
manager = UserManager(os.getenv('DB_PATH', ':memory:'))
manager.add_user('alice', {'role': 'admin', 'prefs': {'theme': 'dark'}})
user_data = manager.get_user_data('alice')
print('Loaded user data:', user_data)
manager.delete_user('alice')",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  if (!input) return '';
  
  let result = '';
  for (let i = 0; i < input.length; i++) {
    if (input[i] === 'a') {
      result += 'A';
    } else if (input[i] === 'e') {
      result += 'E';
    } else if (input[i] === 'i') {
      result += 'I';
    } else if (input[i] === 'o') {
      result += 'O';
    } else if (input[i] === 'u') {
      result += 'U';
    } else {
      result += input[i];n    }
  }

  return result;
}

function handleRequest(req, res) {
  const userText = req.body.text || '';
  const processedText = processUserInput(userText);
  res.send(processedText);
}",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
   class UserAuthenticator {
       constructor() {
           this.users = {};
       }

       authenticate(username, password) {
           if (this.users[username] && this.users[username].password === password) {
               return true;
           }
           return false;
       }

       addUser(username, password) {
           this.users[username] = { password: password };
       }
   }

   const authenticator = new UserAuthenticator();
   authenticator.addUser('admin', 'password123');
   console.log(authenticator.authenticate('admin', 'password123')); // true
   console.log(authenticator.authenticate('admin', 'wrongpassword')); // false
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if limit is derived from user input
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,sql_injection_via_limit_parameter,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(id, name, email, role = 'user') {
    this.users.push({ id, name, email, role });
  }

  removeUser(id) {
    this.users = this.users.filter(user => user.id !== id);
  }

  getUsers() {
    return this.users;
  }

  promoteUser(id) {
    const user = this.users.find(user => user.id === id);
    if (user) {
      user.role = 'admin';
    }
  }

  sendEmails() {
    this.users.forEach(user => {
      console.log(`Sending email to ${user.email}...`);
    });
  }
}

// Example usage
const userManager = new UserManager();
userManager.addUser(1, 'Alice', 'alice@example.com');
userManager.addUser(2, 'Bob', 'bob@example.com', 'admin');
userManager.promoteUser(1);
userManager.sendEmails();",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, username, password):
        if username in self.users:
            return False
        self.users[username] = password
        with open(self.db_file, 'a') as f:
            f.write(f'{username}:{password}\n')
        return True

    def authenticate(self, username, password):
        stored_password = self.users.get(username)
        if stored_password == password:
            return True
        return False",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""appuser"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String domain) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String query = ""SELECT email FROM users WHERE email LIKE '"" + domain + ""%';""; // insecure concatenation
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception silently
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

struct User {
    std::string name;
    int age;
    std::string email;
};

std::string getEmail(const User& user) {
    if (user.email.find('@') != std::string::npos) {
        return user.email;
    }
    return ""default@example.com"";
}

void printUsers(const std::vector<User>& users) {
    for (const auto& user : users) {
        std::cout << ""Name: "" << user.name << "", Age: "" << user.age << "", Email: "" << getEmail(user) << std::endl;
    }
}

int main() {
    std::vector<User> users = {
        {""Alice"", 30, ""alice@example.com""},
        {""Bob"", 25, ""bob@domain""},
        {""Charlie"", 35, ""charlie@.com""}
    };
    
    printUsers(users);
    return 0;
}",code_defect,invalid_email_validation,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(paymentGateway) {
         this.paymentGateway = paymentGateway;
      }

      processPayment(amount, currency) {
         if (this.paymentGateway instanceof StripeGateway) {
            return this.paymentGateway.chargeCard(amount, currency);
         } else if (this.paymentGateway instanceof PayPalGateway) {
            return this.paymentGateway.makePayment(amount, currency);
         } else {
            throw new Error('Unsupported payment gateway');
         }
      }
   }

   class StripeGateway {
      chargeCard(amount, currency) {
         // Simulate a successful payment
         return { success: true, transactionId: 'stripe-123' };
      }
   }

   class PayPalGateway {
      makePayment(amount, currency) {
         // Simulate a successful payment
         return { success: true, transactionId: 'paypal-123' };
      }
   }

   const stripeGateway = new StripeGateway();
   const paypalGateway = new PayPalGateway();

   const paymentProcessor = new PaymentProcessor(stripeGateway);
   const result = paymentProcessor.processPayment(100, 'USD');
   console.log(result);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class LogProcessor {
    constructor(logFilePath) {
        this.logFilePath = logFilePath;
        this.buffer = [];
    }

    // Reads the entire log file into memory and parses each line
    loadLogs() {
        const data = fs.readFileSync(this.logFilePath, 'utf8');
        const lines = data.split('\n');
        for (let i = 0; i < lines.length; i++) {
            const entry = this.parseLine(lines[i]);
            if (entry) this.buffer.push(entry);
        }
    }

    // Parses a single log line into an object
    parseLine(line) {
        const parts = line.split(' ');
        if (parts.length < 3) return null;
        return { timestamp: parts[0], level: parts[1], message: parts.slice(2).join(' ') };
    }

    // Returns the latest N log entries
    getRecent(limit) {
        if (limit <= 0) return [];
        // Off‑by‑one error: should be this.buffer.length - limit
        const start = this.buffer.length - limit - 1;
        return this.buffer.slice(start);
    }
}

// Usage example
const processor = new LogProcessor('/var/log/app.log');
processor.loadLogs();
const recent = processor.getRecent(10);
console.log('Recent logs:', recent);",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        String storedPassword = getPasswordFromDatabase(username);
        if (storedPassword == null) {
            return false;
        }

        return storedPassword.equals(password);
    }

    private String getPasswordFromDatabase(String username) {
        // Simulating a database lookup with hardcoded data
        if (""admin"".equals(username)) {
            return ""password123"";
        } else if (""user1"".equals(username)) {
            return ""abc123"";
        }
        return null;
    }
}",code_defect,insecure_authentication,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, String> users = new HashMap<>(); public static void registerUser(String username, String password) { if (username != null && password != null) { users.put(username, password); } } public static String authenticateUser(String username, String password) { return users.get(username); } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # NOTE: In production we might want to validate the JSON schema
        with open(self.config_path, 'r') as f:
            self.settings = json.load(f)
        # Hardcoded fallback values (bad practice)
        self.settings.setdefault('retry_count', 3)
        self.settings.setdefault('timeout', 30)

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.retry = self.config.get('retry_count')
        self.timeout = self.config.get('timeout')

    def process(self, data):
        # Process data with retries
        attempts = 0
        while attempts < self.retry:
            try:
                result = self._expensive_operation(data)
                return result
            except Exception as e:
                attempts += 1
                if attempts >= self.retry:
                    raise
        # If loop exits without returning, None is returned implicitly

    def _expensive_operation(self, data):
        # Simulate a CPU-bound operation
        total = 0
        for i in range(len(data)):
            total += data[i] * data[i]
        return total

# Usage example (would be removed in real module)
if __name__ == '__main__':
    cfg = ConfigLoader(os.path.join(os.path.dirname(__file__), 'config.json'))
    processor = DataProcessor(cfg)
    sample = [1, 2, 3, 4]
    print('Result:', processor.process(sample))
",code_defect,off_by_one_error_in_loop,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

struct User {
    string name;
    string email;
    int age;
};

void processUser(const User& user) {
    if (user.age < 0) {
        cout << ""Invalid age for user: "" << user.name << endl;
        return;
    }

    string processedName = user.name;
    for (char& c : processedName) {
        c = toupper(c);
    }

    cout << ""Processed user: "" << processedName << "" | Email: "" << user.email << "" | Age: "" << user.age << endl;
}

int main() {
    vector<User> users = {
        {""alice"", ""alice@example.com"", 25},
        {""bob"", ""bob@example.com"", -3},
        {""charlie"", ""charlie@example.com"", 30}
    };

    for (const User& user : users) {
        processUser(user);
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class UserService {
public:
    std::vector<std::string> getAllUsers() {
        std::vector<std::string> users;
        for (int i = 0; i < 1000000; i++) {
            users.push_back(""User "" + std::to_string(i));
        }
        return users;
    }

    std::string getUserByName(const std::string& name) {
        std::vector<std::string> allUsers = getAllUsers();
        for (const auto& user : allUsers) {
            if (user.find(name) != std::string::npos) {
                return user;
            }
        }
        return ""User not found"";
    }
};

int main() {
    UserService service;
    std::cout << service.getUserByName(""User 500000"") << std::endl;
    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file for every request
    getUserData(userId) {
        // Bad: synchronous file write inside request handling
        const user = this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        const log = `User ${userId} fetched at ${new Date().toISOString()}\n`;
        fs.writeFileSync('/var/log/app/user_requests.log', log, { flag: 'a' });
        return user;
    }

    // Large method doing multiple unrelated tasks
    updateUserProfile(userId, profileData, notify = true) {
        // Validate input (poor validation)
        if (!profileData || typeof profileData !== 'object') {
            throw new Error('Invalid profile data');
        }
        // Update DB
        this.db.execute('UPDATE users SET name = ?, email = ? WHERE id = ?', [profileData.name, profileData.email, userId]);
        // Send notification synchronously (blocking)
        if (notify) {
            const message = `User ${userId} profile updated`;
            // Simulate sending email (blocking I/O)
            const result = fs.readFileSync('/dev/null'); // placeholder for email send
        }
        // Log action
        fs.appendFileSync('/var/log/app/user_updates.log', `Updated ${userId}\n`);
        return true;
    }
}

module.exports = UserService;",code_smell,blocking_io_in_request_handling,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void process_data(std::vector<int>& data) {
    for (int i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 0) {
            std::lock_guard<std::mutex> lock(mtx);
            std::cout << ""Processing even value: "" << data[i] << std::endl;
        }
        else {
            std::lock_guard<std::mutex> lock(mtx);
            std::cout << ""Processing odd value: "" << data[i] << std::endl;
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::thread t1(process_data, std::ref(data));
    std::thread t2(process_data, std::ref(data));
    t1.join();
    t2.join();
    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
     constructor(username, password) {
       this.username = username;
       this.password = password;
       this.loginAttempts = 0;
     }

     async login(passwordAttempt) {
       if (this.password === passwordAttempt) {
         this.loginAttempts = 0;
         return true;
       } else {
         this.loginAttempts++;
         if (this.loginAttempts >= 3) {
           throw new Error('Account locked due to excessive login attempts');
         }
         return false;
       }
     }
   }

   const account = new UserAccount('testUser', 'testPassword');
   account.login('wrongPassword').then(result => console.log(result)).catch(error => console.error(error));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        // Reads config file synchronously each time, ignoring cache
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }

    get(key) {
        // If load hasn't been called, this will throw
        return this.cache[key];
    }
}

// Global singleton used across the app
const config = new ConfigLoader('/etc/app/config.json');

function processRequest(req, res) {
    // Missing validation of user input leads to prototype pollution
    const userPrefs = JSON.parse(req.body.prefs);
    Object.assign(config.get('defaults'), userPrefs);
    res.end('Preferences applied');
}

module.exports = { processRequest, config };",code_defect,prototype_pollution_and_missing_validation,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUsers(const std::vector<std::string>& users) {
    for (const auto& user : users) {
        if (user.empty()) continue;

        std::string processedUser = user;
        if (processedUser == ""admin"") {
            std::cout << ""Skipping admin user"" << std::endl;
            continue;
        }

        // Simulate processing user
        std::cout << ""Processing user: "" << processedUser << std::endl;
    }
}

int main() {
    std::vector<std::string> users = {""alice"", """", ""bob"", ""admin"", ""charlie""};
    processUsers(users);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final int MAX_ATTEMPTS = 5; public boolean authenticateUser(String username, String password) { for (int i = 0; i < MAX_ATTEMPTS; i++) { if (username.equals(""admin"") && password.equals(""password123"")) { return true; } } return false; } }",code_smell,magic_numbers_and_hardcoded_values,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mutex_);
        logs_.push_back(msg);
    }
    void flush() {
        std::lock_guard<std::mutex> lock(mutex_);
        for (const auto& line : logs_) {
            std::cout << line << std::endl;
        }
        logs_.clear();
    }
private:
    std::vector<std::string> logs_;
    std::mutex mutex_;
};

void worker(LogAggregator* agg, int id) {
    for (int i = 0; i < 100; ++i) {
        agg->addLog(""Worker "" + std::to_string(id) + "" iteration "" + std::to_string(i));
    }
    // Missing flush call leads to data loss if program exits before flush
}

int main() {
    LogAggregator aggregator;
    std::thread t1(worker, &aggregator, 1);
    std::thread t2(worker, &aggregator, 2);
    t1.join();
    t2.join();
    // aggregator.flush(); // unintentionally commented out, causing loss of logs
    return 0;
}
",code_defect,lost_logs_due_to_missing_flush,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

class DataProcessor {
public:
    DataProcessor() {
        // Initialize some default values
        data = {""A"", ""B"", ""C""};
    }

    void process(const std::string& input) {
        for (size_t i = 0; i < data.size(); ++i) {
            if (data[i] == input) {
                std::cout << ""Found match at index "" << i << std::endl;
                break;
            }
        }

        // Unused legacy code
        // processLegacy(input);
    }

    void updateData(const std::vector<std::string>& newData) {
        data = newData;
    }

private:
    std::vector<std::string> data;

    // Legacy function not used anymore
    void processLegacy(const std::string& input) {
        std::cout << ""Legacy processing: "" << input << std::endl;
    }
};

int main() {
    DataProcessor dp;
    dp.process(""B"");
    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <algorithm>

      class Student {
      public:
         std::string name;
         int grade;

         Student(std::string n, int g) : name(n), grade(g) {}

         bool operator<(const Student& other) const {
            return grade < other.grade;
         }
      };

      void sortStudents(std::vector<Student>& students) {
         std::sort(students.begin(), students.end());
      }

      int main() {
         std::vector<Student> students = {Student(""John"", 85), Student(""Alice"", 90), Student(""Bob"", 78)};
         sortStudents(students);

         for (const auto& student : students) {
            std::cout << student.name << ""'s grade: "" << student.grade << std::endl;
         }

         return 0;
      }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize || 10;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn should return a promise resolving to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off‑by‑one error – pageNumber is 1‑based but calculation treats it as 0‑based
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    const next = this.currentPage + 1;
    const page = this.getPage(next);
    if (page.length) {
      this.currentPage = next;
    }
    return page;
  }
}

// Example usage
const paginator = new Paginator(5);
await paginator.loadItems(() => Promise.resolve([1,2,3,4,5,6,7,8,9,10]));
console.log('First page:', paginator.getPage(1)); // Expected [1,2,3,4,5] but gets [] due to bug
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserValidator {
    public boolean validateUser(String username, String password) {
        if (username == null || username.trim().isEmpty()) {
            return false;
        }

        if (password == null || password.length() < 8) {
            return false;
        }

        // Check for SQL injection
        if (password.contains(""'"") || username.contains(""'"")) {
            return false;
        }

        // Legacy validation method (commented out for now)
        // return checkLegacyPasswordRules(password);

        return true;
    }

    // private boolean checkLegacyPasswordRules(String password) {
    //     // Old rules removed due to complexity
    //     return false;
    // }

    public void updatePassword(String newPassword) {
        // Simulate updating password without checking if it's valid
        System.out.println(""Password updated: "" + newPassword);
    }
}",code_smell,poor_input_validation,,qwen/qwen3-32b
Java,"public class UserManager { private static final int MAX_RETRIES = 3; public boolean login(String username, String password) { for (int i = 0; i < MAX_RETRIES; i++) { try { if (authenticate(username, password)) { return true; } } catch (Exception e) { } } return false; } private boolean authenticate(String username, String password) { // simulate authentication delay Thread.sleep(100); return username.equals(""admin"") && password.equals(""password123""); } }",code_defect,unhandled_interrupted_exception,,llama-3.3-70b-versatile
Python,"import os
import json
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it globally.""""""
    _cache = None
    _lock = threading.Lock()

    @classmethod
    def load_config(cls, path: str) -> dict:
        # Missing validation: path could be user-controlled leading to path traversal
        with cls._lock:
            if cls._cache is None:
                with open(path, 'r') as f:
                    cls._cache = json.load(f)
            return cls._cache

class DataProcessor:
    def __init__(self, config_path: str):
        self.config = ConfigLoader.load_config(config_path)
        self.threshold = self.config.get('threshold', 10)

    def process(self, data: list) -> list:
        # Off-by-one error: should iterate over all items but stops one early
        result = []
        for i in range(len(data) - 1):
            item = data[i]
            if item > self.threshold:
                result.append(item * 2)
        return result

def main():
    processor = DataProcessor('/etc/app/config.json')
    raw_data = [5, 12, 7, 20, 3]
    processed = processor.process(raw_data)
    print('Processed data:', processed)

if __name__ == '__main__':
    main()",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        if (order.getItems().isEmpty()) {
            System.out.println(""No items in order. Nothing to process."");
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getPrice() <= 0) {
                continue;
            }

            String itemName = item.getName(); // Not used anywhere

            if (item.getQuantity() < 1) {
                continue;
            }

            // Legacy code that is no longer needed but left in place
            // processLegacyItem(item); 

            double itemTotal = item.getPrice() * item.getQuantity();
            order.addItemTotal(itemTotal);
        }

        double total = 0;
        for (double itemTotal : order.getItemTotals()) {
            total += itemTotal;
        }

        if (total > 0) {
            order.setTotal(total);
        }
    }
}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getAllUsers() {
            const users = await this.userRepository.findAll();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async getUserById(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return { id: user.id, name: user.name };
         }
      }

      class UserRepository {
         async findAll() {
            // simulate database query
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' }
            ];
         }

         async findById(id) {
            // simulate database query
            const users = await this.findAll();
            return users.find(user => user.id === id);
         }
      }

      const userService = new UserService(new UserRepository());
      userService.getAllUsers().then(users => console.log(users));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            // Vulnerable to SQL injection if accountId is not sanitized elsewhere
            String sql = ""SELECT balance FROM accounts WHERE account_id = '"" + accountId + ""'"";
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    // Update balance without transaction management
                    String updateSql = ""UPDATE accounts SET balance = balance - "" + amount + "" WHERE account_id = '"" + accountId + ""'"";
                    stmt.executeUpdate(updateSql);
                    return true;
                }
            }
            return false;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Python,"import sqlite3

class UserManager:
    def __init__(self, db_path='users.db'):
        self.conn = sqlite3.connect(db_path)
        self.cursor = self.conn.cursor()

    def create_user_table(self):
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS users 
                             (id INTEGER PRIMARY KEY, name TEXT, email TEXT)''')
        self.conn.commit()

    def add_user(self, name, email):
        self.cursor.execute(f""INSERT INTO users (name, email) VALUES ('{name}', '{email}')"")
        self.conn.commit()

    def get_user_by_email(self, email):
        self.cursor.execute(f""SELECT * FROM users WHERE email = '{email}'"")
        return self.cursor.fetchone()

    def close(self):
        self.conn.close()

# Example usage:
if __name__ == '__main__':
    manager = UserManager()
    manager.create_user_table()
    manager.add_user('Alice', 'alice@example.com')
    print(manager.get_user_by_email('alice@example.com'))
    manager.close()",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username.equals(""admin"")) {
            return password.equals(DEFAULT_PASSWORD);
        } else {
            // For other users, just check if the password is not empty
            return !password.isEmpty();
        }
    }
}",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, password: str):
        cursor = self.conn.cursor()
        # Insecure: directly interpolating user input into SQL query
        query = f""INSERT INTO users (username, password) VALUES ('{username}', '{password}')""
        cursor.execute(query)
        self.conn.commit()
        return cursor.lastrowid

    def find_user(self, username: str):
        cursor = self.conn.cursor()
        # Insecure: vulnerable to SQL injection
        query = f""SELECT * FROM users WHERE username = '{username}'""
        cursor.execute(query)
        return cursor.fetchone()

# Example usage (would be called from elsewhere in the application)
repo = UserRepository('app.db')
repo.add_user('alice', 's3cr3t')
print(repo.find_user('alice'))",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(String customerId, String productId, int quantity) {
        if (customerId == null || productId == null || quantity <= 0) {
            return;
        }

        boolean inventoryAvailable = checkInventory(productId, quantity);
        if (!inventoryAvailable) {
            return;
        }

        boolean customerValid = validateCustomer(customerId);
        if (!customerValid) {
            return;
        }

        createOrderRecord(customerId, productId, quantity);
        updateInventory(productId, quantity);
        sendOrderConfirmation(customerId);
    }

    private boolean checkInventory(String productId, int quantity) {
        // Simulated inventory check logic
        return Math.random() > 0.5;
    }

    private boolean validateCustomer(String customerId) {
        // Simulated customer validation logic
        return customerId.length() > 3;
    }

    private void createOrderRecord(String customerId, String productId, int quantity) {
        // Simulated database record creation
    }

    private void updateInventory(String productId, int quantity) {
        // Simulated inventory update
    }

    private void sendOrderConfirmation(String customerId) {
        // Simulated confirmation logic
    }
}",code_smell,lack_of_error_handling,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount > self.balance:
            self.balance = 0
        else:
            self.balance -= amount
    def get_balance(self):
        return self.balance

account = BankAccount(100)
print(account.get_balance())
account.withdraw(50)
print(account.get_balance())",code_defect,incorrect_conditional_logic,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // Parses JSON but does not handle errors – malformed JSON will crash the process
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function getUserSetting(userId) {
  const loader = new ConfigLoader('/etc/app/settings.json');
  const config = loader.load();
  // Assume config.users is an object keyed by userId strings
  return config.users[userId] || {};
}

function processRequest(req, res) {
  const userId = req.query.id;
  // No validation of userId – could be undefined or malicious string
  const settings = getUserSetting(userId);
  // Directly uses settings without checking existence, may cause runtime errors
  if (settings.enableFeature) {
    res.send('Feature enabled');
  } else {
    res.send('Feature disabled');
  }
}

module.exports = { processRequest };",code_defect,unvalidated_input_and_missing_error_handling,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {

    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        String storedPassword = fetchPasswordFromDatabase(username);
        if (storedPassword == null) {
            return false;
        }

        // Legacy check commented out but still present
        // if (password.equals(""admin"")) {
        //     return true;
        // }

        return password.equals(storedPassword);
    }

    private String fetchPasswordFromDatabase(String username) {
        // Simulated DB call
        if (""admin"".equals(username)) {
            return ""s3cr3tP@ss"";
        } else if (""user123"".equals(username)) {
            return ""p@ssw0rd"";
        }
        return null;
    }

    public static void main(String[] args) {
        UserAuthenticator auth = new UserAuthenticator();
        System.out.println(auth.authenticate(""admin"", ""s3cr3tP@ss""));
    }
}",code_smell,dead_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) { users.push_back(user); }
    User getUserByName(std::string name) {
        for (auto& user : users) {
            if (user.getName() == name) {
                return user;
            }
        }
        // Return empty user if not found
        return User("""", 0);
    }
private:
    std::vector<User> users;
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User user = service.getUserByName(""John"");
    std::cout << user.getName() << std::endl;
    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public User getUserByUsername(String username) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT id, username, email FROM users WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return null;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Python,"import sqlite3

class UserDB:
    def __init__(self):
        self.conn = sqlite3.connect('users.db')
        self.cursor = self.conn.cursor()

    def add_user(self, username, password):
        query = f""INSERT INTO users (username, password) VALUES ('{username}', '{password}')""
        self.cursor.execute(query)
        self.conn.commit()

    def get_user(self, username):
        query = f""SELECT * FROM users WHERE username = '{username}'""
        self.cursor.execute(query)
        return self.cursor.fetchone()

    def close(self):
        self.conn.close()

# Example usage:
if __name__ == ""__main__"":
    db = UserDB()
    db.add_user('alice', 's3cr3tP@ss')
    user = db.get_user('alice')
    print(f""Found user: {user}"")
    db.close()",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
Python,"class UserAuthenticator:
    def __init__(self, username, password):
        self.username = username
        self.password = password
    def authenticate(self, input_username, input_password):
        if input_username == self.username and input_password == self.password:
            return True
        return False
    def change_password(self, new_password):
        self.password = new_password
    def get_username(self):
        return self.username
    def get_password(self):
        return self.password
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class LogProcessor {
public:
    LogProcessor(const std::string& filePath) : path(filePath) {}
    void loadEntries() {
        // Simulate reading lines from a file into entries
        for (int i = 0; i < 100; ++i) {
            entries.push_back(""Entry "" + std::to_string(i));
        }
    }
    std::string getEntry(int index) const {
        // BUG: off‑by‑one error, should be index < entries.size()
        if (index >= 0 && index <= entries.size()) {
            return entries[index];
        }
        return """";
    }
    void printAll() const {
        for (size_t i = 0; i < entries.size(); ++i) {
            std::cout << i << "": "" << entries[i] << std::endl;
        }
    }
private:
    std::string path;
    std::vector<std::string> entries;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.loadEntries();
    // Request the last entry (index 99) works, but index 100 triggers out‑of‑bounds
    std::cout << lp.getEntry(100) << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    private final List<User> users;

    public UserProcessor(List<User> users) {
        this.users = users;
    }

    public List<User> filterActiveUsers() {
        List<User> activeUsers = new ArrayList<>();
        for (User user : users) {
            if (user.getStatus() == 1 && user.getLastLogin() != null) {
                activeUsers.add(user);
            }
        }
        return activeUsers;
    }

    public void generateUserReport() {
        List<User> activeUsers = filterActiveUsers();
        StringBuilder report = new StringBuilder();
        for (User user : activeUsers) {
            report.append(user.getName()).append("" - "").append(user.getEmail()).append(""\n"");
        }
        System.out.println(report.toString());
    }

    public void updateLastLogin(User user) {
        for (User existingUser : users) {
            if (existingUser.getId().equals(user.getId())) {
                existingUser.setLastLogin(new Date());
                break;
            }
        }
    }

    public void processUsers() {
        generateUserReport();
        for (User user : users) {
            if (user.getEmail().contains(""@example.com"")) {
                updateLastLogin(user);
            }
        }
    }
}",code_smell,large_class,,qwen/qwen3-32b
JavaScript,"
   class ShoppingCart {
      constructor() {
         this.items = [];
      }

      addItem(item) {
         this.items.push(item);
      }

      removeItem(item) {
         const index = this.items.indexOf(item);
         if (index !== -1) {
            this.items.splice(index, 1);
         }
      }

      calculateTotal() {
         let total = 0;
         for (let i = 0; i < this.items.length; i++) {
            total += this.items[i].price * this.items[i].quantity;
         }
         return total;
      }

      applyDiscount(discountPercentage) {
         const discountAmount = this.calculateTotal() * (discountPercentage / 100);
         return this.calculateTotal() - discountAmount;
      }
   }

   const cart = new ShoppingCart();
   cart.addItem({ price: 10.99, quantity: 2 });
   cart.addItem({ price: 5.99, quantity: 1 });
   console.log(cart.applyDiscount(10));
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cur = self.conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        data TEXT)''')
        self.conn.commit()

    def load_user(self, username):
        cur = self.conn.cursor()
        cur.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cur.fetchone()
        if row:
            # Vulnerable deserialization of user-provided data
            return json.loads(row[0])
        return None

    def save_user(self, username, data):
        cur = self.conn.cursor()
        # Directly storing JSON string without validation
        cur.execute('INSERT INTO users (username, data) VALUES (?, ?)',
                    (username, json.dumps(data)))
        self.conn.commit()

    def delete_user(self, username):
        cur = self.conn.cursor()
        cur.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

    def close(self):
        self.conn.close()

# Example usage (would be in production code)
if __name__ == '__main__':
    manager = UserManager(os.getenv('USER_DB', ':memory:'))
    user_data = {'role': 'admin', 'prefs': {'theme': 'dark'}}
    manager.save_user('alice', user_data)
    # This will deserialize untrusted JSON, potentially executing malicious code if crafted
    loaded = manager.load_user('alice')
    print('Loaded user data:', loaded)
    manager.close()",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class ReportProcessor {
    public void generateReport(String userId, String reportType, String exportFormat) {
        if (reportType == null || exportFormat == null) {
            return;
        }

        String query = ""SELECT * FROM user_data WHERE user_id = '"" + userId + ""'"";

        if (reportType.equals(""sales"")) {
            query += "" AND data_type = 'sales'"";
        } else if (reportType.equals(""inventory"")) {
            query += "" AND data_type = 'inventory'"";
        } else if (reportType.equals(""finance"")) {
            query += "" AND data_type = 'finance'"";
        }

        if (exportFormat.equals(""csv"")) {
            executeCSVExport(query);
        } else if (exportFormat.equals(""pdf"")) {
            executePDFExport(query);
        } else if (exportFormat.equals(""xlsx"")) {
            executeExcelExport(query);
        }
    }

    private void executeCSVExport(String query) {
        // Dummy implementation
    }

    private void executePDFExport(String query) {
        // Dummy implementation
    }

    private void executeExcelExport(String query) {
        // Dummy implementation
    }
}",code_smell,poor_modularization,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor() {
         this.users = [];
      }

      addUser(user) {
         this.users.push(user);
      }

      removeUser(userId) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].id === userId) {
               this.users.splice(i, 1);
               break;
            }
         }
      }

      getUser(userId) {
         for (let user of this.users) {
            if (user.id === userId) {
               return user;
            }
         }
         return null;
      }
   }

   let userService = new UserService();
   userService.addUser({ id: 1, name: 'John Doe' });
   userService.addUser({ id: 2, name: 'Jane Doe' });
   console.log(userService.getUser(1));
   userService.removeUser(1);
   console.log(userService.getUser(1));
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
    constructor(db) {
        this.db = db;
    }

    // Process a batch of orders; returns a promise that resolves when all are saved
    async processOrders(orders) {
        // NOTE: orders is expected to be an array of order objects
        for (let i = 0; i <= orders.length; i++) { // off‑by‑one error: should be i < orders.length
            const order = orders[i];
            // Simulate async DB write
            await this.db.save(order);
        }
    }
}

// Mock DB with simple in‑memory store
class InMemoryDB {
    constructor() {
        this.store = [];
    }
    async save(record) {
        // Simulate latency
        return new Promise(resolve => setTimeout(() => {
            this.store.push(record);
            resolve();
        }, 10));
    }
}

// Usage example (would be in another module)
(async () => {
    const db = new InMemoryDB();
    const processor = new OrderProcessor(db);
    const orders = [{id:1}, {id:2}, {id:3}];
    await processor.processOrders(orders);
    console.log('Saved records:', db.store.length);
})();",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order.getItems().isEmpty()) {
            System.out.println(""Order has no items."");
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getPrice() <= 0) {
                System.out.println(""Skipping item with invalid price."");
                continue;
            }

            if (item.getQuantity() <= 0) {
                System.out.println(""Skipping item with invalid quantity."");
                continue;
            }

            System.out.println(""Processing item: "" + item.getName());
            double total = item.getPrice() * item.getQuantity();
            System.out.println(""Item total: "" + total);
        }

        // Additional processing
        System.out.println(""Order processed."");
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async getAllUsers() {
            const users = await this.userDao.findAll();
            return users.map(user => ({
               id: user.id,
               name: user.name,
               email: user.email
            }));
         }

         async getUserById(id) {
            const user = await this.userDao.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return {
               id: user.id,
               name: user.name,
               email: user.email
            };
         }
      }

      class UserDao {
         async findAll() {
            // Assume this is a database query
            return [
               { id: 1, name: 'John Doe', email: 'john@example.com' },
               { id: 2, name: 'Jane Doe', email: 'jane@example.com' }
            ];
         }

         async findById(id) {
            // Assume this is a database query
            const users = await this.findAll();
            return users.find(user => user.id === id);
         }
      }

      const userDao = new UserDao();
      const userService = new UserService(userDao);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""admin123""; // hardcoded secret

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            conn.setAutoCommit(false);
            if (!reserveFunds(conn, userId, amount)) {
                conn.rollback();
                return false;
            }
            if (!recordTransaction(conn, userId, amount)) {
                conn.rollback();
                return false;
            }
            conn.commit();
            return true;
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ignored) {}
            return false;
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }

    private boolean reserveFunds(Connection conn, String userId, double amount) throws SQLException {
        // Vulnerable to SQL injection because userId is concatenated directly
        String sql = ""UPDATE accounts SET balance = balance - "" + amount + "" WHERE user_id = '"" + userId + ""'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        int rows = stmt.executeUpdate();
        return rows == 1;
    }

    private boolean recordTransaction(Connection conn, String userId, double amount) throws SQLException {
        String sql = ""INSERT INTO transactions (user_id, amount, timestamp) VALUES (?, ?, ?)"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, userId);
        stmt.setDouble(2, amount);
        stmt.setTimestamp(3, new java.sql.Timestamp(new Date().getTime()));
        int rows = stmt.executeUpdate();
        return rows == 1;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserHandler {
  constructor(users, logger) {
    this.users = users || [];
    this.logger = logger;
  }

  processUser(user) {
    if (!user || !user.id || !user.name) {
      this.logger.warn('Invalid user data:', user);
      return;
    }

    const existingUser = this.users.find(u => u.id === user.id);
    if (existingUser) {
      this.logger.info('User already exists, skipping update. User ID:', user.id);
      return;
    }

    this.users.push(user);
    this.logger.info('User added successfully. User ID:', user.id);
  }

  getActiveUsers() {
    return this.users.filter(u => u.isActive);
  }

  getInactiveUsers() {
    return this.users.filter(u => !u.isActive);
  }

  getAllUsers() {
    return this.users;
  }
}

module.exports = UserHandler;",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
            with open(self.db_file, 'a') as f:
                f.write(f'{user_id}:{user_data}\n')

    def get_user(self, user_id):
        if user_id in self.users:
            return self.users[user_id]
        else:
            with open(self.db_file, 'r') as f:
                for line in f.readlines():
                    id, data = line.strip().split(':')
                    if id == user_id:
                        return data
        return None

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id] = user_data
            with open(self.db_file, 'r') as f:
                lines = f.readlines()
            with open(self.db_file, 'w') as f:
                for line in lines:
                    id, data = line.strip().split(':')
                    if id == user_id:
                        f.write(f'{id}:{user_data}\n')
                    else:
                        f.write(line)
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String domain) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String query = ""SELECT email FROM users WHERE email LIKE '"" + domain + ""%';""; // SQL injection risk
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    if (data[i] && data[i].id) {
      let processed = {};
      processed.id = data[i].id;
      processed.name = data[i].name ? data[i].name.toUpperCase() : 'N/A';
      processed.status = 'processed';
      result.push(processed);
    }
  }
  return result;
}

function saveDataToDatabase(data) {
  console.log('Saving data to database...');
  for (let i = 0; i < data.length; i++) {
    console.log(`Inserting ${data[i].id} into the database`);
    // Simulating database insertion
  }
}

function processAndSaveData(data) {
  const processedData = processData(data);
  saveDataToDatabase(processedData);
}

// Example usage
const input = [
  { id: 1, name: 'Alice' },
  { id: 2 },
  { id: 3, name: 'Bob' }
];

processAndSaveData(input);",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}
        self.load_users()

    def load_users(self):
        try:
            with open(self.db_file, 'r') as file:
                for line in file:
                    username, password = line.strip().split(':')
                    self.users[username] = password
        except FileNotFoundError:
            pass

    def authenticate(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def add_user(self, username, password):
        self.users[username] = password
        with open(self.db_file, 'a') as file:
            file.write(f'{username}:{password}\n')

    def remove_user(self, username):
        if username in self.users:
            del self.users[username]
            with open(self.db_file, 'w') as file:
                for user, password in self.users.items():
                    file.write(f'{user}:{password}\n')
",code_smell,Tight Coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""P@ssw0rd123""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            // Check balance
            String balanceQuery = ""SELECT balance FROM accounts WHERE account_id = '"" + accountId + ""'"";
            stmt = conn.prepareStatement(balanceQuery);
            rs = stmt.executeQuery();
            if (!rs.next()) {
                return false; // account not found
            }
            double balance = rs.getDouble(""balance"");
            if (balance < amount) {
                return false; // insufficient funds
            }
            // Deduct amount
            String updateQuery = ""UPDATE accounts SET balance = balance - ? WHERE account_id = ?"";
            stmt = conn.prepareStatement(updateQuery);
            stmt.setDouble(1, amount);
            stmt.setString(2, accountId);
            stmt.executeUpdate();
            // Log transaction (ignores errors)
            logTransaction(conn, accountId, amount);
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }

    private void logTransaction(Connection conn, String accountId, double amount) {
        try {
            String logQuery = ""INSERT INTO transactions (account_id, amount, timestamp) VALUES (?, ?, NOW())"";
            PreparedStatement logStmt = conn.prepareStatement(logQuery);
            logStmt.setString(1, accountId);
            logStmt.setDouble(2, amount);
            logStmt.executeUpdate();
            logStmt.close();
        } catch (SQLException e) {
            // Swallow exception, transaction already committed
        }
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processValues(std::vector<int>& values) {
    for (size_t i = 0; i <= values.size(); ++i) {
        if (i < values.size()) {
            std::cout << values[i] << std::endl;
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    processValues(data);
    return 0;
}",code_defect,off_by_one_error,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <string>
      
      class User {
      public:
         User(std::string name, int age) : name(name), age(age) {}
      
         std::string getName() { return name; }
         int getAge() { return age; }
      
      private:
         std::string name;
         int age;
      };
      
      class UserService {
      public:
         static std::vector<User> getAllUsers() {
            std::vector<User> users;
            users.push_back(User(""John"", 30));
            users.push_back(User(""Alice"", 25));
            return users;
         }
      };
      
      int main() {
         std::vector<User> users = UserService::getAllUsers();
         for (const auto& user : users) {
            std::cout << ""Name: "" << user.getName() << "", Age: "" << user.getAge() << std::endl;
         }
         return 0;
      }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        with open(self.path, 'r') as f:
            # Directly eval the config file - insecure!
            self.config = eval(f.read())

    def get(self, key, default=None):
        return self.config.get(key, default)

class UserService:
    def __init__(self, config_path):
        self.cfg = ConfigLoader(config_path)
        self.db_path = self.cfg.get('db_path')

    def get_user(self, user_id):
        # No validation of user_id, potential SQL injection
        query = f""SELECT * FROM users WHERE id = {user_id}""
        conn = None
        try:
            conn = open(self.db_path, 'r')
            data = json.load(conn)
            for user in data['users']:
                if user['id'] == user_id:
                    return user
        finally:
            if conn:
                conn.close()
        return None

service = UserService('config.cfg')
print(service.get_user(1))",code_defect,unsafe_eval_and_sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

std::string processText(std::string text) {
    std::string result;
    for (size_t i = 0; i < text.length(); ++i) {
        if (text[i] >= 'a' && text[i] <= 'z') {
            result += text[i] - ('a' - 'A');
        } else if (text[i] >= 'A' && text[i] <= 'Z') {
            result += text[i];
        } else {
            result += text[i];
        }
    }
    return result;
}

int main() {
    std::vector<std::string> inputs = {""hello World!"", ""c++ is fun"", ""12345""};
    for (const auto& input : inputs) {
        std::string processed = processText(input);
        std::cout << ""Original: \"""" << input << ""\"" -> Processed: \"""" << processed << ""\""\n"";
    }
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}
    std::string getName() { return name; }
    int getSalary() { return salary; }
private:
    std::string name;
    int salary;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    int calculateTotalSalary() {
        int totalSalary = 0;
        for (const auto& employee : employees) {
            totalSalary += employee.getSalary();
        }
        return totalSalary;
    }
private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 50000));
    manager.addEmployee(Employee(""Alice"", 60000));
    std::cout << ""Total salary: "" << manager.calculateTotalSalary() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // BUG: If no tasks were available, task remains 0 and is processed erroneously
            process(task);
        }
    }
    void process(int value) {
        // Simulate some work
        std::cout << ""Processing: "" << value << std::endl;
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    dp.addTask(42);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}",code_defect,logic_error_unintended_processing,,openai/gpt-oss-120b
Java,"public class UserService {
    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public void registerUser(String username, String email, String password) {
        if (userRepository.findByUsername(username) != null) {
            throw new RuntimeException(""Username already exists"");
        }

        if (userRepository.findByEmail(email) != null) {
            throw new RuntimeException(""Email already exists"");
        }

        User user = new User();
        user.setUsername(username);
        user.setEmail(email);
        user.setPassword(password);

        userRepository.save(user);
    }

    public User getUserById(Long id) {
        return userRepository.findById(id);
    }

    public List<User> getAllUsers() {
        return userRepository.findAll();
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
       constructor(username, password) {
           this.username = username;
           this.password = password;
       }

       authenticate(password) {
           if (this.password === password) {
               return true;
           }
           return false;
       }
   }

   function createUserAccount(username, password) {
       const account = new UserAccount(username, password);
       return account;
   }

   const account = createUserAccount('testUser', 'testPassword');
   console.log(account.authenticate('testPassword'));
   ",code_smell,plain_text_password_storage,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (Exception ignored) {}
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUser(String username, String password, String email, String firstName, String lastName) {
        if (username == null || username.isEmpty()) {
            throw new IllegalArgumentException(""Username cannot be empty"");
        }

        if (password == null || password.isEmpty()) {
            throw new IllegalArgumentException(""Password cannot be empty"");
        }

        if (email == null || email.isEmpty()) {
            throw new IllegalArgumentException(""Email cannot be empty"");
        }

        String sanitizedUsername = username.replaceAll(""[^a-zA-Z0-9_]"", """");
        String sanitizedPassword = password.replaceAll(""[^a-zA-Z0-9_@!#$%&'*+/=?^_`{|}~]"", """");
        String sanitizedEmail = email.replaceAll(""[^a-zA-Z0-9@._-]"", """");

        // ... (additional processing logic)
    }
}",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getUsers() {
            try {
               const users = await this.userRepository.findAll();
               return users.map(user => ({ id: user.id, name: user.name }));
            } catch (error) {
               console.error(error);
               return [];
            }
         }

         async getUserById(id) {
            try {
               const user = await this.userRepository.findById(id);
               if (!user) {
                  throw new Error('User not found');
               }
               return { id: user.id, name: user.name };
            } catch (error) {
               console.error(error);
               throw error;
            }
         }
      }

      class UserRepository {
         async findAll() {
            // simulate a database query
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' }
            ];
         }

         async findById(id) {
            // simulate a database query
            const users = await this.findAll();
            return users.find(user => user.id === id);
         }
      }

      const userRepository = new UserRepository();
      const userService = new UserService(userRepository);
      (async () => {
         const users = await userService.getUsers();
         console.log(users);
      })();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""appuser"";
    private static final String PASS = ""p@ssw0rd""; // hardcoded credentials

    public User getUserById(int userId) {
        User user = null;
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            Statement stmt = conn.createStatement();
            // SQL injection vulnerable concatenation
            String query = ""SELECT id, username, email FROM users WHERE id = "" + userId;
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return user;
    }
}

class User {
    private int id;
    private String username;
    private String email;
    public void setId(int id) { this.id = id; }
    public void setUsername(String username) { this.username = username; }
    public void setEmail(String email) { this.email = email; }
    // getters omitted for brevity
}",code_defect,SQL injection vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(std::string input, std::vector<std::string>& outputList) {
    std::string temp = input;
    temp.erase(temp.begin(), temp.begin() + 2);

    for (int i = 0; i < 100; ++i) {
        if (i % 2 == 0) {
            outputList.push_back(temp);
        }
    }

    // Legacy code from version 1.0
    // std::string oldTemp = input;
    // oldTemp.erase(0, 3);
    // for (int j = 0; j < 10; ++j) {
    //     outputList.push_back(oldTemp);
    // }

    return;
}

int main() {
    std::vector<std::string> results;
    std::string userInput = ""abcde12345"";
    processUserInput(userInput, results);

    for (const auto& str : results) {
        std::cout << str << std::endl;
    }

    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
Python,"
class UserDatabase:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password
        else:
            print('User already exists')

    def authenticate(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def get_all_users(self):
        return list(self.users.keys())

    def delete_user(self, username):
        if username in self.users:
            del self.users[username]
        else:
            print('User does not exist')

# Example usage:
db = UserDatabase()
db.add_user('user1', 'password1')
db.add_user('user2', 'password2')
print(db.authenticate('user1', 'password1'))  # True
print(db.get_all_users())  # ['user1', 'user2']
db.delete_user('user1')
print(db.get_all_users())  # ['user2']
",code_smell,god_class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class LogProcessor {
  constructor(logFilePath) {
    this.logFilePath = logFilePath;
    this.buffer = [];
  }

  // Reads the entire log file into memory and processes each line synchronously
  processLogs() {
    const data = fs.readFileSync(this.logFilePath, 'utf8');
    const lines = data.split('\n');
    for (let i = 0; i <= lines.length; i++) { // off-by-one error: goes one past end
      const line = lines[i];
      if (line) {
        this._processLine(line);
      }
    }
    this._flushBuffer();
  }

  _processLine(line) {
    // Simple CSV parsing, assumes no commas in fields
    const parts = line.split(',');
    const timestamp = parts[0];
    const level = parts[1];
    const message = parts.slice(2).join(',');
    if (level === 'ERROR') {
      this.buffer.push({ timestamp, message });
    }
  }

  _flushBuffer() {
    // Write error entries to a separate file, but uses synchronous write inside a loop
    this.buffer.forEach(entry => {
      fs.appendFileSync('errors.log', `${entry.timestamp}: ${entry.message}\n`);
    });
    this.buffer = [];
  }
}

// Usage example
const processor = new LogProcessor('app.log');
processor.processLogs();",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self.conn.row_factory = sqlite3.Row
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, email: str) -> int:
        cur = self.conn.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()
        return cur.lastrowid

    def get_users_page(self, page: int, page_size: int = 10):
        offset = page * page_size  # Off‑by‑one error: first page should start at 0
        cur = self.conn.execute('SELECT * FROM users ORDER BY id LIMIT ? OFFSET ?', (page_size, offset))
        return [dict(row) for row in cur.fetchall()]

# Example usage
if __name__ == '__main__':
    repo = UserRepository(':memory:')
    for i in range(25):
        repo.add_user(f'user{i}', f'user{i}@example.com')
    # Expect first page to contain users 0‑9, but due to bug it returns users 10‑19
    first_page = repo.get_users_page(0)
    print('First page:', first_page)
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import requests
import json

def fetch_data_from_api(url, headers=None):
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return json.loads(response.text)
    except Exception as e:
        print(f""Error fetching data: {e}"")
        return None

def process_data(data):
    result = []
    for item in data:
        if 'id' in item and 'name' in item:
            processed = {
                'id': item['id'],
                'name': item['name'].upper()
            }
            result.append(processed)
    return result

def main():
    api_url = 'https://api.example.com/data'
    headers = {
        'Authorization': 'Bearer 1234567890'
    }
    raw_data = fetch_data_from_api(api_url, headers)
    if raw_data:
        processed_data = process_data(raw_data)
        print(json.dumps(processed_data, indent=2))

if __name__ == '__main__':
    main()",code_smell,hardcoded_secrets,,qwen/qwen3-32b
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path

    def get_users_page(self, page_number, page_size=20):
        """"""Return a list of users for the given page number.
        Pages are 1-indexed.
        """"""
        offset = (page_number - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        # BUG: Off-by-one error in LIMIT clause, returns one extra record
        query = f""SELECT id, username, email FROM users LIMIT {page_size + 1} OFFSET {offset}""
        cursor.execute(query)
        rows = cursor.fetchall()
        conn.close()
        return [
            {""id"": row[0], ""username"": row[1], ""email"": row[2]}
            for row in rows
        ]

# Example usage (would be called elsewhere in the application)
repo = UserRepository('/path/to/database.db')
users = repo.get_users_page(2)
print(f""Fetched {len(users)} users: {users}"")",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private final List<Order> orders = new ArrayList<>();

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                System.out.println(""Processing order: "" + order.getOrderId());
                if (order.getTotalPrice() > 1000) {
                    applyBulkDiscount(order);
                }
                updateInventory(order);
                sendConfirmationEmail(order);
            }
        }
    }

    private void applyBulkDiscount(Order order) {
        order.setTotalPrice(order.getTotalPrice() * 0.9);
    }

    private void updateInventory(Order order) {
        // Placeholder for actual inventory update logic
    }

    private void sendConfirmationEmail(Order order) {
        // Placeholder for actual email sending logic
    }
}",code_smell,large_function,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password):
        self.username = username
        self.password = password
        self.verified = False

    def verify_account(self):
        # send verification email
        print('Verification email sent')
        self.verified = True

    def change_password(self, new_password):
        if self.verified:
            self.password = new_password
        else:
            print('Account not verified')

    def login(self, password):
        if password == self.password:
            print('Login successful')
            return True
        else:
            print('Incorrect password')
            return False

# usage
account = UserAccount('john_doe', 'mysecretpassword')
account.login('mysecretpassword')
account.verify_account()
account.change_password('newpassword123')",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data_dict):
        # Directly serializing user-provided data without validation
        data_json = json.dumps(data_dict)
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, data) VALUES (?, ?)', (username, data_json))
        self.conn.commit()

    def get_user_data(self, username):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            # Unsafe deserialization of JSON that may contain malicious content
            return json.loads(row[0])
        return None

    def delete_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage (would be in production code)
if __name__ == '__main__':
    manager = UserManager('/tmp/users.db')
    manager.add_user('alice', {'role': 'admin', 'prefs': {'theme': 'dark'}})
    user_data = manager.get_user_data('alice')
    print('User data:', user_data)
    manager.delete_user('alice')",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Python,"import os
import json

def process_user_data(data):
    user_info = data.get('user', {})
    name = user_info.get('name', 'Unknown')
    age = user_info.get('age', 0)
    
    if age < 18:
        return f'User {name} is not eligible for the service.'

    if name and name[0].isupper():
        processed_data = {
            'user': {
                'name': name,
                'age': age,
                'status': 'verified'
            }
        }
        return json.dumps(processed_data)
    
    return f'Invalid user name format for {name}.'


def main():
    input_data = {
        'user': {
            'name': 'john doe',
            'age': 25
        }
    }

    result = process_user_data(input_data)
    print(result)

if __name__ == '__main__':
    main()",code_defect,incorrect_conditional_logic,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = "" + str(user_id))
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = '"" + new_data['name'] + ""', email = '"" + new_data['email'] + ""' WHERE id = "" + str(user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = "" + str(user_id))
        self.db_connection.commit()
",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            std::lock_guard<std::mutex> lock(mtx_);
            total_ += data[i];
        }
    }
    int total() const { return total_; }
private:
    int total_ = 0;
    std::mutex mtx_;
};

int main() {
    TransactionProcessor tp;
    std::vector<int> values = {1, 2, 3, 4, 5};
    std::thread t1([&](){ tp.process(values); });
    std::thread t2([&](){ tp.process(values); });
    t1.join();
    t2.join();
    std::cout << ""Total: "" << tp.total() << std::endl;
    return 0;
}
",code_defect,off_by_one_and_data_race,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        if (order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        for (Item item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                continue;
            }

            String productCode = item.getProductCode();
            if (productCode == null || productCode.trim().isEmpty()) {
                continue;
            }

            // Simulate inventory check
            boolean inventoryAvailable = checkInventory(productCode, item.getQuantity());
            if (!inventoryAvailable) {
                sendInventoryAlert(productCode);
                continue;
            }

            // Simulate payment processing
            boolean paymentProcessed = processPayment(order, item.getPrice(), item.getQuantity());
            if (!paymentProcessed) {
                sendPaymentFailureNotification(order);
                continue;
            }

            // Mark order as processed
            item.setStatus(""PROCESSED"");
        }

        updateOrderStatus(order, ""COMPLETED"");
    }

    private boolean checkInventory(String productCode, int quantity) {
        // Simulated logic
        return quantity <= 100;
    }

    private void sendInventoryAlert(String productCode) {
        // Simulated logic
    }

    private boolean processPayment(Order order, double price, int quantity) {
        // Simulated logic
        return true;
    }

    private void sendPaymentFailureNotification(Order order) {
        // Simulated logic
    }

    private void updateOrderStatus(Order order, String status) {
        order.setStatus(status);
    }
}",code_smell,long_function,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    Student(std::string name, int grade) : name(name), grade(grade) {}

    std::string getName() { return name; }
    int getGrade() { return grade; }

private:
    std::string name;
    int grade;
};

bool compareStudents(const Student& a, const Student& b) {
    return a.getGrade() < b.getGrade();
}

void sortStudents(std::vector<Student>& students) {
    std::sort(students.begin(), students.end(), compareStudents);
}

int main() {
    std::vector<Student> students = {Student(""John"", 85), Student(""Alice"", 90), Student(""Bob"", 78)};
    sortStudents(students);
    for (const auto& student : students) {
        std::cout << student.getName() << "" : "" << student.getGrade() << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""admin123""; // hardcoded credentials

    public List<Payment> getPendingPayments() throws SQLException {
        List<Payment> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, user_id FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Payment p = new Payment();
            p.setId(rs.getInt(""id""));
            p.setAmount(rs.getDouble(""amount""));
            p.setUserId(rs.getInt(""user_id""));
            payments.add(p);
        }
        // Missing close of ResultSet, Statement, and Connection
        return payments;
    }

    public void processPayments() {
        try {
            List<Payment> pending = getPendingPayments();
            for (Payment p : pending) {
                // Simulate external service call that may throw RuntimeException
                boolean success = externalCharge(p.getUserId(), p.getAmount());
                updatePaymentStatus(p.getId(), success ? ""COMPLETED"" : ""FAILED"");
            }
        } catch (SQLException e) {
            // Swallow exception, no logging or retry
        }
    }

    private boolean externalCharge(int userId, double amount) {
        // Insecure: constructing URL with user-controlled data without encoding
        String url = ""https://payment-gateway.example.com/charge?user="" + userId + ""&amt="" + amount;
        // Dummy implementation
        return Math.random() > 0.2;
    }

    private void updatePaymentStatus(int paymentId, String status) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""UPDATE payments SET status='"" + status + ""' WHERE id="" + paymentId; // SQL injection risk
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.executeUpdate();
            // Missing resource cleanup
        } catch (SQLException e) {
            // Ignored
        }
    }
}

class Payment {
    private int id;
    private double amount;
    private int userId;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
}",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private List<User> users;

    public UserProcessor(List<User> users) {
        this.users = users;
    }

    public void processUsers() {
        for (User user : users) {
            if (user != null) {
                if (user.getAge() > 18) {
                    sendEmail(user);
                }
            }
        }
    }

    private void sendEmail(User user) {
        String message = ""Welcome, "" + user.getName() + ""!"";
        EmailService.sendEmail(user.getEmail(), message);
    }
}

class User {
    private String name;
    private String email;
    private int age;

    public User(String name, String email, int age) {
        this.name = name;
        this.email = email;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }

    public int getAge() {
        return age;
    }
}

class EmailService {
    public static void sendEmail(String to, String message) {
        // Simulated email sending logic
        System.out.println(""Email sent to "" + to + "": "" + message);
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,public class UserService { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUser(int id) { for (User user : users) { if (user.getId() == id) { return user; } } return null; } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class LogProcessor {
public:
    LogProcessor(const std::string& filePath) : filePath_(filePath) {}
    void loadLogs() {
        // Simulated loading: fill with dummy entries
        for (int i = 0; i < 100; ++i) {
            logs_.push_back(""Log entry "" + std::to_string(i));
        }
    }
    std::vector<std::string> getRecent(int count) const {
        // Return the last 'count' entries. Off‑by‑one bug: includes one extra entry when count equals size.
        int start = std::max(0, static_cast<int>(logs_.size()) - count);
        std::vector<std::string> result;
        for (size_t i = start; i <= logs_.size(); ++i) { // <-- should be i < logs_.size()
            result.push_back(logs_[i]);
        }
        return result;
    }
private:
    std::string filePath_;
    std::vector<std::string> logs_;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.loadLogs();
    auto recent = lp.getRecent(10);
    for (const auto& entry : recent) {
        std::cout << entry << std::endl;
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrder(order) {
    if (!order || !order.items || !order.items.length) return null;

    let total = 0;
    for (let i = 0; i < order.items.length; i++) {
      const item = order.items[i];
      if (!item || !item.price || !item.quantity) continue;
      total += item.price * item.quantity;
    }

    if (total === 0) return null;

    const discount = this.applyDiscount(order, total);
    const tax = this.applyTax(total - discount);

    const finalPrice = total - discount + tax;
    order.finalPrice = finalPrice;

    return order;
  }

  applyDiscount(order, total) {
    if (order.customerType === 'VIP') {
      return total * 0.2;
    } else {
      return total * 0.1;
    }
  }

  applyTax(subtotal) {
    return subtotal * 0.15;
  }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, String> users = new HashMap<>(); public static void addUser(String username, String password) { users.put(username, password); } public static boolean isValidUser(String username, String password) { return users.containsKey(username) && users.get(username).equals(password); } public static void main(String[] args) { UserService.addUser(""admin"", ""password123""); System.out.println(UserService.isValidUser(""admin"", ""password123"")); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a temporary file with the data
    async getUserProfile(userId) {
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) throw new Error('User not found');
        const profile = JSON.parse(user[0].profile_json);
        // Write to a temp file without proper cleanup
        const tmpPath = `/tmp/profile_${userId}.json`;
        fs.writeFileSync(tmpPath, JSON.stringify(profile));
        return profile;
    }

    // Deletes a user but forgets to remove the temp file, leading to stale data exposure
    async deleteUser(userId) {
        await this.db.execute('DELETE FROM users WHERE id = ?', [userId]);
        // Missing cleanup of /tmp/profile_${userId}.json
    }
}

module.exports = UserService;",code_defect,resource_leak,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor() {
        this.orders = new ArrayList<>();
    }

    public void addOrder(Order order) {
        orders.add(order);
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.getTotal() > 0) {
                if (order.isVerified()) {
                    if (order.isApproved()) {
                        if (order.getPaymentStatus() == PaymentStatus.PAID) {
                            order.setStatus(OrderStatus.PROCESSED);
                        }
                    }
                }
            }
        }
    }

    public void finalizeOrders() {
        for (Order order : orders) {
            if (order.getStatus() == OrderStatus.PROCESSED) {
                order.setStatus(OrderStatus.COMPLETED);
            }
        }
    }
}",code_smell,long_method_chain,,qwen/qwen3-32b
Python,"
class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        if amount > self.balance:
            return False
        self.balance -= amount
        return True

    def get_balance(self):
        return self.balance

class Bank:
    def __init__(self):
        self.accounts = {}

    def create_account(self, account_number, initial_balance):
        self.accounts[account_number] = BankAccount(initial_balance)

    def deposit(self, account_number, amount):
        if account_number in self.accounts:
            self.accounts[account_number].deposit(amount)
        else:
            raise ValueError('Account not found')

    def withdraw(self, account_number, amount):
        if account_number in self.accounts:
            return self.accounts[account_number].withdraw(amount)
        else:
            raise ValueError('Account not found')

    def get_balance(self, account_number):
        if account_number in self.accounts:
            return self.accounts[account_number].get_balance()
        else:
            raise ValueError('Account not found')

bank = Bank()
bank.create_account('12345', 1000)
print(bank.get_balance('12345'))
bank.deposit('12345', 500)
print(bank.get_balance('12345'))
bank.withdraw('12345', 200)
print(bank.get_balance('12345'))
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Bug: processing proceeds even when no task was retrieved (task == 0)
            // This can cause unintended processing of default value.
            std::cout << ""Processing: "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    dp.addTask(42);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
Python,"import os
import requests

class UserAPI:
    def __init__(self):
        self.base_url = 'https://api.example.com/users'
        self.headers = {'Authorization': 'Bearer hardcoded_token'}

    def get_user_profile(self, user_id):
        url = f'{self.base_url}/{user_id}'
        response = requests.get(url, headers=self.headers)
        if response.status_code == 200:
            return response.json()
        else:
            return None

    def update_user_profile(self, user_id, new_data):
        url = f'{self.base_url}/{user_id}'
        response = requests.patch(url, headers=self.headers, json=new_data)
        if response.status_code == 200:
            return True
        return False

# Legacy code, to be removed in next release
# def delete_user_profile(user_id):
#     url = f'{self.base_url}/{user_id}'
#     requests.delete(url, headers=self.headers)

if __name__ == '__main__':
    user_api = UserAPI()
    user_profile = user_api.get_user_profile(123)
    print(user_profile)",code_smell,hardcoded_token,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string n, int a) : name(n), age(a) {}

    bool operator<(const User& other) const {
        return age < other.age;
    }
};

class UserService {
public:
    std::vector<User> users;

    void addUser(User user) {
        users.push_back(user);
    }

    void sortUsers() {
        std::sort(users.begin(), users.end());
    }

    User* getUserByName(std::string name) {
        for (auto& user : users) {
            if (user.name == name) {
                return &user;
            }
        }
        return nullptr;
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 25));
    service.addUser(User(""Alice"", 30));
    service.sortUsers();

    User* user = service.getUserByName(""John"");
    if (user != nullptr) {
        std::cout << user->name << std::endl;
    }

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and watches for changes.""""""
    def __init__(self, path: str):
        self.path = path
        self._config = {}
        self._lock = threading.Lock()
        self._load()
        self._start_watcher()

    def _load(self):
        with open(self.path, 'r') as f:
            data = json.load(f)
        # Directly assign without validation – potential defect if file is malformed
        self._config = data

    def get(self, key, default=None):
        with self._lock:
            return self._config.get(key, default)

    def _watcher(self):
        last_mtime = os.path.getmtime(self.path)
        while True:
            try:
                cur_mtime = os.path.getmtime(self.path)
                if cur_mtime != last_mtime:
                    self._load()
                    last_mtime = cur_mtime
            except Exception:
                # Swallow all errors – hidden defect, watcher may die silently
                pass
            # No sleep – busy-wait leads to 100% CPU usage

    def _start_watcher(self):
        t = threading.Thread(target=self._watcher, daemon=True)
        t.start()

# Usage example (not part of the library)
config = ConfigLoader('config.json')
print(config.get('api_key'))",code_defect,resource_leak_and_cpu_spin,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  addNewUser(email, name) {
    const user = {
      id: this.users.length + 1,
      email,
      name
    };
    this.users.push(user);
  }

  updateUserName(email, newName) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        this.users[i].name = newName;
        return;
      }
    }
  }

  deleteUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        this.users.splice(i, 1);
        return;
      }
    }
  }

  getAllUsers() {
    return this.users;
  }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public static void addUser(User user) { users.put(user.getUsername(), user); } public static User getUser(String username) { return users.get(username); } public static void removeUser(String username) { users.remove(username); } }",code_smell,God class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if limit is derived from user input elsewhere
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallowing exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 0) {
            std::cout << ""Even number: "" << data[i] << std::endl;
        } else {
            std::cout << ""Odd number: "" << data[i] << std::endl;
        }

        // Legacy code below
        // if (i == 0) {
        //     std::cout << ""First element processed."";
        // }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5, 6};
    processData(input);
    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    Student(std::string name, int grade) : name(name), grade(grade) {}

    std::string getName() { return name; }
    int getGrade() { return grade; }

private:
    std::string name;
    int grade;
};

bool compareStudents(const Student& a, const Student& b) {
    return a.getGrade() < b.getGrade();
}

void sortStudents(std::vector<Student>& students) {
    std::sort(students.begin(), students.end(), compareStudents);
}

int main() {
    std::vector<Student> students = {Student(""John"", 85), Student(""Alice"", 92), Student(""Bob"", 78)};
    sortStudents(students);
    for (const auto& student : students) {
        std::cout << student.getName() << "" : "" << student.getGrade() << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class LogProcessor {
public:
    LogProcessor(const std::string& filePath) : path(filePath) {}
    void loadEntries() {
        // Simulated loading; in real code this would read from a file
        entries = {""INFO Start"", ""WARN Disk low"", ""ERROR Failure"", ""INFO End""};
    }
    // Returns the number of entries with the given severity
    int countSeverity(const std::string& severity) const {
        int count = 0;
        for (size_t i = 0; i <= entries.size(); ++i) { // BUG: off-by-one, should be i < entries.size()
            if (entries[i].find(severity) != std::string::npos) {
                ++count;
            }
        }
        return count;
    }
private:
    std::string path;
    std::vector<std::string> entries;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.loadEntries();
    std::cout << ""Error count: "" << lp.countSeverity(""ERROR"") << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        data[i] = data[i] * 2;
    }
}

int main() {
    std::vector<int> values = {1, 2, 3, 4, 5};

    std::cout << ""Original data: "";
    for (int val : values) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    processData(values);

    std::cout << ""Processed data: "";
    for (int val : values) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final String DB_URL = ""jdbc:mysql://localhost:3306/userdb""; private static final String DB_USER = ""root""; private static final String DB_PASSWORD = ""password""; public boolean isValidUser(String username, String password) { try { java.sql.Connection conn = java.sql.DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD); java.sql.PreparedStatement stmt = conn.prepareStatement(""SELECT * FROM users WHERE username = ? AND password = ?""); stmt.setString(1, username); stmt.setString(2, password); java.sql.ResultSet results = stmt.executeQuery(); return results.next(); } catch (Exception e) { return false; } } }",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if limit is derived from user input elsewhere
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallowing exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.getStatus() != OrderStatus.PENDING) {
                continue;
            }
            processPayment(order);
            fulfillOrder(order);
            updateInventory(order);
            sendConfirmationEmail(order);
            // TODO: Add logging
        }
    }

    private void processPayment(Order order) {
        // Simulate payment processing
    }

    private void fulfillOrder(Order order) {
        // Simulate fulfillment logic
    }

    private void updateInventory(Order order) {
        // Simulate inventory update logic
    }

    private void sendConfirmationEmail(Order order) {
        // Simulate email sending logic
    }
}",code_smell,large_class,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) { users.push_back(user); }
    std::vector<User> getUsers() { return users; }
private:
    std::vector<User> users;
};

int main() {
    UserService service;
    service.addUser(User(""John Doe"", 30));
    for (const auto& user : service.getUsers()) {
        std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
    }
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a log file synchronously
    getUserProfile(userId) {
        const query = `SELECT * FROM users WHERE id = ${userId}`; // SQL injection risk
        const user = this.db.runQuery(query);
        // Synchronous file write blocks event loop
        fs.writeFileSync('/var/log/user_access.log', `User ${userId} accessed at ${new Date().toISOString()}\n`, { flag: 'a' });
        return user;
    }
}

// Mock database object
const mockDb = {
    runQuery: (sql) => {
        // Simulate a delay
        const start = Date.now();
        while (Date.now() - start < 100) {}
        return { id: 1, name: 'Alice' };
    }
};

const service = new UserService(mockDb);
// Missing validation, passing string that looks like an object id
service.getUserProfile('1; DROP TABLE users;');",code_defect,SQL_injection_and_blocking_io,,openai/gpt-oss-120b
Python,"import random

class User:
    def __init__(self, name, user_id):
        self.name = name
        self.user_id = user_id
        self.last_login = None

    def login(self, timestamp):
        self.last_login = timestamp

    def get_status(self):
        if self.last_login:
            return f""{self.name} is online (last login: {self.last_login})""
        else:
            return f""{self.name} is offline""

def create_random_users(count):
    users = []
    names = [""Alice"", ""Bob"", ""Charlie"", ""Diana"", ""Eve""]
    for i in range(count):
        name = random.choice(names)
        user = User(name, i)
        if random.random() > 0.5:
            user.login(random.randint(1600000000, 1700000000))
        users.append(user)
    return users

# Legacy code from older version
# def get_user_count(users):
#    return len(users)

if __name__ == ""__main__"":
    all_users = create_random_users(10)
    for user in all_users:
        print(user.get_status())",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userRepository) {
         this.userRepository = userRepository;
      }

      async getAllUsers() {
         const users = await this.userRepository.findAll();
         return users.map(user => ({ id: user.id, name: user.name }));
      }

      async getUserById(id) {
         const user = await this.userRepository.findById(id);
         if (!user) {
            throw new Error(`User with id ${id} not found`);
         }
         return { id: user.id, name: user.name };
      }
   }

   class UserRepository {
      constructor(dbConnection) {
         this.dbConnection = dbConnection;
      }

      async findAll() {
         const query = 'SELECT * FROM users';
         const results = await this.dbConnection.query(query);
         return results.rows;
      }

      async findById(id) {
         const query = 'SELECT * FROM users WHERE id = $1';
         const results = await this.dbConnection.query(query, [id]);
         return results.rows[0];
      }
   }
   ",code_smell,Tight Coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserManager {
    constructor(db) {
        this.db = db;
        this.cache = {};
    }

    // Loads all users into memory every time it's called
    loadAllUsers() {
        const rows = this.db.query('SELECT * FROM users');
        rows.forEach(row => {
            this.cache[row.id] = row;
        });
    }

    // Returns user by ID, but reloads cache each call (inefficient)
    getUser(id) {
        this.loadAllUsers(); // unnecessary full reload
        return this.cache[id] || null;
    }

    // Updates user without validating input
    updateUser(id, data) {
        const user = this.getUser(id);
        if (!user) return false;
        // Directly merge without checks
        Object.assign(user, data);
        this.db.execute(`UPDATE users SET name='${user.name}', email='${user.email}' WHERE id=${id}`);
        return true;
    }
}

module.exports = UserManager;",code_smell,inefficient data loading and lack of input validation,,openai/gpt-oss-120b
Java,"public class UserValidator {
    public boolean validateUser(User user) {
        if (user == null) {
            return false;
        }

        if (user.getUsername() == null || user.getUsername().trim().isEmpty()) {
            return false;
        }

        if (user.getEmail() == null || user.getEmail().trim().isEmpty()) {
            return false;
        }

        // Check if username and email are not the same
        if (user.getUsername().equalsIgnoreCase(user.getEmail())) {
            return false;
        }

        // Password validation: must be at least 8 characters
        if (user.getPassword() == null || user.getPassword().length() < 8) {
            return false;
        }

        // TODO: Add more validation rules later
        // TODO: Check if email is properly formatted

        return true;
    }
}",code_smell,incomplete_todo_comments,,qwen/qwen3-32b
Java,public class UserRepository { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUserById(int id) { for (User user : users) { if (user.getId() == id) { return user; } } return null; } public void removeUserById(int id) { for (int i = 0; i < users.size(); i++) { if (users.get(i).getId() == id) { users.remove(i); break; } } } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASS = ""password"";

    public List<String> getUserEmailsByRole(String role) throws SQLException {
        List<String> emails = new ArrayList<>();
        String sql = ""SELECT email FROM users WHERE role = '"" + role + ""'""; // insecure concatenation
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        }
        return emails;
    }
}
",code_defect,SQL_injection,,openai/gpt-oss-120b
Python,"import requests
import time

def fetch_data_from_api(url, retry_count=3):
    for i in range(retry_count):
        try:
            response = requests.get(url)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException:
            if i == retry_count - 1:
                raise
            time.sleep(2 ** i)

    return None

class DataProcessor:
    def __init__(self, data):
        self.data = data

    def process_data(self):
        results = []
        for item in self.data:
            cleaned_item = self._clean_item(item)
            if cleaned_item:
                results.append(cleaned_item)
        return results

    def _clean_item(self, item):
        try:
            if 'key' in item:
                value = item['key']
                if isinstance(value, str):
                    return value.strip().lower()
            return None
        except Exception as e:
            print(f""Error cleaning item: {e}"")
            return None

    def save_data(self, filename):
        with open(filename, 'w') as file:
            file.write(str(self.processed_data))

if __name__ == ""__main__"":
    api_url = 'https://api.example.com/data'
    raw_data = fetch_data_from_api(api_url)
    processor = DataProcessor(raw_data)
    processed = processor.process_data()
    processor.save_data('output.txt')",code_smell,inconsistent_error_handling,,qwen/qwen3-32b
Java,"public class UserService { private Map<String, User> users = new HashMap<>(); public synchronized User getUser(String username) { if (users.containsKey(username)) { return users.get(username); } else { User user = new User(username); users.put(username, user); return user; } } public synchronized void updateUser(String username, String newUsername) { if (users.containsKey(username)) { User user = users.remove(username); user.setUsername(newUsername); users.put(newUsername, user); } } } class User { private String username; public User(String username) { this.username = username; } public void setUsername(String username) { this.username = username; } public String getUsername() { return username; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Synchronous read without error handling – may throw and crash the process
    const data = fs.readFileSync(this.path, 'utf8');
    // Parses JSON but does not catch syntax errors, leading to uncaught exception
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    // If load() was never called, cache is null and accessing property throws
    return this.cache[key];
  }
}

// Global singleton – tight coupling and hidden state
const config = new ConfigLoader('/etc/app/config.json');
config.load();

function processRequest(req) {
  // Directly trusts user-provided input for file path – path traversal vulnerability
  const filePath = req.query.file;
  const content = fs.readFileSync(filePath, 'utf8'); // No validation!
  return content;
}

module.exports = { config, processRequest };",code_defect,unvalidated_input_path_traversal_and_missing_error_handling,,openai/gpt-oss-120b
Python,"import requests

class UserAPIHandler:
    def __init__(self):
        self.base_url = 'https://api.example.com/users'

    def get_user_by_id(self, user_id):
        response = requests.get(f'{self.base_url}/{user_id}')
        if response.status_code == 200:
            return response.json()
        else:
            return None

    def update_user_profile(self, user_id, new_data):
        response = requests.put(f'{self.base_url}/{user_id}', json=new_data)
        return response.status_code

    def delete_user(self, user_id):
        response = requests.delete(f'{self.base_url}/{user_id}')
        if response.status_code == 200:
            return 'User deleted successfully.'
        else:
            return 'Failed to delete user.'

    def list_all_users(self):
        response = requests.get(self.base_url)
        return response.json() if response.status_code == 200 else []",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final String DEFAULT_PASSWORD = ""password123""; public void createUser(String username) { User user = new User(username, DEFAULT_PASSWORD); UserRepository repository = new UserRepository(); repository.saveUser(user); } }",code_smell,hardcoded_sensitive_data,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigManager:
    """"""Loads configuration from a JSON file and provides access to settings.""""""
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, config_path='config.json'):
        # Singleton pattern, but flawed: ignores config_path after first creation
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super(ConfigManager, cls).__new__(cls)
                    cls._instance._load_config(config_path)
        return cls._instance

    def _load_config(self, path):
        with open(path, 'r') as f:
            self.settings = json.load(f)
        # Missing validation of required keys

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, source_dir):
        self.source_dir = source_dir
        self.files_processed = 0

    def process_all(self):
        for filename in os.listdir(self.source_dir):
            if filename.endswith('.data'):
                self._process_file(os.path.join(self.source_dir, filename))
        print(f""Processed {self.files_processed} files"")

    def _process_file(self, path):
        # Reads file line by line, but forgets to close the file on exception
        f = open(path, 'r')
        total = 0
        for line in f:
            try:
                value = int(line.strip())
                total += value
            except ValueError:
                # Silently ignore malformed lines
                continue
        f.close()
        self.files_processed += 1
        # Store result in a global dict without thread safety
        results[path] = total

# Global mutable state used by multiple threads without synchronization
results = {}

def worker_thread(dir_path):
    processor = DataProcessor(dir_path)
    processor.process_all()

if __name__ == '__main__':
    config = ConfigManager()
    data_dir = config.get('data_directory', '/tmp/data')
    threads = []
    for i in range(5):
        t = threading.Thread(target=worker_thread, args=(data_dir,))
        t.start()
        threads.append(t)
    for t in threads:
        t.join()
    print('Final results:', results)
",code_defect,race_condition_due_to_unsynchronized_global_state,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    DataProcessor(const std::string& input) : input_(input) {}

    std::vector<int> process() {
        std::vector<int> result;
        for (char c : input_) {
            if (c >= '0' && c <= '9') {
                result.push_back(c - '0');
            } else if (c >= 'a' && c <= 'z') {
                result.push_back(10 + (c - 'a'));
            } else if (c >= 'A' && c <= 'Z') {
                result.push_back(36 + (c - 'A'));
            } else {
                result.push_back(0);
            }
        }
        return result;
    }

private:
    std::string input_;
};

int main() {
    std::string input = ""aBc12D"";
    DataProcessor dp(input);
    auto processed = dp.process();
    for (int i : processed) {
        std::cout << i << "" "";
    }
    std::cout << std::endl;
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"const fs = require('fs');

class UserManager {
    constructor(db) {
        this.db = db;
        this.cache = {};
    }

    // Loads all users into memory each time it's called – heavy operation
    loadAllUsers() {
        const rows = this.db.query('SELECT * FROM users');
        rows.forEach(row => {
            this.cache[row.id] = row;
        });
    }

    // Gets user by id, but forces a full reload every call
    getUser(id) {
        this.loadAllUsers(); // unnecessary full load
        return this.cache[id] || null;
    }

    // Updates user and writes to file each time – duplicated logic
    updateUser(id, data) {
        const user = this.getUser(id);
        if (!user) return false;
        Object.assign(user, data);
        // Write entire cache to disk on every update
        fs.writeFileSync('users.json', JSON.stringify(this.cache, null, 2));
        return true;
    }
}

module.exports = UserManager;",code_smell,inefficient data loading and tight coupling to filesystem,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] > 0) {
            for (size_t j = 0; j < data.size(); ++j) {
                if (data[j] < data[i]) {
                    std::cout << data[i] << "" is greater than "" << data[j] << std::endl;
                }
            }
        }
    }
}

int main() {
    std::vector<int> values = {3, -1, 5, 0, 2};
    processData(values);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>

class BankAccount {
public:
    BankAccount(double balance) : balance_(balance) {}
    void deposit(double amount) { balance_ += amount; }
    void withdraw(double amount) { if (balance_ >= amount) balance_ -= amount; }
    double getBalance() { return balance_; }
private:
    double balance_;
};

int main() {
    BankAccount account(1000.0);
    account.deposit(500.0);
    account.withdraw(200.0);
    std::cout << ""Balance: "" << account.getBalance() << std::endl;
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class LogProcessor {
public:
    LogProcessor(const std::string& filePath) : filePath_(filePath) {}

    // Reads the last N lines from the log file.
    std::vector<std::string> getRecentLines(size_t count) {
        std::vector<std::string> lines = readAllLines();
        // BUG: off‑by‑one error when count equals the number of lines
        if (count > lines.size()) {
            count = lines.size();
        }
        // The following loop should copy the last 'count' lines, but uses 'i >= 0' with size_t causing underflow.
        std::vector<std::string> result;
        for (size_t i = lines.size() - count; i >= 0; --i) {
            result.push_back(lines[i]);
            if (i == 0) break; // prevent infinite loop due to underflow
        }
        std::reverse(result.begin(), result.end());
        return result;
    }

private:
    std::string filePath_;

    std::vector<std::string> readAllLines() {
        // Placeholder: In real code, this would read from disk.
        return {""Entry1"", ""Entry2"", ""Entry3"", ""Entry4"", ""Entry5""};
    }
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    auto recent = lp.getRecentLines(3);
    for (const auto& line : recent) {
        std::cout << line << std::endl;
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::vector<std::string>& inputs) {
    for (const auto& input : inputs) {
        if (input.length() > 0) {
            std::string trimmed = input;
            for (char c : trimmed) {
                if (c == ' ') {
                    trimmed.erase(std::remove(trimmed.begin(), trimmed.end(), ' '), trimmed.end());
                    break;
                }
            }
            std::cout << trimmed << std::endl;
        }
    }
}

int main() {
    std::vector<std::string> userInputs = {""  Hello World  "", ""C++ Programming"", ""  "", ""Example   text""};
    processUserInput(userInputs);
    return 0;
}",code_smell,inefficient_operation,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final int MAX_RETRIES = 3; public void processPayment(String paymentId, double amount) { for (int i = 0; i < MAX_RETRIES; i++) { try { // simulate payment processing delay Thread.sleep(100); System.out.println(""Payment processed: "" + paymentId); break; } catch (InterruptedException e) { System.out.println(""Error processing payment: "" + e.getMessage()); } } } }",code_smell,inefficient_error_handling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<User> getActiveUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        String sql = ""SELECT id, username, email FROM users WHERE active = 1"";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                User u = new User();
                u.setId(rs.getInt(""id""));
                u.setUsername(rs.getString(""username""));
                u.setEmail(rs.getString(""email""));
                users.add(u);
            }
        }
        return users;
    }

    public void deleteUser(int userId) throws SQLException {
        String sql = ""DELETE FROM users WHERE id = "" + userId; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.createStatement()) {
            stmt.executeUpdate(sql);
        }
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      if (user.isActive) {
        this.sendWelcomeEmail(user);
      }
      this.logUserActivity(user);
      this.updateUserStats(user);
    }
  }

  sendWelcomeEmail(user) {
    console.log(`Email sent to ${user.email}`);
  }

  logUserActivity(user) {
    console.log(`User ${user.id} is active at ${new Date().toISOString()}`);
  }

  updateUserStats(user) {
    user.lastActive = new Date();
    user.loginCount++;
  }
}

// Usage
const users = [
  { id: 1, email: 'user1@example.com', isActive: true, lastActive: null, loginCount: 0 },
  { id: 2, email: 'user2@example.com', isActive: false, lastActive: null, loginCount: 0 }
];

const processor = new UserProcessor(users);
processor.processUsers();",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userRepository) {
         this.userRepository = userRepository;
      }

      async getUser(id) {
         const user = await this.userRepository.findById(id);
         if (user) {
            return user;
         } else {
            throw new Error('User not found');
         }
      }

      async getUsers() {
         return await this.userRepository.findAll();
      }
   }

   class UserRepository {
      constructor(db) {
         this.db = db;
      }

      async findById(id) {
         return await this.db.collection('users').findOne({ id });
      }

      async findAll() {
         return await this.db.collection('users').find().toArray();
      }
   }

   const db = { collection: () => ({ findOne: () => {}, find: () => ({ toArray: () => {} }) }) };
   const userRepository = new UserRepository(db);
   const userService = new UserService(userRepository);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {
        // Load some dummy users
        users_ = {""alice"", ""bob"", ""carol""};
    }

    // Returns true if the user exists, false otherwise
    bool isUserPresent(const std::string& username) const {
        for (size_t i = 0; i <= users_.size(); ++i) { // BUG: off-by-one, may read out of bounds
            if (users_[i] == username) {
                return true;
            }
        }
        return false;
    }

private:
    std::vector<std::string> users_;
};

int main() {
    UserManager um;
    std::string name;
    std::cout << ""Enter username: "";
    std::cin >> name;
    if (um.isUserPresent(name)) {
        std::cout << ""User found!\n"";
    } else {
        std::cout << ""User not found.\n"";
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data, int a, int b, int c, int d, int e) {
    for (size_t i = 0; i < data.size(); ++i) {
        data[i] = data[i] * a + b;
    }

    for (size_t i = 0; i < data.size(); ++i) {
        data[i] = data[i] / c;
    }

    for (size_t i = 0; i < data.size(); ++i) {
        data[i] = data[i] - d;
    }

    for (size_t i = 0; i < data.size(); ++i) {
        data[i] = data[i] % e;
    }
}

int main() {
    std::vector<int> values = {10, 20, 30, 40, 50};
    processData(values, 2, 3, 0, 5, 7);

    for (int val : values) {
        std::cout << val << "" "";
    }
    return 0;
}",code_smell,long_function,,qwen/qwen3-32b
Java,public class UserService { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUserByName(String name) { for (User user : users) { if (user.getName().equals(name)) { return user; } } return null; } public void removeUserByName(String name) { for (int i = 0; i < users.size(); i++) { if (users.get(i).getName().equals(name)) { users.remove(i); break; } } } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
    constructor(pageSize) {
        this.pageSize = pageSize || 10;
        this.currentPage = 0;
        this.items = [];
    }

    loadItems(fetchFn) {
        // fetchFn should return a promise that resolves to an array of items
        return fetchFn().then(data => {
            this.items = data;
        }).catch(err => {
            console.error('Failed to load items:', err);
        });
    }

    getPage(pageNumber) {
        // BUG: off‑by‑one error – pageNumber is 1‑based but calculation treats it as 0‑based
        const start = (pageNumber - 1) * this.pageSize;
        const end = start + this.pageSize;
        return this.items.slice(start, end);
    }

    nextPage() {
        this.currentPage++;
        return this.getPage(this.currentPage);
    }

    prevPage() {
        if (this.currentPage > 0) {
            this.currentPage--;
        }
        return this.getPage(this.currentPage);
    }
}

// Example usage
const paginator = new Paginator(5);

paginator.loadItems(() => Promise.resolve(['a','b','c','d','e','f','g','h','i','j']))
    .then(() => {
        console.log('First page:', paginator.nextPage()); // Expected ['a','b','c','d','e'] but gets [] due to off‑by‑one
        console.log('Second page:', paginator.nextPage()); // Returns ['a','b','c','d','e'] incorrectly
    });",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    void process(const std::vector<std::string>& inputs) {
        for (const auto& input : inputs) {
            if (input.empty()) {
                std::cout << ""Skipping empty input."" << std::endl;
                continue;
            }
            std::string processed = input;
            for (char& c : processed) {
                c = toupper(c);
            }
            results_.push_back(processed);
        }
    }

    std::vector<std::string> getResults() const {
        return results_;
    }

private:
    std::vector<std::string> results_;
};

int main() {
    std::vector<std::string> inputs = { ""hello"", ""world"", """", ""test"" };
    DataProcessor processor;
    processor.process(inputs);

    std::vector<std::string> results = processor.getResults();
    for (const auto& result : results) {
        std::cout << result << std::endl;
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, balance=0.0):
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount > self.balance:
            self.balance = 0
        else:
            self.balance -= amount
    def get_balance(self):
        return self.balance
account = BankAccount(100.0)
print(account.get_balance())
account.withdraw(50.0)
print(account.get_balance())",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public User getUserByUsername(String username) {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT id, username, email FROM users WHERE username = '"" + username + ""'"";
            rs = stmt.executeQuery(query);
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
        return null;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addNewUser(user) {
    if (user.id) {
      this.users.push(user);
    } else {
      console.log('Skipping invalid user');
    }
  }

  findUserById(userId) {
    return this.users.find(user => user.id === userId);
  }

  updateUserData(userId, updatedData) {
    const user = this.findUserById(userId);

    if (user) {
      for (const key in updatedData) {
        user[key] = updatedData[key];
      }
    }
  }

  getAllUsers() {
    return this.users;
  }
}

const manager = new UserManager();
manager.addNewUser({ id: 1, name: 'Alice' });
manager.addNewUser({ id: 2, name: 'Bob' });
manager.updateUserData(1, { name: 'Alicia' });
console.log(manager.getAllUsers());",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final double INTEREST_RATE = 0.05; public void processPayment(double amount) { double interest = amount * INTEREST_RATE; System.out.println(""Payment processed with interest: "" + (amount + interest)); } public static void main(String[] args) { PaymentProcessor processor = new PaymentProcessor(); processor.processPayment(1000); } }",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public String getUserEmail(int userId) {
        String query = ""SELECT email FROM users WHERE id = "" + userId; // SQL concatenation
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            if (rs.next()) {
                return rs.getString(""email"");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public void updateUserEmail(int userId, String newEmail) {
        String query = ""UPDATE users SET email='"" + newEmail + ""' WHERE id="" + userId; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             Statement stmt = conn.createStatement()) {
            stmt.executeUpdate(query);
        } catch (Exception e) {
            // swallow exception silently
        }
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(user, token, roles, lastLogin) {
    this.user = user;
    this.token = token;
    this.roles = roles;
    this.lastLogin = lastLogin;
  }

  hasPermission(permission) {
    return this.roles.includes(permission);
  }

  validateToken() {
    if (!this.token) return false;
    const tokenParts = this.token.split('.');
    if (tokenParts.length < 3) return false;

    try {
      const payload = JSON.parse(atob(tokenParts[1]));
      const expTime = payload.exp * 1000;
      return expTime > Date.now();
    } catch (e) {
      return false;
    }
  }

  getLastLoginFormatted() {
    return new Date(this.lastLogin).toLocaleDateString();
  }

  authenticateUser() {
    if (!this.validateToken()) {
      throw new Error('Invalid token');
    }

    if (!this.hasPermission('user')) {
      throw new Error('User does not have permission');
    }

    console.log(`User ${this.user} authenticated successfully`);
  }
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserAccount:
    def __init__(self, username, password):
        self.username = username
        self.password = password

    def authenticate(self, input_password):
        if self.password == input_password:
            return True
        else:
            return False

    def change_password(self, new_password):
        self.password = new_password

class AuthenticationSystem:
    def __init__(self):
        self.accounts = {}

    def create_account(self, username, password):
        if username in self.accounts:
            return False
        self.accounts[username] = UserAccount(username, password)
        return True

    def authenticate_user(self, username, password):
        if username not in self.accounts:
            return False
        return self.accounts[username].authenticate(password)

auth_system = AuthenticationSystem()
auth_system.create_account('test_user', 'test_password')
print(auth_system.authenticate_user('test_user', 'test_password'))
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmailsByRole(String role) {
        List<String> emails = new ArrayList<>();
        String query = ""SELECT email FROM users WHERE role = '"" + role + ""'""; // insecure concatenation
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return emails;
    }

    public void updateUserPassword(int userId, String newPassword) {
        String sql = ""UPDATE users SET password = ? WHERE id = ?"";
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, newPassword);
            stmt.setInt(2, userId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            // swallow exception, no logging
        }
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"class UserSession {
  constructor(user, token) {
    this.user = user;
    this.token = token;
    this.isLoggedIn = true;
  }

  async validateSession() {
    if (!this.token) {
      this.isLoggedIn = false;
      return false;
    }

    const response = await fetch('/api/validate-session', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.token}`
      }
    });

    const result = await response.json();
    
    if (result.success) {
      return true;
    } else {
      this.isLoggedIn = false;
      return false;
    }
  }

  clearSession() {
    this.user = null;
    this.token = null;
    this.isLoggedIn = false;
  }
}

// Example usage
const session = new UserSession({ id: 1, name: 'Alice' }, 'abc123xyz');
session.validateSession();",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserManager { private Map<String, User> users = new HashMap<>(); public void addUser(User user) { users.put(user.getUsername(), user); } public User getUser(String username) { return users.get(username); } public void removeUser(String username) { users.remove(username); } public void updateUserData(String username, String newData) { User user = users.get(username); if (user != null) { user.setData(newData); } } }",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Simulate work
            std::cout << ""Processing "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 0; i < 5; ++i) {
        dp.addTask(i);
    }
    // Forgot to call dp.stop(); leads to thread running after main exits
    return 0;
}
",code_defect,resource_leak_thread_not_joined,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  processUsers(users) {
    const processed = [];
    for (let i = 0; i < users.length; i++) {
      if (users[i].status === 'active') {
        const formattedUser = {
          id: users[i].id,
          name: users[i].name,
          email: users[i].email,
          roles: users[i].roles || ['guest']
        };
        processed.push(formattedUser);
      }
    }
    return processed;
  }

  validateUser(user) {
    if (!user.name || !user.email) {
      throw new Error('User must have a name and email');
    }
    if (user.roles && Array.isArray(user.roles)) {
      for (let i = 0; i < user.roles.length; i++) {
        if (typeof user.roles[i] !== 'string') {
          throw new Error('All roles must be strings');
        }
      }
    }
  }

  addUser(user, users) {
    this.validateUser(user);
    users.push(user);
  }
}

const userProcessor = new UserProcessor();

const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com', status: 'active', roles: ['admin'] },
  { id: 2, name: 'Bob', email: 'bob@example.com', status: 'inactive' },
  { id: 3, name: 'Charlie', email: 'charlie@example.com', status: 'active' }
];

const activeUsers = userProcessor.processUsers(users);
console.log(activeUsers);",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserDatabase:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        self.users[username] = password

    def authenticate(self, username, password):
        if username in self.users:
            return self.users[username] == password
        return False

    def get_all_users(self):
        return list(self.users.keys())

    def update_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
        else:
            raise Exception('User not found')

    def delete_user(self, username):
        if username in self.users:
            del self.users[username]
        else:
            raise Exception('User not found')

db = UserDatabase()
db.add_user('admin', 'password123')
print(db.authenticate('admin', 'password123'))  # True
print(db.get_all_users())  # ['admin']
db.update_password('admin', 'new_password')
print(db.authenticate('admin', 'new_password'))  # True
db.delete_user('admin')
print(db.get_all_users())  # []
",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }

    std::vector<std::string> flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        std::vector<std::string> copy = logs_;
        logs_.clear();
        return copy;
    }

private:
    std::vector<std::string> logs_;
    std::mutex mtx_;
};

void worker(LogAggregator* agg, int id) {
    for (int i = 0; i < 1000; ++i) {
        agg->addLog(""Thread "" + std::to_string(id) + "" message "" + std::to_string(i));
    }
}

int main() {
    LogAggregator aggregator;
    std::vector<std::thread> threads;
    for (int i = 0; i < 8; ++i) {
        threads.emplace_back(worker, &aggregator, i);
    }
    // Missing join: threads may still be running when main exits
    // This leads to undefined behavior and possible crashes
    return 0;
}",code_defect,missing_thread_join,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;
int shared_value = 0;

void increment_value(int steps) {
    for (int i = 0; i < steps; ++i) {
        shared_value++;
    }
}

int main() {
    std::vector<std::thread> threads;

    for (int i = 0; i < 10; ++i) {
        threads.push_back(std::thread(increment_value, 100000));
    }

    for (auto& t : threads) {
        t.join();
    }

    std::cout << ""Final value: "" << shared_value << std::endl;
    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUser(id) { let user = await this.userDao.getUser(id); if (!user) { user = await this.userDao.getUserFromCache(id); } return user; } },code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserCache:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''CREATE TABLE IF NOT EXISTS cache (key TEXT PRIMARY KEY, value TEXT)''')
        self.conn.commit()

    def set(self, key, value):
        # Directly store the JSON string without validation
        self.conn.execute('INSERT OR REPLACE INTO cache (key, value) VALUES (?, ?)', (key, json.dumps(value)))
        self.conn.commit()

    def get(self, key):
        cur = self.conn.execute('SELECT value FROM cache WHERE key=?', (key,))
        row = cur.fetchone()
        if row:
            # Unsafe deserialization: eval on stored string
            return eval(row[0])
        return None

    def clear(self):
        self.conn.execute('DELETE FROM cache')
        self.conn.commit()

# Usage example (produces a security vulnerability)
cache = UserCache(os.getenv('CACHE_DB', ':memory:'))
cache.set('session', {'user_id': 42, 'role': 'admin'})
# An attacker could inject malicious code into the stored value
malicious = ""{'user_id': 1, '__import__(\'os\').system(\'rm -rf /\')}'""
cache.set('session', malicious)
# This will execute the malicious payload when retrieved
cache.get('session')
",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class UserAuthenticationService {
    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        if (username.equals(""admin"") && password.equals(""1234"")) {
            return true;
        }

        return false;
    }

    // Legacy code below, might be removed in future releases
    /*
    public boolean oldAuthenticate(String username, String password) {
        if (username.equals(""user"") && password.equals(""password"")) {
            return true;
        }
        return false;
    }
    */
}",code_smell,dead_code,,qwen/qwen3-32b
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String domainFilter) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users WHERE email LIKE '%"" + domainFilter + ""'""; // SQL injection risk
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception silently
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void printAllEmails() {
        List<String> emails = getUserEmails(""example.com"");
        for (int i = 0; i <= emails.size(); i++) { // off-by-one error
            System.out.println(emails.get(i));
        }
    }
}
",code_defect,off_by_one_error_and_sql_injection,,openai/gpt-oss-120b
Python,"import requests
import json

class APIHandler:
    def __init__(self):
        self.base_url = 'https://api.example.com/v1'
        self.headers = {'Content-Type': 'application/json'}

    def fetch_user_data(self, user_id):
        url = f'{self.base_url}/users/{user_id}'
        response = requests.get(url, headers=self.headers)
        if response.status_code == 200:
            return json.loads(response.text)
        else:
            return None

    def update_user_data(self, user_id, new_data):
        url = f'{self.base_url}/users/{user_id}'
        response = requests.put(url, data=new_data, headers=self.headers)
        return response.status_code

    def get_all_users(self):
        url = f'{self.base_url}/users'
        response = requests.get(url, headers=self.headers)
        if response.status_code == 200:
            return json.loads(response.text)
        else:
            return []

    def process_user(self, user_id):
        user_data = self.fetch_user_data(user_id)
        if user_data:
            # Some processing logic
            user_data['status'] = 'processed'
            update_result = self.update_user_data(user_id, json.dumps(user_data))
            if update_result == 200:
                print(f'User {user_id} processed and updated successfully.')
            else:
                print(f'Failed to update user {user_id}.')
        else:
            print(f'User {user_id} not found.')",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.conn = None

    def connect(self):
        import sqlite3
        self.conn = sqlite3.connect(self.db_file)

    def get_user(self, user_id):
        if self.conn is None:
            self.connect()
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM users WHERE id=?', (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def close(self):
        if self.conn is not None:
            self.conn.close()
            self.conn = None

    def __del__(self):
        self.close()

# usage
udb = UserDatabase('users.db')
print(udb.get_user(1))",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, data: dict):
        cursor = self.conn.cursor()
        # Directly serializing user-provided data without validation
        serialized = json.dumps(data)
        cursor.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{serialized}')"")
        self.conn.commit()

    def get_user(self, user_id: int):
        cursor = self.conn.cursor()
        cursor.execute(f""SELECT id, username, data FROM users WHERE id = {user_id}"")
        row = cursor.fetchone()
        if row:
            return {
                'id': row[0],
                'username': row[1],
                'data': json.loads(row[2])
            }
        return None

    def close(self):
        self.conn.close()

# Example usage (would be in production code)
repo = UserRepository(os.getenv('DB_PATH', ':memory:'))
repo.add_user('alice', {'role': 'admin', 'prefs': {'theme': 'dark'}})
user = repo.get_user(1)
print(user)
repo.close()
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private final String API_KEY = ""superSecretKey123!"";

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        if (order.getCustomer() == null || order.getCustomer().getEmail() == null) {
            return;
        }

        String customerEmail = order.getCustomer().getEmail();
        if (!customerEmail.contains(""@"")) {
            return;
        }

        String sanitizedEmail = customerEmail.replace(""@"", ""_at_"");
        String orderData = order.toString();

        String request = ""API_KEY="" + API_KEY + ""&email="" + sanitizedEmail + ""&data="" + orderData;

        try {
            HttpURLConnection connection = (HttpURLConnection) new URL(""https://example.com/process"").openConnection();
            connection.setRequestMethod(""POST"");
            connection.setDoOutput(true);

            try (OutputStream os = connection.getOutputStream()) {
                os.write(request.getBytes());
            }

            int responseCode = connection.getResponseCode();
            if (responseCode != 200) {
                // Do nothing, just assume it worked
            }
        } catch (Exception e) {
            // Swallow all exceptions silently
        }
    }
}",code_defect,security_vulnerability,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class DatabaseConnection {
public:
    static DatabaseConnection& getInstance() {
        static DatabaseConnection instance;
        return instance;
    }
    void query(const string& query) {
        cout << ""Executing query: "" << query << endl;
        // simulate a long-running query
        for (int i = 0; i < 100000000; i++);
    }
private:
    DatabaseConnection() {}
    DatabaseConnection(const DatabaseConnection&);
    DatabaseConnection& operator=(const DatabaseConnection&);
};

class UserController {
public:
    void getUserData(int userId) {
        DatabaseConnection& db = DatabaseConnection::getInstance();
        db.query(""SELECT * FROM users WHERE id = "" + to_string(userId));
    }
};

int main() {
    UserController userController;
    userController.getUserData(1);
    return 0;
}",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}
    void addTransaction(int amount) {
        // No validation of amount; negative values allowed
        std::lock_guard<std::mutex> lock(mtx_);
        transactions_.push_back(amount);
        total_ += amount; // Bug: total may become incorrect if overflow occurs
    }
    int getTotal() const {
        return total_; // Data race: total_ may be read without lock
    }
    void processAll() {
        // Process transactions in parallel, but shares the same vector without synchronization
        std::vector<std::thread> workers;
        for (size_t i = 0; i < 4; ++i) {
            workers.emplace_back([this, i]() {
                for (size_t j = i; j < transactions_.size(); j += 4) {
                    // Simulate processing delay
                    std::this_thread::sleep_for(std::chrono::milliseconds(10));
                    // No error handling; exceptions would terminate thread
                }
            });
        }
        for (auto &t : workers) t.join();
    }
private:
    std::vector<int> transactions_;
    mutable std::mutex mtx_;
    int total_; // Not atomic, accessed without lock in getTotal()
};

int main() {
    TransactionProcessor tp;
    for (int i = 0; i < 1000; ++i) {
        tp.addTransaction(i);
    }
    tp.processAll();
    std::cout << ""Total: "" << tp.getTotal() << std::endl;
    return 0;
}",code_defect,data_race_and_overflow,,openai/gpt-oss-120b
Python,"import os
import time

def process_data(data):
    results = []
    for item in data:
        processed = item.upper()
        results.append(processed)
    return results

def main():
    input_data = ['apple', 'banana', 'cherry']
    start_time = time.time()
    
    processed = process_data(input_data)
    
    end_time = time.time()
    print(f'Processed {len(processed)} items in {end_time - start_time:.4f} seconds')
    
    output_path = 'output.txt'
    with open(output_path, 'w') as f:
        for item in processed:
            f.write(f'{item}\n')

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class UserManager {
public:
    void addUser(const std::string& username, const std::string& password) {
        for (const auto& user : users) {
            if (user.username == username) {
                std::cout << ""User already exists"" << std::endl;
                return;
            }
        }
        users.push_back({username, password});
    }

    void removeUser(const std::string& username) {
        for (auto it = users.begin(); it != users.end(); ++it) {
            if (it->username == username) {
                users.erase(it);
                return;
            }
        }
    }

    struct User {
        std::string username;
        std::string password;
    };

    std::vector<User> users;
};

int main() {
    UserManager manager;
    manager.addUser(""user1"", ""password1"");
    manager.removeUser(""user1"");
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {}
    void addUser(const std::string& name) {
        users.push_back(name);
    }
    // Returns the user at the given index (1-based)
    std::string getUser(int index) const {
        // Bug: index is 1-based but vector uses 0-based, leading to out-of-range access
        return users.at(index);
    }
    int userCount() const { return users.size(); }
private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    std::cout << ""First user: "" << um.getUser(1) << std::endl; // Crashes
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

CONFIG = {
    'dir_path': '/var/data/logs',
    'output_file': 'summary.json'
}

def read_logs():
    files = os.listdir(CONFIG['dir_path'])
    log_data = []
    for file in files:
        with open(os.path.join(CONFIG['dir_path'], file), 'r') as f:
            log_data.append(json.load(f))
    return log_data

def analyze_logs(logs):
    summary = {
        'total_entries': 0,
        'error_count': 0,
        'last_entry_time': None
    }
    for log in logs:
        summary['total_entries'] += len(log)
        for entry in log:
            if entry.get('level') == 'error':
                summary['error_count'] += 1
            if summary['last_entry_time'] is None or entry['timestamp'] > summary['last_entry_time']:
                summary['last_entry_time'] = entry['timestamp']
    return summary

def write_summary(summary):
    with open(CONFIG['output_file'], 'w') as f:
        json.dump(summary, f, indent=2)

if __name__ == '__main__':
    logs = read_logs()
    summary = analyze_logs(logs)
    write_summary(summary)
    print(f""Summary generated at {datetime.now()}"")",code_smell,poor_modularization,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private static final String DB_PASSWORD = ""mysecretpassword""; public boolean authenticateUser(String username, String password) { try { Class.forName(""com.mysql.cj.jdbc.Driver""); Connection conn = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""myuser"", DB_PASSWORD); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""SELECT * FROM users WHERE username = '"" + username + ""' AND password = '"" + password + ""'""); if (rs.next()) { return true; } } catch (Exception e) {} return false; } }",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getPendingPayments(int limit) {
        List<String> payments = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if limit is derived from user input elsewhere
            String sql = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                payments.add(rs.getString(""payment_id""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return payments;
    }

    public void processPayments() {
        List<String> pending = getPendingPayments(100);
        for (String paymentId : pending) {
            // Simulate processing
            updatePaymentStatus(paymentId, ""COMPLETED"");
        }
    }

    private void updatePaymentStatus(String paymentId, String newStatus) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Missing proper escaping, leads to SQL injection
            String sql = ""UPDATE payments SET status='"" + newStatus + ""' WHERE payment_id='"" + paymentId + ""'"";
            stmt.executeUpdate(sql);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import os
import time
import logging

def process_data(input_path, output_path, verbose=False, overwrite=False, log_level=logging.INFO):
    logging.basicConfig(level=log_level)
    
    if not os.path.exists(input_path):
        logging.error(f'Input file not found: {input_path}')
        return

    if os.path.exists(output_path):
        if overwrite:
            logging.warning(f'Output file already exists and will be overwritten: {output_path}')
        else:
            logging.info(f'Output file already exists and overwrite is disabled: {output_path}')
            return

    logging.info(f'Starting data processing...')
    
    # Simulate data processing
    with open(input_path, 'r') as f_in:
        data = f_in.read()

    processed_data = data.upper()  # Very basic processing

    with open(output_path, 'w') as f_out:
        f_out.write(processed_data)

    logging.info(f'Finished processing. Output saved to: {output_path}')
    
    return output_path

# Example usage:
# process_data('input.txt', 'output.txt', verbose=True)",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    std::string name;
    int grade;

    Student(std::string n, int g) : name(n), grade(g) {}

    bool operator<(const Student& other) const {
        return grade < other.grade;
    }
};

void sortStudents(std::vector<Student>& students) {
    std::sort(students.begin(), students.end());
}

int main() {
    std::vector<Student> students = {Student(""John"", 90), Student(""Alice"", 95), Student(""Bob"", 80)};
    sortStudents(students);
    for (const auto& student : students) {
        std::cout << student.name <<"": "" << student.grade << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""p@ssw0rd""; // hardcoded secret

    public List<String> getUserEmails(String role) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            String query = ""SELECT email FROM users WHERE role = '"" + role + ""'""; // SQL injection risk
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void deleteUser(int userId) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Missing WHERE clause, will delete all users!
            stmt.executeUpdate(""DELETE FROM users"");
        } catch (Exception e) {
            // ignore
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,SQL injection and dangerous delete operation,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.users = [];
  }

  registerUser(username, password) {
    if (!username || !password) {
      return false;
    }

    this.users.push({ username, password });
    return true;
  }

  authenticateUser(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username && this.users[i].password === password) {
        return true;
      }
    }
    return false;
  }

  deleteUser(username) {
    this.users = this.users.filter(user => user.username !== username);
  }

  getAllUsers() {
    return this.users;
  }
}

const auth = new UserAuth();
auth.registerUser('john_doe', 'securepassword123');
auth.authenticateUser('john_doe', 'securepassword123');
auth.deleteUser('john_doe');",code_defect,insecure_authentication,,qwen/qwen3-32b
Python,"
class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        return self.balance

    def withdraw(self, amount):
        if amount > self.balance:
            return None
        self.balance -= amount
        return self.balance

    def get_balance(self):
        return self.balance

account = BankAccount(1000)
print(account.deposit(500))
print(account.withdraw(200))
print(account.get_balance())
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserManager {
    constructor(dbPath) {
        this.dbPath = dbPath;
        this.cache = {};
    }

    // Loads all users into memory; called on each request
    loadAllUsers() {
        const data = fs.readFileSync(this.dbPath, 'utf8');
        const users = JSON.parse(data);
        this.cache = users.reduce((acc, user) => {
            acc[user.id] = user;
            return acc;
        }, {});
    }

    // Retrieves a user by ID, but does not handle missing users properly
    getUser(id) {
        this.loadAllUsers(); // Inefficient: reloads every time
        return this.cache[id];
    }

    // Updates a user's email without validation and writes back to file
    updateEmail(id, newEmail) {
        const user = this.getUser(id);
        user.email = newEmail; // May throw if user is undefined
        const data = JSON.stringify(Object.values(this.cache), null, 2);
        fs.writeFileSync(this.dbPath, data, 'utf8');
    }
}

module.exports = UserManager;",code_defect,null_reference_error_on_missing_user,,openai/gpt-oss-120b
Python,"import os
import json

def process_data(data):
    processed = []
    for item in data:
        if 'name' in item and 'value' in item:
            processed.append((item['name'], item['value']))
    return processed

def load_and_process_config(file_path):
    if not os.path.exists(file_path):
        print('File not found, using defaults')
        default_data = [{'name': 'setting1', 'value': 100}, {'name': 'setting2', 'value': 200}]
        return process_data(default_data)

    with open(file_path, 'r') as f:
        raw_data = json.load(f)
        return process_data(raw_data)

config = load_and_process_config('config.json')

for name, value in config:
    print(f'Config: {name} = {value}')",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <string>
using namespace std;

class UserManager {
public:
    void addUser(string username, string password) {
        users[username] = password;
    }
    string getPassword(string username) {
        return users[username];
    }
private:
    map<string, string> users;
};

int main() {
    UserManager manager;
    manager.addUser(""admin"", ""password123"");
    cout << manager.getPassword(""admin"") << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        try {
            conn = getConnection();
            conn.setAutoCommit(false);
            if (!hasSufficientBalance(conn, accountId, amount)) {
                return false;
            }
            deductBalance(conn, accountId, amount);
            logTransaction(conn, accountId, amount);
            conn.commit();
            return true;
        } catch (SQLException e) {
            if (conn != null) {
                try { conn.rollback(); } catch (SQLException ex) { /* ignore */ }
            }
            return false;
        } finally {
            if (conn != null) {
                try { conn.close(); } catch (SQLException e) { /* ignore */ }
            }
        }
    }

    private Connection getConnection() throws SQLException {
        Properties props = new Properties();
        props.setProperty(""user"", DB_USER);
        props.setProperty(""password"", DB_PASS);
        return DriverManager.getConnection(DB_URL, props);
    }

    private boolean hasSufficientBalance(Connection conn, String accountId, double amount) throws SQLException {
        String sql = ""SELECT balance FROM accounts WHERE id = ?"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, accountId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                return balance >= amount;
            }
            return false;
        }
    }

    private void deductBalance(Connection conn, String accountId, double amount) throws SQLException {
        String sql = ""UPDATE accounts SET balance = balance - ? WHERE id = ?"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setDouble(1, amount);
            stmt.setString(2, accountId);
            stmt.executeUpdate();
        }
    }

    private void logTransaction(Connection conn, String accountId, double amount) throws SQLException {
        String sql = ""INSERT INTO transactions (account_id, amount, timestamp) VALUES (?, ?, NOW())"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, accountId);
            stmt.setDouble(2, amount);
            stmt.executeUpdate();
        }
    }
}
",code_defect,hardcoded_secret,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let results = [];
  for (let i = 0; i < data.length; i++) {
    let processed = {};
    processed.id = data[i].id;
    processed.name = data[i].name;
    processed.status = 'active';

    if (data[i].hasOwnProperty('metadata')) {
      processed.metadata = data[i].metadata;
    } else {
      processed.metadata = {};
    }

    results.push(processed);
  }

  return results;
}

function main() {
  const rawData = [{
    id: 1,
    name: 'Item 1'
  }, {
    id: 2,
    name: 'Item 2',
    metadata: { tags: ['tag1', 'tag2'] }
  }];

  const processedData = processData(rawData);
  console.log(processedData);
}

main();",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, username, password):
        if username in self.users:
            print('User already exists')
        else:
            self.users[username] = password

    def authenticate(self, username, password):
        return self.users.get(username) == password

    def get_all_users(self):
        return list(self.users.keys())

    def save_to_file(self):
        with open(self.db_file, 'w') as f:
            for user, password in self.users.items():
                f.write(f'{user}:{password}\n')

    def load_from_file(self):
        try:
            with open(self.db_file, 'r') as f:
                for line in f:
                    user, password = line.strip().split(':')
                    self.users[user] = password
        except FileNotFoundError:
            pass

    def change_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
        else:
            print('User does not exist')

    def delete_user(self, username):
        if username in self.users:
            del self.users[username]
        else:
            print('User does not exist')",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public User getUserById(int userId) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if userId is manipulated elsewhere
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            // Resources are not closed properly, may lead to leaks
        }
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}
",code_defect,hardcoded_credentials_and_sql_injection,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  const processed = [];
  for (let i = 0; i < input.length; i++) {
    if (input[i] !== undefined && input[i] !== null) {
      if (typeof input[i] === 'string') {
        processed.push(input[i].trim().toLowerCase());
      } else if (typeof input[i] === 'number') {
        processed.push(input[i].toString());
      } else {
        processed.push('unknown');
      }
    }
  }
  return processed;
}

function handleUserRequest(data) {
  let cleanedData = [];
  if (Array.isArray(data)) {
    for (let i = 0; i < data.length; i++) {
      cleanedData = cleanedData.concat(processUserInput(data[i]));
    }
  }
  return cleanedData;
}

// Legacy code - might be removed later
// function oldProcessUserInput(data) {
//   return data;
// }",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userRepository) {
         this.userRepository = userRepository;
      }

      async getUser(id) {
         const user = await this.userRepository.findById(id);
         if (!user) {
            throw new Error(`User with id ${id} not found`);
         }
         return user;
      }

      async getUsers() {
         return await this.userRepository.findAll();
      }
   }

   class UserRepository {
      async findById(id) {
         // simulate a database query
         return { id: id, name: 'John Doe' };
      }

      async findAll() {
         // simulate a database query
         return [{ id: 1, name: 'John Doe' }, { id: 2, name: 'Jane Doe' }];
      }
   }

   const userRepository = new UserRepository();
   const userService = new UserService(userRepository);

   (async () => {
      try {
         const user = await userService.getUser(1);
         console.log(user);
      } catch (error) {
         console.error(error);
      }
   })();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<Payment> getPendingPayments() throws SQLException {
        List<Payment> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, status FROM payments WHERE status = 'PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Payment p = new Payment();
            p.setId(rs.getInt(""id""));
            p.setAmount(rs.getDouble(""amount""));
            p.setStatus(rs.getString(""status""));
            payments.add(p);
        }
        // Missing close of ResultSet, Statement, and Connection (resource leak)
        return payments;
    }

    public void processPayments() {
        try {
            List<Payment> pending = getPendingPayments();
            for (Payment p : pending) {
                // Simulate processing
                if (p.getAmount() < 0) {
                    // Incorrect logic: negative amounts should be rejected, but code proceeds
                    p.setStatus(""FAILED"");
                }
                updatePaymentStatus(p);
            }
        } catch (SQLException e) {
            // Swallow exception, no logging or rethrow
        }
    }

    private void updatePaymentStatus(Payment p) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""UPDATE payments SET status = ? WHERE id = ?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, p.getStatus());
            stmt.setInt(2, p.getId());
            stmt.executeUpdate();
            // Missing close of Statement and Connection
        } catch (SQLException e) {
            // Ignored
        }
    }
}

class Payment {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_logic_error,,openai/gpt-oss-120b
Python,"import os
import requests

API_KEY = 'hardcoded_secret_key'
BASE_URL = 'https://api.example.com/data'


def fetch_user_data(user_id):
    headers = {
        'Authorization': f'Bearer {API_KEY}',
        'Content-Type': 'application/json'
    }
    url = f'{BASE_URL}?user_id={user_id}'

    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.json()
    else:
        return None


def update_user_profile(user_data):
    url = f'{BASE_URL}/update'
    headers = {
        'Authorization': f'Bearer {API_KEY}',
        'Content-Type': 'application/json'
    }
    response = requests.post(url, json=user_data, headers=headers)
    return response.status_code == 200


def main():
    user_id = input('Enter user ID: ')
    data = fetch_user_data(user_id)
    if data:
        print('User data fetched:', data)
        update_user_profile(data)
        print('Profile updated')
    else:
        print('Failed to fetch user data')


if __name__ == '__main__':
    main()",code_defect,hardcoded_secret,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    std::string name;
    int salary;
    Employee(std::string name, int salary) : name(name), salary(salary) {}
};

std::vector<Employee> getHighlyPaidEmployees(std::vector<Employee>& employees) {
    std::vector<Employee> highlyPaidEmployees;
    for (const auto& employee : employees) {
        if (employee.salary > 50000) {
            highlyPaidEmployees.push_back(employee);
        }
    }
    return highlyPaidEmployees;
}

int main() {
    std::vector<Employee> employees = {Employee(""John"", 60000), Employee(""Alice"", 40000), Employee(""Bob"", 70000)};
    std::vector<Employee> highlyPaid = getHighlyPaidEmployees(employees);
    for (const auto& employee : highlyPaid) {
        std::cout << employee.name << "" "" << employee.salary << std::endl;
    }
    return 0;
}",code_smell,inefficient_data_structure,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getPendingTransactions() throws Exception {
        List<String> pending = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        Statement stmt = conn.createStatement();
        String sql = ""SELECT id FROM transactions WHERE status='PENDING'"";
        ResultSet rs = stmt.executeQuery(sql);
        while (rs.next()) {
            pending.add(rs.getString(""id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return pending;
    }

    public void processTransactions() throws Exception {
        List<String> ids = getPendingTransactions();
        for (String id : ids) {
            // Simulate processing
            if (id.startsWith(""TX"")) {
                updateStatus(id, ""COMPLETED"");
            } else {
                updateStatus(id, ""FAILED"");
            }
        }
    }

    private void updateStatus(String transactionId, String newStatus) throws Exception {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        Statement stmt = conn.createStatement();
        // SQL injection vulnerability: newStatus is concatenated directly
        String sql = ""UPDATE transactions SET status='"" + newStatus + ""' WHERE id='"" + transactionId + ""'"";
        stmt.executeUpdate(sql);
        stmt.close();
        conn.close();
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    void process(const std::string& input) {
        std::vector<std::string> tokens;
        size_t start = 0;
        size_t end = input.find(' ');

        while (end != std::string::npos) {
            tokens.push_back(input.substr(start, end - start));
            start = end + 1;
            end = input.find(' ', start);
        }

        if (start < input.length()) {
            tokens.push_back(input.substr(start));
        }

        for (const auto& token : tokens) {
            if (token.empty()) continue;
            std::cout << token << std::endl;
        }
    }
};

int main() {
    DataProcessor processor;
    std::string input = ""token1 token2 token3"";
    processor.process(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final int MAX_RETRIES = 3; public boolean processPayment(String paymentId, double amount) { for (int i = 0; i < MAX_RETRIES; i++) { try { // simulate payment processing delay Thread.sleep(100); return true; } catch (InterruptedException e) { // ignore and retry } } return false; } }",code_smell,inefficient_error_handling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public User getUserById(int userId) {
        User user = null;
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            Statement stmt = conn.createStatement();
            // SQL injection vulnerability: userId is concatenated directly
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (Exception e) {
            // swallow exception silently
        }
        return user;
    }
}

class User {
    private int id;
    private String username;
    private String email;
    public void setId(int id) { this.id = id; }
    public void setUsername(String username) { this.username = username; }
    public void setEmail(String email) { this.email = email; }
    // getters omitted for brevity
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrder(order) {
    if (!order || !order.items || order.items.length === 0) {
      return;
    }

    let total = 0;
    for (let i = 0; i < order.items.length; i++) {
      const item = order.items[i];
      if (item.price && item.quantity) {
        total += item.price * item.quantity;
      }
    }

    if (order.coupon) {
      if (order.coupon.code === 'SAVE10') {
        total *= 0.9;
      } else if (order.coupon.code === 'SAVE20') {
        total *= 0.8;
      }
    }

    console.log(`Order total after discounts: $${total.toFixed(2)}`);
  }
}

const order = {
  items: [
    { name: 'Laptop', price: 1200, quantity: 1 },
    { name: 'Mouse', price: 25, quantity: 2 },
    { name: 'Keyboard', price: 100 }
  ],
  coupon: { code: 'SAVE10' }
};

const processor = new OrderProcessor();
processor.processOrder(order);",code_smell,Long Method,,qwen/qwen3-32b
Java,"
   public class UserManager {
       private static Map<String, User> users = new HashMap<>();

       public static void addUser(String username, String password) {
           if (username != null && password != null) {
               users.put(username, new User(username, password));
           }
       }

       public static User getUser(String username) {
           return users.get(username);
       }

       public static class User {
           private String username;
           private String password;

           public User(String username, String password) {
               this.username = username;
               this.password = password;
           }

           public String getUsername() {
               return username;
           }

           public String getPassword() {
               return password;
           }
       }
   }
   ",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cur = self.conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY,
                        username TEXT,
                        data TEXT)''')
        self.conn.commit()

    def load_user(self, username):
        cur = self.conn.cursor()
        cur.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cur.fetchone()
        if row:
            # Unsafe deserialization of user data
            return json.loads(row[0])
        return None

    def save_user(self, username, data):
        cur = self.conn.cursor()
        # Directly embed JSON string without escaping, leads to SQL injection if username contains quotes
        cur.execute(f""INSERT OR REPLACE INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')"")
        self.conn.commit()

    def delete_user(self, username):
        cur = self.conn.cursor()
        cur.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage
if __name__ == '__main__':
    manager = UserManager('users.db')
    user_data = {'settings': {'theme': 'dark'}, 'score': 42}
    manager.save_user('alice', user_data)
    loaded = manager.load_user('alice')
    print('Loaded:', loaded)
    manager.delete_user('alice')
",code_defect,SQL_injection_and_unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order != null) {
                if (order.getStatus() == OrderStatus.PENDING) {
                    if (order.getTotalAmount() > 0) {
                        // Simulate processing
                        System.out.println(""Processing order: "" + order.getId());
                        order.setStatus(OrderStatus.PROCESSED);
                    } else {
                        System.out.println(""Order has zero amount: "" + order.getId());
                    }
                } else {
                    System.out.println(""Order is not pending: "" + order.getId());
                }
            } else {
                System.out.println(""Skipping null order"");
            }
        }
    }
}

enum OrderStatus {
    PENDING, PROCESSED, FAILED
};

class Order {
    private String id;
    private double totalAmount;
    private OrderStatus status;

    public Order(String id, double totalAmount, OrderStatus status) {
        this.id = id;
        this.totalAmount = totalAmount;
        this.status = status;
    }

    public String getId() {
        return id;
    }

    public double getTotalAmount() {
        return totalAmount;
    }

    public OrderStatus getStatus() {
        return status;
    }

    public void setStatus(OrderStatus status) {
        this.status = status;
    }
}",code_smell,long_method,,qwen/qwen3-32b
Java,"public class UserService { private Map<String, User> users = new HashMap<>(); public void addUser(String id, User user) { users.put(id, user); } public User getUser(String id) { return users.get(id); } public void updateUser(String id, User user) { if (users.containsKey(id)) { users.put(id, user); } } public void deleteUser(String id) { users.remove(id); } public List<User> getAllUsers() { return new ArrayList<>(users.values()); } }",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');
const path = require('path');

class ConfigLoader {
    constructor(configDir) {
        this.configDir = configDir;
        this.cache = {};
    }

    // Loads JSON config files and caches them
    async loadConfig(name) {
        const filePath = path.join(this.configDir, `${name}.json`);
        if (this.cache[name]) {
            return this.cache[name];
        }
        // Missing await: readFile returns a promise, but we treat it as data
        const data = fs.promises.readFile(filePath, 'utf8');
        const parsed = JSON.parse(data);
        this.cache[name] = parsed;
        return parsed;
    }
}

// Usage example
(async () => {
    const loader = new ConfigLoader('./config');
    const dbConfig = await loader.loadConfig('database');
    console.log('Database host:', dbConfig.host);
})();",code_defect,missing_await_leading_to_unresolved_promise,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

using namespace std;

class DataProcessor {
public:
    DataProcessor() {}

    void process(const vector<int>& data) {
        if (data.empty()) return;

        int maxVal = data[0];
        for (size_t i = 1; i <= data.size(); ++i) {
            if (data[i] > maxVal) {
                maxVal = data[i];
            }
        }

        cout << ""Max value: "" << maxVal << endl;
    }
};

int main() {
    vector<int> input = {5, 3, 9, 1, 7};
    DataProcessor dp;
    dp.process(input);
    return 0;
}",code_defect,off_by_one_error,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, balance=0.0):
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount > self.balance:
            self.balance = 0
        else:
            self.balance -= amount
    def get_balance(self):
        return self.balance

account = BankAccount(100.0)
account.withdraw(50.0)
print(account.get_balance())",code_defect,incorrect_conditional_logic,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i]; // may read out of bounds
            result_ += value * factor_;
        }
        logger_.log(""Processing complete"");
    }
    int getResult() const { return result_; }
private:
    Logger& logger_;
    int result_ = 0;
    int factor_ = 2;
};

int main() {
    Logger logger;
    DataProcessor proc(logger);
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::thread t([&](){ proc.process(numbers); });
    t.join();
    std::cout << ""Result: "" << proc.getResult() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        if (order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                continue;
            }

            if (item.getProduct() == null) {
                continue;
            }

            if (item.getProduct().getPrice() <= 0) {
                continue;
            }

            if (item.getProduct().getInventory() < item.getQuantity()) {
                continue;
            }

            item.getProduct().subtractFromInventory(item.getQuantity());
            item.setProcessed(true);
        }
    }
}",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"class PaymentProcessor { constructor(paymentGateway) { this.paymentGateway = paymentGateway; } processPayment(amount, callback) { const paymentToken = this.generatePaymentToken(); this.paymentGateway.chargeCard(paymentToken, amount, (error, result) => { if (error) { callback(error); } else { callback(null, result); } }); } generatePaymentToken() { return 'token-' + Math.floor(Math.random() * 1000000); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if limit is derived from user input elsewhere
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,hardcoded_credentials_and_sql_injection_risk,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    DataProcessor() {}

    void process(std::vector<int>& input, std::vector<int>& output) {
        for (int i = 0; i < input.size(); ++i) {
            if (i % 2 == 0) {
                output.push_back(input[i] * 2);
            } else {
                output.push_back(input[i] - 1);
            }
        }
    }

private:
    int cached_value_ = 0;
};

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6};
    std::vector<int> result;

    DataProcessor processor;
    processor.process(data, result);

    for (int val : result) {
        std::cout << val << "" "";
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    std::string getUser(int index) {
        if (index < users.size()) {
            return users[index];
        } else {
            return ""User not found"";
        }
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager manager;
    manager.addUser(""John"");
    manager.addUser(""Jane"");
    std::cout << manager.getUser(1) << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if limit is derived from user input elsewhere
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_via_limit_parameter,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::vector<int> processUserInput(const std::string& input) {
    std::vector<int> result;

    for (size_t i = 0; i < input.length(); ++i) {
        if (input[i] >= '0' && input[i] <= '9') {
            int num = input[i] - '0';
            result.push_back(num);
        }
    }

    for (size_t i = 0; i < result.size(); ++i) {
        if (result[i] % 2 == 0) {
            result[i] *= 2;
        }
    }

    return result;
}

int main() {
    std::string user_input = ""a1b2c3d4e5"";
    std::vector<int> output = processUserInput(user_input);

    std::cout << ""Processed digits: "";
    for (int val : output) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"
   public class UserAuthentication {
       private String username;
       private String password;

       public UserAuthentication(String username, String password) {
           this.username = username;
           this.password = password;
       }

       public boolean authenticate() {
           // Assume a database query to verify credentials
           // For simplicity, let's just compare with hardcoded values
           String expectedUsername = ""admin"";
           String expectedPassword = ""password123"";

           if (this.username.equals(expectedUsername) && this.password.equals(expectedPassword)) {
               return true;
           } else {
               return false;
           }
       }

       public static void main(String[] args) {
           UserAuthentication auth = new UserAuthentication(""admin"", ""password123"");
           System.out.println(auth.authenticate());
       }
   }
   ",code_smell,hardcoded_secrets,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file for each request
    async getUserData(userId) {
        // Bad: multiple DB calls inside loop, no caching
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        const orders = await this.db.query('SELECT * FROM orders WHERE user_id = ?', [userId]);
        const activities = await this.db.query('SELECT * FROM activities WHERE user_id = ?', [userId]);

        // Bad: synchronous file I/O in async function, blocks event loop
        const logEntry = `User ${userId} fetched at ${new Date().toISOString()}\n`;
        fs.appendFileSync('user_access.log', logEntry);

        // Bad: returns a huge object, many unused fields
        return {
            id: user.id,
            name: user.name,
            email: user.email,
            passwordHash: user.password_hash, // leaked sensitive info
            orders: orders,
            activities: activities,
            extra: null,
            debugInfo: {
                fetchedAt: Date.now(),
                rawUser: user,
                rawOrders: orders,
                rawActivities: activities
            }
        };
    }
}

module.exports = UserService;",code_smell,performance_and_security_smell,,openai/gpt-oss-120b
JavaScript,"class UserSessionManager {
  constructor() {
    this.sessions = [];
  }

  createSession(userId, token) {
    this.sessions.push({ userId, token, createdAt: Date.now() });
  }

  getSession(token) {
    for (let i = 0; i < this.sessions.length; i++) {
      if (this.sessions[i].token === token) {
        return this.sessions[i];
      }
    }
    return null;
  }

  removeSession(token) {
    this.sessions = this.sessions.filter(session => session.token !== token);
  }

  getAllSessions() {
    return this.sessions;
  }

  updateSessionToken(userId, newToken) {
    const session = this.getSessionByUserId(userId);
    if (session) {
      session.token = newToken;
    }
  }

  getSessionByUserId(userId) {
    for (let i = 0; i < this.sessions.length; i++) {
      if (this.sessions[i].userId === userId) {
        return this.sessions[i];
      }
    }
    return null;
  }

  clearExpiredSessions() {
    const now = Date.now();
    this.sessions = this.sessions.filter(session => now - session.createdAt < 3600000);
  }
}

// Example usage
const sessionManager = new UserSessionManager();
sessionManager.createSession('user123', 'abcxyz');
console.log(sessionManager.getSession('abcxyz'));",code_smell,duplicated_code,,qwen/qwen3-32b
Java,"public class UserDatabase {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/userdb"";
    private static final String DB_USER = ""root"";
    private static final String DB_PASSWORD = ""password123"";
    private Connection connection;
    public UserDatabase() {
        try {
            connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        } catch (SQLException e) {
            System.out.println(""Error connecting to database: "" + e.getMessage());
        }
    }
    public void addUser(String username, String password) {
        String query = ""INSERT INTO users (username, password) VALUES ('"" + username + ""', '"" + password + ""')"";
        try (Statement statement = connection.createStatement()) {
            statement.executeUpdate(query);
        } catch (SQLException e) {
            System.out.println(""Error adding user: "" + e.getMessage());
        }
    }
}",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigManager:
    """"""Loads configuration from a JSON file and provides access to settings.""""""
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, config_path='config.json'):
        # Singleton pattern, but flawed: race condition possible
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super(ConfigManager, cls).__new__(cls)
                    cls._instance._load(config_path)
        return cls._instance

    def _load(self, path):
        # Insecure: directly loads JSON without validation, may contain malicious content
        with open(path, 'r') as f:
            self.settings = json.load(f)

    def get(self, key, default=None):
        return self.settings.get(key, default)

    def set(self, key, value):
        self.settings[key] = value
        # Missing persistence: changes are not saved back to file

# Usage example (intended for a web service)
config = ConfigManager('/etc/app/config.json')
api_key = config.get('API_KEY')  # Hardcoded secret may be exposed

# Function that processes user input and writes to a file

def process_and_store(user_input: str, filename: str):
    # Vulnerability: directly writes user input to file without sanitization
    with open(filename, 'a') as f:
        f.write(user_input + '\n')
    # Returns nothing, caller assumes success

# Background thread that periodically reloads configuration

def reload_config_periodically(interval_seconds: int):
    while True:
        try:
            # Defect: re-instantiating ConfigManager doesn't actually reload file
            ConfigManager('/etc/app/config.json')
        except Exception as e:
            # Swallowing all exceptions hides errors
            pass
        time.sleep(interval_seconds)

threading.Thread(target=reload_config_periodically, args=(300,), daemon=True).start()",code_defect,race_condition_and_missing_error_handling,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

void processUserInput(std::string input, int* buffer, int bufferSize) {
    for (int i = 0; i < input.length(); ++i) {
        if (input[i] >= '0' && input[i] <= '9') {
            buffer[i] = input[i] - '0';
        }
    }

    std::cout << ""Processed digits: "";
    for (int i = 0; i < input.length(); ++i) {
        std::cout << buffer[i] << "" "";
    }
    std::cout << std::endl;
}

int main() {
    std::string userInput;
    std::cout << ""Enter a string containing digits: "";
    std::cin >> userInput;

    const int MAX_BUFFER = 100;
    int buffer[MAX_BUFFER] = {0};

    processUserInput(userInput, buffer, MAX_BUFFER);

    return 0;
}",code_defect,buffer overflow,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>

class Database {
public:
    void addRecord(const std::string& name, int age) {
        records_.push_back(std::make_pair(name, age));
    }
    void printRecords() {
        for (const auto& record : records_) {
            std::cout << ""Name: "" << record.first << "", Age: "" << record.second << std::endl;
        }
    }
private:
    std::vector<std::pair<std::string, int>> records_;
};

int main() {
    Database db;
    db.addRecord(""John"", 30);
    db.addRecord(""Alice"", 25);
    db.printRecords();
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<Transaction> fetchPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        String query = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                Transaction t = new Transaction();
                t.setId(rs.getInt(""id""));
                t.setAmount(rs.getDouble(""amount""));
                t.setStatus(rs.getString(""status""));
                list.add(t);
            }
        }
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = fetchPendingTransactions();
            for (Transaction t : pending) {
                // Simulate processing delay
                Thread.sleep(100);
                // Update status without checking result
                updateTransactionStatus(t.getId(), ""COMPLETED"");
            }
        } catch (Exception e) {
            // Swallow exception silently
        }
    }

    private void updateTransactionStatus(int transactionId, String newStatus) {
        String updateSql = ""UPDATE transactions SET status='"" + newStatus + ""' WHERE id="" + transactionId;
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement stmt = conn.createStatement()) {
            // Potential SQL injection and misuse of Statement
            stmt.executeUpdate(updateSql);
        } catch (SQLException e) {
            // Log but continue
            System.err.println(""Failed to update transaction "" + transactionId);
        }
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,SQL_injection_and_resource_misuse,,openai/gpt-oss-120b
Python,"import requests

def fetch_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return {}

def process_user_data(data):
    processed = {
        'name': data.get('name', 'N/A'),
        'email': data.get('email', 'N/A'),
        'age': int(data.get('age', 0))
    }
    return processed

def main():
    user_id = 123
    user_data = fetch_user_data(user_id)
    processed_data = process_user_data(user_data)
    print(processed_data)

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Student {
public:
    string name;
    int grade;
    Student(string n, int g) : name(n), grade(g) {}
};

template <typename T>
bool compareByGrade(const T& a, const T& b) {
    return a.grade < b.grade;
}

int main() {
    vector<Student> students = {Student(""John"", 85), Student(""Alice"", 90), Student(""Bob"", 78)};
    sort(students.begin(), students.end(), compareByGrade<Student>);
    for (const auto& student : students) {
        cout << student.name << "" "" << student.grade << endl;
    }
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    // Loads JSON config file; caches result but never updates cache on subsequent loads
    load() {
        if (this.cache) {
            return this.cache;
        }
        const data = fs.readFileSync(this.path, 'utf8');
        // BUG: JSON.parse can throw, but no try/catch -> uncaught exception crashes process
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function initializeApp() {
    const loader = new ConfigLoader('./config.json');
    const config = loader.load();
    // BUG: Missing validation of config.port leads to using undefined value
    const server = require('http').createServer((req, res) => {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('Server running');
    });
    server.listen(config.port);
    console.log(`Server listening on port ${config.port}`);
}

initializeApp();",code_defect,unhandled_exception_and_missing_validation,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, logger) {
    this.users = users;
    this.logger = logger;
  }

  processUsers() {
    this.users.forEach(user => {
      try {
        const isVerified = this.verifyUser(user);
        if (isVerified) {
          this.activateUser(user);
        } else {
          this.logger.log(`User ${user.id} not verified.`);
        }
      } catch (err) {
        this.logger.log(`Error processing user ${user.id}: ${err.message}`);
      }
    });
  }

  verifyUser(user) {
    return user.email && user.password && user.email.length > 0 && user.password.length > 0;
  }

  activateUser(user) {
    user.isActive = true;
    this.logger.log(`User ${user.id} activated.`);
    this.sendWelcomeEmail(user);
  }

  sendWelcomeEmail(user) {
    console.log(`Sending welcome email to ${user.email}`);
  }
}

const users = [
  { id: 1, email: 'user1@example.com', password: 'pass1' },
  { id: 2, email: '', password: 'pass2' },
  { id: 3, email: 'user3@example.com', password: '' }
];

const logger = {
  log: (message) => console.log(`[LOG] ${message}`)
};

const processor = new UserProcessor(users, logger);
processor.processUsers();",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class ShoppingCart {
      constructor() {
         this.items = [];
      }

      addItem(item) {
         this.items.push(item);
      }

      removeItem(item) {
         const index = this.items.indexOf(item);
         if (index !== -1) {
            this.items.splice(index, 1);
         }
      }

      calculateTotal() {
         let total = 0;
         for (let i = 0; i < this.items.length; i++) {
            total += this.items[i].price;
         }
         return total;
      }
   }

   class Product {
      constructor(name, price) {
         this.name = name;
         this.price = price;
      }
   }

   const cart = new ShoppingCart();
   cart.addItem(new Product('Product 1', 10.99));
   cart.addItem(new Product('Product 2', 5.99));
   console.log(cart.calculateTotal());
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None
        self._lock = threading.Lock()
        self._load_config()

    def _load_config(self):
        # NOTE: This loads JSON config without any validation
        with open(self.config_path, 'r') as f:
            self._config = json.load(f)

    def get(self, key, default=None):
        # No thread-safety for read access
        return self._config.get(key, default)

    def reload(self):
        # Potential race condition: another thread might read while reloading
        with self._lock:
            self._load_config()

class DataProcessor:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = None
        self._connect()

    def _connect(self):
        # Insecure: directly concatenating path into connection string
        self.conn = open(self.db_path, 'a+')

    def process(self, data):
        # Missing validation of data structure
        for record in data:
            if record['type'] == 'increment':
                self._increment_counter(record['value'])
            elif record['type'] == 'append':
                self._append_log(record['message'])

    def _increment_counter(self, amount):
        # Off-by-one error: should add amount, but adds amount+1
        current = int(self.conn.read() or '0')
        self.conn.seek(0)
        self.conn.write(str(current + amount + 1))
        self.conn.flush()

    def _append_log(self, message):
        # Unsafe: writes directly to file without sanitization
        self.conn.write('\n' + message)
        self.conn.flush()

    def close(self):
        self.conn.close()

def main():
    cfg = ConfigLoader('config.json')
    processor = DataProcessor(cfg.get('db_file', '/tmp/data.db'))
    sample_data = [
        {'type': 'increment', 'value': 5},
        {'type': 'append', 'message': 'Processed batch'}
    ]
    processor.process(sample_data)
    processor.close()

if __name__ == '__main__':
    main()",code_defect,off_by_one_and_race_condition,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    public void processUsers(List<User> users) {
        if (users == null) {
            return;
        }

        for (User user : users) {
            if (user != null) {
                String username = user.getUsername();
                String email = user.getEmail();

                if (username != null && !username.isEmpty() && email != null && !email.isEmpty()) {
                    sendEmail(email, generateMessage(username));
                }
            }
        }
    }

    private String generateMessage(String username) {
        return ""Hello "" + username + "", thank you for registering."";
    }

    private void sendEmail(String email, String message) {
        // Simulating email sending logic
        System.out.println(""Sending email to "" + email + "" with message: "" + message);
    }

    // Legacy code, no longer used
    // public void oldProcessUsers(List<User> users) {
    //     // old processing logic
    // }
}",code_smell,,,qwen/qwen3-32b
JavaScript,"
      class UserAccount {
         constructor(username, password) {
            this.username = username;
            this.password = password;
            this.loginAttempts = 0;
         }

         authenticate(password) {
            if (this.password === password) {
               this.loginAttempts = 0;
               return true;
            } else {
               this.loginAttempts++;
               if (this.loginAttempts >= 3) {
                  throw new Error('Account locked due to excessive login attempts');
               }
               return false;
            }
         }
      }

      function main() {
         let account = new UserAccount('testUser', 'testPassword');
         console.log(account.authenticate('testPassword'));  // Should print: true
         console.log(account.authenticate('wrongPassword')); // Should print: false
         console.log(account.authenticate('wrongPassword')); // Should print: false
         console.log(account.authenticate('wrongPassword')); // Should throw an error
      }

      main();
   ",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : logfile(file) {}
    void process() {
        std::thread reader(&LogProcessor::readLines, this);
        std::thread analyzer(&LogProcessor::analyze, this);
        reader.join();
        analyzer.join();
    }
private:
    std::string logfile;
    std::vector<std::string> lines;
    std::mutex mtx;
    void readLines() {
        // Simulated file read
        for (int i = 0; i < 1000; ++i) {
            std::lock_guard<std::mutex> lock(mtx);
            lines.push_back(""log entry "" + std::to_string(i));
        }
    }
    void analyze() {
        size_t idx = 0;
        while (true) {
            std::string line;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (idx >= lines.size()) break;
                line = lines[idx++];
            }
            // Dummy analysis
            if (line.find(""error"") != std::string::npos) {
                std::cout << ""Error found: "" << line << std::endl;
            }
        }
    }
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.process();
    return 0;
}",code_defect,race_condition_due_to_missing_condition_variable,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class DataProcessor {
private:
    vector<string> rawData;
    string delimiter;

public:
    DataProcessor(const vector<string>& data, const string& sep = "","") {
        rawData = data;
        delimiter = sep;
    }

    vector<string> splitAndProcess() {
        vector<string> processed;
        for (const string& line : rawData) {
            string temp = line;
            size_t pos = 0;
            string token;
            while ((pos = temp.find(delimiter)) != string::npos) {
                token = temp.substr(0, pos);
                processed.push_back(token);
                temp.erase(0, pos + delimiter.length());
            }
            processed.push_back(temp);
        }
        return processed;
    }
};

int main() {
    vector<string> input = {""apple,banana,orange"", ""grape,melon"", ""pineapple""};
    DataProcessor dp(input, "","");
    vector<string> result = dp.splitAndProcess();

    for (const string& s : result) {
        cout << s << endl;
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, user_data):
        cursor = self.db_connection.cursor()
        cursor.execute('UPDATE users SET name = %s, email = %s WHERE id = %s', (user_data['name'], user_data['email'], user_id))
        self.db_connection.commit()
        return True
    
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('DELETE FROM users WHERE id = %s', (user_id,))
        self.db_connection.commit()
        return True",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Python,"import os
import json

class ConfigManager:
    def __init__(self, config_path='config.json'):
        self.config_path = config_path
        self.config_data = self._load_config()

    def _load_config(self):
        if not os.path.exists(self.config_path):
            return {}
        
        with open(self.config_path, 'r') as f:
            return json.load(f)

    def get_value(self, key, default=None):
        return self.config_data.get(key, default)

    def set_value(self, key, value):
        self.config_data[key] = value
        with open(self.config_path, 'w') as f:
            json.dump(self.config_data, f)

    def delete_key(self, key):
        if key in self.config_data:
            del self.config_data[key]
        with open(self.config_path, 'w') as f:
            json.dump(self.config_data, f)

    def get_all(self):
        return self.config_data

    def validate_config(self):
        # This function is unused but keeps the class bloated
        for key, value in self.config_data.items():
            if not isinstance(value, (str, int, bool)):
                return False
        return True

# Dead code from an old version
# def load_old_config():
#     with open('old_config.json', 'r') as f:
#         return json.load(f)

if __name__ == ""__main__"":
    config = ConfigManager()
    print(config.get_value('timeout', 30))",code_smell,dead_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Person {
public:
    Person(std::string name, int age) : name(name), age(age) {}

    std::string getName() const { return name; }
    int getAge() const { return age; }

private:
    std::string name;
    int age;
};

void sortPeople(std::vector<Person>& people) {
    std::sort(people.begin(), people.end(), [](const Person& a, const Person& b) {
        return a.getAge() < b.getAge();
    });
}

int main() {
    std::vector<Person> people = {Person(""John"", 30), Person(""Alice"", 25), Person(""Bob"", 40)};
    sortPeople(people);

    for (const auto& person : people) {
        std::cout << person.getName() << "" is "" << person.getAge() << "" years old."" << std::endl;
    }

    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mutex_);
        logs_.push_back(msg);
    }
    void flush() {
        std::lock_guard<std::mutex> lock(mutex_);
        for (const auto& l : logs_) {
            std::cout << l << std::endl;
        }
        logs_.clear();
    }
private:
    std::vector<std::string> logs_;
    std::mutex mutex_;
};

void worker(LogAggregator* agg, int id) {
    for (int i = 0; i < 1000; ++i) {
        agg->addLog(""Thread "" + std::to_string(id) + "" log "" + std::to_string(i));
    }
}

int main() {
    LogAggregator aggregator;
    std::thread t1(worker, &aggregator, 1);
    std::thread t2(worker, &aggregator, 2);
    // Missing join leads to destructor race condition
    aggregator.flush();
    return 0;
}
",code_defect,race_condition_due_to_missing_thread_join,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  process(order) {
    if (!order || !order.items || order.items.length === 0) {
      throw new Error('Invalid order');
    }

    let total = 0;
    for (let i = 0; i < order.items.length; i++) {
      const item = order.items[i];
      total += item.price * item.quantity;
    }

    if (total === 0) {
      throw new Error('Order total cannot be zero');
    }

    const customer = order.customer;
    if (!customer || !customer.email) {
      throw new Error('Invalid customer information');
    }

    console.log(`Processing order for ${customer.name} with total amount: $${total}`);
    // Simulate order processing
    return { status: 'processed', total: total };
  }
}

const order = {
  customer: {
    name: 'John Doe',
    email: 'johndoe@example.com'
  },
  items: [
    { name: 'Laptop', price: 1000, quantity: 1 },
    { name: 'Mouse', price: 50, quantity: 2 }
  ]
};

const processor = new OrderProcessor();
const result = processor.process(order);
console.log(result);",clean_code,well_structured,,qwen/qwen3-32b
Java,"
   public class UserManager {
       private Map<String, User> users = new HashMap<>();

       public void addUser(User user) {
           users.put(user.getUsername(), user);
       }

       public User getUser(String username) {
           return users.get(username);
       }

       public void removeUser(String username) {
           users.remove(username);
       }

       public List<User> getAllUsers() {
           return new ArrayList<>(users.values());
       }
   }

   public class User {
       private String username;
       private String password;

       public User(String username, String password) {
           this.username = username;
           this.password = password;
       }

       public String getUsername() {
           return username;
       }

       public String getPassword() {
           return password;
       }
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String role) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String sql = ""SELECT email FROM users WHERE role = '"" + role + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,sql_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processData(const std::vector<std::string>& input, std::vector<int>& output) {
    for (const auto& str : input) {
        int val = 0;
        try {
            val = std::stoi(str);
        } catch (...) {
            // Suppress all exceptions silently
        }
        output.push_back(val);
    }
}

int main() {
    std::vector<std::string> data = {""123"", ""abc"", ""456"", ""def""};
    std::vector<int> results;
    
    processData(data, results);

    for (int num : results) {
        std::cout << num << "" "";
    }

    return 0;
}",code_defect,missing_error_handling,,qwen/qwen3-32b
Python,"class UserAuthenticator:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def authenticate(self, username, password):
        query = ""SELECT * FROM users WHERE username = '"" + username + ""' AND password = '"" + password + ""'""
        results = self.db_connection.execute(query)
        if results:
            return True
        else:
            return False",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, email: str) -> None:
        self.conn.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()

    def get_users_page(self, page: int, page_size: int = 10):
        offset = (page - 1) * page_size
        cursor = self.conn.execute('SELECT id, username, email FROM users ORDER BY id LIMIT ? OFFSET ?', (page_size, offset))
        return cursor.fetchall()

# Usage example
repo = UserRepository('example.db')
for i in range(1, 51):
    repo.add_user(f'user{i}', f'user{i}@example.com')

# Intentional defect: requesting page 0 returns the last page instead of error
users = repo.get_users_page(0)
print('Fetched users:', users)",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data, int* result) {
    for (size_t i = 0; i < data.size(); ++i) {
        result[i] = data[i] * 2;
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5};
    int output[5];

    processData(input, output);

    for (int i = 0; i < 5; ++i) {
        std::cout << output[i] << "" "";
    }

    return 0;
}",code_defect,buffer_overflow,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : logFile(file) {}
    void start() {
        for (int i = 0; i < 5; ++i) {
            workers.emplace_back(&LogProcessor::process, this);
        }
        for (auto& t : workers) t.join();
    }
private:
    std::string logFile;
    std::vector<std::thread> workers;
    std::mutex mtx;
    void process() {
        // Simulate reading lines from a file (omitted)
        for (int i = 0; i < 1000; ++i) {
            std::string entry = ""entry"" + std::to_string(i);
            // Critical section incorrectly protects only part of the operation
            std::lock_guard<std::mutex> lock(mtx);
            if (i % 2 == 0) {
                std::cout << ""Processing "" << entry << std::endl;
            }
            // Missing lock for the following shared resource access
            sharedCount++;
        }
    }
    static int sharedCount; // shared across all instances
};
int LogProcessor::sharedCount = 0;

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.start();
    std::cout << ""Total processed: "" << LogProcessor::sharedCount << std::endl;
    return 0;
}
",code_defect,data_race,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor() {
        this.orders = new ArrayList<>();
    }

    public void addOrder(Order order) {
        orders.add(order);
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.getStatus().equals(""pending"")) {
                processPendingOrder(order);
            } else if (order.getStatus().equals(""shipped"")) {
                processShippedOrder(order);
            } else if (order.getStatus().equals(""cancelled"")) {
                processCancelledOrder(order);
            }
        }
    }

    private void processPendingOrder(Order order) {
        // Do something with pending orders
    }

    private void processShippedOrder(Order order) {
        // Do something with shipped orders
    }

    private void processCancelledOrder(Order order) {
        // Do something with cancelled orders
    }
}",code_smell,type_switch_smell,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) { users.push_back(user); }

    std::vector<User> getAllUsers() { return users; }

private:
    std::vector<User> users;
};

int main() {
    UserService userService;

    User user1(""John"", 25);
    User user2(""Alice"", 30);

    userService.addUser(user1);
    userService.addUser(user2);

    std::vector<User> allUsers = userService.getAllUsers();

    for (User user : allUsers) {
        std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
    }

    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }
    void flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        for(const auto& line: logs_) {
            std::cout << line << std::endl;
        }
        logs_.clear();
    }
private:
    std::vector<std::string> logs_;
    std::mutex mtx_;
};

void worker(LogAggregator* agg, int id) {
    for(int i=0;i<5;++i) {
        agg->addLog(""Thread "" + std::to_string(id) + "" message "" + std::to_string(i));
    }
}

int main(){
    LogAggregator* aggregator = new LogAggregator();
    std::thread t1(worker, aggregator, 1);
    std::thread t2(worker, aggregator, 2);
    t1.join();
    t2.join();
    // Missing flush call leads to lost logs and memory leak
    return 0;
}
",code_defect,resource_leak_and_missing_flush,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void process_data(const std::vector<int>& data) {
    for (int value : data) {
        if (value % 2 == 0) {
            std::thread t([value]() {
                std::lock_guard<std::mutex> lock(mtx);
                std::cout << ""Processing: "" << value << std::endl;
            });
            t.detach();
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5, 6, 7, 8};
    process_data(input);

    std::this_thread::sleep_for(std::chrono::seconds(1));
    return 0;
}",code_defect,resource_leak,,qwen/qwen3-32b
JavaScript,"
   class BankAccount {
       constructor(accountNumber, balance) {
           this.accountNumber = accountNumber;
           this.balance = balance;
       }

       withdraw(amount) {
           if (amount > this.balance) {
               console.log('Insufficient funds');
           } else {
               this.balance -= amount;
           }
       }

       deposit(amount) {
           this.balance += amount;
       }

       getBalance() {
           return this.balance;
       }
   }

   let account = new BankAccount('12345', 1000);
   account.withdraw(500);
   account.deposit(200);
   console.log(account.getBalance());
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path='users.db'):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            username TEXT NOT NULL,
                            data TEXT NOT NULL)''')
        self.conn.commit()

    def load_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            # Unsafe deserialization of user-provided data
            return json.loads(row[0])
        return None

    def save_user(self, username, data):
        cursor = self.conn.cursor()
        # Directly embed JSON string without sanitization
        json_data = json.dumps(data)
        cursor.execute('INSERT INTO users (username, data) VALUES (?, ?)', (username, json_data))
        self.conn.commit()

    def delete_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage (vulnerable to injection if username is crafted maliciously)
if __name__ == '__main__':
    manager = UserManager()
    manager.save_user('admin', {'role': 'admin', 'permissions': ['*']})
    # The following line loads data and may execute malicious code if the stored JSON is tampered
    user_data = manager.load_user('admin')
    print('Loaded user data:', user_data)
",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

using namespace std;

struct User {
    string name;
    string email;
    int age;
};

class UserManager {
public:
    void add_user(const User& user) {
        users.push_back(user);
    }

    void print_users() {
        for (auto& user : users) {
            cout << ""Name: "" << user.name << "", Email: "" << user.email << "", Age: "" << user.age << endl;
        }
    }

    void send_email_to_all(const string& subject, const string& body) {
        for (auto& user : users) {
            // Simulating email sending
            cout << ""Sending email to "" << user.email << ""\nSubject: "" << subject << ""\nBody: "" << body << endl;
        }
    }

private:
    vector<User> users;
};

int main() {
    UserManager manager;
    manager.add_user({""Alice"", ""alice@example.com"", 30});
    manager.add_user({""Bob"", ""bob@example.com"", 25});
    manager.add_user({""Charlie"", ""charlie@example.com"", 40});

    manager.print_users();
    manager.send_email_to_all(""Welcome!"", ""Welcome to our service."");

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    UserManager() {
        // Load some dummy users
        users_ = {""alice"", ""bob"", ""carol""};
    }

    // Returns true if the user exists, false otherwise
    bool isUserValid(const std::string& username) const {
        return std::find(users_.begin(), users_.end(), username) != users_.end();
    }

    // Returns the index of the user, or -1 if not found
    int getUserIndex(const std::string& username) const {
        auto it = std::find(users_.begin(), users_.end(), username);
        if (it == users_.end()) return -1;
        return static_cast<int>(std::distance(users_.begin(), it));
    }

    // Removes a user by name; returns true on success
    bool removeUser(const std::string& username) {
        int idx = getUserIndex(username);
        if (idx < 0) return false;
        // BUG: off‑by‑one error – should erase at idx, not idx+1
        users_.erase(users_.begin() + idx + 1);
        return true;
    }

    void printAll() const {
        for (const auto& u : users_) {
            std::cout << u << ""\n"";
        }
    }

private:
    std::vector<std::string> users_;
};

int main() {
    UserManager um;
    um.printAll();
    std::cout << ""Removing bob...\n"";
    um.removeUser(""bob"");
    um.printAll();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserAuthentication {
    private String dbUsername = ""admin"";
    private String dbPassword = ""1234"";

    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }
        String query = ""SELECT * FROM users WHERE username = '"" + username + ""' AND password = '"" + password + ""'"";
        // Simulating database call
        if (username.equals(dbUsername) && password.equals(dbPassword)) {
            return true;
        }
        return false;
    }
}",code_defect,security_vulnerability,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
      constructor(username, password) {
         this.username = username;
         this.password = password;
      }

      authenticate(inputPassword) {
         if (inputPassword === this.password) {
            return true;
         } else {
            return false;
         }
      }
   }

   function validateUser(inputUsername, inputPassword, users) {
      for (let user of users) {
         if (user.username === inputUsername) {
            if (user.authenticate(inputPassword)) {
               return true;
            }
         }
      }
      return false;
   }

   let users = [
      new UserAccount('admin', 'password123'),
      new UserAccount('user1', 'ilovejs')
   ];

   console.log(validateUser('admin', 'password123', users));
   ",code_smell,hardcoded_secrets,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : logFile(file) {}
    void process() {
        std::vector<std::string> lines = readLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off‑by‑one bug
            if (lines[i].find(""ERROR"") != std::string::npos) {
                std::lock_guard<std::mutex> lock(mtx);
                errorCount++;
            }
        }
    }
    int getErrorCount() const { return errorCount; }
private:
    std::vector<std::string> readLines() {
        // dummy implementation
        return {""INFO start"", ""ERROR failed"", ""INFO end""};
    }
    std::string logFile;
    int errorCount = 0;
    std::mutex mtx;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    std::thread t1([&lp](){ lp.process(); });
    std::thread t2([&lp](){ lp.process(); });
    t1.join();
    t2.join();
    std::cout << ""Total errors: "" << lp.getErrorCount() << std::endl;
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import re

def extract_email_from_string(data):
    match = re.search(r'([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+)', data)
    if match:
        return match.group(1)
    else:
        return None

def validate_user_input(input_str):
    email = extract_email_from_string(input_str)
    if email:
        if len(email) > 255:
            return False
        if not re.match(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$', email):
            return False
        return True
    return False

def process_user_submission(submission):
    if not validate_user_input(submission):
        print(""Invalid email format or length."")
        return
    print(""Valid email found."")

if __name__ == ""__main__"":
    user_input = input(""Enter your submission: "")
    process_user_submission(user_input)",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger LOGGER = LoggerFactory.getLogger(UserService.class); public void saveUser(User user) { try { Thread.sleep(100); } catch (InterruptedException e) { LOGGER.error(""Error saving user"", e); } user.setId(UUID.randomUUID()); UserRepository repository = new UserRepository(); repository.save(user); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user profile and writes a log file
  async getUserProfile(userId) {
    const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
    if (!user) {
      throw new Error('User not found');
    }
    // Log the access (potential race condition if multiple calls happen concurrently)
    const logEntry = `${new Date().toISOString()} - Accessed user ${userId}\n`;
    fs.appendFile('access.log', logEntry, (err) => {
      if (err) {
        console.error('Failed to write log');
      }
    });
    return user;
  }

  // Deletes a user without proper authorization check (security defect)
  async deleteUser(userId, isAdmin) {
    if (isAdmin = true) { // BUG: assignment instead of comparison, always true
      await this.db.execute('DELETE FROM users WHERE id = ?', [userId]);
      return true;
    }
    return false;
  }
}

module.exports = UserService;",code_defect,logic_error_assignment_in_conditional,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(String userId, String productId, int quantity) {
        if (userId == null || productId == null) {
            return;
        }

        if (quantity <= 0) {
            return;
        }

        // Temporarily hardcoding inventory limit for demo
        int maxInventory = 100;
        if (quantity > maxInventory) {
            quantity = maxInventory;
        }

        // Simulate database call
        boolean isUserValid = validateUser(userId);
        boolean isProductAvailable = checkProductAvailability(productId, quantity);

        if (isUserValid && isProductAvailable) {
            System.out.println(""Order processed successfully for user "" + userId);
            deductProductStock(productId, quantity);
            sendConfirmationEmail(userId);
        }
    }

    private boolean validateUser(String userId) {
        // Simulated logic
        return true;
    }

    private boolean checkProductAvailability(String productId, int quantity) {
        // Simulated logic
        return true;
    }

    private void deductProductStock(String productId, int quantity) {
        // Simulated logic
    }

    private void sendConfirmationEmail(String userId) {
        // Simulated logic
    }
}",code_smell,hardcoded_values,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogManager {
public:
    void log(const std::string& level, const std::string& message) {
        std::lock_guard<std::mutex> lock(mutex_);
        logs_.push_back(level + "": "" + message);
    }

    void flush() {
        std::lock_guard<std::mutex> lock(mutex_);
        for (const auto& entry : logs_) {
            std::cout << entry << std::endl;
        }
        logs_.clear();
    }
private:
    std::vector<std::string> logs_;
    std::mutex mutex_;
};

// Global logger (shared across threads)
LogManager g_logger;

void processData(const std::vector<int>& data) {
    // Intentional defect: using a reference to a local temporary vector
    std::vector<int> temp = data; // copy
    for (size_t i = 0; i <= temp.size(); ++i) { // off‑by‑one error, may read past end
        int value = temp[i]; // undefined behavior when i == temp.size()
        if (value % 2 == 0) {
            g_logger.log(""INFO"", ""Even number: "" + std::to_string(value));
        } else {
            g_logger.log(""DEBUG"", ""Odd number: "" + std::to_string(value));
        }
    }
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::thread t1(processData, std::cref(numbers));
    std::thread t2(processData, std::cref(numbers));
    t1.join();
    t2.join();
    g_logger.flush();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users || [];
  }

  addUser(user) {
    this.users.push(user);
  }

  getUsersByRole(role) {
    const filteredUsers = [];
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].role === role) {
        filteredUsers.push(this.users[i]);
      }
    }
    return filteredUsers;
  }

  removeUser(id) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        this.users.splice(i, 1);
        return;
      }
    }
  }

  updateUser(id, updatedData) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        Object.keys(updatedData).forEach(key => {
          this.users[i][key] = updatedData[key];
        });
        return;
      }
    }
  }
}

const userManager = new UserManager();
userManager.addUser({ id: 1, name: 'Alice', role: 'admin' });
userManager.addUser({ id: 2, name: 'Bob', role: 'user' });",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class BankAccount {
public:
   BankAccount(double balance) : balance_(balance) {}

   double getBalance() const {
      return balance_;
   }

   void deposit(double amount) {
      balance_ += amount;
   }

   void withdraw(double amount) {
      if (amount > balance_) {
         balance_ = 0;
      } else {
         balance_ -= amount;
      }
   }

private:
   double balance_;
};

int main() {
   BankAccount account(1000.0);
   account.withdraw(1500.0);
   std::cout << account.getBalance() << std::endl;
   return 0;
}
",code_defect,incorrect_conditional_logic,,llama-3.3-70b-versatile
Python,"import os
import json
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cur = self.conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        data TEXT NOT NULL)''')
        self.conn.commit()

    def add_user(self, username, data):
        cur = self.conn.cursor()
        # Directly storing user-provided JSON string without validation
        cur.execute('INSERT INTO users (username, data) VALUES (?, ?)', (username, json.dumps(data)))
        self.conn.commit()

    def get_user_data(self, username):
        cur = self.conn.cursor()
        cur.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cur.fetchone()
        if row:
            # Unsafe deserialization of JSON data
            return json.loads(row[0])
        return None

    def delete_user(self, username):
        cur = self.conn.cursor()
        cur.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage
if __name__ == '__main__':
    manager = UserManager('users.db')
    # Insecure: passing raw input that could contain malicious JSON
    manager.add_user('alice', {'role': 'admin', 'prefs': os.getenv('USER_PREFS')})
    data = manager.get_user_data('alice')
    print('User data:', data)
",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Python,"import os
import sqlite3

class UserManager:
    def __init__(self, db_path='users.db'):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self.cursor = self.conn.cursor()
        self._create_table()

    def _create_table(self):
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS users 
                             (id INTEGER PRIMARY KEY, 
                             username TEXT NOT NULL, 
                             password TEXT NOT NULL)''')
        self.conn.commit()

    def add_user(self, username, password):
        self.cursor.execute(f""INSERT INTO users 
                             (username, password) 
                             VALUES 
                             ('{username}', '{password}')"")
        self.conn.commit()

    def get_user(self, username):
        self.cursor.execute(f""SELECT * FROM users 
                             WHERE username = '{username}'"")
        return self.cursor.fetchone()

    def close(self):
        self.conn.close()

if __name__ == '__main__':
    manager = UserManager()
    manager.add_user('alice', 'password123')
    print(manager.get_user('alice'))
    manager.close()",code_defect,security_vulnerability,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <string>
   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       void printInfo() {
           std::cout << ""Name: "" << name << std::endl;
           std::cout << ""Age: "" << age << std::endl;
       }
   private:
       std::string name;
       int age;
   };
   int main() {
       User user(""John"", 30);
       user.printInfo();
       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogManager {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        buffer_.push_back(msg);
        // Flush when buffer reaches 10 entries
        if (buffer_.size() >= 10) {
            flush();
        }
    }

private:
    void flush() {
        for (const auto& line : buffer_) {
            std::cout << line << std::endl;
        }
        buffer_.clear();
    }
    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

// Global logger instance (shared across threads)
static LogManager g_logger;

void processData(int id) {
    for (int i = 0; i <= 100; ++i) { // off‑by‑one: should be i < 100
        g_logger.log(""Thread "" + std::to_string(id) + "" processing "" + std::to_string(i));
    }
}

int main() {
    std::vector<std::thread> workers;
    for (int i = 0; i < 5; ++i) {
        workers.emplace_back(processData, i);
    }
    for (auto& t : workers) {
        t.join();
    }
    // Potential loss of remaining log entries if buffer not flushed
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null || order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getProduct() != null && item.getQuantity() > 0) {
                try {
                    Product product = item.getProduct();
                    if (product.isInStock()) {
                        product.reduceStock(item.getQuantity());
                        System.out.println(""Processed item: "" + item.getName());
                    } else {
                        System.out.println(""Product out of stock: "" + item.getName());
                    }
                } catch (Exception e) {
                    System.err.println(""Error processing item: "" + e.getMessage());
                }
            }
        }
    }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"
   class UserManager {
   public:
       void addUser(const std::string& username, const std::string& password) {
           for (const auto& user : users_) {
               if (user.username == username) {
                   throw std::runtime_error(""User already exists"");
               }
           }
           users_.emplace_back(username, password);
       }

       void removeUser(const std::string& username) {
           for (auto it = users_.begin(); it != users_.end(); ++it) {
               if (it->username == username) {
                   users_.erase(it);
                   return;
               }
           }
           throw std::runtime_error(""User not found"");
       }

   private:
       struct User {
           std::string username;
           std::string password;
       };

       std::vector<User> users_;
   };

   int main() {
       UserManager manager;
       manager.addUser(""user1"", ""password1"");
       manager.addUser(""user2"", ""password2"");
       manager.removeUser(""user1"");
       return 0;
   }
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        if (this.cache) return this.cache;
        const data = fs.readFileSync(this.path, 'utf8');
        // JSON.parse can throw, but not caught -> defect: unhandled exception
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function processUserInput(input) {
    // Assume input is a JSON string from an untrusted source
    const obj = JSON.parse(input); // defect: unsafe deserialization, can lead to prototype pollution
    if (obj && obj.command) {
        executeCommand(obj.command);
    }
}

function executeCommand(cmd) {
    // Very naive command execution, defect: command injection
    const exec = require('child_process').exec;
    exec(cmd, (error, stdout, stderr) => {
        if (error) {
            console.error('Execution error:', error);
            return;
        }
        console.log('Result:', stdout);
    });
}

module.exports = { ConfigLoader, processUserInput, executeCommand };",code_defect,unsafe_deserialization_and_command_injection,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrders(orders) {
    const results = [];
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      let total = 0;
      for (let j = 0; j < order.items.length; j++) {
        const item = order.items[j];
        total += item.price * item.quantity;
      }
      results.push({
        orderId: order.id,
        totalAmount: total
      });
    }
    return results;
  }
}

// Unused function
function calculateTax(amount) {
  return amount * 0.1;
}

// Legacy code (commented out)
// function oldProcessOrders(orders) {
//   // ... 
// }",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class UserDAO { private Connection connection; public UserDAO() { try { Class.forName(""com.mysql.cj.jdbc.Driver""); connection = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""root"", ""password""); } catch (Exception e) { System.out.println(e.getMessage()); } } public User getUser(int id) { User user = new User(); try { Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(""SELECT * FROM users WHERE id = "" + id); while (resultSet.next()) { user.setId(resultSet.getInt(""id"")); user.setName(resultSet.getString(""name"")); } } catch (Exception e) { System.out.println(e.getMessage()); } return user; }}",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(configPath) {
        this.configPath = configPath;
        this.cache = null;
    }

    loadConfig() {
        // Missing error handling: if file is missing or malformed, JSON.parse will throw
        const raw = fs.readFileSync(this.configPath, 'utf8');
        this.cache = JSON.parse(raw);
        return this.cache;
    }

    get(key) {
        if (!this.cache) {
            this.loadConfig();
        }
        // Bug: returns undefined for falsy values like 0 or ''
        return this.cache[key] || null;
    }
}

// Usage example (in production code)
const config = new ConfigLoader('/etc/app/config.json');
const maxRetries = config.get('maxRetries'); // If maxRetries is 0, returns null instead of 0

module.exports = ConfigLoader;",code_defect,incorrect_falsy_handling,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processData(std::vector<std::string>& data, int id, bool flag, std::string& result) {
    result.clear();
    for (const auto& item : data) {
        if (id > 0) {
            if (flag) {
                result += item + ""_"" + std::to_string(id) + ""|"";
            } else {
                result += item + "":"" + std::to_string(id) + ""|"";
            }
        } else {
            if (flag) {
                result += item + ""_0|"";
            } else {
                result += item + "":0|"";
            }
        }
    }

    if (!result.empty()) {
        result.pop_back(); // Remove the trailing ""|""
    }
}

int main() {
    std::vector<std::string> input = {""A"", ""B"", ""C""};
    std::string output;
    int identifier = 5;
    bool toggle = false;

    processData(input, identifier, toggle, output);

    std::cout << ""Processed Data: "" << output << std::endl;

    return 0;
}",code_smell,long_function,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void setName(std::string newName) { name = newName; }
    void setAge(int newAge) { age = newAge; }

private:
    std::string name;
    int age;
};

class UserService {
public:
    void saveUser(User user) {
        users.push_back(user);
    }

    User getUserByName(std::string name) {
        for (User user : users) {
            if (user.getName() == name) {
                return user;
            }
        }
        // return a default user if not found
        return User(""default"", 0);
    }

private:
    std::vector<User> users;
};

int main() {
    UserService userService;
    User user(""John"", 30);
    userService.saveUser(user);

    User retrievedUser = userService.getUserByName(""John"");
    std::cout << retrievedUser.getName() << std::endl;
    std::cout << retrievedUser.getAge() << std::endl;

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <algorithm>
#include <iostream>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    // Returns the user at the given index, but has an off‑by‑one error
    std::string getUser(int index) const {
        if (index < 0 || index > users.size()) {
            throw std::out_of_range(""Index out of bounds"");
        }
        return users[index];
    }

    // Finds a user by name, returns -1 if not found
    int findUser(const std::string& name) const {
        for (size_t i = 0; i < users.size(); ++i) {
            if (users[i] == name) return static_cast<int>(i);
        }
        return -1;
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    try {
        std::cout << um.getUser(2) << std::endl; // off‑by‑one leads to exception
    } catch (const std::exception& e) {
        std::cerr << ""Error: "" << e.what() << std::endl;
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor() {
    this.cache = {};
  }

  getUserData(userId) {
    if (this.cache[userId]) {
      return this.cache[userId];
    }

    const user = fetchUserFromDB(userId);
    this.cache[userId] = user;

    return user;
  }

  fetchUserFromDB(userId) {
    // Simulate a database call
    return {
      id: userId,
      name: `User${userId}`,
      email: `user${userId}@example.com`,
      lastLogin: new Date(Date.now() - Math.random() * 1000 * 60 * 60 * 24 * 30)
    };
  }

  getUserEmails(users) {
    const emails = [];
    for (let i = 0; i < users.length; i++) {
      const user = users[i];
      if (user && user.email) {
        emails.push(user.email);
      }
    }
    return emails;
  }
}

function fetchUserFromDB(userId) {
  // Simulate a database call
  return {
    id: userId,
    name: `User${userId}`,
    email: `user${userId}@example.com`,
    lastLogin: new Date(Date.now() - Math.random() * 1000 * 60 * 60 * 24 * 30)
  };
}",code_smell,duplicated_code,,qwen/qwen3-32b
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String domain) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // SQL injection vulnerability: directly concatenating user input
            String query = ""SELECT email FROM users WHERE email LIKE '"" + ""%@"" + domain + ""'"";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        } catch (Exception e) {
            // Swallowing exception, no logging
        } finally {
            try { if (rs != null) rs.close(); } catch (Exception ignored) {}
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Python,"import os
import requests

class DataFetcher:
    def __init__(self):
        self.base_url = 'https://api.example.com/data'
        self.api_key = '1234567890'

    def fetch_data(self, user_id, limit=20, offset=0):
        headers = {
            'Authorization': f'Bearer {self.api_key}'
        }
        params = {
            'user_id': user_id,
            'limit': limit,
            'offset': offset
        }
        response = requests.get(self.base_url, headers=headers, params=params)
        if response.status_code == 200:
            return response.json()
        else:
            return []

    def process_data(self, data):
        results = []
        for item in data:
            if item['type'] == 'A':
                results.append(item['value'] * 2)
            elif item['type'] == 'B':
                results.append(item['value'] + 5)
            else:
                results.append(0)
        return results

    def run(self, user_id):
        raw_data = self.fetch_data(user_id)
        return self.process_data(raw_data)",code_smell,hardcoded_secrets,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public synchronized User getUser(String username) { if (users.containsKey(username)) { return users.get(username); } else { User user = new User(username); users.put(username, user); return user; } } public synchronized void updateUser(String username, String newPassword) { if (users.containsKey(username)) { User user = users.get(username); user.setPassword(newPassword); } } } class User { private String username; private String password; public User(String username) { this.username = username; } public void setPassword(String password) { this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } }",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3
from datetime import datetime

class UserManager:
    def __init__(self, db_path='users.db'):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cur = self.conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        password_hash TEXT NOT NULL,
                        created_at TEXT NOT NULL)''')
        self.conn.commit()

    def create_user(self, username, password):
        # NOTE: In real code we would hash the password properly
        password_hash = password  # insecure: storing plaintext
        cur = self.conn.cursor()
        cur.execute('INSERT INTO users (username, password_hash, created_at) VALUES (?, ?, ?)',
                    (username, password_hash, datetime.utcnow().isoformat()))
        self.conn.commit()
        return cur.lastrowid

    def authenticate(self, username, password):
        cur = self.conn.cursor()
        cur.execute('SELECT password_hash FROM users WHERE username = ?', (username,))
        row = cur.fetchone()
        if row:
            stored_hash = row[0]
            # BUG: uses 'is' for string comparison, may fail
            if stored_hash is password:
                return True
        return False

    def export_user_data(self, export_path):
        cur = self.conn.cursor()
        cur.execute('SELECT id, username, created_at FROM users')
        users = cur.fetchall()
        # Potential security issue: writing to arbitrary path without validation
        with open(export_path, 'w') as f:
            json.dump([{'id': u[0], 'username': u[1], 'created_at': u[2]} for u in users], f)

# Example usage (would be in a different module)
if __name__ == '__main__':
    manager = UserManager()
    uid = manager.create_user('alice', 's3cr3t')
    print('Created user with ID:', uid)
    auth = manager.authenticate('alice', 's3cr3t')
    print('Authentication success:', auth)
    manager.export_user_data('/tmp/users_export.json')
",code_defect,incorrect_string_comparison_using_is,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

struct Data {
    int id;
    std::string name;
    double value;
};

void processData(const std::vector<Data>& data) {
    std::vector<Data> sortedData = data;
    std::sort(sortedData.begin(), sortedData.end(), [](const Data& a, const Data& b) {
        return a.value < b.value;
    });

    for (const auto& item : sortedData) {
        std::cout << ""ID: "" << item.id << "", Name: "" << item.name << "", Value: "" << item.value << std::endl;
    }
}

int main() {
    std::vector<Data> entries = {
        {1, ""Alpha"", 42.5},
        {2, ""Beta"", 17.8},
        {3, ""Gamma"", 99.0}
    };

    processData(entries);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class PaymentProcessor { public void processPayment(String paymentMethod, double amount) { if (paymentMethod.equals(""credit_card"")) { // simulate credit card processing delay Thread.sleep(1000); System.out.println(""Payment processed successfully""); } else if (paymentMethod.equals(""paypal"")) { System.out.println(""Payment processed successfully""); } } public static void main(String[] args) { PaymentProcessor processor = new PaymentProcessor(); processor.processPayment(""credit_card"", 100.0); } }",code_smell,magic_string,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String domain) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT email FROM users WHERE email LIKE '"" + ""%@"" + domain + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,sql_injection_vulnerability,,openai/gpt-oss-120b
Python,"import os
import requests

class DataProcessor:
    def __init__(self, base_url='https://api.example.com'):
        self.base_url = base_url
        self.api_key = 'secret_key_12345'  # hardcoded secret

    def fetch_and_process_data(self, user_id, limit=100):
        headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json'
        }
        response = requests.get(f'{self.base_url}/data/{user_id}', headers=headers)
        
        if response.status_code != 200:
            print('Failed to fetch data')
            return

        data = response.json()
        processed = self._process_raw_data(data)
        return processed

    def _process_raw_data(self, data):
        results = []
        for item in data:
            if item['type'] == 'A':
                results.append(item['value'] * 2)
            elif item['type'] == 'B':
                results.append(item['value'] / 0)  # intentional division by zero for defect
            else:
                results.append(0)
        return results",code_defect,division_by_zero,,qwen/qwen3-32b
JavaScript,"const fs = require('fs');
const path = require('path');

class ConfigLoader {
    constructor(configDir) {
        this.configDir = configDir;
        this.cache = {};
    }

    // Loads a JSON config file and caches it
    loadConfig(name) {
        const filePath = path.join(this.configDir, `${name}.json`);
        // Asynchronously read file but forget to await, returning undefined
        const dataPromise = fs.promises.readFile(filePath, 'utf8');
        const data = JSON.parse(dataPromise); // <-- bug: parsing a Promise instead of string
        this.cache[name] = data;
        return data;
    }

    getConfig(name) {
        if (this.cache[name]) {
            return this.cache[name];
        }
        return this.loadConfig(name);
    }
}

// Usage example
const loader = new ConfigLoader('./config');
const appConfig = loader.getConfig('app');
console.log('App config loaded:', appConfig);",code_defect,incorrect_async_handling,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor() {
    this.orderQueue = [];
  }

  addOrder(order) {
    this.orderQueue.push(order);
  }

  processOrders() {
    for (let i = 0; i < this.orderQueue.length; i++) {
      const order = this.orderQueue[i];
      if (order.status === 'pending') {
        this.processOrder(order);
      }
    }
  }

  processOrder(order) {
    console.log(`Processing order: ${order.id}`);
    if (order.items.length > 0) {
      for (let j = 0; j < order.items.length; j++) {
        console.log(`Item ${j + 1} processed for order ${order.id}`);
      }
      order.status = 'processed';
    } else {
      console.log(`No items found in order ${order.id}`);
    }
  }

  clearOrders() {
    this.orderQueue = [];
  }
}

// Usage
const processor = new OrderProcessor();
processor.addOrder({ id: 1, status: 'pending', items: [1, 2, 3] });
processor.addOrder({ id: 2, status: 'completed', items: [] });
processor.processOrders();",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string name, int age) : name(name), age(age) {}

    bool operator<(const User& other) const {
        return age < other.age;
    }
};

class UserService {
public:
    std::vector<User> users;

    void addUser(User user) {
        users.push_back(user);
    }

    void sortUsers() {
        std::sort(users.begin(), users.end());
    }

    User* getUserByName(std::string name) {
        for (auto& user : users) {
            if (user.name == name) {
                return &user;
            }
        }
        return nullptr;
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 25));
    service.addUser(User(""Alice"", 30));
    service.sortUsers();
    User* user = service.getUserByName(""John"");
    if (user != nullptr) {
        std::cout << user->name << std::endl;
    }
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.path = configPath;
    this.cache = null;
  }

  // Loads config file and evaluates its contents (dangerous!)
  loadConfig() {
    if (this.cache) return this.cache;
    const raw = fs.readFileSync(this.path, 'utf8');
    // The config file is expected to export a plain object, but we use eval which executes any code.
    const config = eval(`(${raw})`);
    this.cache = config;
    return config;
  }
}

async function processUserRequest(req, res) {
  const loader = new ConfigLoader('./config.js');
  const cfg = loader.loadConfig();

  // Assume user sends a JSON payload with a ""command"" field that will be executed.
  const userCommand = req.body.command;
  // Directly evaluating user-provided command leads to code injection.
  const result = eval(userCommand);

  res.json({ status: 'ok', result });
}

module.exports = { processUserRequest, ConfigLoader };",code_defect,code_injection_via_eval,,openai/gpt-oss-120b
Python,"import os
import requests

def fetch_user_data(user_id):
    base_url = 'https://api.example.com/users/'
    response = requests.get(base_url + str(user_id))
    if response.status_code == 200:
        return response.json()
    else:
        return None

def update_user_profile(user_data):
    # Update logic
    print(f'Updating user profile for {user_data.get(""username"")}...')
    # Simulate a DB update
    db_path = os.path.expanduser(""~/.userdb"")
    with open(db_path, 'w') as f:
        f.write(str(user_data))

    print('Profile updated successfully.')

def main():
    user_id = input(""Enter user ID: "")
    user_data = fetch_user_data(user_id)
    if user_data:
        update_user_profile(user_data)
    else:
        print('Failed to fetch user data.')

if __name__ == ""__main__"":
    main()",code_defect,missing_input_validation,,qwen/qwen3-32b
Java,"public class UserManager { private static final Map<String, User> users = new HashMap<>(); public void addUser(User user) { users.put(user.getUsername(), user); } public User getUser(String username) { return users.get(username); } public void updateUser(User user) { users.put(user.getUsername(), user); } public void deleteUser(String username) { users.remove(username); } }",code_smell,God class,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<Payment> fetchPendingPayments() throws SQLException {
        List<Payment> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id, amount, recipient FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Payment p = new Payment();
            p.setId(rs.getInt(""id""));
            p.setAmount(rs.getDouble(""amount""));
            p.setRecipient(rs.getString(""recipient""));
            payments.add(p);
        }
        // Missing close of ResultSet, Statement, and Connection -> resource leak
        return payments;
    }

    public boolean processPayment(Payment payment) {
        // Simulate external API call that may throw unchecked exception
        ExternalPaymentGateway.charge(payment.getRecipient(), payment.getAmount());
        // Update status without transaction safety
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String updateSql = ""UPDATE payments SET status='COMPLETED' WHERE id="" + payment.getId(); // SQL injection risk
            PreparedStatement updateStmt = conn.prepareStatement(updateSql);
            int rows = updateStmt.executeUpdate();
            return rows == 1;
        } catch (SQLException e) {
            // Swallow exception, no logging
            return false;
        }
    }

    public void runBatchProcessing() {
        try {
            List<Payment> pending = fetchPendingPayments();
            for (Payment p : pending) {
                boolean success = processPayment(p);
                if (!success) {
                    // Retry logic missing, just continue
                    continue;
                }
            }
        } catch (SQLException e) {
            // Ignored
        }
    }
}

class Payment {
    private int id;
    private double amount;
    private String recipient;
    // getters and setters omitted for brevity
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getRecipient() { return recipient; }
    public void setRecipient(String recipient) { this.recipient = recipient; }
}

class ExternalPaymentGateway {
    public static void charge(String account, double amount) {
        // Simulated external call; may throw RuntimeException
        if (account == null) {
            throw new IllegalArgumentException(""Account cannot be null"");
        }
        // Payment processing logic...
    }
}",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.users = [];
  }

  registerUser(username, password) {
    if (!username || !password) {
      return 'Missing username or password';
    }

    if (this.users.find(user => user.username === username)) {
      return 'Username already exists';
    }

    this.users.push({
      username,
      password: this.hashPassword(password),
      role: 'user'
    });
    return 'User registered successfully';
  }

  hashPassword(password) {
    return password; // Intentional defect: password not hashed
  }

  authenticateUser(username, password) {
    const user = this.users.find(user => user.username === username);
    if (!user) {
      return 'User not found';
    }

    if (user.password !== password) {
      return 'Invalid password';
    }

    return 'Authentication successful';
  }
}

const auth = new UserAuth();
auth.registerUser('alice', '1234');
console.log(auth.authenticateUser('alice', '12345'));",code_defect,insecure_authentication,,qwen/qwen3-32b
JavaScript,"
   class UserProcessor {
       constructor(users) {
           this.users = users;
       }

       processUsers() {
           let result = [];
           for (let i = 0; i < this.users.length; i++) {
               let user = this.users[i];
               user.processed = true;
               result.push(user);
           }
           return result;
       }
   }

   let users = [
       { id: 1, name: 'John Doe' },
       { id: 2, name: 'Jane Doe' },
       { id: 3, name: 'Bob Smith' }
   ];

   let processor = new UserProcessor(users);
   let processedUsers = processor.processUsers();
   console.log(processedUsers);
   ",code_smell,mutable_state,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.configPath = configPath;
    this.cache = null;
  }

  // Loads config from file, but caches result for future calls
  load() {
    if (this.cache) {
      return this.cache;
    }
    const data = fs.readFileSync(this.configPath, 'utf8');
    // BUG: JSON.parse can throw, but no try/catch -> uncaught exception crashes process
    this.cache = JSON.parse(data);
    return this.cache;
  }

  // Refreshes cache by re-reading the file
  refresh() {
    // BUG: Missing assignment to this.cache, so stale data remains
    const data = fs.readFileSync(this.configPath, 'utf8');
    JSON.parse(data);
  }
}

// Usage example
const loader = new ConfigLoader('/etc/app/config.json');
const config = loader.load();
console.log('Config loaded:', config);
loader.refresh(); // Supposed to reload config, but actually does nothing useful
",code_defect,uncaught_exception_and_stale_cache,,openai/gpt-oss-120b
Python,"import os
import requests

API_KEY = '123456789'


def fetch_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    headers = {'Authorization': f'Bearer {API_KEY}'}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        return None


def process_user_data(user_data):
    if user_data is None:
        return
    name = user_data.get('name', '')
    email = user_data.get('email', '')
    print(f'User Name: {name}, Email: {email}')


def main():
    user_id = input('Enter user ID: ')
    data = fetch_user_data(user_id)
    process_user_data(data)


if __name__ == '__main__':
    main()",code_defect,security_issue,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        query = ""SELECT * FROM users""
        cursor.execute(query)
        users_data = cursor.fetchall()
        return users_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        query = ""UPDATE users SET name = '"" + new_data['name'] + ""' WHERE id = "" + str(user_id)
        cursor.execute(query)
        self.db_connection.commit()

# usage
import sqlite3
db_connection = sqlite3.connect('users.db')
user_service = UserService(db_connection)
user = user_service.get_user(1)
print(user)
",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class LogProcessor {
public:
    LogProcessor(const std::string& filePath) : path(filePath) {}

    // Loads the last N lines from the log file into memory
    std::vector<std::string> loadRecentLines(size_t lineCount) {
        std::vector<std::string> lines;
        std::ifstream file(path);
        if (!file.is_open()) {
            std::cerr << ""Failed to open log file: "" << path << std::endl;
            return lines;
        }
        std::string line;
        while (std::getline(file, line)) {
            lines.push_back(line);
        }
        // BUG: off‑by‑one error – should take the last 'lineCount' lines, but takes one extra when lineCount == lines.size()
        if (lines.size() > lineCount) {
            lines.erase(lines.begin(), lines.begin() + (lines.size() - lineCount - 1));
        }
        return lines;
    }

    // Filters lines containing the given keyword (case‑sensitive)
    std::vector<std::string> filterByKeyword(const std::vector<std::string>& input, const std::string& keyword) {
        std::vector<std::string> result;
        for (const auto& l : input) {
            if (l.find(keyword) != std::string::npos) {
                result.push_back(l);
            }
        }
        return result;
    }

private:
    std::string path;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    auto recent = lp.loadRecentLines(100);
    auto errors = lp.filterByKeyword(recent, ""ERROR"");
    for (const auto& e : errors) {
        std::cout << e << std::endl;
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this._users = [];
  }

  registerUser(username, password) {
    const user = {
      username: username,
      password: password,
      token: this._generateToken()
    };

    this._users.push(user);
    return user.token;
  }

  authenticateUser(username, password) {
    const user = this._users.find(u => u.username === username);

    if (!user) {
      return false;
    }

    if (user.password === password) {
      return user.token;
    }

    return false;
  }

  _generateToken() {
    const randomStr = Math.random().toString(36).substring(2, 15);
    return 'token_' + randomStr;
  }

  resetPassword(username, oldPassword, newPassword) {
    const user = this._users.find(u => u.username === username);

    if (!user) {
      return false;
    }

    if (user.password === oldPassword) {
      user.password = newPassword;
      return true;
    }

    return false;
  }
}",code_defect,insecure_authentication,,qwen/qwen3-32b
Java,"public class UserValidator { private static final String PASSWORD_PATTERN = ""^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{8,20}$""; public boolean validatePassword(String password) { if (password.matches(PASSWORD_PATTERN)) { return true; } else { return false; } } public boolean validateUsername(String username) { return username.length() > 3; } }",code_smell,inefficient_boolean_return,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Reads config file synchronously each time; caches result but never updates cache after first read
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    const config = this.load();
    return config[key];
  }
}

function processData(input) {
  // Expects input as an array of numbers
  let sum = 0;
  for (let i = 0; i <= input.length; i++) { // off-by-one error: accesses input[input.length]
    sum += input[i];
  }
  return sum / input.length;
}

function main() {
  const loader = new ConfigLoader('./config.json');
  const threshold = loader.get('threshold'); // may be undefined if config missing
  const data = [1, 2, 3, 4, 5];
  const avg = processData(data);
  if (avg > threshold) {
    console.log('Average exceeds threshold');
  } else {
    console.log('Average is within limits');
  }
}

main();",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

struct User {
    std::string name;
    int age;
    std::string email;
};

bool validateUser(const User& user) {
    if (user.name.empty()) {
        return false;
    }

    if (user.age <= 0) {
        return false;
    }

    if (user.email.find('@') == std::string::npos) {
        return false;
    }

    return true;
}

void processUsers(const std::vector<User>& users) {
    for (const auto& user : users) {
        if (!validateUser(user)) {
            std::cerr << ""Invalid user: "" << user.name << std::endl;
        } else {
            std::cout << ""Valid user: "" << user.name << std::endl;
        }
    }
}

int main() {
    std::vector<User> users = {
        {""Alice"", 25, ""alice@example.com""},
        {""Bob"", -3, ""bob@example.org""},
        {"""", 30, ""carol@example.com""},
        {""Dave"", 20, ""daveexample.com""}
    };

    processUsers(users);
    return 0;
}",code_defect,invalid_input_handling,,qwen/qwen3-32b
Java,public class UserManager { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUserByName(String name) { for (User user : users) { if (user.getName().equals(name)) { return user; } } return null; } public void removeUserByName(String name) { for (int i = 0; i < users.size(); i++) { if (users.get(i).getName().equals(name)) { users.remove(i); break; } } } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class TransactionProcessor {
    private String dbUrl = ""jdbc:mysql://localhost:3306/payments"";
    private String dbUser = ""admin"";
    private String dbPassword = ""P@ssw0rd""; // hardcoded secret

    public List<Transaction> fetchPendingTransactions() {
        List<Transaction> list = new ArrayList<>();
        try {
            Connection conn = DriverManager.getConnection(dbUrl, dbUser, dbPassword);
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(""SELECT id, amount, status FROM transactions WHERE status='PENDING'"");
            while (rs.next()) {
                Transaction t = new Transaction();
                t.setId(rs.getInt(""id""));
                t.setAmount(rs.getDouble(""amount""));
                t.setStatus(rs.getString(""status""));
                list.add(t);
            }
            // Missing conn.close(); leads to resource leak
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    public void processTransactions() {
        List<Transaction> pending = fetchPendingTransactions();
        for (Transaction tx : pending) {
            // Incorrectly using integer division, may lose cents
            int fee = (int) (tx.getAmount() * 0.025);
            double total = tx.getAmount() - fee;
            if (total > 0) {
                // Simulate update without transaction safety
                updateTransactionStatus(tx.getId(), ""COMPLETED"");
            }
        }
    }

    private void updateTransactionStatus(int id, String newStatus) {
        try {
            Connection conn = DriverManager.getConnection(dbUrl, dbUser, dbPassword);
            Statement stmt = conn.createStatement();
            // SQL injection risk: newStatus is not sanitized
            stmt.executeUpdate(""UPDATE transactions SET status='"" + newStatus + ""' WHERE id="" + id);
            conn.close();
        } catch (Exception e) {
            // Swallowing exception silently
        }
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,hardcoded_secret_and_sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processVector(std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        data[i] *= 2;
    }

    for (size_t i = 0; i < data.size(); ++i) {
        std::cout << data[i] << "" "";
    }
    std::cout << std::endl;
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    processVector(numbers);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password):
        self.username = username
        self.password = password
        self.login_attempts = 0
    
    def login(self, password):
        if password == self.password:
            self.login_attempts = 0
            return True
        else:
            self.login_attempts += 1
            if self.login_attempts >= 5:
                # do nothing
                pass
            return False",code_smell,unused_code,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class LogProcessor {
    constructor(logFilePath) {
        this.logFilePath = logFilePath;
        this.buffer = '';
    }

    // Reads the entire log file synchronously and processes each line
    processLogs() {
        const data = fs.readFileSync(this.logFilePath, 'utf8');
        const lines = data.split('\n');
        for (let i = 0; i <= lines.length; i++) { // off‑by‑one error: should be i < lines.length
            const line = lines[i];
            if (line.trim() === '') continue;
            this._handleLine(line);
        }
    }

    _handleLine(line) {
        // Expected format: ""[LEVEL] message""
        const match = line.match(/^\[(INFO|WARN|ERROR)\]\s+(.*)$/);
        if (!match) return; // silently ignore malformed lines
        const [, level, message] = match;
        this.buffer += `${level}: ${message}\n`;
    }

    // Writes the processed buffer to a new file asynchronously
    writeOutput(outputPath) {
        fs.writeFile(outputPath, this.buffer, err => {
            if (err) console.error('Failed to write output:', err);
        });
    }
}

// Usage example (path may be user‑controlled)
const processor = new LogProcessor('/var/log/app.log');
processor.processLogs();
processor.writeOutput('/tmp/processed.log');
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order, String customerEmail, boolean isPriority) {
        if (order != null) {
            if (order.getItems().isEmpty()) {
                System.out.println(""Order is empty."");
                return;
            }
            double total = 0;
            for (OrderItem item : order.getItems()) {
                total += item.getPrice() * item.getQuantity();
            }
            if (total > 0) {
                String formattedTotal = String.format(""%.2f"", total);
                System.out.println(""Processing order for "" + customerEmail);
                System.out.println(""Total: $"" + formattedTotal);
                if (isPriority) {
                    System.out.println(""Priority processing initiated."");
                }
                // Simulate order processing logic
                for (int i = 0; i < order.getItems().size(); i++) {
                    // Do some processing
                }
                System.out.println(""Order processed successfully."");
            }
        }
    }
}",code_smell,large_function,,qwen/qwen3-32b
Java,"public class UserValidator { private static final String EMAIL_PATTERN = ""^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$""; public boolean validateUser(String email, String password) { if (email.matches(EMAIL_PATTERN)) { return password.length() > 8; } return false; } public static void main(String[] args) { UserValidator validator = new UserValidator(); System.out.println(validator.validateUser(""test@example.com"", ""password123"")); } }",code_smell,magic_string,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserProfileManager:
    def __init__(self, db_path='users.db'):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_schema()

    def _ensure_schema(self):
        cur = self.conn.cursor()
        cur.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def save_user(self, username, profile_dict):
        # Directly serializing user-provided dict without validation
        data = json.dumps(profile_dict)
        cur = self.conn.cursor()
        cur.execute('INSERT INTO users (username, data) VALUES (?, ?)', (username, data))
        self.conn.commit()

    def load_user(self, username):
        cur = self.conn.cursor()
        cur.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cur.fetchone()
        if row:
            # Unsafe deserialization using eval
            return eval(row[0])
        return None

    def delete_user(self, username):
        cur = self.conn.cursor()
        cur.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage
if __name__ == '__main__':
    manager = UserProfileManager()
    manager.save_user('alice', {'age': 30, 'email': 'alice@example.com'})
    profile = manager.load_user('alice')
    print('Loaded profile:', profile)
    manager.delete_user('alice')",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::vector<std::string>& inputs) {
    for (const auto& input : inputs) {
        if (input == ""start"") {
            std::cout << ""Starting...
"";
            continue;
        }
        if (input == ""stop"") {
            std::cout << ""Stopping...
"";
            continue;
        }
        if (input == ""restart"") {
            std::cout << ""Restarting...
"";
            continue;
        }
        std::cout << ""Unknown command: "" << input << std::endl;
    }
}

int main() {
    std::vector<std::string> commands = {""start"", ""pause"", ""stop"", ""restart"", ""halt""};
    processUserInput(commands);
    return 0;
}",code_smell,duplicated_code,,qwen/qwen3-32b
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {
        // Load users from a data source (mocked here)
        users_ = {""alice"", ""bob"", ""carol""};
    }

    // Returns the username at the given index, or empty string if out of bounds
    std::string getUserByIndex(size_t index) const {
        // BUG: Off‑by‑one error – allows index == users_.size()
        if (index <= users_.size()) {
            return users_[index];
        }
        return """";
    }

    // Adds a new user
    void addUser(const std::string& name) {
        users_.push_back(name);
    }

private:
    std::vector<std::string> users_;
};

int main() {
    UserManager mgr;
    std::cout << ""User 2: "" << mgr.getUserByIndex(2) << std::endl; // Expected ""carol""
    std::cout << ""User 3: "" << mgr.getUserByIndex(3) << std::endl; // Out of bounds, but returns garbage due to bug
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  processUser(user) {
    if (!user || !user.id || !user.name) {
      return null;
    }

    const processedUser = {};
    processedUser.userId = user.id;
    processedUser.userName = user.name;

    if (user.email) {
      processedUser.userEmail = user.email;
    }

    if (user.address) {
      processedUser.userAddress = user.address;
    }

    if (user.phoneNumber) {
      processedUser.userPhone = user.phoneNumber;
    }

    return processedUser;
  }
}

// Example usage:
const userProcessor = new UserProcessor();
const user = {
  id: 123,
  name: 'John Doe',
  email: 'john@example.com',
  address: '123 Main St',
  phoneNumber: '555-1234'
};

const result = userProcessor.processUser(user);
console.log(result);",code_smell,primitive_obsession,,qwen/qwen3-32b
Python,"class UserManager:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute('UPDATE users SET name = %s, email = %s WHERE id = %s', (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
    
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('DELETE FROM users WHERE id = %s', (user_id,))
        self.db_connection.commit()
    
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users')
        all_users = cursor.fetchall()
        return all_users",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        email TEXT NOT NULL)''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> None:
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        conn.commit()
        conn.close()

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cur.fetchall()
        conn.close()
        return [{'id': r[0], 'username': r[1], 'email': r[2]} for r in rows]

    def get_total_pages(self, page_size: int = 10) -> int:
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('SELECT COUNT(*) FROM users')
        total_users = cur.fetchone()[0]
        conn.close()
        # Defect: off‑by‑one error, should use math.ceil(total_users / page_size)
        return total_users // page_size

# Example usage
repo = UserRepository('app.db')
for i in range(25):
    repo.add_user(f'user{i}', f'user{i}@example.com')
print('Total pages:', repo.get_total_pages())
print('Page 3 users:', repo.get_users_page(3))",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.users = [];
  }

  registerUser(email, password, name, dob, role) {
    if (!email || !password) {
      return false;
    }

    const newUser = {
      email,
      password,
      name: name || 'Anonymous',
      dob: dob || '1900-01-01',
      role: role || 'user',
    };

    this.users.push(newUser);
    return true;
  }

  authenticateUser(email, password) {
    const user = this.users.find(u => u.email === email);

    if (!user || user.password !== password) {
      return false;
    }

    return true;
  }

  // TODO: Remove hardcoded users in production
  addHardcodedUsers() {
    this.registerUser('admin@example.com', '123456', 'Admin', '1980-01-01', 'admin');
    this.registerUser('user@example.com', 'password', 'User', '1990-01-01', 'user');
  }
}

// Example usage:
const auth = new UserAuth();
auth.addHardcodedUsers();
console.log(auth.authenticateUser('admin@example.com', '123456'));",code_smell,long_parameter_list,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_path):
        self.db_path = db_path
        self.users = {}
        self.load_users()

    def load_users(self):
        try:
            with open(self.db_path, 'r') as f:
                for line in f:
                    username, password = line.strip().split(':')
                    self.users[username] = password
        except FileNotFoundError:
            pass

    def authenticate(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def add_user(self, username, password):
        self.users[username] = password
        with open(self.db_path, 'a') as f:
            f.write(f'{username}:{password}\n')

# usage
user_db = UserDatabase('users.txt')
user_db.add_user('admin', 'password123')
print(user_db.authenticate('admin', 'password123'))",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    """"""Loads configuration from a JSON file.""""""
    def __init__(self, path):
        self.path = path
        self._config = None
        self._load()

    def _load(self):
        # Directly open the file without any validation – potential security issue
        with open(self.path, 'r') as f:
            self._config = json.load(f)

    def get(self, key, default=None):
        return self._config.get(key, default)

class DataProcessor:
    """"""Processes data based on configuration settings.""""""
    def __init__(self, config_loader):
        self.cfg = config_loader
        self.batch_size = self.cfg.get('batch_size', 100)
        self.retry_limit = self.cfg.get('retry_limit', 3)

    def process(self, items):
        results = []
        for i in range(0, len(items), self.batch_size):
            batch = items[i:i + self.batch_size]
            try:
                results.extend(self._process_batch(batch))
            except Exception as e:
                # Swallow exception and continue, losing error context
                continue
        return results

    def _process_batch(self, batch):
        # Simulate processing that may raise an exception
        processed = []
        for item in batch:
            if not isinstance(item, dict):
                raise ValueError('Invalid item')
            processed.append({k: v * 2 for k, v in item.items()})
        return processed

# Usage example (would be in production code)
config_path = os.getenv('CONFIG_PATH', '/etc/app/config.json')
loader = ConfigLoader(config_path)
processor = DataProcessor(loader)

# Imagine items come from an external source
items = [{'value': i} for i in range(1000)]
output = processor.process(items)
print('Processed', len(output), 'items')",code_defect,exception_swallowing_leading_to_data_loss,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  let result = '';
  if (input && input.length > 0) {
    for (let i = 0; i < input.length; i++) {
      const char = input[i];
      if (/[a-zA-Z]/.test(char)) {
        result += char.toUpperCase();
      } else {
        result += char;
      }
    }
    return result;
  }
  return 'Invalid input';
}

function validateAndProcess(data) {
  let processed = '';
  if (data && data.user && data.user.text) {
    processed = processUserInput(data.user.text);
  }
  return processed;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"const fs = require('fs');

class UserCache {
  constructor(filePath) {
    this.filePath = filePath;
    this.cache = {};
    this._load();
  }

  _load() {
    try {
      const data = fs.readFileSync(this.filePath, 'utf8');
      this.cache = JSON.parse(data);
    } catch (e) {
      // If file missing, start with empty cache
      this.cache = {};
    }
  }

  getUser(id) {
    return this.cache[id];
  }

  addUser(user) {
    // Assume user.id is unique
    this.cache[user.id] = user;
    this._save();
  }

  _save() {
    // BUG: Asynchronous write without waiting, may cause race conditions
    fs.writeFile(this.filePath, JSON.stringify(this.cache), (err) => {
      if (err) console.error('Failed to write cache');
    });
  }
}

// Example usage
const cache = new UserCache('./users.json');
cache.addUser({id: '123', name: 'Alice'});
cache.addUser({id: '124', name: 'Bob'});
console.log(cache.getUser('123'));",code_defect,race_condition_due_to_async_write,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 0) {
            std::cout << data[i] << ' ';
        }
    }
    std::cout << '\n';
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    processData(numbers);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
    def authenticate(self, input_password):
        if input_password == self.password:
            return True
        else:
            return False
    def change_password(self, new_password):
        self.password = new_password",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # Insecurely load configuration using eval on file content
        with open(self.config_path, 'r') as f:
            data = f.read()
        # BUG: Using eval on untrusted input leads to code execution
        self.settings = eval(data)

    def get(self, key, default=None):
        return self.settings.get(key, default)

def process_user_input(user_input):
    # Assume user_input is a JSON string
    try:
        data = json.loads(user_input)
    except json.JSONDecodeError:
        data = {}
    # Missing validation of required fields
    return data.get('value', 0) * 2

def main():
    cfg = ConfigLoader('config.cfg')
    user_val = process_user_input(os.getenv('USER_DATA', '{}'))
    result = user_val + cfg.get('offset', 10)
    print('Result:', result)

if __name__ == '__main__':
    main()",code_defect,unsafe_eval,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processItems(const std::vector<int>& items) {
    for (size_t i = 0; i < items.size(); ++i) {
        std::cout << ""Processing item: "" << items[i] << std::endl;
    }
}

void doSomeWork(int x, int y, int z, int a, int b, int c) {
    if (x < y) {
        processItems({1, 2, 3});
    } else {
        std::cout << ""Doing nothing."" << std::endl;
    }
}

int main() {
    doSomeWork(5, 10, 1, 2, 3, 4);
    return 0;
}",code_smell,long_parameter_list,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    void addUser(const std::string& username) {
        users.push_back(username);
    }

    // Returns the index of the user, or -1 if not found
    int findUser(const std::string& username) const {
        for (size_t i = 0; i <= users.size(); ++i) { // BUG: off‑by‑one, may read past end
            if (users[i] == username) {
                return static_cast<int>(i);
            }
        }
        return -1;
    }

    void removeUser(const std::string& username) {
        int idx = findUser(username);
        if (idx >= 0) {
            users.erase(users.begin() + idx);
        }
    }

    void printAll() const {
        for (const auto& u : users) {
            std::cout << u << std::endl;
        }
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.addUser(""carol"");
    um.removeUser(""bob"");
    um.printAll();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import random

class DataProcessor:
    def __init__(self, data):
        self.data = data
        self.processed_data = []

    def process(self):
        for item in self.data:
            cleaned = self._clean_item(item)
            self.processed_data.append(cleaned)

    def _clean_item(self, item):
        if not isinstance(item, (int, float)):
            return 0
        return item

    def summarize(self):
        total = sum(self.processed_data)
        avg = total / len(self.processed_data)
        return {
            'total': total,
            'average': avg,
            'count': len(self.processed_data)
        }

# Unused function
# def calculate_median(data):
#    data.sort()
#    n = len(data)
#    if n < 1:
#        return None
#    if n % 2 == 1:
#        return data[n//2]
#    else:
#        return sum(data[n//2-1:n//2+1])/2.0

def main():
    raw_data = [random.choice([10, 20, 'invalid', 30]) for _ in range(10)]
    processor = DataProcessor(raw_data)
    processor.process()
    summary = processor.summarize()
    print(f""Summary: {summary}"")

if __name__ == ""__main__"":
    main()",code_smell,dead_code,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id] = user_data
        else:
            self.add_user(user_id, user_data)

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
        for key, value in self.users.items():
            if value['username'] == user_id:
                del self.users[key]

manager = UserManager()
manager.add_user('1', {'username': 'john', 'email': 'john@example.com'})
print(manager.get_user('1'))
manager.update_user('1', {'username': 'jane', 'email': 'jane@example.com'})
print(manager.get_user('1'))
manager.delete_user('jane')
print(manager.get_user('1'))",code_defect,inconsistent_state_management,,llama-3.3-70b-versatile
Python,"import json, os, logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.config = {}
        self._load()

    def _load(self):
        # Loads JSON config without validation
        with open(self.config_path, 'r') as f:
            data = f.read()
        # Unsafe deserialization: directly eval the content
        self.config = eval(data)  # BUG: eval on untrusted input

    def get(self, key, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.db_conn_str = config_loader.get('db_connection')
        self.batch_size = config_loader.get('batch_size', 100)
        self._connect()

    def _connect(self):
        # Simulate DB connection (placeholder)
        self.conn = None
        logger.info(f""Connecting to DB with {self.db_conn_str}"")
        # Missing actual connection logic leads to None

    def process_records(self, records):
        # Process records in batches but uses wrong range causing off‑by‑one error
        for i in range(0, len(records), self.batch_size + 1):
            batch = records[i:i+self.batch_size]
            self._process_batch(batch)

    def _process_batch(self, batch):
        for record in batch:
            # Assume each record is a dict with 'value'
            value = record.get('value')
            if value is None:
                logger.warning('Missing value')
                continue
            # Simulate processing
            logger.debug(f""Processing {value}"")

# Usage example (would be in another module)
if __name__ == '__main__':
    cfg = ConfigLoader('config.json')
    processor = DataProcessor(cfg)
    sample_data = [{'value': i} for i in range(250)]
    processor.process_records(sample_data)
",code_defect,unsafe_deserialization_and_off_by_one,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(user, token, secretKey) {
    this.user = user;
    this.token = token;
    this.secretKey = secretKey;
  }

  validateToken() {
    if (!this.user || !this.token) return false;
    const isValid = this.token === this.generateToken(this.user, this.secretKey);

    if (isValid) {
      console.log('Token is valid');
      return true;
    }

    console.log('Token is invalid');
    return false;
  }

  generateToken(user, key) {
    return `${user.id}-${key}`;
  }

  resetUserPassword(oldPass, newPass) {
    if (!oldPass || !newPass) return false;
    console.log(`Changing password for ${this.user.username}`);
    this.user.password = newPass;
    return true;
  }
}

module.exports = UserAuth;",code_defect,security_issue,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

class Person {
public:
    Person(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class PersonDatabase {
public:
    void addPerson(Person person) { people.push_back(person); }
    std::vector<Person> getPeople() { return people; }
private:
    std::vector<Person> people;
};

int main() {
    PersonDatabase db;
    db.addPerson(Person(""John"", 30));
    db.addPerson(Person(""Alice"", 25));
    std::vector<Person> people = db.getPeople();
    for (Person person : people) {
        std::cout << person.getName() << "" is "" << person.getAge() << "" years old.\n"";
    }
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }
    void flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        for (const auto& line : logs_) {
            std::cout << line << std::endl;
        }
        logs_.clear();
    }
private:
    std::vector<std::string> logs_;
    std::mutex mtx_;
};

void worker(LogAggregator& agg, int id) {
    for (int i = 0; i < 1000; ++i) {
        agg.addLog(""Worker "" + std::to_string(id) + "" log "" + std::to_string(i));
    }
    // Missing flush call leads to lost logs if program exits before flush
}

int main() {
    LogAggregator aggregator;
    std::vector<std::thread> threads;
    for (int i = 0; i < 8; ++i) {
        threads.emplace_back(worker, std::ref(aggregator), i);
    }
    for (auto& t : threads) t.join();
    // aggregator.flush(); // Intentional omission causing data loss
    return 0;
}
",code_defect,lost_logs_due_to_missing_flush,,openai/gpt-oss-120b
Python,"import requests
import time

API_KEY = 'your_api_key_here'


def fetch_weather_data(city, unit='Celsius'):
    url = f'https://api.weatherapi.com/v1/current.json?key={API_KEY}&q={city}'
    response = requests.get(url)
    data = response.json()

    if 'error' in data:
        print(f'Error fetching data for {city}: {data[""error""][""message""]}')
        return None

    temperature = data['current']['temp_c']
    if unit == 'Fahrenheit':
        temperature = (temperature * 9/5) + 32

    result = {
        'city': city,
        'temperature': temperature,
        'unit': unit,
        'last_updated': data['current']['last_updated']
    }
    return result


def display_weather(weather_data):
    print(f""Current temperature in {weather_data['city']}: {weather_data['temperature']}°{weather_data['unit']}"")
    print(f""Last updated: {weather_data['last_updated']}"")


def main():
    city = input(""Enter city name: "")
    unit = input(""Enter unit (Celsius/Fahrenheit): "").strip().lower()
    weather_data = fetch_weather_data(city, unit)
    if weather_data:
        display_weather(weather_data)
    else:
        print(""Failed to fetch weather data."")

if __name__ == ""__main__"":
    main()",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserAuthenticator:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def authenticate(self, username, password):
        cursor = self.db_connection.cursor()
        query = ""SELECT * FROM users WHERE username = '"" + username + ""' AND password = '"" + password + ""'""
        cursor.execute(query)
        if cursor.fetchone():
            return True
        else:
            return False
",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    // Synchronously read config file (blocking I/O)
    const data = fs.readFileSync(this.path, 'utf8');
    // Parse JSON without try/catch – malformed JSON will crash the process
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function processUserInput(input) {
  // Assume input is an object with a ""type"" field
  if (input.type = 'admin') { // BUG: assignment instead of comparison
    grantAllPermissions(input.userId);
  } else {
    grantLimitedPermissions(input.userId);
  }
}

function grantAllPermissions(userId) {
  // Dangerous: writes to a privileged file without validation
  fs.appendFileSync('/etc/privileged.log', `Admin access granted to ${userId}\n`);
}

function grantLimitedPermissions(userId) {
  // No-op for now
}

module.exports = { ConfigLoader, processUserInput };",code_defect,logic_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  processUser(user) {
    if (!user || !user.id || !user.email) {
      throw new Error('Invalid user');
    }

    const normalizedEmail = user.email.trim().toLowerCase();
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

    if (!emailRegex.test(normalizedEmail)) {
      throw new Error('Invalid email format');
    }

    const result = {
      id: user.id,
      email: normalizedEmail
    };

    return this.formatOutput(result);
  }

  formatOutput(data) {
    return JSON.stringify(data);
  }
}

module.exports = UserProcessor;",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}
    std::string getName() { return name; }
    int getSalary() { return salary; }
private:
    std::string name;
    int salary;
};

class Company {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    int getTotalSalary() {
        int total = 0;
        for (const auto& employee : employees) {
            total += employee.getSalary();
        }
        return total;
    }
private:
    std::vector<Employee> employees;
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));
    std::cout << company.getTotalSalary() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3
from datetime import datetime

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        password_hash TEXT NOT NULL,
                        created_at TEXT NOT NULL)''')
        conn.commit()
        conn.close()

    def add_user(self, username, password_hash):
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('INSERT INTO users (username, password_hash, created_at) VALUES (?, ?, ?)',
                    (username, password_hash, datetime.utcnow()))
        conn.commit()
        conn.close()

    def get_user(self, username):
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('SELECT * FROM users WHERE username = ?', (username,))
        row = cur.fetchone()
        conn.close()
        return row

class AuthService:
    def __init__(self, repo):
        self.repo = repo

    def login(self, username, password):
        user = self.repo.get_user(username)
        if not user:
            return False
        stored_hash = user[2]
        # BUG: using eval on user-provided password hash string leads to code execution
        if eval(password) == stored_hash:
            return True
        return False

# Example usage (would be in production code)
if __name__ == '__main__':
    repo = UserRepository('app.db')
    auth = AuthService(repo)
    # Assume password hashes are simple strings for this example
    repo.add_user('alice', 'hash123')
    # Dangerous: passing raw password string to login which is eval'ed
    print('Login success:', auth.login('alice', ""'hash123'""))",code_defect,unsafe_eval_execution,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order, Customer customer, String paymentMethod, boolean isPriority) {
        if (order == null || customer == null || paymentMethod == null) {
            throw new IllegalArgumentException(""Order, customer, or payment method cannot be null."");
        }

        // Validate customer and payment method
        if (customer.getBalance() < order.getTotalPrice()) {
            throw new IllegalStateException(""Customer balance is insufficient."");
        }

        if (!paymentMethod.equals(""CreditCard"") && !paymentMethod.equals(""PayPal"")) {
            throw new IllegalArgumentException(""Unsupported payment method."");
        }

        // Apply discount logic
        if (customer.getMembershipLevel() == MembershipLevel.PREMIUM) {
            order.applyDiscount(0.10);
        } else if (customer.getMembershipLevel() == MembershipLevel.SILVER) {
            order.applyDiscount(0.05);
        }

        // Process the order
        if (isPriority) {
            System.out.println(""Priority order processing..."");
            order.setStatus(""PROCESSING"");
        } else {
            System.out.println(""Standard order processing..."");
            order.setStatus(""PENDING"");
        }

        // Simulate order processing delay
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new RuntimeException(""Order processing interrupted."", e);
        }

        System.out.println(""Order processed successfully."");
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"const fs = require('fs');

class ReportGenerator {
    constructor(db) {
        this.db = db; // DB connection object
    }

    // Generates a CSV report for a given date range
    generateReport(startDate, endDate) {
        // Build query string by concatenating user input – SQL injection risk
        const query = `SELECT id, name, amount FROM transactions WHERE date >= '${startDate}' AND date <= '${endDate}'`;
        return new Promise((resolve, reject) => {
            this.db.query(query, (err, rows) => {
                if (err) return reject(err);
                let csv = 'ID,Name,Amount\n';
                // Inefficient: building CSV line by line inside loop
                rows.forEach(row => {
                    csv += `${row.id},${row.name},${row.amount}\n`;
                });
                // Write to file synchronously – blocks event loop
                fs.writeFileSync('/tmp/report.csv', csv);
                resolve('/tmp/report.csv');
            });
        });
    }
}

module.exports = ReportGenerator;",code_smell,SQL injection risk and blocking I/O,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  getUser(id) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        return this.users[i];
      }
    }
    return null;
  }

  addUser(user) {
    this.users.push(user);
  }

  removeUser(id) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        this.users.splice(i, 1);
        break;
      }
    }
  }

  getAllUsers() {
    return this.users;
  }
}

const userManager = new UserManager();
userManager.addUser({ id: 1, name: 'Alice' });
userManager.addUser({ id: 2, name: 'Bob' });
console.log(userManager.getAllUsers());",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        if user_data:
            return {
                'id': user_data[0],
                'name': user_data[1],
                'email': user_data[2]
            }
        else:
            return None
    
    def update_user(self, user_id, new_name, new_email):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_name, new_email, user_id))
        self.db_connection.commit()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""p@ssw0rd""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        try {
            conn = getConnection();
            conn.setAutoCommit(false);
            if (!hasSufficientBalance(conn, accountId, amount)) {
                return false;
            }
            debitAccount(conn, accountId, amount);
            logTransaction(conn, accountId, amount);
            conn.commit();
            return true;
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ex) {}
            return false;
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException e) {}
        }
    }

    private Connection getConnection() throws SQLException {
        Properties props = new Properties();
        props.setProperty(""user"", DB_USER);
        props.setProperty(""password"", DB_PASSWORD);
        return DriverManager.getConnection(DB_URL, props);
    }

    private boolean hasSufficientBalance(Connection conn, String accountId, double amount) throws SQLException {
        String sql = ""SELECT balance FROM accounts WHERE account_id = '"" + accountId + ""'""; // SQL injection risk
        try (PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                return balance >= amount;
            }
            return false;
        }
    }

    private void debitAccount(Connection conn, String accountId, double amount) throws SQLException {
        String sql = ""UPDATE accounts SET balance = balance - ? WHERE account_id = ?"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setDouble(1, amount);
            stmt.setString(2, accountId);
            stmt.executeUpdate();
        }
    }

    private void logTransaction(Connection conn, String accountId, double amount) throws SQLException {
        String sql = ""INSERT INTO transactions (account_id, amount, timestamp) VALUES (?, ?, NOW())"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, accountId);
            stmt.setDouble(2, amount);
            stmt.executeUpdate();
        }
    }
}
",code_defect,sql_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor() {
        this.orders = new ArrayList<>();
    }

    public void addOrder(Order order) {
        orders.add(order);
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                process(order);
            }
        }
    }

    private void process(Order order) {
        if (order.isPaid()) {
            if (order.isShippable()) {
                if (order.getCustomer().isActive()) {
                    // Process shipping
                    System.out.println(""Shipped order "" + order.getId());
                }
            }
        }
    }

    // Legacy code that is no longer used
    // public void oldProcessOrder(Order order) {
    //     // Unused and outdated
    // }
}",code_smell,large_function,,qwen/qwen3-32b
JavaScript,"
      class UserAccount {
         constructor(username, password) {
            this.username = username;
            this.password = password;
            this.isLoggedIn = false;
         }

         login() {
            this.isLoggedIn = true;
         }

         logout() {
            this.isLoggedIn = false;
         }

         changePassword(newPassword) {
            this.password = newPassword;
         }
      }

      class UserManager {
         constructor() {
            this.accounts = [];
         }

         addAccount(account) {
            this.accounts.push(account);
         }

         removeAccount(account) {
            const index = this.accounts.indexOf(account);
            if (index !== -1) {
               this.accounts.splice(index, 1);
            }
         }
      }

      const manager = new UserManager();
      const account = new UserAccount('test', 'password');
      manager.addAccount(account);
      account.login();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        # Insecurely deserialize configuration using eval
        with open(self.path, 'r') as f:
            data = f.read()
            self.config = eval(data)  # BUG: unsafe deserialization

    def get(self, key, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, config_path):
        self.cfg = ConfigLoader(config_path)
        self.threshold = self.cfg.get('threshold', 10)
        self.results = []

    def process(self, items):
        for item in items:
            if self._is_valid(item):
                self.results.append(self._transform(item))
        return self.results

    def _is_valid(self, item):
        # Off‑by‑one error: should be >= threshold
        return item['value'] > self.threshold

    def _transform(self, item):
        # Assume item has 'value' and 'payload'
        return {'id': item['id'], 'score': item['value'] * 2, 'data': json.dumps(item['payload'])}

# Usage example (would be in production code)
if __name__ == '__main__':
    processor = DataProcessor('config.cfg')
    sample_items = [{'id': 1, 'value': 9, 'payload': {'a': 1}}, {'id': 2, 'value': 12, 'payload': {'b': 2}}]
    output = processor.process(sample_items)
    print(output)",code_defect,unsafe_deserialization_and_off_by_one,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

void processData(const std::string& input, int mode) {
    std::string processed = input;

    if (mode == 1) {
        for (int i = 0; i < input.length(); ++i) {
            processed[i] = input[i] + 1;
        }
    } else if (mode == 2) {
        for (int i = 0; i < input.length(); ++i) {
            processed[i] = input[i] - 1;
        }
    } else {
        processed = ""Invalid mode"";
    }

    std::cout << ""Processed data: "" << processed << std::endl;
}

int main() {
    std::string input = ""HelloWorld"";
    int mode = 1;

    processData(input, mode);
    return 0;
}",code_smell,duplicated_code,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, account_number, balance=0.0):
        self.account_number = account_number
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount > self.balance:
            self.balance -= amount
        else:
            self.balance -= amount
",code_defect,inconsistent_withdrawal_logic,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, email: str) -> int:
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()
        return cursor.lastrowid

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a page of users. Page numbers start at 1.
        """"""
        offset = (page - 1) * page_size
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cursor.fetchall()
        # BUG: off‑by‑one error – returns one extra record when page > 1
        if page > 1:
            rows = rows[1:]
        return [dict(id=row[0], username=row[1], email=row[2]) for row in rows]

# Example usage (would be in a different module)
repo = UserRepository('app.db')
repo.add_user('alice', 'alice@example.com')
repo.add_user('bob', 'bob@example.com')
users_page_2 = repo.get_users_page(2)
print('Page 2 users:', users_page_2)",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string id, std::string name) : id(id), name(name) {}

    std::string getId() { return id; }
    std::string getName() { return name; }

    void setId(std::string newId) { id = newId; }
    void setName(std::string newName) { name = newName; }

private:
    std::string id;
    std::string name;
};

std::vector<User> getUserData() {
    std::vector<User> users;
    users.push_back(User(""123"", ""Alice""));
    users.push_back(User(""456"", ""Bob""));
    users.push_back(User(""789"", ""Charlie""));
    return users;
}

void displayUsers(std::vector<User> users) {
    for (int i = 0; i < users.size(); ++i) {
        std::cout << ""User "" << i + 1 << "": "" << users[i].getName() << "" (ID: "" << users[i].getId() << "")\n"";
    }
}

int main() {
    std::vector<User> users = getUserData();
    displayUsers(users);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
       constructor() {
           this.users = [];
       }

       addUser(user) {
           this.users.push(user);
       }

       removeUser(userId) {
           for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === userId) {
                   this.users.splice(i, 1);
                   break;
               }
           }
       }

       getUser(userId) {
           for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === userId) {
                   return this.users[i];
               }
           }
           return null;
       }
   }

   let userManager = new UserManager();
   userManager.addUser({ id: 1, name: 'John Doe' });
   console.log(userManager.getUser(1));
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');
const path = require('path');

class ConfigLoader {
    constructor(configDir) {
        this.configDir = configDir;
        this.cache = {};
    }

    // Loads a JSON config file and caches it
    loadConfig(name) {
        const filePath = path.join(this.configDir, `${name}.json`);
        // Asynchronously read the file but return the result synchronously
        let data;
        fs.readFile(filePath, 'utf8', (err, content) => {
            if (err) {
                console.error('Failed to read config:', err);
                data = null;
                return;
            }
            data = JSON.parse(content);
            this.cache[name] = data;
        });
        // Returns before the callback has executed, often undefined
        return this.cache[name] || data;
    }
}

// Usage example
const loader = new ConfigLoader('./config');
const dbConfig = loader.loadConfig('database');
console.log('Database config:', dbConfig); // May log undefined due to race condition",code_defect,async_race_condition,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processVector(std::vector<int>& vec) {
    for (size_t i = 0; i < vec.size(); ++i) {
        for (size_t j = 0; j < vec.size(); ++j) {
            if (vec[i] == vec[j] && i != j) {
                vec[j] = 0;
            }
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 2, 1, 4};
    processVector(data);

    for (int num : data) {
        std::cout << num << "" "";
    }

    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public void addUser(String id, String name) { users.put(id, new User(name)); } public User getUser(String id) { return users.get(id); } public void updateUserName(String id, String newName) { User user = users.get(id); if (user != null) { user.setName(newName); } } private static class User { private String name; public User(String name) { this.name = name; } public void setName(String name) { this.name = name; } public String getName() { return name; } } }",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable())
            worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Simulate processing
            std::cout << ""Processing: "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 0; i < 5; ++i) {
        dp.addTask(i);
    }
    // Missing dp.stop(); leads to thread running after main exits
    return 0;
}",code_defect,resource_leak_thread_not_joined,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

std::vector<int> process_data(std::vector<int> data) {
    std::vector<int> result;
    for (size_t i = 0; i < data.size(); ++i) {
        int val = data[i];
        if (val % 2 == 0) {
            result.push_back(val);
        }
    }
    return result;
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5, 6};
    std::vector<int> output = process_data(input);

    for (int num : output) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) {
        users.push_back(user);
    }

    User getUserByName(std::string name) {
        for (User user : users) {
            if (user.getName() == name) {
                return user;
            }
        }
        // Return a default user if not found
        return User(""Unknown"", 0);
    }

private:
    std::vector<User> users;
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User user = service.getUserByName(""John"");
    std::cout << user.getName() << std::endl;
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.configPath = configPath;
    this.cache = null;
  }

  // Loads config from file; caches result but never invalidates
  loadConfig() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.configPath, 'utf8');
    // BUG: JSON.parse can throw, but error is not caught, causing the process to crash
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

class UserService {
  constructor(db) {
    this.db = db;
    this.configLoader = new ConfigLoader('./config.json');
  }

  // Returns user profile with settings merged from config
  async getUserProfile(userId) {
    const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
    const config = this.configLoader.loadConfig();
    // BUG: If config has a property named 'theme', it overwrites user's theme even if user set a custom one
    return { ...user[0], ...config };
  }
}

module.exports = { ConfigLoader, UserService };",code_defect,unhandled_exception_and_unintended_overwrite,,openai/gpt-oss-120b
Python,"import time
import random

class TaskProcessor:
    def __init__(self):
        self.tasks = []
        self.max_retries = 3
        self.max_workers = 5

    def add_task(self, task):
        self.tasks.append(task)

    def process_tasks(self):
        workers = []
        for i in range(self.max_workers):
            worker = Worker(i)
            workers.append(worker)
            worker.start()

        for task in self.tasks:
            assigned = False
            for worker in workers:
                if not worker.is_busy():
                    worker.assign_task(task)
                    assigned = True
                    break
            if not assigned:
                print(""No available workers to assign task."")

        for worker in workers:
            worker.join()


class Worker:
    def __init__(self, worker_id):
        self.worker_id = worker_id
        self.current_task = None
        self.task_result = None

    def is_busy(self):
        return self.current_task is not None

    def assign_task(self, task):
        self.current_task = task
        print(f""Worker {self.worker_id} assigned task: {self.current_task}"")
        self.run_task()

    def run_task(self):
        # Simulate processing with a random delay
        delay = random.uniform(0.5, 2.0)
        time.sleep(delay)
        self.task_result = f""Processed {self.current_task}""
        self.current_task = None

    def start(self):
        pass

    def join(self):
        pass",code_smell,poor_modularization,,qwen/qwen3-32b
Java,"
   public class UserService {
       private static final Map<String, User> users = new HashMap<>();

       public synchronized void addUser(User user) {
           users.put(user.getId(), user);
       }

       public synchronized User getUser(String id) {
           return users.get(id);
       }

       public synchronized void updateUser(User user) {
           users.put(user.getId(), user);
       }

       public synchronized void deleteUser(String id) {
           users.remove(id);
       }
   }

   public class User {
       private String id;
       private String name;

       public User(String id, String name) {
           this.id = id;
           this.name = name;
       }

       public String getId() {
           return id;
       }

       public String getName() {
           return name;
       }

       public void setName(String name) {
           this.name = name;
       }
   }
   ",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path: str):
        self.config_path = config_path
        self._config = None

    def load(self) -> dict:
        """"""Load configuration from a JSON file.
        Returns a dictionary of config values.
        """"""
        if not os.path.exists(self.config_path):
            logger.error(""Config file not found: %s"", self.config_path)
            raise FileNotFoundError(self.config_path)
        with open(self.config_path, 'r') as f:
            # BUG: Using eval on file content can execute arbitrary code
            data = eval(f.read())
        self._config = data
        return data

    def get(self, key: str, default=None):
        if self._config is None:
            self.load()
        return self._config.get(key, default)

# Example usage (would be called elsewhere in the application)
loader = ConfigLoader('config.json')
app_config = loader.get('app_settings', {})
",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    if (user && user.id && user.name) {
      this.users.push(user);
    }
  }

  getUsers() {
    return this.users;
  }

  deleteUser(userId) {
    this.users = this.users.filter(user => user.id !== userId);
  }

  updateUserName(userId, newName) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === userId) {
        this.users[i].name = newName;
        break;
      }
    }
  }

  getUserById(userId) {
    return this.users.find(user => user.id === userId);
  }

  clearUsers() {
    this.users = [];
  }
}

// Usage example
const userManager = new UserManager();
userManager.addUser({ id: 1, name: 'Alice' });
userManager.addUser({ id: 2, name: 'Bob' });
userManager.updateUserName(1, 'Alice Smith');",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
       constructor() {
           this.users = [];
       }

       addUser(user) {
           this.users.push(user);
       }

       removeUser(userId) {
           for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === userId) {
                   this.users.splice(i, 1);
                   break;
               }
           }
       }

       getUserCount() {
           return this.users.length;
       }
   }

   function main() {
       let userManager = new UserManager();
       userManager.addUser({ id: 1, name: 'John Doe' });
       userManager.addUser({ id: 2, name: 'Jane Doe' });
       console.log(userManager.getUserCount());
       userManager.removeUser(1);
       console.log(userManager.getUserCount());
   }

   main();
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            // BUG: accesses tasks without holding the mutex
            if (!tasks.empty()) {
                int val = tasks.back();
                tasks.pop_back();
                // Simulate work
                std::cout << ""Processing: "" << val << std::endl;
            }
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 0; i < 100; ++i) {
        dp.addTask(i);
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}",code_defect,data_race,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    private final String API_KEY = ""supersecretkey123"";

    public void processOrder(Order order) {
        if (order != null && order.isValid()) {
            String customerEmail = order.getCustomerEmail();
            String customerName = order.getCustomerName();

            // Hardcoded API key in plain text
            String request = String.format(""{\""email\"":\""%s\"", \""name\"":\""%s\"", \""apiKey\"":\""%s\""}"", 
                    customerEmail, customerName, API_KEY);

            // Simulate sending order to external API
            sendRequestToAPI(request);
        }
    }

    private void sendRequestToAPI(String request) {
        // Simulated API call, no actual implementation
    }

    public static class Order {
        private String customerEmail;
        private String customerName;

        public boolean isValid() {
            return customerEmail != null && !customerEmail.isEmpty();
        }

        public String getCustomerEmail() {
            return customerEmail;
        }

        public String getCustomerName() {
            return customerName;
        }
    }
}",code_defect,hardcoded_secret,,qwen/qwen3-32b
Java,"
   public class UserAuthenticator {
       private static final String DEFAULT_PASSWORD = ""password123"";
   
       public boolean authenticate(String username, String password) {
           if (username == null || password == null) {
               return false;
           }
           // Using a simple equals check for demonstration purposes
           return username.equals(""admin"") && password.equals(DEFAULT_PASSWORD);
       }
   
       public static void main(String[] args) {
           UserAuthenticator authenticator = new UserAuthenticator();
           System.out.println(authenticator.authenticate(""admin"", ""password123"")); // true
           System.out.println(authenticator.authenticate(""admin"", ""wrongpassword"")); // false
       }
   }
   ",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void submitLog(const std::string& msg) {
        std::lock_guard<std::mutex> lk(mtx);
        buffer.push_back(msg);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            std::vector<std::string> localCopy;
            {
                std::lock_guard<std::mutex> lk(mtx);
                localCopy.swap(buffer); // move logs to local copy
            }
            for (const auto& entry : localCopy) {
                // Simulate processing
                std::cout << ""Processing: "" << entry << std::endl;
            }
            // BUG: Missing sleep leads to busy-wait, consuming 100% CPU
        }
    }
    std::vector<std::string> buffer;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.submitLog(""Event "" + std::to_string(i));
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    lp.stop();
    return 0;
}",code_defect,busy_wait_cpu_hog,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        if (order.getItems().isEmpty()) {
            return;
        }

        double total = 0.0;
        for (OrderItem item : order.getItems()) {
            total += item.getPrice() * item.getQuantity();
        }

        if (total <= 0) {
            return;
        }

        // Simulate inventory check
        boolean inventoryAvailable = true;
        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() > getInventoryCount(item.getProductCode())) {
                inventoryAvailable = false;
                break;
            }
        }

        if (!inventoryAvailable) {
            return;
        }

        // Process payment
        processPayment(order, total);

        // Update inventory
        for (OrderItem item : order.getItems()) {
            updateInventory(item.getProductCode(), -item.getQuantity());
        }

        // Notify customer
        sendOrderConfirmation(order);
    }

    private int getInventoryCount(String productCode) {
        // Simulated database call
        return 100;
    }

    private void processPayment(Order order, double total) {
        // Simulated payment processing
    }

    private void updateInventory(String productCode, int change) {
        // Simulated inventory update
    }

    private void sendOrderConfirmation(Order order) {
        // Simulated email/SMS notification
    }
}",code_smell,long_function,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <string>
      class User {
      public:
         std::string name;
         int age;
         User(std::string n, int a) : name(n), age(a) {}
      };
      class UserService {
      public:
         static std::vector<User> users;
         static void addUser(User u) {
            users.push_back(u);
         }
         static User* getUserByName(std::string name) {
            for (auto& user : users) {
               if (user.name == name) {
                  return &user;
               }
            }
            return nullptr;
         }
      };
      std::vector<User> UserService::users;
      int main() {
         UserService::addUser(User(""John"", 30));
         UserService::addUser(User(""Alice"", 25));
         User* user = UserService::getUserByName(""John"");
         if (user != nullptr) {
            std::cout << user->name << std::endl;
         }
         return 0;
      }
   ",code_defect,dangling_pointer,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path='users.db'):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data_dict):
        # Directly serializing user-provided data without validation
        data_json = json.dumps(data_dict)
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, data) VALUES (?, ?)', (username, data_json))
        self.conn.commit()

    def get_user_data(self, username):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            # Unsafe deserialization: using eval on stored JSON string
            return eval(row[0])
        return None

    def delete_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage (would be called from elsewhere in the application)
manager = UserManager()
manager.add_user('alice', {'role': 'admin', 'prefs': {'theme': 'dark'}})
print(manager.get_user_data('alice'))
manager.delete_user('alice')",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users) {
    this.users = users;
  }

  authenticate(username, password) {
    for (let user of this.users) {
      if (user.username === username) {
        if (user.password === password) {
          return true;
        } else {
          return false;
        }
      }
    }
    return false;
  }

  getUserRoles(username) {
    for (let user of this.users) {
      if (user.username === username) {
        return user.roles;
      }
    }
    return [];
  }
}

const users = [
  { username: 'admin', password: 'admin123', roles: ['admin', 'user'] },
  { username: 'john', password: 'john123', roles: ['user'] }
];

const auth = new UserAuth(users);",code_smell,poor_error_handling,,qwen/qwen3-32b
Java,"
   public class PaymentProcessor {
       private static final int MAX_RETRIES = 3;

       public void processPayment(String paymentId, double amount) {
           for (int i = 0; i < MAX_RETRIES; i++) {
               try {
                   // Simulating a payment processing API call
                   if (Math.random() < 0.5) {
                       throw new RuntimeException(""Payment processing failed"");
                   }
                   System.out.println(""Payment processed successfully for paymentId: "" + paymentId + "" and amount: "" + amount);
                   break;
               } catch (RuntimeException e) {
                   if (i == MAX_RETRIES - 1) {
                       throw e;
                   }
               }
           }
       }

       public static void main(String[] args) {
           PaymentProcessor paymentProcessor = new PaymentProcessor();
           paymentProcessor.processPayment(""PAY-123"", 100.0);
       }
   }
   ",code_smell,magic_number,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}
    void addTransaction(int amount) {
        std::lock_guard<std::mutex> lock(mtx_);
        pending_.push_back(amount);
    }
    void processAll() {
        // Process pending transactions sequentially
        for (size_t i = 0; i <= pending_.size(); ++i) { // OFF-BY-ONE BUG
            total_ += pending_[i];
        }
        pending_.clear();
    }
    int getTotal() const { return total_; }
private:
    std::vector<int> pending_;
    int total_;
    mutable std::mutex mtx_;
};

int main() {
    TransactionProcessor tp;
    tp.addTransaction(100);
    tp.addTransaction(200);
    tp.processAll();
    std::cout << ""Total: "" << tp.getTotal() << std::endl;
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
    this.cache = {};
  }

  // Fetch user by ID, but caches result in memory without expiration
  async getUser(id) {
    if (this.cache[id]) {
      return this.cache[id];
    }
    const user = await this.db.query('SELECT * FROM users WHERE id = ?', [id]);
    this.cache[id] = user;
    return user;
  }

  // Updates user email without proper validation
  async updateEmail(id, newEmail) {
    // Missing validation leads to SQL injection vulnerability
    await this.db.execute(`UPDATE users SET email = '${newEmail}' WHERE id = ${id}`);
    // Invalidate cache incorrectly (doesn't delete the stale entry)
    this.cache[id] = null;
  }

  // Bulk import users from a JSON file; uses synchronous file read inside async method
  async importUsers(filePath) {
    const data = fs.readFileSync(filePath, 'utf8'); // blocks event loop
    const users = JSON.parse(data);
    for (let i = 0; i < users.length; i++) {
      const user = users[i];
      await this.db.execute('INSERT INTO users (name, email) VALUES (?, ?)', [user.name, user.email]);
    }
    return users.length;
  }
}

module.exports = UserService;",code_defect,SQL_injection_and_cache_invalidation_bug,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    void process(const std::vector<int>& input, std::vector<int>& output) {
        output.clear();
        for (size_t i = 0; i < input.size(); ++i) {
            if (i % 2 == 0) {
                output.push_back(input[i] * 2);
            } else {
                output.push_back(input[i] + 10);
            }
        }
    }
};

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5};
    std::vector<int> output;
    DataProcessor processor;
    processor.process(input, output);
    
    for (int val : output) {
        std::cout << val << "" "";
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserManager:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        if user_data:
            return {'id': user_data[0], 'name': user_data[1], 'email': user_data[2]}
        else:
            return None
    
    def update_user(self, user_id, name, email):
        cursor = self.db_connection.cursor()
        cursor.execute('UPDATE users SET name = %s, email = %s WHERE id = %s', (name, email, user_id))
        self.db_connection.commit()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <iostream>
#include <numeric>

class Statistics {
public:
    double median(std::vector<int> data) {
        std::sort(data.begin(), data.end());
        size_t n = data.size();
        // Off‑by‑one error: for even n, should average middle two elements
        return n % 2 == 0 ? data[n/2] : (data[n/2] + data[n/2 + 1]) / 2.0;
    }

    double average(const std::vector<int>& data) {
        if (data.empty()) return 0.0;
        long long sum = std::accumulate(data.begin(), data.end(), 0LL);
        return static_cast<double>(sum) / data.size();
    }
};

int main(){
    Statistics stats;
    std::vector<int> values = {5, 1, 9, 3, 7, 2};
    std::cout << ""Median: "" << stats.median(values) << std::endl;
    std::cout << ""Average: "" << stats.average(values) << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        if (order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        double total = 0;
        for (OrderItem item : order.getItems()) {
            total += item.getPrice() * item.getQuantity();
        }

        if (total > 0) {
            System.out.println(""Order total: "" + total);
            // Additional processing logic
            sendOrderToInventory(order);
            sendOrderToPayment(total);
        }
    }

    private void sendOrderToInventory(Order order) {
        // Dummy inventory processing
    }

    private void sendOrderToPayment(double total) {
        // Dummy payment processing
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserManager { private static final int MAX_ATTEMPTS = 5; private int attemptCount; public UserManager() { attemptCount = 0; } public boolean authenticate(String username, String password) { if (attemptCount >= MAX_ATTEMPTS) { return false; } attemptCount++; if (username.equals(""admin"") && password.equals(""password123"")) { attemptCount = 0; return true; } return false; }}",code_smell,magic_number,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3
from datetime import datetime

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY,
                            username TEXT NOT NULL,
                            password TEXT NOT NULL,
                            created_at TEXT NOT NULL)''')
        self.conn.commit()

    def add_user(self, username, password):
        # NOTE: password is stored in plain text (security issue)
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, password, created_at) VALUES (?, ?, ?)',
                       (username, password, datetime.utcnow().isoformat()))
        self.conn.commit()
        return cursor.lastrowid

    def authenticate(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute('SELECT password FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row and row[0] == password:
            return True
        return False

    def export_user_data(self, export_path):
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, username, password, created_at FROM users')
        users = cursor.fetchall()
        # Vulnerable to insecure deserialization if the file is later loaded with pickle
        with open(export_path, 'w') as f:
            json.dump(users, f)

# Usage example (would be in production code)
if __name__ == '__main__':
    manager = UserManager('users.db')
    manager.add_user('alice', 's3cr3t')
    manager.add_user('bob', 'password123')
    print('Auth alice:', manager.authenticate('alice', 's3cr3t'))
    manager.export_user_data('users_export.json')
",code_defect,insecure_password_storage_and_insecure_serialization,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private String apiKey = ""1234567890"";

    public void processOrder(String userId, String productId, int quantity) {
        if (userId == null || productId == null || quantity <= 0) {
            return;
        }

        String orderData = String.format(""%s,%s,%d"", userId, productId, quantity);
        String encryptedData = encrypt(orderData);
        String response = sendToServer(encryptedData);
        if (response != null && response.contains(""success"")) {
            System.out.println(""Order processed successfully"");
        } else {
            System.out.println(""Failed to process order"");
        }
    }

    private String encrypt(String data) {
        return data;
    }

    private String sendToServer(String data) {
        // Simulated server call
        return ""success"";
    }
}",code_defect,hardcoded_secret,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class UserService {
public:
    void addUser(const std::string& name) {
        users_.push_back(name);
    }

    std::vector<std::string> getUsers() {
        return users_;
    }

    void removeUser(const std::string& name) {
        for (auto it = users_.begin(); it != users_.end(); ++it) {
            if (*it == name) {
                users_.erase(it);
                break;
            }
        }
    }

private:
    std::vector<std::string> users_;
};

int main() {
    UserService service;
    service.addUser(""John"");
    service.addUser(""Alice"");
    service.removeUser(""John"");
    for (const auto& user : service.getUsers()) {
        std::cout << user << std::endl;
    }
    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""p@ssw0rd""; // hardcoded credentials

    public String getUserEmail(int userId) {
        String email = null;
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            Statement stmt = conn.createStatement();
            // SQL injection vulnerability: userId concatenated directly
            String sql = ""SELECT email FROM users WHERE id = "" + userId;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                email = rs.getString(""email"");
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (Exception e) {
            // Swallowing exception, no logging
        }
        return email;
    }
}
",code_defect,sql_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class UserRegistrationService {
    public void registerUser(String username, String password, String email) {
        if (username == null || username.isEmpty()) {
            throw new IllegalArgumentException(""Username is required"");
        }
        
        if (password == null || password.isEmpty()) {
            throw new IllegalArgumentException(""Password is required"");
        }
        
        if (email == null || email.isEmpty()) {
            throw new IllegalArgumentException(""Email is required"");
        }
        
        // Simulate duplicate check
        if (username.equals(""admin"")) {
            throw new IllegalArgumentException(""Username 'admin' is already taken"");
        }
        
        // Simulate database insertion
        System.out.println(""User registered: "" + username);
    }

    public static void main(String[] args) {
        UserRegistrationService service = new UserRegistrationService();
        service.registerUser(""admin"", ""securepassword123"", ""admin@example.com"");
    }
}",code_defect,invalid_input_handling,,qwen/qwen3-32b
JavaScript,"
   class UserAuthenticator {
      constructor() {
         this.users = {};
      }

      registerUser(username, password) {
         this.users[username] = password;
      }

      authenticateUser(username, password) {
         if (this.users[username] === password) {
            return true;
         } else {
            return false;
         }
      }
   }

   class UserService {
      constructor(authenticator) {
         this.authenticator = authenticator;
      }

      getUserData(username, password) {
         if (this.authenticator.authenticateUser(username, password)) {
            // Assume we have user data, for simplicity, let's just return the username
            return username;
         } else {
            throw new Error('Authentication failed');
         }
      }
   }

   const authenticator = new UserAuthenticator();
   authenticator.registerUser('testUser', 'password123');

   const userService = new UserService(authenticator);
   console.log(userService.getUserData('testUser', 'password123'));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password):
        # WARNING: Storing plaintext passwords!
        cursor = self.conn.cursor()
        cursor.execute(f""INSERT INTO users (username, password) VALUES ('{username}', '{password}')"")
        self.conn.commit()

    def authenticate(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute(f""SELECT password FROM users WHERE username = '{username}'"")
        row = cursor.fetchone()
        if row and row[0] == password:
            return True
        return False

    def export_users(self, export_path):
        cursor = self.conn.cursor()
        cursor.execute('SELECT username, password FROM users')
        users = cursor.fetchall()
        # Insecurely writes raw passwords to a JSON file
        with open(export_path, 'w') as f:
            json.dump([{'user': u, 'pwd': p} for u, p in users], f)

    def close(self):
        self.conn.close()

# Example usage
if __name__ == '__main__':
    manager = UserManager('users.db')
    manager.add_user('admin', os.getenv('ADMIN_PASS'))
    manager.add_user('guest', 'guest123')
    print('Auth admin:', manager.authenticate('admin', os.getenv('ADMIN_PASS')))
    manager.export_users('export.json')
    manager.close()",code_defect,SQL_injection_and_plaintext_password_storage,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, logger) {
    this.users = users;
    this.logger = logger;
    this.cache = {};
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      const cachedUser = this.cache[user.id];

      if (cachedUser) {
        this.logger.log(`User ${user.id} is cached. Reusing data...`);
        this._processCachedUser(cachedUser);
      } else {
        this.logger.log(`Fetching data for user ${user.id}...`);
        const userData = this._fetchUserData(user.id);
        this._processNewUser(userData);
        this.cache[user.id] = userData;
      }
    }
  }

  _fetchUserData(id) {
    // Simulating network call
    return {
      id: id,
      name: `User_${id}`,
      role: 'guest'
    };
  }

  _processCachedUser(user) {
    this.logger.log(`Processing cached user: ${user.name}`);
  }

  _processNewUser(user) {
    this.logger.log(`Processing new user: ${user.name}`);

    if (user.role === 'admin') {
      this._grantAdminAccess(user);
    } else {
      this._grantGuestAccess(user);
    }
  }

  _grantAdminAccess(user) {
    this.logger.log(`Granting admin access to ${user.name}.`);
    // Intentionally not implemented
  }

  _grantGuestAccess(user) {
    this.logger.log(`Granting guest access to ${user.name}.`);
    // Intentionally not implemented
  }
}",code_smell,incomplete_methods,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    std::string name;
    int salary;

    Employee(std::string n, int s) : name(n), salary(s) {}

    bool operator<(const Employee& other) const {
        return salary < other.salary;
    }
};

void sortEmployees(std::vector<Employee>& employees) {
    std::sort(employees.begin(), employees.end());
}

int main() {
    std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
    sortEmployees(employees);
    for (const auto& employee : employees) {
        std::cout << employee.name << "" "" << employee.salary << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class OrderProcessor {
    private Connection dbConnection;
    private static final String INSERT_ORDER_SQL = ""INSERT INTO orders (id, customer, amount) VALUES (?, ?, ?)"";

    public OrderProcessor(Connection connection) {
        this.dbConnection = connection;
    }

    public void processOrders(List<Order> orders) throws SQLException {
        for (Order order : orders) {
            saveOrder(order);
        }
    }

    private void saveOrder(Order order) throws SQLException {
        PreparedStatement stmt = dbConnection.prepareStatement(INSERT_ORDER_SQL);
        stmt.setString(1, order.getId());
        stmt.setString(2, order.getCustomerName());
        stmt.setDouble(3, order.getAmount());
        stmt.executeUpdate();
        // Missing stmt.close(); leads to resource leak
    }
}

class Order {
    private String id;
    private String customerName;
    private double amount;

    public Order(String id, String customerName, double amount) {
        this.id = id;
        this.customerName = customerName;
        this.amount = amount;
    }
    public String getId() { return id; }
    public String getCustomerName() { return customerName; }
    public double getAmount() { return amount; }
}
",code_defect,resource_leak,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

string processData(const vector<string>& input) {
    string result;
    for (size_t i = 0; i < input.size(); ++i) {
        result += input[i];
        if (i != input.size() - 1) {
            result += "", "";
        }
    }
    return result;
}

int main() {
    vector<string> data = {""apple"", ""banana"", ""cherry""};
    string output = processData(data);
    cout << ""Processed data: "" << output << endl;
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <string>
   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };
   class UserService {
   public:
       UserService() {}
       void saveUser(User user) {
           users.push_back(user);
       }
       User getUser(int index) {
           if (index < users.size()) {
               return users[index];
           } else {
               // handle out of range
               User empty("""", 0);
               return empty;
           }
       }
   private:
       std::vector<User> users;
   };
   int main() {
       UserService service;
       User user(""John"", 30);
       service.saveUser(user);
       User retrievedUser = service.getUser(0);
       std::cout << retrievedUser.getName() << std::endl;
       return 0;
   }
   ",code_smell,magic_number,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> None:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        conn.commit()
        conn.close()

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cursor.fetchall()
        conn.close()
        return [dict(id=row[0], username=row[1], email=row[2]) for row in rows]

# Example usage
repo = UserRepository('app.db')
for i in range(1, 26):
    repo.add_user(f'user{i}', f'user{i}@example.com')

# Intended to fetch the third page (users 21-30) but due to off‑by‑one error will miss the last user
users_page = repo.get_users_page(3, page_size=10)
print('Fetched users:', users_page)
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, roles) {
    this.users = users;
    this.roles = roles;
  }

  assignRoles() {
    for (let i = 0; i < this.users.length; i++) {
      for (let j = 0; j < this.roles.length; j++) {
        if (this.users[i].id === this.roles[j].userId) {
          this.users[i].role = this.roles[j].name;
        }
      }
    }
    return this.users;
  }

  getUsersWithRole(roleName) {
    return this.users.filter(user => user.role === roleName);
  }
}

// Example usage:
const users = [
  { id: 1, name: 'Alice' },
  { id: 2, name: 'Bob' }
];

const roles = [
  { userId: 1, name: 'admin' },
  { userId: 2, name: 'user' }
];

const processor = new UserProcessor(users, roles);
const admins = processor.getUsersWithRole('admin');",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class UserRepository {
public:
    void addUser(User user) { users.push_back(user); }
    User getUser(int index) { return users[index]; }
private:
    std::vector<User> users;
};

int main() {
    UserRepository repository;
    repository.addUser(User(""John Doe"", 30));
    std::cout << repository.getUser(0).getName() << std::endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // JSON.parse can throw, but not caught
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

class UserService {
  constructor(db) {
    this.db = db;
    this.config = new ConfigLoader('./config.json');
  }

  getUserProfile(userId) {
    const config = this.config.load(); // loads config on every call if cache missed
    const query = `SELECT * FROM users WHERE id = ${userId}`; // SQL injection risk
    return this.db.query(query).then(rows => {
      if (rows.length === 0) return null;
      const user = rows[0];
      // Assume config contains a field ""timezone""
      user.localTime = new Date().toLocaleString('en-US', { timeZone: config.timezone });
      return user;
    });
  }
}

module.exports = { ConfigLoader, UserService };",code_defect,SQL_injection_and_unhandled_JSON_parse_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void process_data(const std::vector<int>& data, int index) {
    std::lock_guard<std::mutex> lock(mtx);
    if (index < data.size()) {
        std::cout << ""Processing: "" << data[index] << std::endl;
        // Simulate work
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }
}

void threaded_data_processor(const std::vector<int>& data) {
    std::vector<std::thread> threads;
    for (int i = 0; i < 10; ++i) {
        threads.emplace_back(process_data, data, i % data.size());
    }
    for (auto& t : threads) {
        if (t.joinable()) {
            t.join();
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    threaded_data_processor(data);
    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

private:
    std::string name;
    int salary;
};

class EmployeeDatabase {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    Employee getEmployeeWithHighestSalary() {
        if (employees.empty()) {
            throw std::runtime_error(""No employees in database"");
        }
        return *std::max_element(employees.begin(), employees.end(),
            [](const Employee& a, const Employee& b) { return a.getSalary() < b.getSalary(); });
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeDatabase db;
    db.addEmployee(Employee(""John"", 50000));
    db.addEmployee(Employee(""Alice"", 60000));
    try {
        Employee highestPaid = db.getEmployeeWithHighestSalary();
        std::cout << ""Highest paid employee: "" << highestPaid.getName() << std::endl;
    } catch (const std::exception& e) {
        std::cerr << ""Error: "" << e.what() << std::endl;
    }
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""admin123""; // hardcoded password

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        try {
            conn = getConnection();
            conn.setAutoCommit(false);
            if (!hasSufficientBalance(conn, accountId, amount)) {
                return false;
            }
            debitAccount(conn, accountId, amount);
            // simulate external API call that may fail
            if (!notifyExternalGateway(accountId, amount)) {
                // missing rollback here leads to inconsistent state
                return false;
            }
            conn.commit();
            return true;
        } catch (SQLException e) {
            // swallow exception, no logging
            return false;
        } finally {
            if (conn != null) {
                try { conn.close(); } catch (SQLException ignored) {}
            }
        }
    }

    private Connection getConnection() throws SQLException {
        Properties props = new Properties();
        props.setProperty(""user"", DB_USER);
        props.setProperty(""password"", DB_PASS);
        return DriverManager.getConnection(DB_URL, props);
    }

    private boolean hasSufficientBalance(Connection conn, String accountId, double amount) throws SQLException {
        String sql = ""SELECT balance FROM accounts WHERE id = ?"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, accountId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                return balance >= amount;
            }
            return false;
        }
    }

    private void debitAccount(Connection conn, String accountId, double amount) throws SQLException {
        String sql = ""UPDATE accounts SET balance = balance - ? WHERE id = ?"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setDouble(1, amount);
            stmt.setString(2, accountId);
            stmt.executeUpdate();
        }
    }

    private boolean notifyExternalGateway(String accountId, double amount) {
        // placeholder for HTTP call
        return Math.random() > 0.5; // random success/failure
    }
}
",code_defect,missing_rollback_on_failure,,openai/gpt-oss-120b
Python,"import random

class DataProcessor:
    def __init__(self):
        self.data = []
        self._processed_data = None

    def load_data(self, source):
        if source == 'file':
            self.data = [random.randint(1, 100) for _ in range(1000)]
        elif source == 'api':
            self.data = [random.choice(['a', 'b', 'c']) for _ in range(500)]
        else:
            self.data = []

    def process_data(self):
        if self._processed_data is None:
            if all(isinstance(x, int) for x in self.data):
                self._processed_data = [x * 2 for x in self.data]
            else:
                self._processed_data = [x.upper() for x in self.data]
        return self._processed_data

    def save_data(self, path):
        with open(path, 'w') as f:
            for item in self._processed_data:
                f.write(str(item) + '\n')",code_smell,lazy_initialization_side_effects,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public void addUser(User user) { users.put(user.getUsername(), user); } public User getUser(String username) { return users.get(username); } public void updateUser(String username, User updatedUser) { users.put(username, updatedUser); } public void removeUser(String username) { users.remove(username); } }",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

// Global configuration (bad practice)
let config = {
  logFile: '/var/log/app.log',
  maxSize: 1024 * 1024,
  env: process.env.NODE_ENV || 'development'
};

// Utility to append logs (inefficient, no error handling)
function logMessage(level, message) {
  const timestamp = new Date().toISOString();
  const logEntry = `${timestamp} [${level}] ${message}\n`;
  // Synchronously writes to file each time, blocking event loop
  fs.appendFileSync(config.logFile, logEntry);
}

// Large monolithic function handling user registration
function registerUser(userData) {
  // Validate input (very shallow validation)
  if (!userData.email || !userData.password) {
    logMessage('ERROR', 'Missing email or password');
    return false;
  }

  // Check if user already exists (inefficient full file scan)
  const users = fs.readFileSync('users.json', 'utf8');
  const userList = JSON.parse(users);
  for (let i = 0; i < userList.length; i++) {
    if (userList[i].email === userData.email) {
      logMessage('WARN', `User ${userData.email} already exists`);
      return false;
    }
  }

  // Hash password (synchronous, blocking)
  const crypto = require('crypto');
  const hash = crypto.createHash('sha256').update(userData.password).digest('hex');

  // Add new user
  userList.push({ email: userData.email, passwordHash: hash, createdAt: new Date() });
  fs.writeFileSync('users.json', JSON.stringify(userList, null, 2));

  // Log success
  logMessage('INFO', `User ${userData.email} registered`);
  return true;
}

module.exports = { registerUser, logMessage };",code_smell,large_monolithic_function_and_blocking_io,,openai/gpt-oss-120b
JavaScript,"function processOrders(orders, users) {
  const results = [];
  for (let i = 0; i < orders.length; i++) {
    const order = orders[i];
    const user = users.find(u => u.id === order.userId);
    if (user) {
      if (order.status === 'pending') {
        order.status = 'processed';
        results.push({
          orderId: order.id,
          username: user.name,
          amount: order.total,
          timestamp: new Date()
        });
      }
    }
  }
  return results;
}

function calculateRevenue(orders) {
  let total = 0;
  for (let i = 0; i < orders.length; i++) {
    const order = orders[i];
    if (order.status === 'processed') {
      total += order.total;
    }
  }
  return total;
}

const allOrders = [{
  id: 1,
  userId: 101,
  status: 'pending',
  total: 100
}, {
  id: 2,
  userId: 102,
  status: 'completed',
  total: 50
}];

const allUsers = [{
  id: 101,
  name: 'Alice'
}, {
  id: 102,
  name: 'Bob'
}];

const processed = processOrders(allOrders, allUsers);
const revenue = calculateRevenue(processed);

console.log(`Revenue: $${revenue}`);",code_smell,inefficient_loops,,qwen/qwen3-32b
JavaScript,"
   class ShoppingCart {
       constructor() {
           this.items = [];
       }

       addItem(item) {
           this.items.push(item);
       }

       removeItem(itemName) {
           for (let i = 0; i < this.items.length; i++) {
               if (this.items[i].name === itemName) {
                   this.items.splice(i, 1);
                   break;
               }
           }
       }

       calculateTotal() {
           let total = 0;
           for (let item of this.items) {
               total += item.price;
           }
           return total;
       }
   }

   class Item {
       constructor(name, price) {
           this.name = name;
           this.price = price;
       }
   }

   let cart = new ShoppingCart();
   cart.addItem(new Item('Product A', 10.99));
   cart.addItem(new Item('Product B', 5.99));
   console.log(cart.calculateTotal());
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<User> getUsersPage(int pageNumber, int pageSize) throws SQLException {
        // pageNumber is 1-based, but the query uses 0-based offset incorrectly
        int offset = (pageNumber - 1) * pageSize; // off-by-one when pageNumber=0
        String sql = ""SELECT id, username, email FROM users LIMIT ? OFFSET ?"";
        List<User> users = new ArrayList<>();
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, pageSize);
            stmt.setInt(2, offset);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    User user = new User();
                    user.setId(rs.getInt(""id""));
                    user.setUsername(rs.getString(""username""));
                    user.setEmail(rs.getString(""email""));
                    users.add(user);
                }
            }
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,off_by_one_error_in_pagination,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUsers(List<User> users) {
        for (User user : users) {
            if (user != null) {
                if (user.getEmail() != null && !user.getEmail().isEmpty()) {
                    String email = user.getEmail().toLowerCase();
                    if (isValidEmail(email)) {
                        sendWelcomeEmail(email);
                    }
                }
            }
        }
    }

    private boolean isValidEmail(String email) {
        return email.matches(""^[A-Za-z0-9+_.-]+@(.+)$"");
    }

    private void sendWelcomeEmail(String email) {
        // Simulated email sending logic
        System.out.println(""Sending welcome email to "" + email);
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private String password; public UserAuthenticator(String password) { this.password = password; } public boolean authenticate(String inputPassword) { return this.password.equals(inputPassword); } public static void main(String[] args) { UserAuthenticator authenticator = new UserAuthenticator(""mysecretpassword""); System.out.println(authenticator.authenticate(""mysecretpassword"")); System.out.println(authenticator.authenticate(""wrongpassword"")); } }",code_smell,hardcoded_secrets,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class LogProcessor {
  constructor(logFilePath) {
    this.logFilePath = logFilePath;
    this.buffer = [];
  }

  // Reads the entire log file synchronously and parses each line
  loadLogs() {
    const data = fs.readFileSync(this.logFilePath, 'utf8');
    const lines = data.split('\n');
    for (let i = 0; i < lines.length; i++) {
      if (lines[i].trim() !== '') {
        this.buffer.push(this.parseLine(lines[i]));
      }
    }
  }

  // Parses a single log line into an object
  parseLine(line) {
    const parts = line.split(' ');
    return {
      timestamp: new Date(parts[0] + ' ' + parts[1]),
      level: parts[2],
      message: parts.slice(3).join(' ')
    };
  }

  // Filters logs by level and returns them
  getLogsByLevel(level) {
    return this.buffer.filter(entry => entry.level === level);
  }

  // Writes filtered logs back to a file; uses async write but doesn't handle callback errors
  exportFilteredLogs(level, outPath) {
    const filtered = this.getLogsByLevel(level);
    const content = filtered.map(e => `${e.timestamp.toISOString()} ${e.level} ${e.message}`).join('\n');
    fs.writeFile(outPath, content, (err) => {
      // BUG: ignoring error, causing silent failure
    });
  }
}

// Usage example (dangerous: hardcoded path and level)
const processor = new LogProcessor('/var/log/app.log');
processor.loadLogs();
processor.exportFilteredLogs('ERROR', '/tmp/error_logs.txt');",code_defect,ignored_error_callback,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                continue;
            }

            Product product = item.getProduct();
            if (product == null) {
                continue;
            }

            double itemTotal = item.getQuantity() * product.getPrice();
            order.addTotal(itemTotal);
        }

        if (order.getTotal() > 0) {
            String formattedTotal = String.format(""%.2f"", order.getTotal());
            System.out.println(""Order processed. Total: "" + formattedTotal);
        }
    }
}",code_smell,poor_error_handling,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}
    std::string getName() { return name; }
    int getSalary() { return salary; }
private:
    std::string name;
    int salary;
};

class Company {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    int calculateTotalSalary() {
        int totalSalary = 0;
        for (const auto& employee : employees) {
            totalSalary += employee.getSalary();
        }
        return totalSalary;
    }
private:
    std::vector<Employee> employees;
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));
    std::cout << company.calculateTotalSalary() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  // Loads JSON config from file. Caches result for subsequent calls.
  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // BUG: Using eval on file content instead of JSON.parse can execute malicious code
    this.cache = eval('(' + data + ')');
    return this.cache;
  }
}

function initializeApp() {
  const loader = new ConfigLoader('./config.json');
  const config = loader.load();
  // Assume config has a ""port"" property
  const server = require('http').createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('Server running on port ' + config.port);
  });
  server.listen(config.port);
}

initializeApp();",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  let result = '';
  if (input === 'login') {
    result = authenticate();
  } else if (input === 'register') {
    result = register();
  } else if (input === 'logout') {
    result = logout();
  } else {
    result = 'Unknown command';
  }
  return result;
}

function authenticate() {
  return 'User authenticated';
}

function register() {
  return 'User registered';
}

function logout() {
  return 'User logged out';
}

// Old function, not in use
// function validateUser(data) {
//   return data && data.username && data.password;
// }

// Hardcoded secret
const API_KEY = '12345-ABCDE-67890';

// Example of dead code
function unusedFunction() {
  console.log('This function is never called');
}",code_smell,,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userRepository) {
         this.userRepository = userRepository;
      }

      async getAllUsers() {
         return await this.userRepository.findAll();
      }

      async getUserById(id) {
         return await this.userRepository.findById(id);
      }

      async createUser(user) {
         if (!user || !user.name || !user.email) {
            throw new Error('Invalid user data');
         }
         return await this.userRepository.create(user);
      }

      async updateUser(id, user) {
         const existingUser = await this.getUserById(id);
         if (!existingUser) {
            throw new Error('User not found');
         }
         return await this.userRepository.update(id, user);
      }

      async deleteUser(id) {
         const existingUser = await this.getUserById(id);
         if (!existingUser) {
            throw new Error('User not found');
         }
         return await this.userRepository.delete(id);
      }
   }

   class UserRepository {
      async findAll() {
         // simulate a database query
         return [{ id: 1, name: 'John Doe', email: 'john@example.com' }, { id: 2, name: 'Jane Doe', email: 'jane@example.com' }];
      }

      async findById(id) {
         // simulate a database query
         const users = await this.findAll();
         return users.find(user => user.id === id);
      }

      async create(user) {
         // simulate a database query
         return { id: 3, name: user.name, email: user.email };
      }

      async update(id, user) {
         // simulate a database query
         return { id: id, name: user.name, email: user.email };
      }

      async delete(id) {
         // simulate a database query
         return true;
      }
   }

   const userRepository = new UserRepository();
   const userService = new UserService(userRepository);
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public User getUserById(int userId) {
        User user = null;
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String query = ""SELECT * FROM users WHERE id = "" + userId; // SQL injection risk
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                user = new User();
                user.setId(rs.getInt(""id""));
                user.setName(rs.getString(""name""));
                user.setEmail(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { stmt.close(); } catch (Exception ignored) {}
            try { conn.close(); } catch (Exception ignored) {}
        }
        return user;
    }
}

class User {
    private int id;
    private String name;
    private String email;
    public void setId(int id) { this.id = id; }
    public void setName(String name) { this.name = name; }
    public void setEmail(String email) { this.email = email; }
    public int getId() { return id; }
    public String getName() { return name; }
    public String getEmail() { return email; }
}",code_defect,sql_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"class UserValidator {
  validateUser(user) {
    if (!user || !user.name || !user.email) {
      return false;
    }

    if (typeof user.name !== 'string' || user.name.trim().length === 0) {
      return false;
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(user.email)) {
      return false;
    }

    if (user.age && typeof user.age === 'number' && user.age < 0) {
      return false;
    }

    return true;
  }
}

const validator = new UserValidator();

function registerUser(userData) {
  if (!validator.validateUser(userData)) {
    console.log('Invalid user data');
    return;
  }

  console.log('User is valid, proceeding with registration...');
}

// Example usage:
registerUser({ name: 'John Doe', email: 'johndoe@example.com', age: 25 });
registerUser({ name: '', email: 'invalid-email', age: -1 });",code_smell,long_function,,qwen/qwen3-32b
Python,"class PaymentProcessor:
    def __init__(self, payment_gateway):
        self.payment_gateway = payment_gateway
        self.cache = {}

    def process_payment(self, amount, customer_id):
        if customer_id in self.cache:
            return self.cache[customer_id]
        else:
            result = self.payment_gateway.charge(amount)
            self.cache[customer_id] = result
            return result

    def get_payment_status(self, customer_id):
        return self.cache.get(customer_id)
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // BUG: processing proceeds even if no task was retrieved (task == 0)
            std::cout << ""Processing: "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 1; i <= 5; ++i) {
        dp.addTask(i * 10);
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}",code_defect,logic_error_unchecked_empty_queue,,openai/gpt-oss-120b
Java,"public class UserValidator {
    private final UserRepository userRepository;

    public UserValidator(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public boolean validateUserCredentials(String username, String password) {
        User user = userRepository.findByUsername(username);
        if (user == null) {
            return false;
        }
        if (!user.getPassword().equals(password)) {
            return false;
        }
        if (user.getLastLogin() == null) {
            // Some logic here
            if (user.getCreationDate().getTime() < System.currentTimeMillis() - (30 * 24 * 60 * 60 * 1000)) {
                user.setAccountLocked(true);
                userRepository.save(user);
            }
        }
        return true;
    }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Student {
public:
    string name;
    int grade;
    Student(string n, int g) : name(n), grade(g) {}
};

bool compareStudents(Student a, Student b) {
    return a.grade < b.grade;
}

int main() {
    vector<Student> students;
    students.push_back(Student(""Alice"", 90));
    students.push_back(Student(""Bob"", 85));
    students.push_back(Student(""Charlie"", 95));
    sort(students.begin(), students.end(), compareStudents);
    for (auto& student : students) {
        cout << student.name << "" "" << student.grade << endl;
    }
    return 0;
}",code_smell,unused_import,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class LogProcessor {
    constructor(logFilePath) {
        this.logFilePath = logFilePath;
        this.buffer = [];
    }

    // Reads the entire log file synchronously and parses each line
    loadLogs() {
        const data = fs.readFileSync(this.logFilePath, 'utf8');
        const lines = data.split('\n');
        for (let i = 0; i < lines.length; i++) {
            const entry = this.parseLine(lines[i]);
            if (entry) this.buffer.push(entry);
        }
    }

    // Parses a single log line into an object
    parseLine(line) {
        const parts = line.split('|');
        if (parts.length !== 3) return null;
        return {
            timestamp: new Date(parts[0]),
            level: parts[1].trim(),
            message: parts[2].trim()
        };
    }

    // Returns the most recent N log entries
    getRecent(count) {
        // Off‑by‑one error: should be slice(-count) but uses count-1
        return this.buffer.slice(-count + 1);
    }
}

// Usage example (not part of library)
const processor = new LogProcessor('/var/log/app.log');
processor.loadLogs();
const recent = processor.getRecent(5);
console.log('Recent logs:', recent);
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

class DataProcessor:
    def __init__(self, input_path, output_path):
        self.input_path = input_path
        self.output_path = output_path
        self.data = None

    def load_data(self):
        with open(self.input_path, 'r') as f:
            self.data = json.load(f)

    def process_data(self):
        processed = []
        for item in self.data:
            if 'timestamp' in item:
                item['timestamp'] = datetime.fromtimestamp(item['timestamp'])
            processed.append(item)
        self.data = processed

    def save_data(self):
        if not os.path.exists(self.output_path):
            os.makedirs(self.output_path)
        with open(os.path.join(self.output_path, 'processed.json'), 'w') as f:
            json.dump(self.data, f, indent=4)

    def run(self):
        self.load_data()
        self.process_data()
        self.save_data()

if __name__ == '__main__':
    processor = DataProcessor('input.json', 'output/')
    processor.run()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserAccount {
         constructor(username, password) {
            this.username = username;
            this.password = password;
         }

         authenticate(password) {
            if (this.password === password) {
               return true;
            }
            return false;
         }
      }

      class AuthenticationManager {
         constructor() {
            this.accounts = [];
         }

         addAccount(account) {
            this.accounts.push(account);
         }

         authenticate(username, password) {
            for (let account of this.accounts) {
               if (account.username === username) {
                  return account.authenticate(password);
               }
            }
            return false;
         }
      }

      let authManager = new AuthenticationManager();
      let user = new UserAccount('johnDoe', 'password123');
      authManager.addAccount(user);
      console.log(authManager.authenticate('johnDoe', 'password123'));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String role) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // vulnerable to SQL injection
            String sql = ""SELECT email FROM users WHERE role = '"" + role + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void sendBulkEmail(List<String> emails, String message) {
        for (String email : emails) {
            // Simulated email sending (could block indefinitely)
            EmailClient.send(email, ""Subject"", message);
        }
    }
}

class EmailClient {
    public static void send(String to, String subject, String body) {
        // Dummy implementation: might throw unchecked exception
        if (to == null) {
            throw new IllegalArgumentException(""Recipient email is null"");
        }
        // Assume email is sent successfully
    }
}",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
Python,"import os
import time

def process_files(directory):
    files = os.listdir(directory)
    for file in files:
        if file.endswith('.txt'):
            file_path = os.path.join(directory, file)
            with open(file_path, 'r') as f:
                content = f.read()
                if 'error' in content:
                    print(f""File {file} contains error messages."")
                else:
                    print(f""File {file} is clean."")

        elif file.endswith('.log'):
            file_path = os.path.join(directory, file)
            with open(file_path, 'r') as f:
                content = f.read()
                if 'error' in content:
                    print(f""File {file} contains error messages."")
                else:
                    print(f""File {file} is clean."")

        else:
            print(f""Skipping file {file}."")

        time.sleep(1)  # Simulate processing time

if __name__ == ""__main__"":
    process_files('/data/logs')",code_smell,duplicate_code,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

class DataProcessor {
public:
    DataProcessor(const std::vector<int>& data) : data_(data) {}
    int calculateSum() {
        int sum = 0;
        for (const auto& value : data_) {
            sum += value;
        }
        return sum;
    }
    int calculateAverage() {
        return calculateSum() / data_.size();
    }
private:
    std::vector<int> data_;
};

dataProcessorFunction(const std::vector<int>& data) {
    DataProcessor processor(data);
    std::cout << ""Sum: "" << processor.calculateSum() << std::endl;
    std::cout << ""Average: "" << processor.calculateAverage() << std::endl;
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    dataProcessorFunction(data);
    return 0;
}",code_smell,inefficient_algorithm,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(configPath) {
        this.path = configPath;
        this.cache = null;
    }

    // Loads JSON config file synchronously
    load() {
        if (this.cache) return this.cache;
        const data = fs.readFileSync(this.path, 'utf8');
        // No error handling; malformed JSON will crash the process
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

class UserService {
    constructor(db) {
        this.db = db;
        this.config = new ConfigLoader('./config.json').load();
    }

    // Retrieves user by ID and applies discount based on config
    async getUserWithDiscount(userId) {
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        // Missing check for empty result; will throw when accessing undefined
        const discountRate = this.config.discountRate || 0;
        user.price = user.price * (1 - discountRate);
        return user;
    }
}

// Example usage
(async () => {
    const fakeDb = {
        query: async (sql, params) => {
            // Simulate DB returning empty array for missing user
            return [];
        }
    };
    const service = new UserService(fakeDb);
    const result = await service.getUserWithDiscount(42);
    console.log('Result:', result);
})();",code_defect,unhandled empty result leading to runtime TypeError,,openai/gpt-oss-120b
Python,"import os
import re

def process_logs(log_file):
    results = {}
    try:
        with open(log_file, 'r') as file:
            for line in file:
                match = re.search(r'\b(ERROR|WARNING)\b', line)
                if match:
                    level = match.group(1)
                    if level not in results:
                        results[level] = 1
                    else:
                        results[level] += 1
    except Exception as e:
        print(f""Failed to process logs: {e}"")
    return results

if __name__ == ""__main__"":
    log_path = os.path.join(os.getcwd(), ""logs.txt"")
    summary = process_logs(log_path)
    for level, count in summary.items():
        print(f""{level}: {count}"")",code_smell,inconsistent_error_handling,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger LOGGER = LoggerFactory.getLogger(UserService.class); public void authenticateUser(String username, String password) { try { Thread.sleep(1000); } catch (InterruptedException e) { LOGGER.error(""Error occurred during authentication"", e); } if (username.equals(""admin"") && password.equals(""password123"")) { LOGGER.info(""User authenticated successfully""); } else { LOGGER.warn(""Authentication failed""); } } }",code_smell,magic_string,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigManager:
    """"""Loads configuration from a JSON file and caches it.
    """"""
    _cache = {}
    _lock = threading.Lock()

    @classmethod
    def get_config(cls, path: str) -> dict:
        # NOTE: No validation of path; may lead to path traversal
        with cls._lock:
            if path in cls._cache:
                return cls._cache[path]
            with open(path, 'r') as f:
                data = json.load(f)
                cls._cache[path] = data
                return data

class UserService:
    def __init__(self, config_path: str):
        self.config = ConfigManager.get_config(config_path)
        self.db_conn_str = self.config.get('db_connection')
        # Directly using the connection string without sanitization
        self._connect_to_db(self.db_conn_str)

    def _connect_to_db(self, conn_str: str):
        # Simulated DB connection (placeholder)
        self.conn = conn_str

    def get_user(self, user_id: int) -> dict:
        # Vulnerable SQL query: string formatting leads to injection
        query = f""SELECT * FROM users WHERE id = {user_id}""
        # Simulate execution
        result = self._execute_query(query)
        return result

    def _execute_query(self, query: str) -> dict:
        # Placeholder for actual DB call
        # Returns dummy data for demonstration
        if ""DROP"" in query.upper():
            raise RuntimeError(""Dangerous query detected!"")
        return {""id"": 1, ""name"": ""Alice""}

# Example usage
service = UserService('config.json')
user = service.get_user(1)
print(user)
",code_defect,SQL_injection,,openai/gpt-oss-120b
Python,"import os
import subprocess

def execute_shell_command(command):
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print('Command output:', result.stdout)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print('Error executing command:', e.stderr)
        return ''


def process_user_input(user_input):
    if not user_input:
        print('No input provided.')
        return

    final_command = 'echo ' + user_input
    print('Constructed command:', final_command)

    execute_shell_command(final_command)


def main():
    user_input = input('Enter a command argument: ')
    process_user_input(user_input)

if __name__ == '__main__':
    main()",code_defect,command_injection_vulnerability,,qwen/qwen3-32b
JavaScript,class UserService { constructor() { this.users = []; } async getUser(id) { for (let i = 0; i < this.users.length; i++) { if (this.users[i].id === id) { return this.users[i]; } } return null; } async loadUsers() { const response = await fetch('https://example.com/users'); const data = await response.json(); this.users = data; } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserCache {
    constructor(filePath) {
        this.filePath = filePath;
        this.cache = {};
        this._load();
    }

    _load() {
        // Synchronous file read without error handling – can crash the process
        const data = fs.readFileSync(this.filePath, 'utf8');
        this.cache = JSON.parse(data);
    }

    getUser(id) {
        // Returns undefined if user not found – caller may assume object
        return this.cache[id];
    }

    addUser(user) {
        // No validation, may overwrite existing entry silently
        this.cache[user.id] = user;
        // Asynchronously write but forget to handle callback errors
        fs.writeFile(this.filePath, JSON.stringify(this.cache), (err) => {});
    }
}

// Usage example
const userCache = new UserCache('./data/users.json');
const user = userCache.getUser('123');
console.log(`User name: ${user.name}`); // Throws if user is undefined

module.exports = UserCache;",code_defect,unhandled_exception_and_missing_error_handling,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      this.validateUser(this.users[i]);
      this.calculateUserStats(this.users[i]);
      this.users[i].status = 'processed';
    }
  }

  validateUser(user) {
    if (!user.id || !user.name) {
      throw new Error(`Invalid user: ${JSON.stringify(user)}`);
    }
  }

  calculateUserStats(user) {
    user.total = 0;
    for (let j = 0; j < user.transactions.length; j++) {
      user.total += user.transactions[j].amount;
    }
    if (user.total > 1000) {
      user.category = 'premium';
    } else {
      user.category = 'standard';
    }
  }
}

module.exports = UserProcessor;",code_smell,large_class,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getUsers() {
            const users = await this.userRepository.findAll();
            const result = [];
            for (let i = 0; i < users.length; i++) {
               const user = users[i];
               result.push({
                  id: user.id,
                  name: user.name
               });
            }
            return result;
         }
      }

      class UserRepository {
         async findAll() {
            // simulate database query
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' }
            ];
         }
      }

      const userRepository = new UserRepository();
      const userService = new UserService(userRepository);
      userService.getUsers().then(users => console.log(users));
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmailsByRole(String role) throws SQLException {
        List<String> emails = new ArrayList<>();
        String query = ""SELECT email FROM users WHERE role = '"" + role + ""'""; // insecure concatenation
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        }
        return emails;
    }

    public void deleteUserById(int userId) throws SQLException {
        String sql = ""DELETE FROM users WHERE id = ?"";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, userId);
            stmt.executeUpdate();
        } finally {
            // Missing close for stmt and conn can lead to resource leak
        }
    }
}
",code_defect,SQL injection and resource leak,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class DataProcessor {
public:
    void process(const vector<string>& inputs) {
        for (const auto& input : inputs) {
            string cleaned = cleanInput(input);
            if (cleaned.empty()) {
                continue;
            }
            storeResult(cleaned);
        }
    }

private:
    string cleanInput(const string& input) {
        string result;
        for (char c : input) {
            if (isalnum(c)) {
                result += c;
            }
        }
        return result;
    }

    void storeResult(const string& result) {
        static vector<string> results;
        results.push_back(result);
        // Do something with results (e.g., save to file or DB)
    }
};

int main() {
    DataProcessor processor;
    vector<string> data = {""abc123"", ""!@#"", ""xyz789""};
    processor.process(data);
    return 0;
}",code_smell,static_variable_inside_class,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void setName(std::string newName) { name = newName; }
    void setAge(int newAge) { age = newAge; }

private:
    std::string name;
    int age;
};

class UserRepository {
public:
    void saveUser(User user) {
        users.push_back(user);
    }

    User getUserByName(std::string name) {
        for (User user : users) {
            if (user.getName() == name) {
                return user;
            }
        }
        // If no user is found, return a default user
        return User(""Default"", 0);
    }

private:
    std::vector<User> users;
};

int main() {
    UserRepository repository;
    User user(""John"", 30);
    repository.saveUser(user);

    User retrievedUser = repository.getUserByName(""John"");
    std::cout << retrievedUser.getName() << std::endl;
    std::cout << retrievedUser.getAge() << std::endl;

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String role) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String sql = ""SELECT email FROM users WHERE role = '"" + role + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, lose stack trace
        } finally {
            // Resources not properly closed if exception occurs
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_resource_leak,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final int MAX_RETRIES = 3;

    public void processOrder(Order order) {
        int retryCount = 0;
        boolean success = false;
        while (retryCount <= MAX_RETRIES) {
            try {
                if (order.validate()) {
                    success = order.process();
                    if (success) {
                        order.save();
                        order.sendConfirmation();
                        break;
                    }
                }
            } catch (Exception e) {
                retryCount++;
                System.out.println(""Retrying order processing... Attempt: "" + retryCount);
            }
        }
        if (!success) {
            order.markAsFailed();
        }
    }
}

class Order {
    private String id;
    private String customerEmail;

    public boolean validate() {
        return id != null && !id.isEmpty();
    }

    public boolean process() {
        // Simulate order processing
        return Math.random() > 0.2;
    }

    public void save() {
        // Save to database
    }

    public void sendConfirmation() {
        // Send email to customerEmail
    }

    public void markAsFailed() {
        // Mark as failed in the database
    }
}",code_smell,excessive_comments_and_logging,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <algorithm>

      class Employee {
      public:
         std::string name;
         int salary;

         Employee(std::string n, int s) : name(n), salary(s) {}
      };

      void sortEmployees(std::vector<Employee>& employees) {
         std::sort(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
            return a.salary < b.salary;
         });
      }

      int main() {
         std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
         sortEmployees(employees);

         for (const auto& employee : employees) {
            std::cout << employee.name << "" - "" << employee.salary << std::endl;
         }

         return 0;
      }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.config = {}
        self._load()

    def _load(self):
        # Loads JSON config without any validation
        with open(self.config_path, 'r') as f:
            self.config = json.load(f)
        logger.info(""Config loaded from %s"", self.config_path)

    def get(self, key, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.db_url = config_loader.get('db_url')
        self.batch_size = config_loader.get('batch_size', 100)
        self._connect()

    def _connect(self):
        # Simulated insecure DB connection using string formatting
        self.connection = f""DBConnection({self.db_url})""
        logger.info(""Connected to DB at %s"", self.db_url)

    def process_records(self, records):
        # Off‑by‑one error: should process up to batch_size, but uses >
        for i in range(self.batch_size + 1):
            record = records[i]
            self._process(record)

    def _process(self, record):
        # Unsafe eval on record data
        result = eval(record['expression'])
        logger.debug(""Processed record %s -> %s"", record['id'], result)
        return result

if __name__ == ""__main__"":
    cfg = ConfigLoader(os.getenv('CONFIG_PATH', 'config.json'))
    processor = DataProcessor(cfg)
    # Simulated input data
    data = [{""id"": i, ""expression"": ""i * 2""} for i in range(200)]
    processor.process_records(data)
",code_defect,off_by_one_and_unsafe_eval,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor() {
        this.orders = new ArrayList<>();
    }

    public void addOrder(Order order) {
        if (order != null) {
            this.orders.add(order);
        }
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.getStatus() == OrderStatus.PENDING) {
                processOrder(order);
            }
        }
    }

    private void processOrder(Order order) {
        try {
            if (order.getItems().isEmpty()) {
                System.out.println(""Order has no items. Skipping..."");
                return;
            }
            for (OrderItem item : order.getItems()) {
                if (item.getQuantity() <= 0) {
                    continue;
                }
                System.out.println(""Processing item: "" + item.getName() + "" for order "" + order.getId());
            }
            order.setStatus(OrderStatus.PROCESSED);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,public class UserManager { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUser(int index) { return users.get(index); } public void removeUser(int index) { users.remove(index); } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserCache {
  constructor(filePath) {
    this.filePath = filePath;
    this.cache = {};
    this.load();
  }

  load() {
    const data = fs.readFileSync(this.filePath, 'utf8');
    this.cache = JSON.parse(data);
  }

  getUser(id) {
    // Returns a user object; if not in cache, reads from file each time
    if (!this.cache[id]) {
      const raw = fs.readFileSync(this.filePath, 'utf8');
      const all = JSON.parse(raw);
      this.cache = all; // overwrites entire cache
    }
    return this.cache[id];
  }

  updateUser(id, updates) {
    const user = this.cache[id] || {};
    Object.assign(user, updates);
    this.cache[id] = user;
    // Asynchronously writes but does not handle errors
    fs.writeFile(this.filePath, JSON.stringify(this.cache), () => {});
  }
}

module.exports = UserCache;",code_defect,race_condition_and_data_loss,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order != null) {
            String customerEmail = order.getCustomerEmail();
            double totalPrice = calculateTotalPrice(order.getItems());
            
            if (totalPrice > 0) {
                sendConfirmationEmail(customerEmail, totalPrice);
            }
            
            if (order.isPriority()) {
                expediteOrder(order);
            }
            
            logOrderDetails(order);
        }
    }

    private double calculateTotalPrice(List<Item> items) {
        double totalPrice = 0;
        for (Item item : items) {
            totalPrice += item.getPrice();
            if (item.isDiscounted()) {
                totalPrice -= item.getDiscount();
            }
        }
        return totalPrice;
    }

    private void sendConfirmationEmail(String email, double price) {
        System.out.println(""Sending email to "" + email + "" for total price: "" + price);
    }

    private void expediteOrder(Order order) {
        order.setStatus(""EXPEDITED"");
        System.out.println(""Order marked for expedited processing."");
    }

    private void logOrderDetails(Order order) {
        System.out.println(""Order details: "" + order);
    }
}",code_smell,large_class,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}
    std::string getName() { return name; }
    int getSalary() { return salary; }
private:
    std::string name;
    int salary;
};
class Company {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    int calculateTotalSalary() {
        int totalSalary = 0;
        for (const auto& employee : employees) {
            totalSalary += employee.getSalary();
        }
        return totalSalary;
    }
private:
    std::vector<Employee> employees;
};
int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));
    std::cout << company.calculateTotalSalary() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self.conn.row_factory = sqlite3.Row
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, email):
        self.conn.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()

    def get_users_page(self, page_number, page_size=10):
        offset = page_number * page_size  # Off-by-one error: should be (page_number - 1) * page_size
        cursor = self.conn.execute('SELECT * FROM users LIMIT ? OFFSET ?', (page_size, offset))
        return [dict(row) for row in cursor]

# Example usage
repo = UserRepository(':memory:')
for i in range(25):
    repo.add_user(f'user{i}', f'user{i}@example.com')

# Expect first page to contain users 0-9, but due to bug it returns users 10-19
first_page = repo.get_users_page(1)
print('First page users:', [u['username'] for u in first_page])",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserSession {
  constructor(userId, token, role) {
    this.userId = userId;
    this.token = token;
    this.role = role;
    this.isLoggedIn = true;
    this.lastActivity = Date.now();
  }

  refreshSession() {
    this.lastActivity = Date.now();
  }

  checkSessionValidity() {
    const currentTime = Date.now();
    const idleTimeInMs = currentTime - this.lastActivity;

    if (idleTimeInMs > 30 * 60 * 1000) {
      this.isLoggedIn = false;
      this.token = null;
      console.log('Session expired due to inactivity');
      return false;
    }

    if (!this.token || !this.userId) {
      console.log('Invalid session: missing token or user ID');
      this.isLoggedIn = false;
      return false;
    }

    return true;
  }

  isAdmin() {
    return this.role === 'admin';
  }

  getUserInfo() {
    return {
      id: this.userId,
      role: this.role
    };
  }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class PaymentProcessor {
    private static final int MAX_ATTEMPTS = 5;
    public boolean processPayment(String paymentInfo) {
        for (int attempt = 0; attempt < MAX_ATTEMPTS; attempt++) {
            try {
                // Simulate a payment processing attempt
                Thread.sleep(100);
                return true;
            } catch (InterruptedException e) {
                // Ignore and retry
            }
        }
        return false;
    }
}",code_smell,inefficient_error_handling,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logging.basicConfig(level=logging.INFO)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.config = {}
        self._load()

    def _load(self):
        # Directly reading file without validation - potential security issue if path is user-controlled
        with open(self.config_path, 'r') as f:
            self.config = json.load(f)

    def get(self, key, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, db_conn_str):
        self.db_conn_str = db_conn_str
        self._connect()

    def _connect(self):
        # Simulated DB connection (placeholder)
        self.conn = self.db_conn_str
        logging.info(""Connected to DB"")

    def fetch_user_data(self, user_id):
        # Vulnerable to SQL injection - raw string formatting
        query = f""SELECT * FROM users WHERE id = {user_id}""
        logging.debug(f""Executing query: {query}"")
        # Simulated query execution
        return {""id"": user_id, ""name"": ""John Doe""}

    def process(self, user_id):
        data = self.fetch_user_data(user_id)
        # Off‑by‑one error: iterating one too many times
        for i in range(len(data) + 1):
            logging.info(f""Processing field {i}"")
        return data

if __name__ == ""__main__"":
    cfg = ConfigLoader(os.getenv('CONFIG_PATH', 'config.json'))
    processor = DataProcessor(cfg.get('db_conn'))
    result = processor.process(42)
    print(json.dumps(result))
",code_defect,sql_injection_and_off_by_one,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private List<User> users;

    public UserProcessor() {
        this.users = new ArrayList<>();
    }

    public void addUsers(List<User> userList) {
        for (User user : userList) {
            if (user != null && user.getName() != null && !user.getName().isEmpty()) {
                users.add(user);
            }
        }
    }

    public void processUsers() {
        for (int i = 0; i < users.size(); i++) {
            User user = users.get(i);
            if (user.getRole().equals(""admin"")) {
                sendAdminNotification(user);
            } else {
                sendRegularNotification(user);
            }
        }
    }

    private void sendAdminNotification(User user) {
        // Simulate notification logic
        System.out.println(""Admin notification sent to: "" + user.getName());
    }

    private void sendRegularNotification(User user) {
        // Simulate notification logic
        System.out.println(""Regular notification sent to: "" + user.getName());
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger logger = LoggerFactory.getLogger(UserService.class); public User getUserDetails(String username) { User user = new User(); user.setUsername(username); try { Thread.sleep(1000); } catch (InterruptedException e) { logger.error(""Error occurred"", e); } return user; } }",code_smell,inefficient_resource_usage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i]; // may read out of bounds
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << "" Odd sum: "" << processor.getOddSum() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processUserInput(const std::string& input) {
    std::string processed = input;
    for (size_t i = 0; i < processed.length(); ++i) {
        if (processed[i] >= 'A' && processed[i] <= 'Z') {
            processed[i] = processed[i] + 32;
        }
    }
    return processed;
}

int main() {
    std::string input;
    std::cout << ""Enter your name: "";
    std::getline(std::cin, input);

    std::string result = processUserInput(input);
    std::cout << ""Processed name: "" << result << std::endl;

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>
   #include <string>

   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
       void setAge(int age) { this->age = age; }

   private:
       std::string name;
       int age;
   };

   class UserRepository {
   public:
       void addUser(User user) { users.push_back(user); }
       User getUserByName(std::string name) {
           for (User user : users) {
               if (user.getName() == name) {
                   return user;
               }
           }
           User notFoundUser(""Not Found"", -1);
           return notFoundUser;
       }

   private:
       std::vector<User> users;
   };

   int main() {
       UserRepository repo;
       User user1(""John"", 30);
       repo.addUser(user1);
       User user2 = repo.getUserByName(""John"");
       std::cout << user2.getName() << std::endl;
       return 0;
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, email):
        cursor = self.conn.cursor()
        cursor.execute(f""INSERT INTO users (username, email) VALUES ('{username}', '{email}')"")
        self.conn.commit()

    def find_user(self, username):
        cursor = self.conn.cursor()
        query = f""SELECT id, username, email FROM users WHERE username = '{username}'""
        cursor.execute(query)
        return cursor.fetchone()

# Example usage
repo = UserRepository('app.db')
repo.add_user('alice', 'alice@example.com')
print(repo.find_user('alice'))",code_defect,SQL_injection,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users, dbConnection) {
    this.users = users;
    this.dbConnection = dbConnection;
  }

  authenticateUser(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        if (this.users[i].password === password) {
          return this.generateToken(this.users[i]);
        } else {
          return { success: false, message: 'Invalid password' };
        }
      }
    }

    return { success: false, message: 'User not found' };
  }

  generateToken(user) {
    const token = Math.random().toString(36).substr(2);
    this.dbConnection.saveToken(user.id, token);
    return { success: true, token };
  }
}

// Example usage:
const users = [
  { id: 1, username: 'john_doe', password: 's3cr3t' }
];

const dbConnection = {
  saveToken: (id, token) => console.log(`Token saved for user ID ${id}`)
};

const auth = new UserAuth(users, dbConnection);
console.log(auth.authenticateUser('john_doe', 's3cr3t'));",code_smell,poor_naming,,qwen/qwen3-32b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    const processedUsers = [];
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      const processedUser = {
        id: user.id,
        name: user.name,
        email: user.email
      };
      processedUsers.push(processedUser);
    }
    return processedUsers;
  }
}

const users = [
  { id: 1, name: 'John Doe', email: 'john@example.com' },
  { id: 2, name: 'Jane Doe', email: 'jane@example.com' }
];

const userProcessor = new UserProcessor(users);
const processedUsers = userProcessor.processUsers();
console.log(processedUsers);",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserManager {
    constructor(dbPath) {
        this.dbPath = dbPath;
        this.cache = {};
    }

    loadUser(id) {
        if (this.cache[id]) return this.cache[id];
        const data = fs.readFileSync(this.dbPath, 'utf8');
        const users = JSON.parse(data);
        const user = users.find(u => u.id === id);
        this.cache[id] = user;
        return user;
    }

    // Updates user email without proper validation
    updateEmail(id, newEmail) {
        const user = this.loadUser(id);
        if (!user) throw new Error('User not found');
        user.email = newEmail; // no sanitization
        this.saveAll();
    }

    // Saves entire user list back to file each time – race condition risk
    saveAll() {
        const allUsers = Object.values(this.cache);
        const json = JSON.stringify(allUsers, null, 2);
        fs.writeFileSync(this.dbPath, json, 'utf8');
    }
}

// Usage example
const manager = new UserManager('./data/users.json');
manager.updateEmail('123', ""attacker@example.com\n<script>alert('XSS');</script>"");",code_defect,injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user.status === 'active') {
        this.sendWelcomeEmail(user);
      }
      this.updateLastLoggedIn(user);
      this.logUser(user);
    });
  }

  sendWelcomeEmail(user) {
    // Simulate welcome email sending
    console.log(`Sending welcome email to ${user.email}`);
  }

  updateLastLoggedIn(user) {
    // Simulate updating last logged in time
    user.lastLoggedIn = new Date();
  }

  logUser(user) {
    console.log(`Processed user: ${user.id}, ${user.name}`);
  }
}

const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com', status: 'active' },
  { id: 2, name: 'Bob', email: 'bob@example.com', status: 'inactive' }
];

const processor = new UserProcessor(users);
processor.processUsers();",code_smell,feature envy,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        if user_data:
            return {
                'id': user_data[0],
                'name': user_data[1],
                'email': user_data[2]
            }
        return None

    def update_user(self, user_id, name, email):
        cursor = self.db_connection.cursor()
        cursor.execute('UPDATE users SET name = %s, email = %s WHERE id = %s', (name, email, user_id))
        self.db_connection.commit()
        return True
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserCache {
  constructor(filePath) {
    this.filePath = filePath;
    this.cache = {};
    this._load();
  }

  _load() {
    // Synchronously read the entire cache file on startup
    const data = fs.readFileSync(this.filePath, 'utf8');
    this.cache = JSON.parse(data);
  }

  getUser(id) {
    // Returns a shallow copy to prevent external mutation
    const user = this.cache[id];
    return user ? { ...user } : null;
  }

  updateUser(id, updates) {
    if (!this.cache[id]) {
      throw new Error('User not found');
    }
    // Directly mutate the cached object
    Object.assign(this.cache[id], updates);
    // Asynchronously write the whole cache back to disk
    fs.writeFile(this.filePath, JSON.stringify(this.cache), (err) => {
      if (err) {
        console.error('Failed to persist cache');
      }
    });
  }
}

// Usage example (in production this would be called from many async contexts)
const userCache = new UserCache('./userCache.json');

async function processUserRequests(requests) {
  for (const req of requests) {
    const user = userCache.getUser(req.id);
    if (user) {
      // Simulate async processing
      await new Promise(r => setTimeout(r, 10));
      userCache.updateUser(req.id, { lastActive: Date.now() });
    }
  }
}

module.exports = { UserCache, processUserRequests };",code_defect,race_condition_due_to_async_write,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  const users = [];
  if (input.length > 0) {
    for (let i = 0; i < input.length; i++) {
      const user = {};
      user.id = input[i].id;
      user.name = input[i].name;
      user.email = input[i].email;
      users.push(user);
    }
  }

  if (users.length > 0) {
    const formattedUsers = [];
    for (let j = 0; j < users.length; j++) {
      const formattedUser = {};
      formattedUser.id = users[j].id;
      formattedUser.fullName = users[j].name;
      formattedUser.contactEmail = users[j].email;
      formattedUsers.push(formattedUser);
    }
    return formattedUsers;
  } else {
    return [];
  }
}",code_smell,duplicate_code,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getAllUsers() {
            const users = await this.userRepository.findAll();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async getUserById(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return { id: user.id, name: user.name };
         }
      }

      class UserRepository {
         async findAll() {
            // simulate database query
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' }
            ];
         }

         async findById(id) {
            // simulate database query
            const users = await this.findAll();
            return users.find(user => user.id === id);
         }
      }

      const userRepository = new UserRepository();
      const userService = new UserService(userRepository);
      (async () => {
         console.log(await userService.getAllUsers());
         console.log(await userService.getUserById(1));
      })();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASS = ""password123"";

    public User getUserByUsername(String username) {
        User user = null;
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT id, username, email FROM users WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return user;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection,,openai/gpt-oss-120b
Python,"import requests
import time

def fetch_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    response = requests.get(url)
    return response.json()

def update_user_cache(cache, user_id):
    user_data = fetch_user_data(user_id)
    cache[user_id] = user_data
    print(f'User {user_id} cached at {time.time()}')

user_cache = {}

def get_cached_user(user_id):
    if user_id not in user_cache:
        update_user_cache(user_cache, user_id)
    return user_cache[user_id]

# Example usage:
if __name__ == '__main__':
    user1 = get_cached_user(123)
    user2 = get_cached_user(456)
    print(user1['name'])
    print(user2['name'])",code_smell,lack_of_cache_expiration,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUser(id) { const user = await this.userDao.findById(id); if (user) { return user; } else { return null; } } async getUsers() { const users = await this.userDao.findAll(); return users; } },code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.config = {}
        self._load()

    def _load(self):
        # Reads a JSON config file; no validation performed
        with open(self.config_path, 'r') as f:
            data = f.read()
        # Unsafe deserialization: directly eval the content
        self.config = eval(data)  # BUG: using eval on untrusted input

    def get(self, key, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.db_url = config_loader.get('db_url')
        self.batch_size = config_loader.get('batch_size', 100)
        self._connect()

    def _connect(self):
        # Simulated DB connection (placeholder)
        self.conn = None
        logger.info(f""Connecting to DB at {self.db_url}"")
        # No actual connection logic; potential runtime error later

    def process_records(self, records):
        # Process records in batches but off-by-one error in slicing
        for i in range(0, len(records), self.batch_size):
            batch = records[i:i + self.batch_size - 1]  # BUG: last record of each batch omitted
            self._process_batch(batch)

    def _process_batch(self, batch):
        for record in batch:
            # Simulate processing
            logger.debug(f""Processing record {record['id']}"")
            # Potential KeyError if 'id' missing
            # ... more processing ...

def main():
    config_path = os.getenv('APP_CONFIG', 'config.json')
    loader = ConfigLoader(config_path)
    processor = DataProcessor(loader)
    # Simulated input data
    records = [{'id': i, 'value': i * 2} for i in range(250)]
    processor.process_records(records)

if __name__ == ""__main__"":
    main()
",code_defect,unsafe_deserialization_and_off_by_one,,openai/gpt-oss-120b
Python,"import json
import os
from datetime import datetime

def parse_and_save_data(data, output_dir='output'):
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    processed_data = []
    for idx, item in enumerate(data):
        try:
            item['id'] = idx
            item['timestamp'] = datetime.now().isoformat()
            item['raw_data'] = json.dumps(item, default=str)
            processed_data.append(item)
        except Exception as e:
            print(f""Error processing item {idx}: {e}"")

    filename = os.path.join(output_dir, f""data_{datetime.now().strftime('%Y%m%d%H%M%S')}.json"")
    with open(filename, 'w') as f:
        json.dump(processed_data, f, indent=2)

    return filename

# Legacy code, might be removed in future releases
# def old_parser(data):
#     return [x for x in data if x is not None]",code_smell,dead_code,,qwen/qwen3-32b
Java,"
   public class UserAuthenticator {
       private static final String DEFAULT_PASSWORD = ""password123"";
   
       public boolean authenticate(String username, String password) {
           if (username == null || username.isEmpty()) {
               return false;
           }
           if (password == null || password.isEmpty()) {
               password = DEFAULT_PASSWORD;
           }
           // Simulate a delay for 'security' reasons
           try {
               Thread.sleep(100);
           } catch (InterruptedException e) {
               Thread.currentThread().interrupt();
           }
           return username.equals(""admin"") && password.equals(DEFAULT_PASSWORD);
       }
   }
   ",code_defect,insecure_default_password,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class LogProcessor {
public:
    LogProcessor(const std::vector<std::string>& logs) : logs_(logs) {}

    // Returns the most frequent error code in the logs.
    // Expected format of each log line: ""<timestamp> ERROR:<code> <message>""
    int getMostFrequentErrorCode() const {
        std::vector<int> codes;
        for (const auto& line : logs_) {
            size_t pos = line.find(""ERROR:"");
            if (pos != std::string::npos) {
                size_t start = pos + 6; // length of ""ERROR:""
                size_t end = line.find(' ', start);
                std::string codeStr = line.substr(start, end - start);
                int code = std::stoi(codeStr);
                codes.push_back(code);
            }
        }
        if (codes.empty()) return -1;
        std::sort(codes.begin(), codes.end());
        int mostFreq = codes[0];
        int current = codes[0];
        int count = 1;
        int maxCount = 1;
        // Off‑by‑one: loop runs to i < codes.size() instead of i < codes.size()
        for (size_t i = 1; i <= codes.size(); ++i) {
            if (i < codes.size() && codes[i] == current) {
                ++count;
            } else {
                if (count > maxCount) {
                    maxCount = count;
                    mostFreq = current;
                }
                if (i < codes.size()) {
                    current = codes[i];
                    count = 1;
                }
            }
        }
        return mostFreq;
    }

private:
    std::vector<std::string> logs_;
};

int main() {
    std::vector<std::string> logs = {
        ""2023-07-01T12:00:00 ERROR:404 Not Found"",
        ""2023-07-01T12:01:00 INFO:User logged in"",
        ""2023-07-01T12:02:00 ERROR:500 Internal Server Error"",
        ""2023-07-01T12:03:00 ERROR:404 Not Found"",
        ""2023-07-01T12:04:00 ERROR:404 Not Found""
    };
    LogProcessor processor(logs);
    std::cout << ""Most frequent error code: "" << processor.getMostFrequentErrorCode() << std::endl;
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    if (!user || !user.name || !user.email) {
      throw new Error('Invalid user data');
    }

    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === user.email) {
        throw new Error('User with this email already exists');
      }
    }

    this.users.push(user);
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  deleteUser(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        this.users.splice(i, 1);
        return;
      }
    }
  }
}

const userManager = new UserManager();
userManager.addUser({ name: 'Alice', email: 'alice@example.com' });
userManager.addUser({ name: 'Bob', email: 'bob@example.com' });
userManager.deleteUser('alice@example.com');",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class PaymentProcessor {
         constructor(paymentGateway) {
            this.paymentGateway = paymentGateway;
         }

         processPayment(order) {
            const paymentDetails = order.paymentDetails;
            const amount = paymentDetails.amount;
            const paymentMethod = paymentDetails.paymentMethod;

            if (paymentMethod === 'creditCard') {
               this.paymentGateway.chargeCreditCard(amount);
            } else if (paymentMethod === 'paypal') {
               this.paymentGateway.chargePaypal(amount);
            }
            // todo: add more payment methods
         }
      }

      class PaymentGateway {
         chargeCreditCard(amount) {
            console.log(`Charging credit card: $${amount}`);
         }

         chargePaypal(amount) {
            console.log(`Charging paypal: $${amount}`);
         }
      }

      const paymentGateway = new PaymentGateway();
      const paymentProcessor = new PaymentProcessor(paymentGateway);
      const order = {
         paymentDetails: {
            amount: 100,
            paymentMethod: 'creditCard'
         }
      };
      paymentProcessor.processPayment(order);
   ",code_smell,god_class,,llama-3.3-70b-versatile
Python,"import os
import json
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                profile TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username, profile_data):
        # profile_data is a dict that will be stored as JSON
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, profile) VALUES (?, ?)',
                       (username, json.dumps(profile_data)))
        self.conn.commit()

    def get_user_profile(self, username):
        cursor = self.conn.cursor()
        cursor.execute('SELECT profile FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            # BUG: Using eval on JSON string can execute arbitrary code if the DB is compromised
            return eval(row[0])
        return None

    def delete_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage (not part of production code)
if __name__ == '__main__':
    manager = UserManager('users.db')
    manager.add_user('alice', {'age': 30, 'email': 'alice@example.com'})
    profile = manager.get_user_profile('alice')
    print('Loaded profile:', profile)
    manager.delete_user('alice')
    os.remove('users.db')
",code_defect,unsafe_deserialization_using_eval,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

using namespace std;

class DataProcessor {
private:
    vector<int> data;
    int total = 0;

public:
    DataProcessor(const vector<int>& input) : data(input) {
        for (int val : data) {
            total += val;
        }
    }

    void processAndPrint() {
        cout << ""Processing data...\n"";
        if (data.empty()) {
            cout << ""No data to process.\n"";
            return;
        }

        int maxVal = data[0];
        for (int i = 1; i < data.size(); ++i) {
            if (data[i] > maxVal) {
                maxVal = data[i];
            }
        }

        cout << ""Max value: "" << maxVal << ""\n"";
        cout << ""Total sum: "" << total << ""\n"";
    }
};

int main() {
    vector<int> values = {4, 2, 9, 1, 5};
    DataProcessor dp(values);
    dp.processAndPrint();
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor() {
            this.users = [];
         }

         addUser(user) {
            this.users.push(user);
         }

         removeUser(userId) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === userId) {
                  this.users.splice(i, 1);
                  break;
               }
            }
         }

         getUser(userId) {
            for (let user of this.users) {
               if (user.id === userId) {
                  return user;
               }
            }
            return null;
         }
      }

      const userService = new UserService();
      userService.addUser({ id: 1, name: 'John Doe' });
      userService.addUser({ id: 2, name: 'Jane Doe' });
      console.log(userService.getUser(1));
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it globally.""""""
    _cache = None
    _lock = threading.Lock()

    @classmethod
    def load(cls, path: str):
        # Missing validation: path could be absolute or malicious
        with cls._lock:
            if cls._cache is None:
                with open(path, 'r') as f:
                    cls._cache = json.load(f)
        return cls._cache

class DataProcessor:
    def __init__(self, config_path):
        self.config = ConfigLoader.load(config_path)
        self.threshold = self.config.get('threshold', 10)
        self.results = []

    def process(self, data_items):
        for item in data_items:
            # Off‑by‑one error: should be < len(data_items)
            for i in range(len(data_items)):
                if i == self.threshold:
                    break
                processed = self._transform(item)
                self.results.append(processed)
        return self.results

    def _transform(self, item):
        # Unsafe eval on user supplied data
        return eval(item)

# Usage example (would be in production code)
if __name__ == ""__main__"":
    processor = DataProcessor('config.json')
    raw_data = [""{'value': 1}"", ""{'value': 2}""]
    output = processor.process(raw_data)
    print(output)",code_defect,off_by_one_and_unsafe_eval,,openai/gpt-oss-120b
Python,"import requests
import json

class UserAPI:
    def __init__(self):
        self.base_url = 'https://api.example.com/v1/users'
        self.headers = {'Authorization': 'Bearer 1234567890'}

    def get_user(self, user_id):
        url = f'{self.base_url}/{user_id}'
        response = requests.get(url, headers=self.headers)
        if response.status_code == 200:
            return json.loads(response.text)
        else:
            return None

    def update_user_email(self, user_id, new_email):
        url = f'{self.base_url}/{user_id}'
        data = {'email': new_email}
        response = requests.patch(url, headers=self.headers, json=data)
        return response.status_code == 200

    def delete_user(self, user_id):
        url = f'{self.base_url}/{user_id}'
        response = requests.delete(url, headers=self.headers)
        return response.status_code == 204

    def get_all_users(self):
        response = requests.get(self.base_url, headers=self.headers)
        if response.status_code == 200:
            return json.loads(response.text)
        else:
            return []

# Hardcoded credentials and lack of input validation
# Vulnerable to API errors and potential security issues if credentials are exposed",code_defect,hardcoded_credentials,,qwen/qwen3-32b
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {}
    void addUser(const std::string& name) {
        users.push_back(name);
    }
    std::string getUserByIndex(size_t index) const {
        // Off‑by‑one error: should be index < users.size()
        if (index <= users.size()) {
            return users[index];
        }
        return """";
    }
private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""Alice"");
    um.addUser(""Bob"");
    std::cout << um.getUserByIndex(2) << std::endl; // Out‑of‑bounds access
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    this.users.forEach(user => {
      const isEligible = this._isUserEligible(user);
      if (isEligible) {
        this._assignUserToGroup(user);
      }
    });
  }

  _isUserEligible(user) {
    if (user.status === 'active' && user.subscriptionLevel >= 3) {
      return true;
    } else {
      return false;
    }
  }

  _assignUserToGroup(user) {
    if (user.role === 'admin') {
      user.group = 'admins';
    } else if (user.role === 'moderator') {
      user.group = 'moderators';
    } else {
      user.group = 'members';
    }
    return user;
  }
}

// Usage
const users = [
  { id: 1, name: 'Alice', status: 'active', subscriptionLevel: 3, role: 'admin' },
  { id: 2, name: 'Bob', status: 'inactive', subscriptionLevel: 2, role: 'member' }
];

const processor = new UserProcessor(users);
processor.processUsers();
console.log(users);",code_smell,long_method,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    std::string name;
    int grade;

    Student(std::string n, int g) : name(n), grade(g) {}

    bool operator<(const Student& other) const {
        return grade < other.grade;
    }
};

void sortStudents(std::vector<Student>& students) {
    std::sort(students.begin(), students.end());
}

int main() {
    std::vector<Student> students = {Student(""John"", 85), Student(""Alice"", 90), Student(""Bob"", 78)};
    sortStudents(students);
    for (const auto& student : students) {
        std::cout << student.name << "" : "" << student.grade << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& filename) : fileName(filename) {}
    void process() {
        std::vector<std::string> lines = readLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off‑by‑one error
            std::lock_guard<std::mutex> lock(mtx);
            processLine(lines[i]);
        }
    }
private:
    std::string fileName;
    std::mutex mtx;
    std::vector<std::string> readLines() {
        // Dummy implementation
        return {""line1"",""line2"",""line3""};
    }
    void processLine(const std::string& line) {
        // Simulate some work
        std::cout << ""Processing: "" << line << std::endl;
    }
};

int main() {
    LogProcessor lp(""app.log"");
    std::thread t1(&LogProcessor::process, &lp);
    std::thread t2(&LogProcessor::process, &lp);
    t1.join();
    t2.join();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

struct User {
    std::string name;
    int age;
    bool is_active;
};

void processUsers(std::vector<User>& users) {
    for (size_t i = 0; i < users.size(); ++i) {
        if (users[i].is_active) {
            std::cout << ""Processing user: "" << users[i].name << std::endl;
            for (size_t j = 0; j < users.size(); ++j) {
                if (i != j && users[j].age > users[i].age) {
                    std::cout << ""  Compared with user: "" << users[j].name << std::endl;
                }
            }
        }
    }
}

int main() {
    std::vector<User> users = {
        {""Alice"", 30, true},
        {""Bob"", 25, true},
        {""Charlie"", 35, false}
    };

    processUsers(users);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class Company {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    void sortEmployees() { std::sort(employees.begin(), employees.end(), [](Employee a, Employee b) { return a.getAge() < b.getAge(); }); }
    void printEmployees() {
        for (Employee employee : employees) {
            std::cout << employee.getName() << "" is "" << employee.getAge() << "" years old."" << std::endl;
        }
    }

private:
    std::vector<Employee> employees;
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 30));
    company.addEmployee(Employee(""Alice"", 25));
    company.addEmployee(Employee(""Bob"", 40));
    company.sortEmployees();
    company.printEmployees();
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class UserService {
    private Connection dbConnection;
    private static final String SELECT_USER = ""SELECT * FROM users WHERE username = '"" + ""?"" + ""'""; // insecure concatenation

    public UserService(Connection connection) {
        this.dbConnection = connection;
    }

    public Map<String, String> getUserInfo(String username) throws SQLException {
        Map<String, String> userInfo = new HashMap<>();
        PreparedStatement stmt = dbConnection.prepareStatement(SELECT_USER);
        stmt.setString(1, username);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            userInfo.put(""id"", rs.getString(""id""));
            userInfo.put(""email"", rs.getString(""email""));
            userInfo.put(""role"", rs.getString(""role""));
        }
        rs.close();
        stmt.close();
        return userInfo;
    }
}
",code_defect,SQL injection due to string concatenation in query,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.getStatus().equals(""NEW"")) {
                if (order.getTotal() > 0) {
                    if (order.getCustomer() != null && !order.getCustomer().isEmpty()) {
                        order.setStatus(""PROCESSED"");
                        notifyCustomer(order);
                    }
                }
            }
        }
    }

    private void notifyCustomer(Order order) {
        // Simulated notification logic
        System.out.println(""Notifying customer: "" + order.getCustomer());
    }

    public static void main(String[] args) {
        List<Order> orders = new ArrayList<>();
        orders.add(new Order(""123"", ""NEW"", 100.0, ""Alice""));
        orders.add(new Order(""456"", ""NEW"", 0.0, ""Bob""));
        orders.add(new Order(""789"", ""CANCELLED"", 50.0, ""Charlie""));

        new OrderProcessor(orders).processOrders();
    }
}

class Order {
    private String id;
    private String status;
    private double total;
    private String customer;

    public Order(String id, String status, double total, String customer) {
        this.id = id;
        this.status = status;
        this.total = total;
        this.customer = customer;
    }

    public String getId() {
        return id;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public double getTotal() {
        return total;
    }

    public String getCustomer() {
        return customer;
    }
}",code_smell,nested_conditionals,,qwen/qwen3-32b
Python,"class UserManager:
    def __init__(self, db_connection):
        self.db_connection = db_connection
        self.users = {}

    def add_user(self, user_id, username):
        if user_id in self.users:
            return
        self.users[user_id] = username
        self.db_connection.execute('INSERT INTO users (id, username) VALUES (%s, %s)', (user_id, username))

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, new_username):
        if user_id not in self.users:
            return
        self.users[user_id] = new_username
        self.db_connection.execute('UPDATE users SET username = %s WHERE id = %s', (new_username, user_id))",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk if limit derived from user
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        // Missing close of ResultSet, Statement, and Connection (resource leak)
        return payments;
    }

    public void processPayments() {
        try {
            List<String> pending = getPendingPayments(100);
            for (String paymentId : pending) {
                // Simulate processing
                if (paymentId == null) {
                    continue; // should not happen, but silently ignored
                }
                // Update status without transaction handling
                updatePaymentStatus(paymentId, ""PROCESSED"");
            }
        } catch (SQLException e) {
            // Swallow exception, no logging
        }
    }

    private void updatePaymentStatus(String paymentId, String status) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""UPDATE payments SET status = ? WHERE payment_id = ?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, status);
            stmt.setString(2, paymentId);
            stmt.executeUpdate();
            // Missing commit/rollback and resource cleanup
        } catch (SQLException e) {
            // Ignored
        }
    }
}
",code_defect,resource_leak_and_unhandled_exceptions,,openai/gpt-oss-120b
Python,"import os
import sqlite3

def get_user_data(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = f""SELECT * FROM users WHERE id = {user_id}""
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result

if __name__ == '__main__':
    user = get_user_data(1)
    print(user)",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, balance=0.0):
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount > self.balance:
            self.balance = 0
        else:
            self.balance -= amount
    def get_balance(self):
        return self.balance

account = BankAccount(100.0)
print(account.get_balance())
account.withdraw(50.0)
print(account.get_balance())",code_defect,incorrect_conditional_logic,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public String getUserEmail(int userId) {
        String email = null;
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // vulnerable to SQL injection if userId were derived from user input elsewhere
            String sql = ""SELECT email FROM users WHERE id = "" + userId;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                email = rs.getString(""email"");
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception e) {}
            try { if (conn != null) conn.close(); } catch (Exception e) {}
        }
        return email;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private final List<String> users = new ArrayList<>();

    public void addUsers(String[] userArray) {
        for (String user : userArray) {
            if (user != null && !user.trim().isEmpty()) {
                users.add(user);
            }
        }
    }

    public void processUsers() {
        for (int i = 0; i < users.size(); i++) {
            String user = users.get(i);
            if (user.length() > 5) {
                System.out.println(""Processing: "" + user);
            } else {
                users.remove(user);
                i--;
            }
        }
    }

    public static void main(String[] args) {
        UserProcessor processor = new UserProcessor();
        String[] users = {""Alice"", ""Bob"", ""Charlie"", """", null, ""Eve""};
        processor.addUsers(users);
        processor.processUsers();
    }
}",code_smell,modification_of_collection_during_iteration,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password):
        self.username = username
        self.password = password
        self.logged_in = False

    def login(self, password):
        if password == self.password:
            self.logged_in = True
        else:
            print('Invalid password')

    def logout(self):
        self.logged_in = False

    def change_password(self, old_password, new_password):
        if self.logged_in and old_password == self.password:
            self.password = new_password
        else:
            print('Invalid old password or not logged in')

    def __str__(self):
        return f'UserAccount(username={self.username}, logged_in={self.logged_in})

account = UserAccount('user123', 'pass123')
account.login('pass123')
print(account)
account.change_password('pass123', 'newpass')
print(account)
account.logout()
print(account)",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // BUG: If tasks was empty, task remains 0 and is processed incorrectly
            process(task);
        }
    }
    void process(int value) {
        // Simulate some work
        std::cout << ""Processing: "" << value << std::endl;
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    dp.addTask(42);
    dp.addTask(7);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}
",code_defect,logic_error_processing_empty_queue,,openai/gpt-oss-120b
Python,"import os
import json

class DataProcessor:
    def __init__(self):
        self.data = None
        self.file_path = 'data.json'

    def load_data(self):
        if not os.path.exists(self.file_path):
            self.data = []
        else:
            with open(self.file_path, 'r') as f:
                self.data = json.load(f)

    def process(self, new_entry):
        self.data.append(new_entry)
        self.save_data()

    def save_data(self):
        with open(self.file_path, 'w') as f:
            json.dump(self.data, f, indent=2)

    def clear_data(self):
        self.data = []
        self.save_data()

processor = DataProcessor()
processor.load_data()
processor.process({'name': 'John', 'age': 30})
processor.process({'name': 'Jane', 'age': 25})",code_smell,lack_of_error_handling,,qwen/qwen3-32b
JavaScript,"class UserService { constructor(userDao) { this.userDao = userDao; } async getUser(id) { let user = await this.userDao.findById(id); if (!user) { user = { id, name: 'Default User' }; } return user; } } class UserDao { async findById(id) { return new Promise((resolve) => { setTimeout(() => { if (id === 1) { resolve({ id: 1, name: 'John Doe' }); } else { resolve(null); } }, 1000); }); } }",code_smell,Tight Coupling,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class UserService {
    private Connection connection;

    public UserService(Connection connection) {
        this.connection = connection;
    }

    // Retrieves user info by username; vulnerable to SQL injection
    public Map<String, String> getUserInfo(String username) throws SQLException {
        String query = ""SELECT id, email, role FROM users WHERE username = '"" + username + ""'"";
        Statement stmt = connection.createStatement();
        ResultSet rs = stmt.executeQuery(query);
        Map<String, String> userInfo = new HashMap<>();
        if (rs.next()) {
            userInfo.put(""id"", rs.getString(""id""));
            userInfo.put(""email"", rs.getString(""email""));
            userInfo.put(""role"", rs.getString(""role""));
        }
        rs.close();
        stmt.close();
        return userInfo;
    }

    // Updates user email; missing transaction handling can lead to partial updates
    public void updateUserEmail(int userId, String newEmail) throws SQLException {
        String sql = ""UPDATE users SET email = ? WHERE id = ?"";
        PreparedStatement ps = connection.prepareStatement(sql);
        ps.setString(1, newEmail);
        ps.setInt(2, userId);
        ps.executeUpdate();
        // Forgot to commit transaction; if auto-commit is false, change is lost
    }
}
",code_defect,SQL_injection_and_missing_commit,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  processUser(user) {
    if (!user || !user.id) return;

    if (user.isAdmin) {
      this.applyAdminPermissions(user);
    } else if (user.isModerator) {
      this.applyModeratorPermissions(user);
    } else {
      this.applyRegularPermissions(user);
    }

    this.logUser(user);
    this.saveUserToDB(user);
  }

  applyAdminPermissions(user) {
    user.permissions = ['read', 'write', 'delete', 'admin'];
  }

  applyModeratorPermissions(user) {
    user.permissions = ['read', 'write', 'moderate'];
  }

  applyRegularPermissions(user) {
    user.permissions = ['read', 'write'];
  }

  logUser(user) {
    console.log(`Processed user ${user.id} with permissions: ${user.permissions.join(', ')}`);
  }

  saveUserToDB(user) {
    // Simulate saving to DB
    console.log(`Saving user ${user.id} to DB...`);
  }
}

// Usage example:
const user = { id: 123, isAdmin: true };
const processor = new UserProcessor();
processor.processUser(user);",code_smell,large_class,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email

    def authenticate(self, input_password):
        if self.password == input_password:
            return True
        else:
            return False

    def change_password(self, new_password):
        self.password = new_password

    def send_email(self, message):
        # This is a placeholder for an actual email sending function
        print(f'Sending email to {self.email}: {message}')

# Usage example
user = UserAccount('john_doe', 'mysecretpassword', 'johndoe@example.com')
if user.authenticate('mysecretpassword'):
    user.change_password('newpassword')
    user.send_email('Your password has been changed.')",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if limit were derived from user input
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,hardcoded_credentials_and_sql_injection_risk,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        String hashedPassword = hashPassword(password);

        if (username.equals(""admin"") && hashedPassword.equals(""$2a$10$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeGJpT4r"");) {
            return true;
        }

        // TODO: Add support for other users in the future
        return false;
    }

    private String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            byte[] hashedBytes = md.digest(password.getBytes(StandardCharsets.UTF_8));
            StringBuilder sb = new StringBuilder();
            for (byte b : hashedBytes) {
                sb.append(String.format(""%02x"", b & 0xff));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            // This should never happen
            return null;
        }
    }
}",code_defect,security_defect,,qwen/qwen3-32b
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            conn.setAutoCommit(false);
            // Deduct balance
            String updateSql = ""UPDATE accounts SET balance = balance - ? WHERE user_id = ?"";
            try (PreparedStatement ps = conn.prepareStatement(updateSql)) {
                ps.setDouble(1, amount);
                ps.setString(2, userId);
                ps.executeUpdate();
            }
            // Log transaction
            String insertSql = ""INSERT INTO transactions (user_id, amount) VALUES (?, ?)"";
            try (PreparedStatement ps = conn.prepareStatement(insertSql)) {
                ps.setString(1, userId);
                ps.setDouble(2, amount);
                ps.executeUpdate();
            }
            conn.commit();
            return true;
        } catch (SQLException e) {
            if (conn != null) {
                try { conn.rollback(); } catch (SQLException ex) { /* ignored */ }
            }
            return false;
        } finally {
            // Missing close of connection -> resource leak
        }
    }

    public double getBalance(String userId) {
        double balance = 0.0;
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement ps = conn.prepareStatement(""SELECT balance FROM accounts WHERE user_id = ?"")) {
            ps.setString(1, userId);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                balance = rs.getDouble(""balance"");
            }
        } catch (SQLException e) {
            // Swallow exception, returns 0.0 silently
        }
        return balance;
    }
}
",code_defect,resource_leak_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void process_data(std::vector<int>& data, int id) {
    for (int i = 0; i < data.size(); ++i) {
        if (i % 2 == id) {
            std::lock_guard<std::mutex> lock(mtx);
            std::cout << ""Thread "" << id << "" processing value "" << data[i] << std::endl;
            data[i] += id;
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    std::thread t1(process_data, std::ref(data), 0);
    std::thread t2(process_data, std::ref(data), 1);

    t1.join();
    t2.join();

    std::cout << ""Final data: "";
    for (int val : data) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
Java,"
   public class UserAuthenticator {
       private static final String DEFAULT_PASSWORD = ""password123"";
   
       public boolean authenticateUser(String username, String password) {
           if (username == null || password == null) {
               return false;
           }
           if (username.equals(""admin"") && password.equals(DEFAULT_PASSWORD)) {
               return true;
           }
           // check against database
           // ...
           return false;
       }
   }
   ",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file for each call
    async getUserData(userId) {
        // Bad practice: reading entire collection each time
        const allUsers = await this.db.collection('users').find({}).toArray();
        const user = allUsers.find(u => u.id === userId);
        if (!user) {
            throw new Error('User not found');
        }
        // Inefficient: synchronous file write inside async flow
        fs.writeFileSync('/var/log/user_service.log', `Fetched user ${userId}\n`, { flag: 'a' });
        return user;
    }

    // Updates user profile, but ignores validation and uses a vague parameter list
    async updateUserProfile(userId, name, email, address, phone, extraInfo) {
        // Large function, many parameters, no input sanitization
        const result = await this.db.collection('users').updateOne({ id: userId }, {
            $set: {
                name: name,
                email: email,
                address: address,
                phone: phone,
                extraInfo: extraInfo
            }
        });
        return result.modifiedCount === 1;
    }
}

module.exports = UserService;",code_smell,inefficient_data_access_and_large_parameter_list,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(userData) {
    this.userData = userData;
  }

  processUser() {
    for (let i = 0; i < this.userData.length; i++) {
      if (this.userData[i].role === 'admin') {
        this.userData[i].permissions = ['read', 'write', 'delete'];
      } else if (this.userData[i].role === 'editor') {
        this.userData[i].permissions = ['read', 'write'];
      } else if (this.userData[i].role === 'viewer') {
        this.userData[i].permissions = ['read'];
      }

      this.userData[i].fullName = `${this.userData[i].firstName} ${this.userData[i].lastName}`;
      this.userData[i].isVerified = this.userData[i].verifiedAt ? true : false;

      // Legacy code, no longer used
      // this.userData[i].email = this.userData[i].email.toLowerCase();
    }

    return this.userData;
  }

  // Unused method
  formatEmail(email) {
    return email.toLowerCase();
  }
}

// Example usage
const users = [
  { firstName: 'Alice', lastName: 'Smith', role: 'admin', verifiedAt: '2023-04-12T10:00:00Z' },
  { firstName: 'Bob', lastName: 'Johnson', role: 'editor' },
  { firstName: 'Charlie', lastName: 'Brown', role: 'viewer' }
];

const userProcessor = new UserProcessor(users);
const processedUsers = userProcessor.processUser();
console.log(processedUsers);",code_smell,"long_function, dead_code, unused_method",,qwen/qwen3-32b
Java,"public class UserDAO { private static final String DB_URL = ""jdbc:mysql://localhost:3306/mydb""; private static final String USER = ""root""; private static final String PASS = ""password""; public List<User> getAllUsers() { Connection conn = null; Statement stmt = null; try { Class.forName(""com.mysql.cj.jdbc.Driver""); conn = DriverManager.getConnection(DB_URL, USER, PASS); stmt = conn.createStatement(); String sql = ""SELECT * FROM users""; ResultSet rs = stmt.executeQuery(sql); List<User> users = new ArrayList<>(); while (rs.next()) { User user = new User(); user.setId(rs.getInt(""id"")); user.setName(rs.getString(""name"")); users.add(user); } return users; } catch (Exception e) { return new ArrayList<>(); } finally { try { if (stmt != null) stmt.close(); if (conn != null) conn.close(); } catch (SQLException ex) { } } } }",code_smell,unused_exception_handling,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # Insecurely loads JSON from a file path provided by the caller
        with open(self.config_path, 'r') as f:
            # Using eval on file content leads to code execution if the file is malicious
            self.settings = eval(f.read())

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)
        self.output_dir = self.config.get('output_dir', '/tmp')

    def process(self, data):
        # Process data in batches but off-by-one error skips last item
        for i in range(0, len(data) - 1, self.batch_size):
            batch = data[i:i+self.batch_size]
            self._save_batch(batch)

    def _save_batch(self, batch):
        # Assume batch is a list of dicts; write each as a line in a file
        os.makedirs(self.output_dir, exist_ok=True)
        file_path = os.path.join(self.output_dir, 'results.txt')
        with open(file_path, 'a') as f:
            for item in batch:
                f.write(json.dumps(item) + '\n')

# Example usage
loader = ConfigLoader('config.json')
processor = DataProcessor(loader)
sample_data = [{'id': i, 'value': i*2} for i in range(250)]
processor.process(sample_data)
",code_defect,unsafe_eval_and_off_by_one,,openai/gpt-oss-120b
Java,"public class ReportGenerator {
    public String generateReport(String[] data, int startIndex, int endIndex) {
        StringBuilder report = new StringBuilder();
        for (int i = startIndex; i < endIndex; i++) {
            if (data[i] == null) {
                report.append(""Error: Missing data at index "").append(i).append(""\n"");
            } else {
                report.append(""Record "").append(i).append("": "").append(data[i]).append(""\n"");
            }
        }
        if (startIndex >= endIndex) {
            report.append(""No records to process."");
        }
        return report.toString();
    }
}",code_smell,poor_error_handling,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, balance=0.0):
        self.balance = balance
    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
    def withdraw(self, amount):
        if amount > 0:
            self.balance -= amount
    def get_balance(self):
        return self.balance

class Bank:
    def __init__(self):
        self.accounts = {}
    def create_account(self, account_number, initial_balance=0.0):
        self.accounts[account_number] = BankAccount(initial_balance)
    def get_account(self, account_number):
        return self.accounts.get(account_number)

bank = Bank()
bank.create_account('12345', 1000.0)
account = bank.get_account('12345')
print(account.get_balance())",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String sql = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk if limit derived from user
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        // Missing rs.close(), stmt.close(), conn.close() leads to resource leak
        return payments;
    }

    public boolean processPayment(String paymentId, double amount) {
        // Simulate external payment gateway call
        try {
            Thread.sleep(2000); // blocking call, could cause thread pool exhaustion
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        // Critical bug: amount is never validated, negative amounts allowed
        if (amount <= 0) {
            return false;
        }
        // Update DB without transaction handling
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(""UPDATE payments SET status='COMPLETED' WHERE payment_id=?"")) {
            stmt.setString(1, paymentId);
            int rows = stmt.executeUpdate();
            return rows == 1;
        } catch (SQLException e) {
            // Swallow exception, lose error info
            return false;
        }
    }
}
",code_defect,resource_leak_and_logic_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order, String customerName, String paymentMethod, String deliveryAddress) {
        if (order == null) {
            return;
        }

        System.out.println(""Processing order for "" + customerName);

        if (paymentMethod.equals(""credit_card"")) {
            System.out.println(""Using credit card for payment"");
        } else if (paymentMethod.equals(""paypal"")) {
            System.out.println(""Using PayPal for payment"");
        } else {
            System.out.println(""Unsupported payment method: "" + paymentMethod);
            return;
        }

        // Simulate order validation
        if (order.getItems().isEmpty()) {
            System.out.println(""Order has no items. Nothing to process."");
            return;
        }

        System.out.println(""Delivery address: "" + deliveryAddress);
        System.out.println(""Order processed successfully."");
    }
}",code_smell,long_parameter_list,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>

   class Student {
   public:
       Student(std::string name, int age) : name(name), age(age) {}

       std::string getName() { return name; }
       int getAge() { return age; }

   private:
       std::string name;
       int age;
   };

   std::vector<Student> filterStudentsByAge(std::vector<Student>& students, int minAge) {
       std::vector<Student> result;
       for (const auto& student : students) {
           if (student.getAge() >= minAge) {
               result.push_back(student);
           }
       }
       return result;
   }

   int main() {
       std::vector<Student> students = {Student(""John"", 20), Student(""Alice"", 22), Student(""Bob"", 19)};
       std::vector<Student> filteredStudents = filterStudentsByAge(students, 21);
       for (const auto& student : filteredStudents) {
           std::cout << student.getName() << std::endl;
       }
       return 0;
   }
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
    constructor(db) {
        this.db = db;
    }

    // Processes a batch of orders and returns a summary
    async processBatch(orderIds) {
        const results = [];
        for (let i = 0; i < orderIds.length; i++) {
            const order = await this.db.getOrderById(orderIds[i]);
            if (!order) continue;
            // Update inventory without checking for race conditions
            await this.db.updateInventory(order.itemId, -order.quantity);
            // Mark order as shipped
            await this.db.updateOrderStatus(order.id, 'shipped');
            results.push({orderId: order.id, status: 'shipped'});
        }
        // Returns before all async updates might have completed due to missing await on Promise.all
        return results;
    }
}

module.exports = OrderProcessor;",code_defect,missing_await_race_condition,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor() {
    this.cache = {};
  }

  getUserData(userId) {
    if (this.cache[userId]) {
      console.log('Returning cached data');
      return this.cache[userId];
    }

    const user = fetchUserFromDatabase(userId);

    // Intentionally commented out cleanup logic
    // delete this.cache[userId];

    this.cache[userId] = user;
    return user;
  }

  processUser(userId) {
    const user = this.getUserData(userId);
    const processedData = {
      name: user.name,
      email: user.email,
      role: user.role
    };

    // Dead code from a previous implementation
    // const oldData = fetchOldData(userId);
    // return { ...processedData, ...oldData };

    return processedData;
  }
}

// Simulated database function
function fetchUserFromDatabase(userId) {
  return {
    id: userId,
    name: 'John Doe',
    email: 'john.doe@example.com',
    role: 'user'
  };
}",code_smell,dead_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void saveToDatabase() {
        // Simulating a database connection
        std::cout << ""Saving user to database..."" << std::endl;
        // No actual database connection is made here
    }

private:
    std::string name;
    int age;
};

void processUsers(std::vector<User>& users) {
    for (User user : users) {
        user.saveToDatabase();
    }
}

int main() {
    std::vector<User> users = {User(""John"", 25), User(""Alice"", 30)};
    processUsers(users);
    return 0;
}
",code_smell,unused_imports_and_dead_code,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off-by-one error
            int value = data[i] * 2;
            results_.push_back(value);
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& results() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(input); });
    t.join();
    for (int v : processor.results()) {
        std::cout << v << "" "";
    }
    std::cout << std::endl;
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processUserInput(std::vector<int>& data, int threshold, bool flag) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] < threshold) {
            data[i] = data[i] * 2;
        } else {
            data[i] = data[i] / 2;
        }
    }

    if (flag) {
        for (size_t i = 0; i < data.size(); ++i) {
            std::cout << data[i] << "" "";
        }
    }
}

int main() {
    std::vector<int> numbers = {10, 20, 30, 40, 50};
    processUserInput(numbers, 25, true);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    Student(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void setAge(int age) { this->age = age; }

private:
    std::string name;
    int age;
};

class StudentDatabase {
public:
    void addStudent(Student student) { students.push_back(student); }
    void removeStudent(Student student) {
        for (auto it = students.begin(); it != students.end(); ++it) {
            if (it->getName() == student.getName() && it->getAge() == student.getAge()) {
                students.erase(it);
                break;
            }
        }
    }

    void printStudents() {
        for (const auto& student : students) {
            std::cout << ""Name: "" << student.getName() << "", Age: "" << student.getAge() << std::endl;
        }
    }

private:
    std::vector<Student> students;
};

int main() {
    StudentDatabase db;
    db.addStudent(Student(""John"", 20));
    db.addStudent(Student(""Alice"", 22));
    db.printStudents();
    db.removeStudent(Student(""John"", 20));
    db.printStudents();
    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password"";

    public List<String> getUserEmails(String role) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String sql = ""SELECT email FROM users WHERE role = '"" + role + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order != null && order.getItems() != null && !order.getItems().isEmpty()) {
            for (OrderItem item : order.getItems()) {
                if (item.getProduct() != null && item.getQuantity() > 0) {
                    Product product = item.getProduct();
                    if (product.getStock() >= item.getQuantity()) {
                        product.setStock(product.getStock() - item.getQuantity());
                        item.setStatus(""Processed"");
                    } else {
                        item.setStatus(""Out of Stock"");
                    }
                }
            }
        }
    }

    // Legacy code for backward compatibility (not used anymore)
    // public void oldProcessOrder(Order order) {
    //     // deprecated logic
    // }

    private boolean validateProductStock(Product product, int quantity) {
        return product.getStock() >= quantity;
    }

    private void updateProductStock(Product product, int quantity) {
        product.setStock(product.getStock() - quantity);
    }
}",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
      class PaymentProcessor {
         constructor(merchantId, apiKey) {
            this.merchantId = merchantId;
            this.apiKey = apiKey;
            this.cache = {};
         }

         async processPayment(amount, currency, cardNumber, expirationDate, securityCode) {
            const cacheKey = `${amount}-${currency}-${cardNumber}`;
            if (this.cache[cacheKey]) {
               return this.cache[cacheKey];
            }

            const url = 'https://api.example.com/payments';
            const response = await fetch(url, {
               method: 'POST',
               headers: {
                  'Authorization': `Bearer ${this.apiKey}`,
                  'Content-Type': 'application/json'
               },
               body: JSON.stringify({
                  merchantId: this.merchantId,
                  amount,
                  currency,
                  cardNumber,
                  expirationDate,
                  securityCode
               })
            });

            const result = await response.json();
            this.cache[cacheKey] = result;
            return result;
         }
      }

      const processor = new PaymentProcessor('12345', 'abcdef');
      processor.processPayment(10.99, 'USD', '4111111111111111', '12/25', '123')
         .then(result => console.log(result))
         .catch(error => console.error(error));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import logging
import os

class UserDataProcessor:
    def __init__(self, db_connection, cache, config_path=""/etc/app/config.json""):
        self.db = db_connection
        self.cache = cache
        self.config = self._load_config(config_path)
        self.logger = logging.getLogger(__name__)
        # Legacy: self.timeout = 30  # hardcoded timeout, not used

    def _load_config(self, path):
        with open(path, 'r') as f:
            return json.load(f)

    def process_user(self, user_id, include_details=False, include_stats=False, include_history=False, include_preferences=False):
        # Fetch user record
        user = self.db.fetch_one(""SELECT * FROM users WHERE id=%s"" % user_id)
        if not user:
            self.logger.error(""User not found: %s"", user_id)
            return None
        # Cache lookup
        cached = self.cache.get(user_id)
        if cached:
            return cached
        # Build response
        result = {""id"": user[""id""], ""name"": user[""name""]}
        if include_details:
            result[""email""] = user[""email""]
            result[""address""] = user[""address""]
        if include_stats:
            stats = self.db.fetch_one(""SELECT * FROM user_stats WHERE user_id=%s"" % user_id)
            result[""stats""] = stats
        if include_history:
            history = self.db.fetch_all(""SELECT * FROM user_history WHERE user_id=%s"" % user_id)
            result[""history""] = history
        if include_preferences:
            prefs = self.db.fetch_one(""SELECT * FROM user_prefs WHERE user_id=%s"" % user_id)
            result[""preferences""] = prefs
        # Store in cache
        self.cache.set(user_id, result)
        return result

    def bulk_update(self, updates):
        for uid, data in updates.items():
            self.db.execute(""UPDATE users SET name='%s' WHERE id=%s"" % (data[""name""], uid))
            # Missing commit, potential data loss

    def close(self):
        self.db.close()
        self.cache.close()
",code_smell,large_parameter_list_and_sql_injection_risk,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users || [];
  }

  getUserById(id) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        return this.users[i];
      }
    }
    return null;
  }

  addUser(user) {
    this.users.push(user);
  }

  getAllUsers() {
    return this.users;
  }

  removeUser(id) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        this.users.splice(i, 1);
        break;
      }
    }
  }
}

const user1 = { id: 1, name: 'Alice' };
const user2 = { id: 2, name: 'Bob' };
const userManager = new UserManager([user1, user2]);",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserRepository {
public:
    vector<User> users;
    void addUser(User u) { users.push_back(u); }
    User getUser(int index) { return users[index]; }
};

int main() {
    UserRepository repo;
    repo.addUser(User(""John"", 30));
    repo.addUser(User(""Jane"", 25));
    cout << repo.getUser(0).name << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user data and writes a log file synchronously
  getUserProfile(userId) {
    const query = `SELECT * FROM users WHERE id = ${userId}`; // vulnerable to SQL injection
    const result = this.db.query(query);
    if (!result) {
      throw new Error('User not found');
    }
    const user = result[0];
    // Synchronous file write can block the event loop
    fs.writeFileSync('/var/log/user_access.log', `${new Date().toISOString()} - Accessed user ${userId}\n`);
    return user;
  }

  // Updates user email without validation
  updateEmail(userId, newEmail) {
    const updateQuery = `UPDATE users SET email = '${newEmail}' WHERE id = ${userId}`;
    this.db.execute(updateQuery);
    // Missing error handling; assumes success
  }
}

module.exports = UserService;",code_defect,SQL_injection_and_blocking_io,,openai/gpt-oss-120b
Python,"import sqlite3
import datetime

class UserManager:
    def __init__(self):
        self.conn = sqlite3.connect('users.db')
        self.cur = self.conn.cursor()
        self.cur.execute('''CREATE TABLE IF NOT EXISTS users 
                             (id INTEGER PRIMARY KEY, 
                              name TEXT, 
                              email TEXT)''')
        self.conn.commit()

    def add_user(self, user_id, name, email):
        self.cur.execute('INSERT INTO users VALUES (?, ?, ?)', 
                         (user_id, name, email))
        self.conn.commit()

    def get_user(self, user_id):
        self.cur.execute('SELECT * FROM users WHERE id = ?', (user_id,))
        return self.cur.fetchone()

    def close(self):
        self.conn.close()

if __name__ == '__main__':
    manager = UserManager()
    manager.add_user(1, 'Alice Smith', 'alice@example.com')
    print(manager.get_user(1))",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
Java,"public class UserAccountManager {
    private static final Map<String, UserAccount> accounts = new HashMap<>();
    public synchronized void createAccount(String username, String password) {
        if (accounts.containsKey(username)) {
            System.out.println(""Account already exists"");
            return;
        }
        UserAccount account = new UserAccount(username, password);
        accounts.put(username, account);
        System.out.println(""Account created"");
    }
    public synchronized UserAccount getAccount(String username) {
        return accounts.get(username);
    }
    public static class UserAccount {
        private String username;
        private String password;
        public UserAccount(String username, String password) {
            this.username = username;
            this.password = password;
        }
        public String getUsername() {
            return username;
        }
        public String getPassword() {
            return password;
        }
    }
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, email):
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()

    def get_users_page(self, page, page_size):
        # Off-by-one error: should be (page - 1) * page_size
        offset = page * page_size
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cursor.fetchall()
        return [dict(id=row[0], username=row[1], email=row[2]) for row in rows]

    def close(self):
        self.conn.close()

# Example usage
if __name__ == '__main__':
    repo = UserRepository('example.db')
    # Adding some users (in real scenario this would be elsewhere)
    for i in range(1, 21):
        repo.add_user(f'user{i}', f'user{i}@example.com')
    # Fetch second page with 5 users per page (should return users 6-10, but returns 11-15 due to bug)
    page = 1  # zero-based page index intended
    users = repo.get_users_page(page, 5)
    print(json.dumps(users, indent=2))
    repo.close()",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(id, name, email) {
    this.users.push({ id, name, email });
  }

  getUserByEmail(email) {
    return this.users.find(user => user.email === email);
  }

  updateUserName(email, newName) {
    const user = this.users.find(user => user.email === email);
    if (user) {
      user.name = newName;
    }
  }

  deleteUser(email) {
    this.users = this.users.filter(user => user.email !== email);
  }

  getAllUsers() {
    return this.users;
  }

  getTotalUsers() {
    return this.users.length;
  }

  isUserEmailUnique(email) {
    return this.users.some(user => user.email === email);
  }
}

// Example usage
const userManager = new UserManager();
userManager.addUser(1, 'Alice', 'alice@example.com');
userManager.addUser(2, 'Bob', 'bob@example.com');
userManager.updateUserName('alice@example.com', 'Alice Smith');
userManager.deleteUser('bob@example.com');",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger logger = LoggerFactory.getLogger(UserService.class); public User getUser(String username) { try { User user = UserRepository.getInstance().findUserByUsername(username); if (user != null) { return user; } else { throw new UsernameNotFoundException(""User not found""); } } catch (Exception e) { logger.error(""Error getting user"", e); return null; } } }",code_smell,swallowing_exceptions,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Reads JSON config file synchronously each call
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    // If cache is empty, load config
    if (!this.cache) this.load();
    return this.cache[key];
  }
}

// Usage in a web server
const http = require('http');
const config = new ConfigLoader('./config.json');

const server = http.createServer((req, res) => {
  // Vulnerable to path traversal because request URL is directly used
  const filePath = '.' + req.url;
  fs.readFile(filePath, (err, data) => {
    if (err) {
      res.statusCode = 404;
      res.end('Not Found');
      return;
    }
    // No content-type validation, possible XSS
    res.end(data);
  });
});

server.listen(8080, () => console.log('Server running on port 8080'));
",code_defect,path_traversal_and_xss_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& input, std::vector<int>& output) {
    for (size_t i = 0; i < input.size(); ++i) {
        int result = 0;
        for (size_t j = 0; j < input.size(); ++j) {
            result += input[i] + input[j];
        }
        output.push_back(result);
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5};
    std::vector<int> output;

    processData(input, output);

    for (const auto& val : output) {
        std::cout << val << ""\n"";
    }

    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Python,"
class UserAuthenticator:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def authenticate(self, username, password):
        query = ""SELECT * FROM users WHERE username = '{}' AND password = '{}'"".format(username, password)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        if user_data:
            return True
        else:
            return False

    def get_user_data(self, username):
        query = ""SELECT * FROM users WHERE username = '{}'"".format(username)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

# usage
import sqlite3
db_connection = sqlite3.connect('users.db')
authenticator = UserAuthenticator(db_connection)
print(authenticator.authenticate('test_user', 'test_password'))
",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    UserManager() {
        // Load users from a config file (simulated)
        users_ = {""alice"", ""bob"", ""charlie""};
    }

    // Returns true if the user exists, false otherwise
    bool isValidUser(const std::string& username) const {
        return std::find(users_.begin(), users_.end(), username) != users_.end();
    }

    // Returns the index of the user in the internal list, or -1 if not found
    int getUserIndex(const std::string& username) const {
        auto it = std::find(users_.begin(), users_.end(), username);
        if (it == users_.end()) return -1;
        // BUG: off‑by‑one error – should be distance from begin, not end
        return static_cast<int>(users_.end() - it);
    }

private:
    std::vector<std::string> users_;
};

int main() {
    UserManager um;
    std::string name;
    std::cout << ""Enter username: "";
    std::cin >> name;
    if (um.isValidUser(name)) {
        int idx = um.getUserIndex(name);
        std::cout << ""User "" << name << "" found at index "" << idx << ""\n"";
    } else {
        std::cout << ""Invalid user\n"";
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                if (order.getTotalAmount() > 0) {
                    if (order.isApprovedByManager()) {
                        if (order.getCustomer().isActive()) {
                            if (order.getPayment().isProcessed()) {
                                order.markAsProcessed();
                                sendConfirmationEmail(order);
                            }
                        }
                    }
                }
            }
        }
    }

    private void sendConfirmationEmail(Order order) {
        // Email sending logic here
    }
}",code_smell,nested_conditionals,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>

   class User {
   public:
       std::string name;
       int age;

       User(std::string n, int a) : name(n), age(a) {}
   };

   void sortUsers(std::vector<User>& users) {
       std::sort(users.begin(), users.end(), [](const User& a, const User& b) {
           return a.name < b.name;
       });
   }

   int main() {
       std::vector<User> users = {User(""John"", 25), User(""Alice"", 30), User(""Bob"", 20)};
       sortUsers(users);
       for (const auto& user : users) {
           std::cout << user.name << "" "" << user.age << std::endl;
       }
       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // insecure concatenation, possible SQL injection if limit came from user input
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void sendBulkEmail(List<String> recipients, String message) {
        // Missing null check, may throw NullPointerException
        for (int i = 0; i <= recipients.size(); i++) { // off-by-one error
            String email = recipients.get(i);
            // Simulated email sending
            System.out.println(""Sending email to "" + email + "": "" + message);
        }
    }
}
",code_defect,off_by_one_error_and_sql_injection_risk,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this._users = [];
    this._userRoles = {};
  }

  registerUser(username, password, role = 'user') {
    if (!username || !password) {
      return null;
    }

    const newUser = {
      username: username,
      password: this._hashPassword(password),
      role: role
    };

    this._users.push(newUser);
    this._userRoles[username] = role;

    return newUser;
  }

  authenticateUser(username, password) {
    const user = this._users.find(u => u.username === username);

    if (!user || user.password !== this._hashPassword(password)) {
      return false;
    }

    return user.role;
  }

  _hashPassword(password) {
    return btoa(password);
  }
}

const auth = new UserAuth();
auth.registerUser('admin', 'securepassword123', 'admin');
const role = auth.authenticateUser('admin', 'securepassword123');
console.log(`User role: ${role}`);",code_defect,insecure_authentication,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
      constructor() {
         this.users = [];
      }

      addUser(username, password) {
         const user = { username, password };
         this.users.push(user);
         return user;
      }

      authenticate(username, password) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].username === username) {
               if (this.users[i].password === password) {
                  return true;
               }
            }
         }
         return false;
      }
   }

   const userManager = new UserManager();
   const user1 = userManager.addUser('john', 'password123');
   console.log(userManager.authenticate('john', 'password123')); // true
   console.log(userManager.authenticate('jane', 'wrongpassword')); // false
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.configPath = configPath;
    this.cache = null;
  }

  // Loads JSON config from disk; caches result
  loadConfig() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.configPath, 'utf8');
    // BUG: JSON.parse can throw, but not caught – leads to crash on malformed config
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function initializeApp() {
  const loader = new ConfigLoader('./config.json');
  const config = loader.loadConfig();
  // Assume config has a numeric 'port' field
  const server = require('http').createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('Server running');
  });
  // BUG: If config.port is undefined, server.listen(undefined) binds to random port
  server.listen(config.port);
  console.log(`Server started on port ${config.port}`);
}

initializeApp();",code_defect,unhandled_exception_and_missing_validation,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  processUser(user) {
    if (!user || !user.id || !user.name) {
      return null;
    }

    const result = {};

    if (user.name.length > 0) {
      result.name = user.name.trim();
    }

    if (user.email && this.validateEmail(user.email)) {
      result.email = user.email;
    }

    if (user.roles && user.roles.length > 0) {
      result.roles = user.roles.filter(role => role.trim().length > 0);
    }

    if (user.preferences) {
      result.preferences = {};
      for (const [key, value] of Object.entries(user.preferences)) {
        if (value !== null && value !== undefined) {
          result.preferences[key] = value;
        }
      }
    }

    return result;
  }

  validateEmail(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  }
}

// Example usage:
const user = {
  name: '  John Doe  ',
  email: 'john.doe@example.com',
  roles: ['admin', ''],
  preferences: {
    theme: 'dark',
    notifications: null,
    language: 'en'
  }
};

const processor = new UserProcessor();
const processedUser = processor.processUser(user);
console.log(processedUser);",code_smell,large_function,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

private:
    std::string name;
    int salary;
};

void sortEmployees(std::vector<Employee>& employees) {
    std::sort(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
        return a.getSalary() < b.getSalary();
    });
}

int main() {
    std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
    sortEmployees(employees);
    for (const auto& employee : employees) {
        std::cout << employee.getName() << "" "" << employee.getSalary() << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Synchronously read config file each call, ignoring cache
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) this.load();
    return this.cache[key];
  }
}

function processUserInput(input) {
  // Assume input is a JSON string from an untrusted source
  const obj = JSON.parse(input); // No validation
  if (obj.action === 'delete') {
    // Directly use user-provided file path without sanitization
    fs.unlinkSync(obj.filePath);
  }
  return obj;
}

// Example usage
const cfg = new ConfigLoader('./config.json');
cfg.load();
const result = processUserInput('{""action"":""delete"",""filePath"":""/tmp/important.txt""}');
console.log('Processed:', result);",code_defect,unsafe_file_deletion,,openai/gpt-oss-120b
Python,"import os
import subprocess

class DatabaseManager:
    def __init__(self):
        self.db_path = os.path.join(os.getcwd(), 'data.db')
        self.setup_db()

    def setup_db(self):
        if not os.path.exists(self.db_path):
            command = f'sqlite3 {self.db_path} ""CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT, email TEXT)""'
            subprocess.run(command, shell=True)

    def add_user(self, name, email):
        command = f'sqlite3 {self.db_path} ""INSERT INTO users (name, email) VALUES (\""{name}\"", \""{email}\"")""'
        subprocess.run(command, shell=True)

    def get_users(self):
        command = f'sqlite3 {self.db_path} ""SELECT * FROM users""'
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return result.stdout",code_defect,insecure_sql_injection,,qwen/qwen3-32b
JavaScript,"class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getUser(id) { let user = await this.userRepository.findById(id); if (!user) { return { id: 0, name: 'Guest' }; } return user; } async getUsers() { let users = await this.userRepository.findAll(); return users.map(user => ({ id: user.id, name: user.name })); } }",code_smell,God class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String role) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // SQL injection vulnerability: role is concatenated directly
            String sql = ""SELECT email FROM users WHERE role='"" + role + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Python,"import os
import subprocess

def run_command(cmd):
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    if stderr:
        print(f'Error: {stderr.decode()}')
    return stdout.decode()

def parse_logs(log_file):
    logs = []
    with open(log_file, 'r') as f:
        for line in f:
            if 'ERROR' in line:
                logs.append(line)
    return logs

def main():
    logs_path = os.getenv('APP_LOGS')
    if not logs_path:
        logs_path = '/var/log/app.log'
    logs = parse_logs(logs_path)
    for log in logs:
        print(f'Processing: {log.strip()}')
        if 'critical' in log.lower():
            run_command(['email_alert.sh', log.strip()])

if __name__ == '__main__':
    main()",code_defect,missing_error_handling,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password

    def authenticate(self, username, password):
        return self.users.get(username) == password

    def change_password(self, username, old_password, new_password):
        if self.authenticate(username, old_password):
            self.users[username] = new_password

    def get_all_users(self):
        return list(self.users.keys())

# usage
manager = UserManager()
manager.add_user('user1', 'pass1')
manager.add_user('user2', 'pass2')
print(manager.get_all_users())
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        # Insecurely deserialize configuration using eval
        with open(self.path, 'r') as f:
            data = f.read()
            self.config = eval(data)  # dangerous: executes arbitrary code

    def get(self, key, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, config_path):
        self.cfg = ConfigLoader(config_path)
        self.threshold = self.cfg.get('threshold', 10)

    def process(self, items):
        results = []
        for i in range(len(items)):
            # Off‑by‑one error: should be < len(items)
            if i <= len(items):
                item = items[i]
                if item > self.threshold:
                    results.append(item * 2)
        return results

if __name__ == '__main__':
    processor = DataProcessor('config.txt')
    data = [5, 12, 7, 20]
    print(processor.process(data))
",code_defect,insecure_deserialization_and_off_by_one,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    private static final String VALID_USERNAME = ""admin"";
    private static final String VALID_PASSWORD = ""supersecretpassword123!"";

    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        if (username.equals(VALID_USERNAME) && password.equals(VALID_PASSWORD)) {
            return true;
        }

        return false;
    }

    public void clearSession() {
        // TODO: Implement session clearing logic
    }
}",code_defect,hardcoded_credentials,,qwen/qwen3-32b
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

public class PaymentProcessor {
    private String dbUrl = ""jdbc:mysql://localhost:3306/payments"";
    private String dbUser = ""admin"";
    private String dbPassword = ""P@ssw0rd!""; // hardcoded secret

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(dbUrl, dbUser, dbPassword);
            stmt = conn.createStatement();
            // Unsafe concatenation leads to SQL injection
            String query = ""SELECT balance FROM accounts WHERE user_id='"" + userId + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    // Update balance without transaction handling
                    String update = ""UPDATE accounts SET balance="" + (balance - amount) + "" WHERE user_id='"" + userId + ""'"";
                    stmt.executeUpdate(update);
                    // Log transaction (omitted)
                    return true;
                }
            }
        } catch (Exception e) {
            // Swallow exception, no handling
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return false;
    }
}
",code_defect,sql_injection_and_resource_leak,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private final String apiKey = ""hardcoded_secret_key"";

    public void processUser(String userId, String userRole, boolean isActive) {
        if (userId == null || userId.isEmpty()) {
            return;
        }

        if (isActive && userRole.equals(""admin"")) {
            sendNotification(userId);
        }

        if (userRole.equals(""admin"") || userRole.equals(""moderator"")) {
            grantAccess(userId);
        }

        if (userRole.equals(""guest"")) {
            // No action
            // TODO: Implement guest logic
        }
    }

    private void sendNotification(String userId) {
        // Simulated notification logic
        System.out.println(""Notification sent to "" + userId);
    }

    private void grantAccess(String userId) {
        // Simulated access logic
        System.out.println(""Access granted to "" + userId);
    }
}",code_smell,hardcoded_credential,,qwen/qwen3-32b
Java,"public class UserDatabase { private Map<String, String> users = new HashMap<>(); public void addUser(String username, String password) { users.put(username, password); } public boolean authenticate(String username, String password) { return users.containsKey(username) && users.get(username).equals(password); } public static void main(String[] args) { UserDatabase db = new UserDatabase(); db.addUser(""admin"", ""password123""); System.out.println(db.authenticate(""admin"", ""password123"")); } }",code_smell,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    void addUser(const std::string& username) {
        users.push_back(username);
    }

    // Returns the index of the user or -1 if not found
    int findUser(const std::string& username) const {
        for (size_t i = 0; i <= users.size(); ++i) { // BUG: off‑by‑one, may read past end
            if (users[i] == username) {
                return static_cast<int>(i);
            }
        }
        return -1;
    }

    std::string getUserAt(int index) const {
        if (index < 0 || static_cast<size_t>(index) >= users.size()) {
            throw std::out_of_range(""Index out of range"");
        }
        return users[index];
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.addUser(""carol"");

    int idx = um.findUser(""bob"");
    if (idx != -1) {
        std::cout << ""Found bob at index "" << idx << ""\n"";
    } else {
        std::cout << ""Bob not found\n"";
    }
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserHandler {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  getUsers() {
    return this.users;
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  updateUserEmail(email, newEmail) {
    const user = this.getUserByEmail(email);
    if (user) {
      user.email = newEmail;
    }
  }

  removeUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        this.users.splice(i, 1);
        return;
      }
    }
  }
}

const handler = new UserHandler();
handler.addUser({ name: 'Alice', email: 'alice@example.com' });
handler.addUser({ name: 'Bob', email: 'bob@example.com' });",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    std::string name;
    int grade;

    Student(std::string name, int grade) : name(name), grade(grade) {}

    bool operator<(const Student& other) const {
        return grade < other.grade;
    }
};

void sortStudents(std::vector<Student>& students) {
    std::sort(students.begin(), students.end());
}

int main() {
    std::vector<Student> students = {Student(""John"", 90), Student(""Alice"", 95), Student(""Bob"", 80)};
    sortStudents(students);
    for (const auto& student : students) {
        std::cout << student.name << "" "" << student.grade << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if limit is derived from user input elsewhere
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,hardcoded_credentials_and_sql_injection_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input, std::vector<int>& result) {
    result.clear();
    for (size_t i = 0; i < input.length(); ++i) {
        if (isdigit(input[i])) {
            result.push_back(input[i] - '0');
        } else if (input[i] == 'A') {
            result.push_back(10);
        } else if (input[i] == 'B') {
            result.push_back(11);
        } else if (input[i] == 'C') {
            result.push_back(12);
        } else {
            std::cerr << ""Invalid character: "" << input[i] << std::endl;
        }
    }
}

int main() {
    std::string input = ""A3B7C2"";
    std::vector<int> output;
    processUserInput(input, output);
    for (int val : output) {
        std::cout << val << "" "";
    }
    return 0;
}",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getAllUsers() {
            const users = await this.userRepository.findAll();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async getUserById(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error(`User with id ${id} not found`);
            }
            return user;
         }
      }

      class UserRepository {
         async findAll() {
            // Assume this is a database call
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' }
            ];
         }

         async findById(id) {
            // Assume this is a database call
            const users = await this.findAll();
            return users.find(user => user.id === id);
         }
      }

      const userRepository = new UserRepository();
      const userService = new UserService(userRepository);
      (async () => {
         const users = await userService.getAllUsers();
         console.log(users);
      })();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it globally.""""""
    _cache = {}
    _lock = threading.Lock()

    @classmethod
    def load(cls, path: str) -> dict:
        # Missing validation of path, potential path traversal
        with cls._lock:
            if path in cls._cache:
                return cls._cache[path]
            with open(path, 'r') as f:
                data = json.load(f)
                cls._cache[path] = data
                return data

class UserService:
    def __init__(self, config_path):
        self.config = ConfigLoader.load(config_path)
        self.db_conn_str = self.config.get('db_connection')
        # Insecure: directly using connection string from config without encryption
        self._connect_to_db()

    def _connect_to_db(self):
        # Placeholder for DB connection; could raise exception if string is malformed
        self.db = self.db_conn_str  # Bug: should create a DB connection object, not store string

    def get_user(self, user_id: int) -> dict:
        # Off-by-one error: assumes user IDs start at 1, but DB uses 0-indexed IDs
        query = f""SELECT * FROM users WHERE id = {user_id - 1}""
        # Simulated insecure query execution (SQL injection risk)
        result = self._execute_query(query)
        return result

    def _execute_query(self, query: str) -> dict:
        # Simulated DB query; returns empty dict if query fails
        if not query.startswith('SELECT'):
            raise ValueError('Invalid query')
        # Bug: returns static data regardless of query
        return {'id': 0, 'name': 'admin'}

# Usage example (would be removed in production)
service = UserService('config.json')
print(service.get_user(5))",code_defect,off_by_one_and_insecure_query,,openai/gpt-oss-120b
Python,"import os
import sqlite3

def get_user_data(username):
    db_path = os.path.join(os.getcwd(), 'users.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    query = 'SELECT * FROM users WHERE username = '' + username + '' LIMIT 1'
    cursor.execute(query)

    result = cursor.fetchone()
    conn.close()

    if result:
        return {
            'id': result[0],
            'username': result[1],
            'email': result[2],
        }
    return None

# Example usage:
if __name__ == '__main__':
    user = get_user_data('testuser')
    if user:
        print(f'User found: {user}')
    else:
        print('User not found')",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
JavaScript,"class UserAccount { constructor(username, password) { this.username = username; this.password = password; } authenticate(username, password) { if (this.username === username && this.password === password) return true; else return false; } } function main() { const account = new UserAccount('admin', 'password123'); console.log(account.authenticate('admin', 'password123')); console.log(account.authenticate('wrong', 'wrong')); } main();",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it globally.""""""
    _cache = None
    _lock = threading.Lock()

    @classmethod
    def load(cls, path: str):
        # Double-checked locking pattern (flawed)
        if cls._cache is None:
            with cls._lock:
                if cls._cache is None:
                    with open(path, 'r') as f:
                        cls._cache = json.load(f)
        return cls._cache

class DataProcessor:
    def __init__(self, config_path):
        self.config = ConfigLoader.load(config_path)
        self.threshold = self.config.get('threshold', 10)
        self.results = []

    def process(self, data_items):
        for item in data_items:
            if self._is_valid(item):
                transformed = self._transform(item)
                self.results.append(transformed)
        return self.results

    def _is_valid(self, item):
        # Missing type check; may raise exception if item is None
        return item['value'] > self.threshold

    def _transform(self, item):
        # Potential division by zero if divisor is zero in data
        return item['value'] / item.get('divisor', 0)

# Example usage (would crash if any item has divisor 0)
if __name__ == '__main__':
    processor = DataProcessor('config.json')
    sample_data = [
        {'value': 15, 'divisor': 3},
        {'value': 8, 'divisor': 0},  # <-- defect: division by zero
        {'value': 20, 'divisor': 5}
    ]
    print(processor.process(sample_data))
",code_defect,division_by_zero,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUsers(List<User> users) {
        for (User user : users) {
            if (user.getRole().equals(""admin"")) {
                grantAdminAccess(user);
            } else {
                grantUserAccess(user);
            }
        }
    }

    private void grantAdminAccess(User user) {
        if (user.getStatus() == UserStatus.ACTIVE) {
            user.setPermissions(""read,write,delete"");
        } else {
            user.setPermissions(""read"");
        }
    }

    private void grantUserAccess(User user) {
        if (user.getDepartment() != null && user.getDepartment().equals(""IT"")) {
            user.setPermissions(""read,write"");
        } else {
            user.setPermissions(""read"");
        }
    }
}",code_smell,long_method,,qwen/qwen3-32b
Java,"
   public class UserAccountManager {
       private static final String DB_URL = ""jdbc:mysql://localhost:3306/accounts"";
       private static final String DB_USER = ""root"";
       private static final String DB_PASSWORD = ""password123"";
   
       public void createUserAccount(String username, String password) {
           try {
               Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
               Statement stmt = conn.createStatement();
               stmt.executeUpdate(""INSERT INTO users (username, password) VALUES ('"" + username + ""', '"" + password + ""')"");
               conn.close();
           } catch (SQLException e) {
               System.out.println(""Error creating user account: "" + e.getMessage());
           }
       }
   }
   ",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded credentials

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        try {
            conn = getConnection();
            conn.setAutoCommit(false);
            if (deductBalance(conn, userId, amount)) {
                logTransaction(conn, userId, amount);
                conn.commit();
                return true;
            } else {
                conn.rollback();
                return false;
            }
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ignored) {}
            return false;
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }

    private Connection getConnection() throws SQLException {
        Properties props = new Properties();
        props.setProperty(""user"", DB_USER);
        props.setProperty(""password"", DB_PASS);
        return DriverManager.getConnection(DB_URL, props);
    }

    private boolean deductBalance(Connection conn, String userId, double amount) throws SQLException {
        String sql = ""SELECT balance FROM accounts WHERE user_id = ? FOR UPDATE"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, userId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    String update = ""UPDATE accounts SET balance = balance - ? WHERE user_id = ?"";
                    try (PreparedStatement upd = conn.prepareStatement(update)) {
                        upd.setDouble(1, amount);
                        upd.setString(2, userId);
                        upd.executeUpdate();
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private void logTransaction(Connection conn, String userId, double amount) throws SQLException {
        String sql = ""INSERT INTO transactions (user_id, amount, timestamp) VALUES ('"" + userId + ""', "" + amount + "", NOW())""; // SQL injection risk
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.executeUpdate();
        }
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order, String customerEmail, boolean isPriority, int discountCode) {
        if (order == null) return;
        
        if (isPriority) {
            order.applyPriorityDiscount();
        } else {
            if (discountCode > 0) {
                order.applyDiscount(discountCode);
            }
        }

        String confirmationMsg = ""Thank you for your order, "" + customerEmail + "". Your order ID is "" + order.getId();
        EmailService.sendEmail(customerEmail, confirmationMsg);
        
        // TODO: Log order processing to database
        // System.out.println(""Order processed: "" + order.getId());
    }

    // Unused method
    private void validateOrder(Order order) {
        // Some validation logic here
    }
}",code_smell,long_parameter_list,,qwen/qwen3-32b
Python,"
class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email

    def authenticate(self, input_password):
        if self.password == input_password:
            return True
        else:
            return False

    def update_password(self, new_password):
        self.password = new_password

    def send_password_reset_link(self):
        # simulate sending a password reset link
        print(f'Password reset link sent to {self.email}')

def main():
    user = UserAccount('test_user', 'test_password', 'test@example.com')
    print(user.authenticate('test_password'))  # should print: True
    user.update_password('new_test_password')
    print(user.authenticate('new_test_password'))  # should print: True
    user.send_password_reset_link()

if __name__ == '__main__':
    main()
",code_smell,unused_import,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        if (this.cache) return this.cache;
        // Synchronous read blocks event loop
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function processUserData(userId) {
    const config = new ConfigLoader('./config.json').load();
    // Assume config contains API endpoint
    const url = `${config.apiBase}/users/${userId}`;
    // Missing error handling, potential rejection not caught
    return fetch(url)
        .then(res => res.json())
        .then(data => {
            // Off‑by‑one error: should iterate to < data.items.length
            for (let i = 0; i <= data.items.length; i++) {
                console.log(data.items[i].name);
            }
            return data;
        });
}

module.exports = { processUserData };",code_defect,off_by_one_error_and_unhandled_promise_rejection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final String DATABASE_URL = ""jdbc:mysql://localhost:3306/orders_db?user=root&password=123456"";

    public void processOrder(String userId, String productId, int quantity) {
        if (userId == null || productId == null || quantity <= 0) {
            return;
        }

        try {
            Connection connection = DriverManager.getConnection(DATABASE_URL);
            String query = ""SELECT * FROM products WHERE id = "" + productId;
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(query);

            if (resultSet.next()) {
                int availableStock = resultSet.getInt(""stock"");
                if (availableStock >= quantity) {
                    String updateQuery = ""UPDATE products SET stock = "" + (availableStock - quantity) + "" WHERE id = "" + productId;
                    statement.executeUpdate(updateQuery);
                }
            }

            resultSet.close();
            statement.close();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
Java,"
   public class PaymentProcessor {
       private double totalAmount;

       public PaymentProcessor() {
           this.totalAmount = 0.0;
       }

       public void processPayment(double amount) {
           totalAmount += amount;
           System.out.println(""Payment processed: "" + amount);
       }

       public double getTotalAmount() {
           return totalAmount;
       }

       public static void main(String[] args) {
           PaymentProcessor processor = new PaymentProcessor();
           processor.processPayment(100.0);
           processor.processPayment(200.0);
           System.out.println(""Total amount: "" + processor.getTotalAmount());
       }
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&TransactionProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(int amount) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(amount);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int value = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    value = queue.back(); // BUG: should use front(), leads to LIFO processing
                    queue.pop_back();
                }
            }
            if (value != 0) {
                // Simulate processing delay
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                std::cout << ""Processed transaction: "" << value << std::endl;
            }
        }
    }
    std::vector<int> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    TransactionProcessor tp;
    tp.start();
    for (int i = 1; i <= 5; ++i) {
        tp.enqueue(i * 100);
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    tp.stop();
    return 0;
}
",code_defect,logic_error_lifo_processing,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processValues(std::vector<int>& data, int threshold) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] > threshold) {
            data[i] = data[i] * 2;
        } else {
            data[i] = data[i] / 2;
        }
    }
}

int main() {
    std::vector<int> values = {10, 20, 30, 40, 50};
    int threshold = 25;

    processValues(values, threshold);

    for (const auto& val : values) {
        std::cout << val << "" "";
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,public class UserManager { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUser(int index) { return users.get(index); } public int getCount() { return users.size(); } },code_smell,God class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String domain) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // insecure concatenation leads to SQL injection
            String sql = ""SELECT email FROM users WHERE email LIKE '"" + ""%@"" + domain + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception e) {}
            try { if (conn != null) conn.close(); } catch (Exception e) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Python,"import os
import json

def load_user_data(filename='user_data.json'):
    if not os.path.exists(filename):
        return {}

    with open(filename, 'r') as file:
        try:
            data = json.load(file)
        except json.JSONDecodeError:
            print('Error loading JSON file. Using empty data.')
            return {}
    return data


def update_user_score(username, score):
    data = load_user_data()
    data[username] = score

    with open('user_data.json', 'w') as file:
        json.dump(data, file, indent=4)


def calculate_leaderboard():
    data = load_user_data()
    sorted_users = sorted(data.items(), key=lambda x: x[1], reverse=True)
    return sorted_users[:10]


if __name__ == '__main__':
    update_user_score('alice', 100)
    update_user_score('bob', 150)
    print(calculate_leaderboard())",code_defect,missing_error_handling,,qwen/qwen3-32b
Python,"
class UserAuthenticator:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def authenticate(self, username, password):
        query = ""SELECT * FROM users WHERE username = '%s' AND password = '%s'"" % (username, password)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user = cursor.fetchone()
        if user:
            return True
        else:
            return False

    def get_user_data(self, username):
        query = ""SELECT * FROM users WHERE username = '%s'"" % username
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

# usage
import mysql.connector
db = mysql.connector.connect(host=""localhost"", user=""root"", password=""password"", database=""mydb"")
auth = UserAuthenticator(db)
print(auth.authenticate(""user"", ""password""))
print(auth.get_user_data(""user""))",code_defect,insecure_sql_queries,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    void addTransaction(int amount) {
        std::lock_guard<std::mutex> lock(mtx_);
        pending_.push_back(amount);
    }

    void processAll() {
        // Process each transaction sequentially
        for (size_t i = 0; i <= pending_.size(); ++i) { // off‑by‑one error
            int amt = pending_[i];
            if (amt < 0) {
                std::cerr << ""Invalid transaction"" << std::endl;
                continue;
            }
            balance_ += amt;
        }
        pending_.clear();
    }

    int getBalance() const { return balance_; }

private:
    std::vector<int> pending_;
    int balance_ = 0;
    std::mutex mtx_;
};

int main() {
    TransactionProcessor tp;
    tp.addTransaction(100);
    tp.addTransaction(200);
    tp.addTransaction(-50); // should be rejected
    tp.processAll();
    std::cout << ""Balance: "" << tp.getBalance() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  getUserByEmail(email) {
    return this.users.find(user => user.email === email);
  }

  sendEmailToAllUsers(subject, body) {
    this.users.forEach(user => {
      console.log(`Sending email to ${user.email}`);
      // Simulated email sending logic
      this.sendEmail(user.email, subject, body);
    });
  }

  sendEmail(to, subject, body) {
    // Simulated email sending logic
    console.log(`Email sent to ${to} with subject: ${subject}`);
  }

  deleteUserByEmail(email) {
    const index = this.users.findIndex(user => user.email === email);
    if (index !== -1) {
      this.users.splice(index, 1);
    }
  }

  // Legacy code, no longer used
  /*
  getInactiveUsers() {
    return this.users.filter(user => !user.isActive);
  }
  */

  updateUserNameByEmail(email, newName) {
    const user = this.getUserByEmail(email);
    if (user) {
      user.name = newName;
    }
  }
}

// Example usage
const users = [
  { email: 'alice@example.com', name: 'Alice', isActive: true },
  { email: 'bob@example.com', name: 'Bob', isActive: false }
];

const userManager = new UserManager(users);
userManager.sendEmailToAllUsers('Welcome!', 'Thank you for joining our platform. We hope you enjoy it!');",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"class UserService { constructor(userDao) { this.userDao = userDao; } async getUser(id) { const user = await this.userDao.findById(id); if (user) return user; else { const newUser = { id, name: 'Default User' }; await this.userDao.save(newUser); return newUser; } } }",code_smell,Tight Coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data):
        cursor = self.conn.cursor()
        # Directly embed user data into SQL -> SQL injection risk
        cursor.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')"")
        self.conn.commit()
        return cursor.lastrowid

    def get_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, username, data FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            return {
                'id': row[0],
                'username': row[1],
                'data': json.loads(row[2])
            }
        return None

    def delete_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE id = ?', (user_id,))
        self.conn.commit()

    def close(self):
        self.conn.close()

# Example usage
if __name__ == '__main__':
    manager = UserManager('users.db')
    uid = manager.add_user('alice', {'role': 'admin', 'prefs': {}})
    print('Created user with ID:', uid)
    user = manager.get_user(uid)
    print('Retrieved user:', user)
    manager.delete_user(uid)
    manager.close()
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import time
import random

def simulate_data_processing(data):
    results = []
    for item in data:
        processed = item * random.randint(1, 10)
        results.append(processed)
        time.sleep(0.01)
    return results

def main():
    input_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    processed_data = simulate_data_processing(input_data)
    print(""Processed data:"", processed_data)

if __name__ == ""__main__"":
    main()

# Old code, might be useful later
# def unused_function():
#     return 42",code_smell,dead_code,,qwen/qwen3-32b
Java,"
   public class PaymentProcessor {
       private static final String DATABASE_URL = ""jdbc:mysql://localhost:3306/payments"";
       private static final String DATABASE_USER = ""payment_user"";
       private static final String DATABASE_PASSWORD = ""password123"";
   
       public void processPayment(String paymentId) {
           try (Connection connection = DriverManager.getConnection(DATABASE_URL, DATABASE_USER, DATABASE_PASSWORD)) {
               Statement statement = connection.createStatement();
               ResultSet resultSet = statement.executeQuery(""SELECT * FROM payments WHERE id = '"" + paymentId + ""'"");
               if (resultSet.next()) {
                   System.out.println(""Payment found: "" + resultSet.getString(""amount""));
               } else {
                   System.out.println(""Payment not found"");
               }
           } catch (SQLException e) {
               System.out.println(""Error processing payment: "" + e.getMessage());
           }
       }
   }
   ",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserCache:
    def __init__(self, db_path='cache.db'):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cur = self.conn.cursor()
        cur.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, data TEXT)')
        self.conn.commit()

    def get_user(self, user_id):
        cur = self.conn.cursor()
        cur.execute('SELECT data FROM users WHERE id = ?', (user_id,))
        row = cur.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def set_user(self, user_id, user_obj):
        cur = self.conn.cursor()
        cur.execute('INSERT OR REPLACE INTO users (id, data) VALUES (?, ?)', (user_id, json.dumps(user_obj)))
        self.conn.commit()

    def close(self):
        self.conn.close()

def load_user_profile(user_id):
    cache = UserCache()
    profile = cache.get_user(user_id)
    if profile is None:
        # Simulate fetching from remote service
        response = os.popen(f'curl http://example.com/api/user/{user_id}').read()
        profile = json.loads(response)
        cache.set_user(user_id, profile)
    # Missing cache.close() leads to open DB connections
    return profile

def main():
    for uid in range(1, 1001):
        user = load_user_profile(uid)
        print(f""Loaded user {uid}: {user['name']}"")

if __name__ == '__main__':
    main()",code_defect,resource_leak,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

class UserSettingsManager:
    def __init__(self, user_id):
        self.user_id = user_id
        self.file_path = f'./user_data/{user_id}_settings.json'

    def load_settings(self):
        if not os.path.exists(self.file_path):
            return {} 
        with open(self.file_path, 'r') as f:
            return json.load(f)

    def save_settings(self, settings):
        os.makedirs(os.path.dirname(self.file_path), exist_ok=True)
        with open(self.file_path, 'w') as f:
            json.dump(settings, f, indent=4)

    def update_setting(self, key, value):
        settings = self.load_settings()
        settings[key] = value
        self.save_settings(settings)

    def get_setting(self, key):
        return self.load_settings().get(key)

    def remove_setting(self, key):
        settings = self.load_settings()
        if key in settings:
            del settings[key]
        self.save_settings(settings)

    def get_all_settings(self):
        return self.load_settings()

    def log_activity(self, action):
        log_message = {
            'timestamp': datetime.now().isoformat(),
            'user_id': self.user_id,
            'action': action
        }
        print(log_message)

# Example usage:
if __name__ == '__main__':
    manager = UserSettingsManager('user123')
    manager.update_setting('theme', 'dark')
    manager.update_setting('language', 'en')
    print(manager.get_setting('theme'))",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute('UPDATE users SET name = %s, email = %s WHERE id = %s', (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
        return True",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""secret"";

    public List<User> getUsersPage(int pageNumber, int pageSize) throws SQLException {
        // pageNumber is 1-based, but the query uses 0-based offset incorrectly
        int offset = (pageNumber - 1) * pageSize; // off-by-one bug when pageNumber == 0
        String sql = ""SELECT id, username, email FROM users LIMIT ? OFFSET ?"";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, pageSize);
            stmt.setInt(2, offset);
            try (ResultSet rs = stmt.executeQuery()) {
                List<User> users = new ArrayList<>();
                while (rs.next()) {
                    User u = new User();
                    u.setId(rs.getInt(""id""));
                    u.setUsername(rs.getString(""username""));
                    u.setEmail(rs.getString(""email""));
                    users.add(u);
                }
                return users;
            }
        }
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json
import requests

def fetch_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    response = requests.get(url)
    data = response.json()
    return data

def process_user_data(data):
    processed = []
    for item in data:
        processed.append({
            'id': item['id'],
            'name': item['name'].upper(),
            'email': item['email']
        })
    return processed

def main():
    user_id = '12345'
    raw_data = fetch_user_data(user_id)
    if 'data' in raw_data:
        processed = process_user_data(raw_data['data'])
        print(json.dumps(processed, indent=2))

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserRepository:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        if user_data:
            return {
                'id': user_data[0],
                'name': user_data[1],
                'email': user_data[2]
            }
        else:
            return None
    
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        users = []
        for user_data in users_data:
            users.append({
                'id': user_data[0],
                'name': user_data[1],
                'email': user_data[2]
            })
        return users",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class OrderProcessor {
    private Connection dbConnection;
    private static final String INSERT_ORDER_SQL = ""INSERT INTO orders (id, customer, amount) VALUES (?, ?, ?)"";

    public OrderProcessor(Connection connection) {
        this.dbConnection = connection;
    }

    public void processOrders(List<Order> orders) {
        for (Order order : orders) {
            try {
                saveOrder(order);
            } catch (SQLException e) {
                // Log and continue processing other orders
                System.err.println(""Failed to save order "" + order.getId() + "": "" + e.getMessage());
            }
        }
    }

    private void saveOrder(Order order) throws SQLException {
        PreparedStatement stmt = dbConnection.prepareStatement(INSERT_ORDER_SQL);
        stmt.setInt(1, order.getId());
        stmt.setString(2, order.getCustomerName());
        stmt.setDouble(3, order.getAmount());
        stmt.executeUpdate();
        // Missing stmt.close(); leads to resource leak
    }
}

class Order {
    private int id;
    private String customerName;
    private double amount;

    public Order(int id, String customerName, double amount) {
        this.id = id;
        this.customerName = customerName;
        this.amount = amount;
    }

    public int getId() { return id; }
    public String getCustomerName() { return customerName; }
    public double getAmount() { return amount; }
}
",code_defect,resource_leak,,openai/gpt-oss-120b
JavaScript,"class UserValidator {
  validateUser(user) {
    if (!user) return false;

    if (!user.name || user.name.trim() === '') {
      console.warn('Name is missing');
      return false;
    }

    if (!user.email || !/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(user.email)) {
      console.warn('Invalid email format');
      return false;
    }

    if (!user.password || user.password.length < 6) {
      console.warn('Password must be at least 6 characters');
      return false;
    }

    if (user.roles && user.roles.includes('admin') && !user.isAdminConfirmed) {
      console.warn('Admin role requires confirmation');
      return false;
    }

    return true;
  }
}

// Usage example
const validator = new UserValidator();
const user = {
  name: 'John Doe',
  email: 'johndoe@example.com',
  password: '123456',
  roles: ['admin'],
  isAdminConfirmed: false
};

const isValid = validator.validateUser(user);
console.log('User is valid:', isValid);",code_smell,large_function,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount > self.balance:
            self.balance = 0
        else:
            self.balance -= amount
    def get_balance(self):
        return self.balance

account = BankAccount(100)
account.withdraw(50)
print(account.get_balance())",code_defect,incomplete_error_handling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i]; // may read out of bounds
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1,2,3,4,5};
    std::thread t([&](){ processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << ""\n"";
    std::cout << ""Odd sum: "" << processor.getOddSum() << ""\n"";
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user.type === 'admin') {
        this.sendAdminEmail(user);
      } else if (user.type === 'moderator') {
        this.sendModeratorEmail(user);
      } else {
        this.sendRegularEmail(user);
      }
    });
  }

  sendAdminEmail(user) {
    console.log(`Sending admin email to ${user.email}`);
  }

  sendModeratorEmail(user) {
    console.log(`Sending moderator email to ${user.email}`);
  }

  sendRegularEmail(user) {
    console.log(`Sending regular email to ${user.email}`);
  }
}",code_smell,large_function,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, account_number, balance=0):
        self.account_number = account_number
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount > self.balance:
            self.balance = 0
        else:
            self.balance -= amount
    def get_balance(self):
        return self.balance

account = BankAccount('123456789', 1000)
print(account.get_balance())
account.withdraw(500)
print(account.get_balance())",code_defect,incorrect_conditional_logic,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        String query = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk if limit derived from user input
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                payments.add(rs.getString(""payment_id""));
            }
        }
        return payments;
    }

    public void processPayments(List<String> paymentIds) {
        for (String id : paymentIds) {
            // Simulate processing
            System.out.println(""Processing payment: "" + id);
            // Missing error handling; if processing fails, loop continues silently
        }
    }

    public static void main(String[] args) {
        PaymentProcessor processor = new PaymentProcessor();
        try {
            List<String> pending = processor.getPendingPayments(10);
            processor.processPayments(pending);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
",code_defect,hardcoded_credentials_and_sql_injection_risk,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    void process(const std::vector<int>& input) {
        for (size_t i = 0; i <= input.size(); ++i) {
            if (i < input.size()) {
                int result = input[i] * 2;
                std::cout << ""Result: "" << result << std::endl;
            }
        }
    }
};

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    DataProcessor dp;
    dp.process(data);
    return 0;
}",code_defect,off_by_one_error,,qwen/qwen3-32b
Python,"
class PaymentProcessor:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def process_payment(self, user_id, amount):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT balance FROM users WHERE id = %s"", (user_id,))
        balance = cursor.fetchone()[0]
        if balance >= amount:
            new_balance = balance - amount
            cursor.execute(""UPDATE users SET balance = %s WHERE id = %s"", (new_balance, user_id))
            self.db_connection.commit()
            return True
        return False

    def get_user_balance(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT balance FROM users WHERE id = %s"", (user_id,))
        return cursor.fetchone()[0]

    def transfer_funds(self, sender_id, recipient_id, amount):
        sender_balance = self.get_user_balance(sender_id)
        if sender_balance >= amount:
            new_sender_balance = sender_balance - amount
            new_recipient_balance = self.get_user_balance(recipient_id) + amount
            cursor = self.db_connection.cursor()
            cursor.execute(""UPDATE users SET balance = %s WHERE id = %s"", (new_sender_balance, sender_id))
            cursor.execute(""UPDATE users SET balance = %s WHERE id = %s"", (new_recipient_balance, recipient_id))
            self.db_connection.commit()
            return True
        return False
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ReportGenerator {
    constructor(dbConnection, logger, config) {
        this.db = dbConnection;
        this.log = logger;
        this.cfg = config;
    }

    // Generates a CSV report for a given date range and list of user IDs
    generateReport(startDate, endDate, userIds, includeHeaders, delimiter, quoteChar, escapeChar, lineTerminator) {
        // Validate inputs (minimal)
        if (!Array.isArray(userIds) || userIds.length === 0) {
            throw new Error('User IDs required');
        }
        const rows = [];
        // Inefficient: fetch each user's data in a separate query inside a loop
        for (let i = 0; i < userIds.length; i++) {
            const userId = userIds[i];
            const data = this.db.query(`SELECT * FROM transactions WHERE user_id = ${userId} AND date >= '${startDate}' AND date <= '${endDate}'`);
            for (let j = 0; j < data.length; j++) {
                const tx = data[j];
                const row = [
                    tx.id,
                    tx.amount,
                    tx.currency,
                    tx.timestamp,
                    tx.status
                ];
                rows.push(row);
            }
        }
        // Build CSV string
        let csv = '';
        if (includeHeaders) {
            csv += ['TransactionID', 'Amount', 'Currency', 'Timestamp', 'Status'].join(delimiter) + lineTerminator;
        }
        for (let i = 0; i < rows.length; i++) {
            const escaped = rows[i].map(field => `${quoteChar}${String(field).replace(quoteChar, escapeChar + quoteChar)}${quoteChar}`);
            csv += escaped.join(delimiter) + lineTerminator;
        }
        // Write to file (hardcoded path)
        fs.writeFileSync('/var/reports/report_' + startDate + '_' + endDate + '.csv', csv);
        this.log.info('Report generated');
    }
}

module.exports = ReportGenerator;",code_smell,large_function_with_many_parameters_and_inefficient_db_queries,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    private List<Order> orders;

    public OrderProcessor() {
        this.orders = new ArrayList<>();
    }

    public void addOrder(Order order) {
        this.orders.add(order);
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                processOrder(order);
            }
        }
    }

    private void processOrder(Order order) {
        // Simulate processing with hardcoded logic
        if (order.getAmount() > 100) {
            order.applyDiscount(10);
        } else if (order.getAmount() > 50) {
            order.applyDiscount(5);
        }

        // Simulate external service call
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        order.markAsProcessed();
    }

    // Unused method left in code
    public void unusedMethod() {
        // Legacy code
        // System.out.println(""This method is no longer used"");
    }

    public List<Order> getOrders() {
        return orders;
    }
}",code_smell,dead_code,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password
        else:
            print('User already exists')

    def authenticate(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def change_password(self, username, old_password, new_password):
        if self.authenticate(username, old_password):
            self.users[username] = new_password
        else:
            print('Invalid username or password')

    def get_all_users(self):
        return list(self.users.keys())

    def delete_user(self, username):
        if username in self.users:
            del self.users[username]
        else:
            print('User does not exist')

def main():
    manager = UserManager()
    while True:
        print('1. Add user')
        print('2. Authenticate')
        print('3. Change password')
        print('4. Get all users')
        print('5. Delete user')
        print('6. Exit')
        choice = input('Enter your choice: ')
        if choice == '1':
            username = input('Enter username: ')
            password = input('Enter password: ')
            manager.add_user(username, password)
        elif choice == '2':
            username = input('Enter username: ')
            password = input('Enter password: ')
            if manager.authenticate(username, password):
                print('Authentication successful')
            else:
                print('Invalid username or password')
        elif choice == '3':
            username = input('Enter username: ')
            old_password = input('Enter old password: ')
            new_password = input('Enter new password: ')
            manager.change_password(username, old_password, new_password)
        elif choice == '4':
            print(manager.get_all_users())
        elif choice == '5':
            username = input('Enter username: ')
            manager.delete_user(username)
        elif choice == '6':
            break
        else:
            print('Invalid choice')

if __name__ == '__main__':
    main()
",code_smell,God class,,llama-3.3-70b-versatile
Python,"import os
import json
import sqlite3

class UserCache:
    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()
        self.cache = {}
        self._load_cache()

    def _ensure_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS user_data (
                user_id TEXT PRIMARY KEY,
                data TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def _load_cache(self):
        cursor = self.conn.execute('SELECT user_id, data FROM user_data')
        for user_id, data in cursor:
            self.cache[user_id] = json.loads(data)

    def get_user(self, user_id: str):
        # Missing check for existence leads to KeyError
        return self.cache[user_id]

    def set_user(self, user_id: str, data: dict):
        self.cache[user_id] = data
        self.conn.execute('INSERT OR REPLACE INTO user_data (user_id, data) VALUES (?, ?)',
                          (user_id, json.dumps(data)))
        self.conn.commit()

    def delete_user(self, user_id: str):
        if user_id in self.cache:
            del self.cache[user_id]
        # Forgot to delete from DB, causing stale entries
        self.conn.commit()

# Usage example (not part of the library)
if __name__ == '__main__':
    cache = UserCache('users.db')
    cache.set_user('alice', {'email': 'alice@example.com'})
    print(cache.get_user('alice'))
    cache.delete_user('alice')
    # This will raise KeyError because the entry was removed from cache but not from DB
    print(cache.get_user('alice'))
",code_defect,missing_key_error_and_stale_db_entries,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processUserInput(const std::string& input) {
    std::string result;
    for (char c : input) {
        if (c >= 'a' && c <= 'z') {
            result += c;
        } else if (c >= 'A' && c <= 'Z') {
            result += c;
        } else if (c >= '0' && c <= '9') {
            result += c;
        }
    }
    return result;
}

int main() {
    std::string input = ""Hello, World! 123"";
    std::string output = processUserInput(input);
    std::cout << ""Processed Output: "" << output << std::endl;
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getUser(id) { const user = await this.userRepository.findById(id); if (user) { return user; } else { return null; } } async getAllUsers() { const users = await this.userRepository.findAll(); return users; } },clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn returns a promise that resolves to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off‑by‑one error – should use (pageNumber - 1) * this.pageSize
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  next() {
    const nextPage = this.currentPage + 1;
    const page = this.getPage(nextPage);
    if (page.length) {
      this.currentPage = nextPage;
    }
    return page;
  }
}

// Example usage
const paginator = new Paginator(10);
 paginator.loadItems(() => Promise.resolve(Array.from({length: 95}, (_, i) => i + 1)))
  .then(() => {
    console.log('First page:', paginator.getPage(1)); // Returns items 11‑20 instead of 1‑10
    console.log('Next page:', paginator.next()); // Skips first page
  });",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input, std::vector<int>& output) {
    std::string temp = input;
    for (size_t i = 0; i < temp.length(); ++i) {
        if (temp[i] >= '0' && temp[i] <= '9') {
            output.push_back(temp[i] - '0');
        } else {
            output.push_back(-1);
        }
    }

    for (size_t i = 0; i < output.size(); ++i) {
        if (output[i] == -1) {
            output[i] = 0;
        }
    }
}

int main() {
    std::string input;
    std::vector<int> result;
    std::cout << ""Enter a string: "";
    std::cin >> input;

    processUserInput(input, result);

    for (int val : result) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}",code_smell,redundant_processing,,qwen/qwen3-32b
Java,"public class UserManager { private static HashMap<String, User> users = new HashMap<>(); public static void addUser(User user) { users.put(user.getUsername(), user); } public static User getUser(String username) { return users.get(username); } public static void removeUser(String username) { users.remove(username); } }",code_smell,God class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation on limit
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void deleteUser(String username) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""DELETE FROM users WHERE username = '"" + username + ""'""; // SQL injection risk
            stmt.executeUpdate(sql);
        } catch (Exception e) {
            // ignore errors
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data, int threshold, bool enableFlag) {
    if (enableFlag) {
        for (size_t i = 0; i < data.size(); ++i) {
            if (data[i] > threshold) {
                data[i] = data[i] * 2;
            }
        }
    } else {
        for (size_t i = 0; i < data.size(); ++i) {
            if (data[i] < threshold) {
                data[i] = data[i] / 2;
            }
        }
    }

    for (size_t i = 0; i < data.size(); ++i) {
        std::cout << data[i] << ""\n"";
    }
}

int main() {
    std::vector<int> input = {10, 20, 30, 40, 50};
    processData(input, 25, true);
    return 0;
}",code_smell,duplicated_code,,qwen/qwen3-32b
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // JSON.parse can throw, but we ignore errors
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function getUserSetting(userId) {
  const loader = new ConfigLoader('/etc/app/settings.json');
  const config = loader.load();
  // Assume config.users is an object keyed by user IDs
  return config.users[userId] || {};
}

function processRequest(req, res) {
  const userId = req.query.id;
  const settings = getUserSetting(userId);
  // Missing validation: settings may be undefined, leading to runtime error
  if (settings.enableFeature) {
    res.send('Feature enabled');
  } else {
    res.send('Feature disabled');
  }
}

module.exports = { processRequest };",code_defect,missing_validation_null_pointer,,openai/gpt-oss-120b
Python,"import os
import subprocess


def execute_command(command, input_data=None):
    process = subprocess.Popen(
        command,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        shell=True
    )
    
    stdout, stderr = process.communicate(input_data)
    return stdout.decode('utf-8')


def run_pipeline(user_input):
    
    command = f'echo ""{user_input}"" | grep ""pattern""'
    result = execute_command(command)
    
    if ""pattern"" in result:
        print(""Pattern found."")
    else:
        print(""No pattern found."")

if __name__ == ""__main__"":
    user_input = input(""Enter input: "")
    run_pipeline(user_input)",code_defect,security_issue,,qwen/qwen3-32b
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public String getUserEmail(int userId) {
        String email = null;
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String query = ""SELECT email FROM users WHERE id = "" + userId; // SQL injection risk
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                email = rs.getString(""email"");
            }
        } catch (Exception e) {
            // swallow exception
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return email;
    }
}
",code_defect,sql_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

struct User {
    std::string name;
    int age;
    std::string email;
};

std::vector<User> load_users_from_database() {
    std::vector<User> users;
    User u1 = {""Alice"", 30, ""alice@example.com""};
    User u2 = {""Bob"", 25, ""bob@example.com""};
    users.push_back(u1);
    users.push_back(u2);
    return users;
}

void send_email(const std::string& email, const std::string& message) {
    // Simulate email sending logic
    std::cout << ""Sending email to "" << email << "" with message: \n"" << message << std::endl;
}

void send_reminder_emails() {
    std::vector<User> users = load_users_from_database();
    for (size_t i = 0; i < users.size(); ++i) {
        std::string message = ""Dear "" + users[i].name + "",\n\nThis is a reminder.\nBest regards,\nTeam."";
        send_email(users[i].email, message);
    }
}

int main() {
    send_reminder_emails();
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class PaymentGateway:
    def __init__(self, api_key):
        self.api_key = api_key
        self.cache = {}

    def process_payment(self, amount, currency):
        if (amount, currency) in self.cache:
            return self.cache[(amount, currency)]
        else:
            # simulate API call
            import time
            time.sleep(1)
            result = {'status': 'success', 'transaction_id': 123}
            self.cache[(amount, currency)] = result
            return result

    def get_payment_status(self, transaction_id):
        # always return success
        return {'status': 'success'}",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  loadConfig() {
    // Asynchronously read config file but return before it's loaded
    fs.readFile(this.path, 'utf8', (err, data) => {
      if (err) throw err;
      this.cache = JSON.parse(data);
    });
    return this.cache; // May be null because readFile is async
  }
}

function initializeApp() {
  const loader = new ConfigLoader('./config.json');
  const config = loader.loadConfig();
  // Use config immediately, assuming it's loaded
  if (config.enableFeature) {
    console.log('Feature enabled');
  } else {
    console.log('Feature disabled');
  }
}

initializeApp();",code_defect,async_race_condition,,openai/gpt-oss-120b
Python,"import requests
import os

API_KEY = '1234567890'

def fetch_weather_data(city):
    url = f'https://api.weatherapi.com/v1/current.json?key={API_KEY}&q={city}'
    response = requests.get(url)
    data = response.json()

    if 'error' in data:
        print('Error fetching weather data')
        return None

    return {
        'temperature': data['current']['temp_c'],
        'humidity': data['current']['humidity'],
        'wind_speed': data['current']['wind_kph']
    }

def log_weather_data(city, data):
    with open('weather_logs.txt', 'a') as f:
        f.write(f'City: {city}, Temp: {data[""temperature""]}C, Humidity: {data[""humidity""]}%, Wind Speed: {data[""wind_speed""]} kph\n')

    print(f'Logged weather for {city}...')

if __name__ == '__main__':
    cities = ['New York', 'London', 'Tokyo', 'Berlin']
    for city in cities:
        weather_data = fetch_weather_data(city)
        if weather_data:
            log_weather_data(city, weather_data)",code_defect,hardcoded_secrets,,qwen/qwen3-32b
JavaScript,"
   class ShoppingCart {
      constructor() {
         this.items = [];
      }

      addItem(item) {
         this.items.push(item);
      }

      removeItem(item) {
         const index = this.items.indexOf(item);
         if (index !== -1) {
            this.items.splice(index, 1);
         }
      }

      calculateTotal() {
         let total = 0;
         for (let i = 0; i < this.items.length; i++) {
            total += this.items[i].price;
         }
         return total;
      }
   }

   class Item {
      constructor(name, price) {
         this.name = name;
         this.price = price;
      }
   }

   const cart = new ShoppingCart();
   const item1 = new Item('Product A', 10.99);
   const item2 = new Item('Product B', 5.99);
   cart.addItem(item1);
   cart.addItem(item2);
   console.log(cart.calculateTotal());
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file for each call
    getUserInfo(userId) {
        // Bad practice: synchronous file I/O inside a frequently called method
        const user = this.db.query('SELECT * FROM users WHERE id = ' + userId);
        const log = `User ${userId} accessed at ${new Date().toISOString()}\n`;
        fs.appendFileSync('/var/log/app/user_access.log', log);
        return user;
    }

    // Large method doing multiple unrelated tasks
    updateUserProfile(userId, profileData, notify = true) {
        // Validate input (poorly)
        if (!profileData || typeof profileData !== 'object') {
            throw new Error('Invalid profile data');
        }
        // Update DB
        this.db.execute(`UPDATE users SET name='${profileData.name}', email='${profileData.email}' WHERE id=${userId}`);
        // Send notification (synchronous, blocks event loop)
        if (notify) {
            const http = require('http');
            const options = {
                hostname: 'notification.service',
                port: 80,
                path: `/notify?user=${userId}`,
                method: 'GET'
            };
            const req = http.request(options, res => {
                // ignore response
            });
            req.on('error', e => {
                console.error('Notification error', e);
            });
            req.end();
        }
        // Log update (duplicate code)
        const log = `User ${userId} profile updated at ${new Date().toISOString()}\n`;
        fs.appendFileSync('/var/log/app/user_update.log', log);
    }
}

module.exports = UserService;",code_smell,synchronous I/O in hot path and God method,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user.status === 'active') {
        this.sendEmail(user.email, 'Welcome back!');
      } else if (user.status === 'inactive') {
        this.sendEmail(user.email, 'We miss you!');
      } else {
        this.sendEmail(user.email, 'Hello!');
      }
    });
  }

  sendEmail(email, message) {
    // Simulate email sending
    console.log(`Sending to ${email}: ${message}`);
  }
}

const users = [
  { email: 'user1@example.com', status: 'active' },
  { email: 'user2@example.com', status: 'inactive' },
  { email: 'user3@example.com', status: 'pending' }
];

const processor = new UserProcessor(users);
processor.processUsers();",code_smell,lack_of_single_responsibility,,qwen/qwen3-32b
Python,"
class BankAccount:
    def __init__(self, account_number, balance):
        self.account_number = account_number
        self.balance = balance

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount

    def withdraw(self, amount):
        if amount > 0:
            self.balance -= amount

    def get_balance(self):
        return self.balance

class Bank:
    def __init__(self):
        self.accounts = {}

    def create_account(self, account_number, initial_balance):
        self.accounts[account_number] = BankAccount(account_number, initial_balance)

    def get_account(self, account_number):
        return self.accounts.get(account_number)

    def transfer_funds(self, from_account_number, to_account_number, amount):
        from_account = self.get_account(from_account_number)
        to_account = self.get_account(to_account_number)
        if from_account and to_account:
            from_account.withdraw(amount)
            to_account.deposit(amount)
        else:
            print('Transfer failed: one or both accounts not found')

bank = Bank()
bank.create_account('12345', 1000)
bank.create_account('67890', 500)
bank.transfer_funds('12345', '67890', 200)
print(bank.get_account('12345').get_balance())
print(bank.get_account('67890').get_balance())
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(configPath) {
        this.path = configPath;
        this.cache = null;
    }

    // Loads config from file, caches it, but never invalidates cache on subsequent calls
    load() {
        if (this.cache) {
            return this.cache;
        }
        const data = fs.readFileSync(this.path, 'utf8');
        // BUG: JSON.parse can throw, but not caught, causing the whole process to crash
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function processUserInput(input) {
    // SECURITY DEFECT: Directly concatenating user input into a shell command
    const command = `ls -l ${input}`;
    const exec = require('child_process').execSync;
    // This will execute arbitrary commands if input is malicious
    return exec(command).toString();
}

module.exports = { ConfigLoader, processUserInput };",code_defect,security_risk,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    private String userDBPath = ""./users.ser"";

    public boolean authenticate(String username, String password) {
        try {
            File file = new File(userDBPath);
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file));
            User[] users = (User[]) ois.readObject();
            ois.close();

            for (User user : users) {
                if (user.getUsername().equals(username) && user.getPassword().equals(password)) {
                    return true;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }
}",code_defect,unsafe_deserialization,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class BankAccount {
public:
    BankAccount(double balance) : balance_(balance) {}
    void deposit(double amount) { balance_ += amount; }
    void withdraw(double amount) { if (balance_ >= amount) balance_ -= amount; }
    double getBalance() { return balance_; }
private:
    double balance_;
};

int main() {
    BankAccount account(1000.0);
    account.deposit(500.0);
    cout << ""Balance: "" << account.getBalance() << endl;
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it globally.""""""
    _cache = None
    _lock = threading.Lock()

    @classmethod
    def load(cls, path: str):
        # Missing validation: path could be absolute or point to sensitive files
        with cls._lock:
            if cls._cache is None:
                with open(path, 'r') as f:
                    # Unsafe deserialization: json.load can execute malicious content if overridden
                    cls._cache = json.load(f)
        return cls._cache

def process_user_data(user_id: int, data: dict):
    """"""Processes user data and writes a report to a file named after the user ID.""""""
    # Potential path traversal via user_id if not sanitized (e.g., negative numbers)
    filename = f""/tmp/report_{user_id}.txt""
    with open(filename, 'w') as report:
        for key, value in data.items():
            report.write(f""{key}: {value}\n"")
    # Returns the path, but caller may assume it's safe
    return filename

# Example usage
if __name__ == ""__main__"":
    config = ConfigLoader.load(os.getenv('CONFIG_PATH', 'config.json'))
    user_data = {'name': 'Alice', 'balance': 100}
    # Bug: passing a negative user_id leads to file being written to /tmp/report_-1.txt, which may be a symlink
    report_path = process_user_data(-1, user_data)
    print(f""Report written to {report_path}"")",code_defect,path_traversal_via_user_id,,openai/gpt-oss-120b
Python,"import os
import re

def process_logs(log_path):
    processed_data = []
    
    with open(log_path, 'r') as log_file:
        for line in log_file:
            line = line.strip()
            
            # Check if line contains error keyword
            if 'ERROR' in line:
                # Extract timestamp
                timestamp_match = re.search(r'\[(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\]', line)
                if timestamp_match:
                    timestamp = timestamp_match.group(1)
                
                # Extract error message
                error_match = re.search(r'ERROR: (.*)', line)
                if error_match:
                    error_message = error_match.group(1)
                    processed_data.append((timestamp, error_message))
                
                # Debug print
                print(f'Processed line: {line}')

    return processed_data

# Example usage
if __name__ == '__main__':
    log_path = 'app.log'
    errors = process_logs(log_path)
    print(f'Found {len(errors)} errors.')",code_smell,poor_error_handling,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    Student(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class StudentDatabase {
public:
    void addStudent(Student student) { students.push_back(student); }
    void sortStudents() { std::sort(students.begin(), students.end(), [](Student a, Student b) { return a.getAge() < b.getAge(); }); }
    void printStudents() {
        for (const auto& student : students) {
            std::cout << student.getName() << "" is "" << student.getAge() << "" years old."" << std::endl;
        }
    }

private:
    std::vector<Student> students;
};

int main() {
    StudentDatabase db;
    db.addStudent(Student(""John"", 20));
    db.addStudent(Student(""Alice"", 22));
    db.addStudent(Student(""Bob"", 19));
    db.sortStudents();
    db.printStudents();
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String domainFilter) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // INSECURE: concatenating user input directly into SQL query
            String sql = ""SELECT email FROM users WHERE email LIKE '"" + domainFilter + ""%'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      user.name = user.firstName + ' ' + user.lastName;
      delete user.firstName;
      delete user.lastName;
      user.status = this.determineStatus(user);
      user.tags = this.generateTags(user);
    }
  }

  determineStatus(user) {
    if (user.age >= 18) {
      return 'adult';
    } else {
      return 'minor';
    }
  }

  generateTags(user) {
    const tags = [];
    if (user.email.includes('gmail.com')) {
      tags.push('gmail_user');
    }
    if (user.location === 'US') {
      tags.push('us_user');
    }
    return tags;
  }
}

// Usage
const users = [
  { firstName: 'Alice', lastName: 'Smith', age: 25, email: 'alice@gmail.com', location: 'US' },
  { firstName: 'Bob', lastName: 'Johnson', age: 16, email: 'bob@outlook.com', location: 'CA' }
];
const processor = new UserProcessor(users);
processor.processUsers();",code_smell,large_class,,qwen/qwen3-32b
Java,"public class UserService { private Map<String, String> users = new HashMap<>(); public void addUser(String username, String password) { users.put(username, password); } public String authenticate(String username, String password) { return users.get(username); } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        with open(self.path, 'r') as f:
            # Directly eval the file content – insecure!
            self.config = eval(f.read())

    def get(self, key, default=None):
        return self.config.get(key, default)

class UserService:
    def __init__(self, config_path):
        self.cfg = ConfigLoader(config_path)
        self.db_path = self.cfg.get('db_path')

    def get_user(self, user_id):
        # Build SQL query by concatenation – SQL injection risk
        query = f""SELECT * FROM users WHERE id = {user_id}""
        conn = None
        try:
            conn = self._connect()
            cur = conn.cursor()
            cur.execute(query)
            row = cur.fetchone()
            return row
        finally:
            if conn:
                conn.close()

    def _connect(self):
        import sqlite3
        return sqlite3.connect(self.db_path)

# Usage example (would be called elsewhere)
service = UserService('config.cfg')
print(service.get_user(1))",code_defect,insecure_deserialization_and_sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void processData(const std::vector<int>& data) {
    for (int i = 0; i < data.size(); ++i) {
        for (int j = 0; j < data.size(); ++j) {
            std::lock_guard<std::mutex> lock(mtx);
            std::cout << ""Processing data["" << i << ""]["" << j << ""]\n"";
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::thread t1(processData, data);
    std::thread t2(processData, data);

    t1.join();
    t2.join();

    return 0;
}",code_smell,inefficient_loops,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserRepository {
private:
    vector<User> users;
public:
    void AddUser(User user) { users.push_back(user); }
    vector<User> GetUsers() { return users; }
};

int main() {
    UserRepository repo;
    repo.AddUser(User(""John"", 30));
    repo.AddUser(User(""Alice"", 25));
    vector<User> users = repo.GetUsers();
    for (User user : users) {
        cout << user.name << "" is "" << user.age << "" years old."" << endl;
    }
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    // Returns the nth user (1-based index) or empty string if out of range
    std::string getUserByRank(int rank) const {
        // Off‑by‑one error: should be rank-1
        if (rank <= 0 || rank > static_cast<int>(users.size())) {
            return """";
        }
        return users[rank];
    }

    // Removes duplicate usernames (inefficient O(n^2) approach)
    void deduplicate() {
        for (size_t i = 0; i < users.size(); ++i) {
            for (size_t j = i + 1; j < users.size(); ++j) {
                if (users[i] == users[j]) {
                    users.erase(users.begin() + j);
                    --j; // adjust index after erase
                }
            }
        }
    }

    void printAll() const {
        for (const auto& u : users) {
            std::cout << u << std::endl;
        }
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.addUser(""carol"");
    um.addUser(""bob""); // duplicate
    um.deduplicate();
    std::cout << ""Second user: "" << um.getUserByRank(2) << std::endl; // crashes or returns wrong user
    um.printAll();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private static final int MAX_USERS = 1000;

    public void processUsers(String[] users) {
        List<String> validUsers = new ArrayList<>();
        for (String user : users) {
            if (user != null && !user.isEmpty()) {
                validUsers.add(user);
            }
        }

        if (validUsers.size() > MAX_USERS) {
            throw new IllegalArgumentException(""Too many users provided."");
        }

        for (int i = 0; i < validUsers.size(); i++) {
            String user = validUsers.get(i);
            System.out.println(""Processing user "" + user);
            // Simulate some processing
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void save() {
        std::cout << ""Saving user..."" << std::endl;
        // Simulating some work
        for (int i = 0; i < 10000000; i++) {}
    }

private:
    std::string name;
    int age;
};

int main() {
    User user(""John Doe"", 30);
    user.save();
    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String role) {
        List<String> emails = new ArrayList<>();
        String query = ""SELECT email FROM users WHERE role = '"" + role + ""'""; // unsafe concatenation
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        } catch (Exception e) {
            // Swallow exception, return partial results
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, config) {
    this.users = users;
    this.config = config || {};
    this.cache = {};
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      if (!this.cache[user.id]) {
        this.cache[user.id] = this._processUser(user);
      }
      console.log(`Processed user ${user.id}`);
    }
  }

  _processUser(user) {
    let result = {};
    if (this.config.useLegacyFormat) {
      result = this._processLegacyUser(user);
    } else {
      result = this._processModernUser(user);
    }
    return result;
  }

  _processLegacyUser(user) {
    return {
      id: user.id,
      name: user.name.toUpperCase(),
      email: `legacy+${user.email}`
    };
  }

  _processModernUser(user) {
    return {
      id: user.id,
      name: user.name.trim(),
      email: user.email.replace(' ', '_')
    };
  }
}

const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com' },
  { id: 2, name: 'Bob ', email: 'bob@example.com' },
  { id: 3, name: 'Charlie', email: 'charlie@example.com' }
];

const config = { useLegacyFormat: false };
const processor = new UserProcessor(users, config);
processor.processUsers();",code_smell,large_class,,qwen/qwen3-32b
JavaScript,"
   class UserService {
     constructor(userRepository) {
       this.userRepository = userRepository;
     }

     async getAllUsers() {
       return this.userRepository.findAll();
     }

     async getUserById(id) {
       return this.userRepository.findById(id);
     }

     async createUser(user) {
       if (await this.userRepository.exists(user.email)) {
         throw new Error('User already exists');
       }
       return this.userRepository.create(user);
     }
   }

   class UserRepository {
     async findAll() {
       // simulate database query
       return [{ id: 1, email: 'user1@example.com' }, { id: 2, email: 'user2@example.com' }];
     }

     async findById(id) {
       // simulate database query
       return { id: 1, email: 'user1@example.com' };
     }

     async exists(email) {
       // simulate database query
       return true;
     }

     async create(user) {
       // simulate database query
       return user;
     }
   }

   const userRepository = new UserRepository();
   const userService = new UserService(userRepository);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""admin123""; // hardcoded credentials

    public Map<String, Double> getUserBalances(String[] userIds) {
        Map<String, Double> balances = new HashMap<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Inefficient: executes a separate query for each user (N+1 query problem)
            for (String userId : userIds) {
                String sql = ""SELECT balance FROM accounts WHERE user_id='"" + userId + ""'"";
                ResultSet rs = stmt.executeQuery(sql);
                if (rs.next()) {
                    balances.put(userId, rs.getDouble(""balance""));
                }
                rs.close();
            }
        } catch (Exception e) {
            // Swallowing exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return balances;
    }
}
",code_defect,SQL injection vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class UserManager {
public:
    void addUser(const std::string& name, int age, const std::string& email, const std::string& role, const std::string& department) {
        users.push_back({name, age, email, role, department});
    }

    void displayUsers() {
        for (const auto& user : users) {
            std::cout << ""Name: "" << user.name << ""\n"";
            std::cout << ""Age: "" << user.age << ""\n"";
            std::cout << ""Email: "" << user.email << ""\n"";
            std::cout << ""Role: "" << user.role << ""\n"";
            std::cout << ""Department: "" << user.department << ""\n\n"";
        }
    }

private:
    struct User {
        std::string name;
        int age;
        std::string email;
        std::string role;
        std::string department;
    };

    std::vector<User> users;
};

int main() {
    UserManager userManager;
    userManager.addUser(""Alice"", 30, ""alice@example.com"", ""Manager"", ""Sales"");
    userManager.addUser(""Bob"", 25, ""bob@example.com"", ""Developer"", ""Engineering"");
    userManager.displayUsers();
    return 0;
}",code_smell,long_parameter_list,,qwen/qwen3-32b
Python,"
class UserAccount:
    def __init__(self, username, password):
        self.username = username
        self.password = password

    def authenticate(self, input_password):
        if self.password == input_password:
            return True
        else:
            return False

    def change_password(self, new_password):
        self.password = new_password

class AuthenticationManager:
    def __init__(self):
        self.accounts = {}

    def add_account(self, username, password):
        self.accounts[username] = UserAccount(username, password)

    def authenticate_user(self, username, password):
        if username in self.accounts:
            return self.accounts[username].authenticate(password)
        else:
            return False

auth_manager = AuthenticationManager()
auth_manager.add_account('user1', 'password123')
print(auth_manager.authenticate_user('user1', 'password123'))  # Should print: True
print(auth_manager.authenticate_user('user1', 'wrong_password'))  # Should print: False
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves a page of users. pageIndex is zero‑based.
    async getUsersPage(pageIndex, pageSize) {
        const offset = pageIndex * pageSize;
        // BUG: off‑by‑one – should be LIMIT pageSize OFFSET offset
        const rows = await this.db.query(`SELECT * FROM users LIMIT ${offset}, ${pageSize}`);
        return rows;
    }
}

// Example usage
(async () => {
    const mockDb = {
        async query(sql) {
            // Simulate a simple in‑memory table of 10 users
            const users = Array.from({ length: 10 }, (_, i) => ({ id: i + 1, name: `User${i + 1}` }));
            const match = sql.match(/LIMIT (\d+), (\d+)/);
            if (match) {
                const start = parseInt(match[1], 10);
                const count = parseInt(match[2], 10);
                return users.slice(start, start + count);
            }
            return [];
        }
    };
    const service = new UserService(mockDb);
    const page = await service.getUsersPage(1, 3); // Expect users 4‑6, gets users 2‑4 instead
    console.log(page);
})();",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        String customerEmail = order.getCustomerEmail();
        String paymentStatus = order.getPaymentStatus();

        if (paymentStatus.equals(""PAID"")) {
            sendConfirmationEmail(customerEmail);
            markOrderAsProcessed(order);
        } else if (paymentStatus.equals(""PENDING"")) {
            sendReminderEmail(customerEmail);
        } else {
            // Unknown payment status
        }
    }

    private void sendConfirmationEmail(String email) {
        // Code to send email
    }

    private void sendReminderEmail(String email) {
        // Code to send email
    }

    private void markOrderAsProcessed(Order order) {
        order.setStatus(""PROCESSED"");
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUsers() { let users = await this.userDao.getAllUsers(); users.forEach(user => { if (user.role === 'admin') { user.role = 'superuser'; } }); return users; } } class UserDao { async getAllUsers() { return await global.db.query('SELECT * FROM users'); } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserManager {
    constructor() {
        this.users = [];
        this.loadUsers();
    }

    // Loads all users from a JSON file synchronously (blocking I/O)
    loadUsers() {
        const data = fs.readFileSync('users.json', 'utf8');
        this.users = JSON.parse(data);
    }

    // Returns a user by ID, but iterates the whole array each time
    getUserById(id) {
        for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].id === id) {
                return this.users[i];
            }
        }
        return null;
    }

    // Updates a user's email without validation and writes the entire file each call
    updateUserEmail(id, newEmail) {
        const user = this.getUserById(id);
        if (user) {
            user.email = newEmail;
            // Overwrites the whole file even for a single change
            fs.writeFileSync('users.json', JSON.stringify(this.users, null, 2));
        }
    }

    // Bulk operation that re-reads the file before each update (inefficient)
    bulkUpdateEmails(updates) {
        updates.forEach(update => {
            this.loadUsers(); // unnecessary reload
            this.updateUserEmail(update.id, update.email);
        });
    }
}

module.exports = new UserManager();",code_smell,god_class_and_inefficient_io,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input) {
    std::vector<int> results;
    for (int i = 0; i < input.size(); ++i) {
        if (input[i] >= '0' && input[i] <= '9') {
            results.push_back(input[i] - '0');
        }
    }

    for (int i = 0; i < results.size(); ++i) {
        std::cout << ""Digit found: "" << results[i] << std::endl;
    }
}

int main() {
    std::string input;
    std::cout << ""Enter a string with digits: "" << std::endl;
    std::cin >> input;

    processUserInput(input);

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_schema()

    def _ensure_schema(self):
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> int:
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        conn.commit()
        user_id = cur.lastrowid
        conn.close()
        return user_id

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cur.fetchall()
        conn.close()
        # Off-by-one bug: returns one extra record when page is 1
        if page == 1:
            rows = rows[:page_size - 1]
        return [{'id': r[0], 'username': r[1], 'email': r[2]} for r in rows]

# Example usage
repo = UserRepository('example.db')
repo.add_user('alice', 'alice@example.com')
repo.add_user('bob', 'bob@example.com')
print(repo.get_users_page(1))",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    public void processUser(String userId, String name, String email, String phone, String address, String city, String state, String country) {
        User user = new User();
        user.setId(userId);
        user.setName(name);
        user.setEmail(email);
        user.setPhone(phone);
        user.setAddress(address);
        user.setCity(city);
        user.setState(state);
        user.setCountry(country);

        if (validateUser(user)) {
            saveUser(user);
        } else {
            System.out.println(""Invalid user data"");
        }
    }

    private boolean validateUser(User user) {
        return user.getId() != null && !user.getId().isEmpty() &&
               user.getName() != null && !user.getName().isEmpty() &&
               user.getEmail() != null && !user.getEmail().isEmpty();
    }

    private void saveUser(User user) {
        // Simulated save to database
        System.out.println(""User saved: "" + user.getName());
    }

    public static class User {
        private String id;
        private String name;
        private String email;
        private String phone;
        private String address;
        private String city;
        private String state;
        private String country;

        // Getters and Setters
        public String getId() { return id; }
        public void setId(String id) { this.id = id; }
        public String getName() { return name; }
        public void setName(String name) { this.name = name; }
        public String getEmail() { return email; }
        public void setEmail(String email) { this.email = email; }
        public String getPhone() { return phone; }
        public void setPhone(String phone) { this.phone = phone; }
        public String getAddress() { return address; }
        public void setAddress(String address) { this.address = address; }
        public String getCity() { return city; }
        public void setCity(String city) { this.city = city; }
        public String getState() { return state; }
        public void setState(String state) { this.state = state; }
        public String getCountry() { return country; }
        public void setCountry(String country) { this.country = country; }
    }
}",code_smell,long_parameter_list,,qwen/qwen3-32b
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // SQL injection vulnerability: directly concatenating limit
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}",code_defect,sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    void process(const std::vector<int>& input) {
        if (input.empty()) return;

        for (size_t i = 0; i < input.size(); ++i) {
            if (input[i] % 2 == 0) {
                std::cout << ""Even number found: "" << input[i] << std::endl;
            } else {
                std::cout << ""Odd number found: "" << input[i] << std::endl;
            }
        }

        // Legacy code commented out for debugging
        // processLegacy(input);
    }

private:
    void processLegacy(const std::vector<int>& input) {
        for (size_t i = 0; i < input.size(); ++i) {
            if (input[i] % 2 == 0) {
                std::cout << ""Legacy even number: "" << input[i] << std::endl;
            }
        }
    }
};

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    DataProcessor dp;
    dp.process(data);
    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  removeUser(username) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        this.users.splice(i, 1);
        break;
      }
    }
  }

  getUser(username) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        return this.users[i];
      }
    }
    return null;
  }
}

const userManager = new UserManager();
const user1 = { username: 'john', password: '123' };
const user2 = { username: 'jane', password: '456' };

userManager.addUser(user1);
userManager.addUser(user2);

console.log(userManager.getUser('john'));",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    // Returns the user at the given index, but uses 1-based indexing mistakenly
    std::string getUser(int index) const {
        if (index <= 0 || index > static_cast<int>(users.size())) {
            throw std::out_of_range(""Invalid user index"");
        }
        // Off-by-one: should be index-1
        return users[index];
    }

    // Finds a user by name and returns its position (1-based)
    int findUser(const std::string& name) const {
        auto it = std::find(users.begin(), users.end(), name);
        if (it == users.end()) return -1;
        return static_cast<int>(std::distance(users.begin(), it)) + 1;
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""Alice"");
    um.addUser(""Bob"");
    um.addUser(""Charlie"");

    try {
        std::cout << ""Second user: "" << um.getUser(2) << std::endl; // crashes due to off-by-one
    } catch (const std::exception& e) {
        std::cerr << ""Error: "" << e.what() << std::endl;
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import time

class DataProcessor:
    def __init__(self, data_path):
        self.data_path = data_path
        self.data_cache = []

    def load_data(self):
        with open(self.data_path, 'r') as f:
            for line in f:
                self.data_cache.append(line.strip())

    def process_data(self):
        results = []
        for data in self.data_cache:
            result = self._process_single_data(data)
            results.append(result)
        return results

    def _process_single_data(self, data):
        processed = data
        if data.startswith('A'):
            processed = data[1:].upper()
        elif data.startswith('B'):
            processed = data[1:].lower()
        elif data.startswith('C'):
            processed = data[::-1]
        return processed

    def run(self):
        self.load_data()
        results = self.process_data()
        return results

if __name__ == '__main__':
    processor = DataProcessor('input.txt')
    output = processor.run()
    for item in output:
        print(item)",code_smell,large_class,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>

   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}

       std::string getName() { return name; }
       int getAge() { return age; }

   private:
       std::string name;
       int age;
   };

   std::vector<User> filterUsersByAge(const std::vector<User>& users, int minAge) {
       std::vector<User> result;
       for (const auto& user : users) {
           if (user.getAge() >= minAge) {
               result.push_back(user);
           }
       }
       return result;
   }

   int main() {
       std::vector<User> users = {User(""John"", 25), User(""Alice"", 30), User(""Bob"", 20)};
       std::vector<User> filteredUsers = filterUsersByAge(users, 25);

       for (const auto& user : filteredUsers) {
           std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
       }

       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : logFile(file) {}
    void process() {
        std::lock_guard<std::mutex> lock(mtx);
        // Read the entire file into memory (potential OOM)
        std::vector<std::string> lines = readAllLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // OFF-BY-ONE BUG
            if (lines[i].find(""ERROR"") != std::string::npos) {
                errorCount++;
            }
        }
    }
    int getErrorCount() const { return errorCount; }
private:
    std::vector<std::string> readAllLines() {
        // Placeholder: pretend we read lines
        return {""INFO start"", ""ERROR failed"", ""INFO end""};
    }
    std::string logFile;
    int errorCount = 0;
    std::mutex mtx;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    std::thread t1([&lp](){ lp.process(); });
    std::thread t2([&lp](){ lp.process(); });
    t1.join();
    t2.join();
    std::cout << ""Total errors: "" << lp.getErrorCount() << std::endl;
    return 0;
}",code_defect,off_by_one_error_and_data_race,,openai/gpt-oss-120b
Java,"public class ReportProcessor {
    public void processReport(String reportType, int reportId, boolean includeDetails, String userId) {
        if (reportType == null || reportId <= 0 || userId == null) {
            return;
        }

        if (reportType.equals(""sales"")) {
            generateSalesReport(reportId, includeDetails);
        } else if (reportType.equals(""inventory"")) {
            generateInventoryReport(reportId);
        } else if (reportType.equals(""user_activity"")) {
            generateUserActivityReport(reportId, userId);
        } else {
            // This should never happen
            System.out.println(""Unknown report type: "" + reportType);
        }

        logReportProcessed(reportId);
    }

    private void generateSalesReport(int reportId, boolean includeDetails) {
        // Simulate processing
    }

    private void generateInventoryReport(int reportId) {
        // Simulate processing
    }

    private void generateUserActivityReport(int reportId, String userId) {
        // Simulate processing
    }

    private void logReportProcessed(int reportId) {
        // Log report processing
    }
}",code_smell,"Large function, poor scalability, and primitive obsession",,qwen/qwen3-32b
JavaScript,"class PaymentProcessor { constructor(paymentGateway) { this.paymentGateway = paymentGateway; } processPayment(amount, currency) { if (amount > 0) { this.paymentGateway.chargeCard(amount, currency); } } } class PaymentGateway { chargeCard(amount, currency) { setTimeout(() => { console.log(`Charged $${amount} ${currency}`); }, 1000); } } const paymentGateway = new PaymentGateway(); const paymentProcessor = new PaymentProcessor(paymentGateway); paymentProcessor.processPayment(100, 'USD');",code_smell,Tight Coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    UserManager() {
        // Load users from a mock database
        users_ = {""alice"", ""bob"", ""carol""};
    }

    // Returns true if the user exists
    bool hasUser(const std::string& username) const {
        return std::find(users_.begin(), users_.end(), username) != users_.end();
    }

    // Removes a user by name; returns false if not found
    bool removeUser(const std::string& username) {
        for (size_t i = 0; i <= users_.size(); ++i) { // BUG: off‑by‑one, may access out of bounds
            if (users_[i] == username) {
                users_.erase(users_.begin() + i);
                return true;
            }
        }
        return false;
    }

    void printAll() const {
        for (const auto& u : users_) {
            std::cout << u << std::endl;
        }
    }

private:
    std::vector<std::string> users_;
};

int main() {
    UserManager um;
    um.printAll();
    std::cout << ""Removing bob..."" << std::endl;
    um.removeUser(""bob"");
    um.printAll();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json

def process_data(data):
    results = []
    for item in data:
        if 'id' in item and 'value' in item:
            cleaned_value = item['value'].strip() if item['value'] else ''
            results.append({
                'identifier': item['id'],
                'processed_value': cleaned_value.upper()
            })
        else:
            print('Skipping invalid item')
    return results

if __name__ == '__main__':
    file_path = 'data.json'
    with open(file_path, 'r') as f:
        data = json.load(f)
    output = process_data(data)
    with open('output.json', 'w') as f:
        json.dump(output, f)
    print('Processing complete.')",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
        self.is_active = True

    def deactivate_account(self):
        self.is_active = False

    def change_password(self, new_password):
        self.password = new_password

    def send_email(self, message):
        # Simulate sending an email
        print(f'Sending email to {self.email}: {message}')

    def display_info(self):
        print(f'Username: {self.username}')
        print(f'Email: {self.email}')
        print(f'Active: {self.is_active}')

# Usage example
user = UserAccount('john_doe', 'password123', 'johndoe@example.com')
user.display_info()
user.deactivate_account()
user.change_password('new_password123')
user.send_email('Your account has been deactivated.')",code_smell,God class,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<Payment> getPendingPayments() throws SQLException {
        List<Payment> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id, amount, user_id FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Payment p = new Payment();
            p.setId(rs.getInt(""id""));
            p.setAmount(rs.getDouble(""amount""));
            p.setUserId(rs.getInt(""user_id""));
            payments.add(p);
        }
        // Missing close of ResultSet, Statement, and Connection
        return payments;
    }

    public void processPayments() {
        try {
            List<Payment> pending = getPendingPayments();
            for (Payment p : pending) {
                // Simulate processing
                if (p.getAmount() < 0) {
                    // Incorrect logic: should reject negative amounts, but proceeds
                    updatePaymentStatus(p.getId(), ""COMPLETED"");
                } else {
                    updatePaymentStatus(p.getId(), ""COMPLETED"");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Swallowing exception, no proper handling
        }
    }

    private void updatePaymentStatus(int paymentId, String status) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""UPDATE payments SET status='"" + status + ""' WHERE id="" + paymentId; // SQL injection risk
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.executeUpdate();
            // Resources not closed
        } catch (SQLException e) {
            // Ignored silently
        }
    }
}

class Payment {
    private int id;
    private double amount;
    private int userId;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
}",code_defect,SQL injection and resource leak,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private final List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                processOrder(order);
            }
        }
    }

    private void processOrder(Order order) {
        if (order.getItems().isEmpty()) {
            return;
        }

        double total = 0.0;
        for (OrderItem item : order.getItems()) {
            total += item.getPrice() * item.getQuantity();
        }

        if (total > 0) {
            System.out.println(""Processing order "" + order.getId() + "" with total: $"" + total);
            notifyCustomer(order);
        }
    }

    private void notifyCustomer(Order order) {
        // Simulated notification logic
        System.out.println(""Notified customer for order "" + order.getId());
    }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class DataProcessor {
public:
   void processData(const std::vector<int>& data) {
      std::vector<int> sortedData = data;
      std::sort(sortedData.begin(), sortedData.end());
      for (int i = 0; i < sortedData.size(); ++i) {
         std::cout << sortedData[i] << std::endl;
      }
   }
};

int main() {
   DataProcessor processor;
   std::vector<int> data = {5, 2, 8, 1, 9};
   processor.processData(data);
   return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public String getUserEmail(int userId) {
        String email = null;
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if userId were derived from untrusted input
            String sql = ""SELECT email FROM users WHERE id = "" + userId;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                email = rs.getString(""email"");
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return email;
    }
}
",code_defect,sql_injection_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processUserInput(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 0) {
            std::cout << data[i] << "" is even\n"";
        } else {
            std::cout << data[i] << "" is odd\n"";
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5, 6};
    processUserInput(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class OrderProcessor:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def process_order(self, order_id):
        query = ""SELECT * FROM orders WHERE id = "" + str(order_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        order_data = cursor.fetchone()
        if order_data:
            # process the order
            print(""Order processed successfully"")
        else:
            print(""Order not found"")
   ",code_defect,insecure_SQL_query,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a log file synchronously
    getUserProfile(userId) {
        const query = `SELECT * FROM users WHERE id = ${userId}`; // SQL injection risk
        const result = this.db.execute(query);
        if (!result || result.length === 0) {
            throw new Error('User not found');
        }
        const profile = result[0];
        // Synchronous file write blocks event loop
        fs.writeFileSync('/var/log/user_access.log', `User ${userId} accessed at ${new Date().toISOString()}\n`, { flag: 'a' });
        return profile;
    }
}

module.exports = UserService;",code_defect,sql_injection_and_blocking_io,,openai/gpt-oss-120b
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path

    def _get_connection(self):
        return sqlite3.connect(self.db_path)

    def get_users_page(self, page: int, page_size: int = 20):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page - 1) * page_size
        query = f""SELECT id, username, email FROM users LIMIT {page_size} OFFSET {offset}""
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute(query)
        rows = cursor.fetchall()
        conn.close()
        return [dict(id=row[0], username=row[1], email=row[2]) for row in rows]

    def delete_user(self, user_id: int):
        """"""Delete a user by ID without confirming existence.""""""
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute(f""DELETE FROM users WHERE id = {user_id}"")
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str, password: str):
        """"""Insert a new user; password stored in plaintext (security defect).""""""
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute(
            ""INSERT INTO users (username, email, password) VALUES (?, ?, ?)"",
            (username, email, password)
        )
        conn.commit()
        conn.close()

# Example usage (would be in a different module)
repo = UserRepository('/tmp/app.db')
# Off-by-one bug: requesting page 0 returns the first page instead of error
users = repo.get_users_page(0)
print(f""Fetched {len(users)} users"")",code_defect,off_by_one_error_and_plaintext_password,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private List<User> users;

    public UserProcessor(List<User> users) {
        this.users = users;
    }

    public void processUsers() {
        for (User user : users) {
            if (user != null && user.getEmail() != null) {
                String normalizedEmail = user.getEmail().toLowerCase();
                if (isValidEmail(normalizedEmail)) {
                    sendEmail(normalizedEmail);
                }
            }
        }
    }

    private boolean isValidEmail(String email) {
        return email != null && email.matches(""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$"");
    }

    private void sendEmail(String email) {
        // Simulated email sending logic
        System.out.println(""Sending email to: "" + email);
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            self.users[user_id] = user_data

    def get_user(self, user_id):
        return self.users.get(user_id)

    def remove_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id] = user_data
        else:
            raise Exception('User not found')

    def get_all_users(self):
        return list(self.users.values())

user_manager = UserManager()
user_manager.add_user('1', {'name': 'John Doe', 'email': 'johndoe@example.com'})
print(user_manager.get_user('1'))
user_manager.update_user('1', {'name': 'Jane Doe', 'email': 'janedoe@example.com'})
print(user_manager.get_all_users())
   ",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogManager {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        buffer_.push_back(msg);
        // Flush when buffer reaches 10 messages
        if (buffer_.size() >= 10) {
            flush();
        }
    }

private:
    void flush() {
        for (const auto& line : buffer_) {
            std::cout << line << std::endl;
        }
        buffer_.clear();
    }

    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

// Global logger instance (shared across threads)
LogManager g_logger;

void processData(int id) {
    for (int i = 0; i < 5; ++i) {
        g_logger.log(""Thread "" + std::to_string(id) + "" processing item "" + std::to_string(i));
        // Simulate work
        std::this_thread::sleep_for(std::chrono::milliseconds(10));
    }
    // Intentional bug: forgetting to flush remaining messages can cause loss of logs
}

int main() {
    std::vector<std::thread> workers;
    for (int i = 0; i < 3; ++i) {
        workers.emplace_back(processData, i);
    }
    for (auto& t : workers) {
        t.join();
    }
    // Missing final flush leads to missing logs if buffer not full
    return 0;
}
",code_defect,lost_logs_due_to_missing_flush,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.users = [];
  }

  registerUser(username, password, role = 'user', isVerified = false) {
    const user = {
      username,
      password,
      role,
      isVerified
    };
    this.users.push(user);
  }

  authenticateUser(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username && this.users[i].password === password) {
        return this.users[i];
      }
    }
    return null;
  }

  getAdminUsers() {
    const admins = [];
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].role === 'admin') {
        admins.push(this.users[i]);
      }
    }
    return admins;
  }

  deleteUser(username) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        this.users.splice(i, 1);
        return;
      }
    }
  }
}",code_smell,poor_naming_and_large_class,,qwen/qwen3-32b
JavaScript,"
      class ShoppingCart {
         constructor() {
            this.items = [];
         }

         addItem(item) {
            this.items.push(item);
         }

         removeItem(item) {
            const index = this.items.indexOf(item);
            if (index !== -1) {
               this.items.splice(index, 1);
            }
         }

         calculateTotal() {
            let total = 0;
            for (let i = 0; i < this.items.length; i++) {
               total += this.items[i].price;
            }
            return total;
         }

         applyDiscount(discountPercentage) {
            let total = this.calculateTotal();
            return total - (total * discountPercentage / 100);
         }
      }

      class Product {
         constructor(name, price) {
            this.name = name;
            this.price = price;
         }
      }

      const cart = new ShoppingCart();
      const product1 = new Product('Product 1', 100);
      const product2 = new Product('Product 2', 200);
      cart.addItem(product1);
      cart.addItem(product2);
      console.log(cart.applyDiscount(10));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path
        self._ensure_schema()

    def _ensure_schema(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def get_user_by_username(self, username):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        # Vulnerable to SQL injection
        query = f""SELECT id, username, email FROM users WHERE username = '{username}'""
        cursor.execute(query)
        row = cursor.fetchone()
        conn.close()
        if row:
            return {'id': row[0], 'username': row[1], 'email': row[2]}
        return None

    def add_user(self, username, email):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        conn.commit()
        conn.close()

# Example usage
repo = UserRepository('app.db')
repo.add_user('alice', 'alice@example.com')
# The following call can be exploited if username is crafted maliciously
user = repo.get_user_by_username(""alice' OR '1'='1"")
print(user)",code_defect,SQL_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }
        if (order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                continue;
            }
            if (item.getPrice() <= 0) {
                continue;
            }
            System.out.println(""Processing item: "" + item.getName());
            // Simulate processing
            deductInventory(item.getProductCode(), item.getQuantity());
            chargeCustomer(order.getCustomer(), item.getTotalPrice());
        }
    }

    private void deductInventory(String productCode, int quantity) {
        // Simulated inventory system
    }

    private void chargeCustomer(Customer customer, double amount) {
        // Simulated payment system
    }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string name, int age) : name(name), age(age) {}
};

class UserService {
private:
    std::vector<User> users;

public:
    void addUser(User user) {
        users.push_back(user);
    }

    std::vector<User> getAllUsers() {
        return users;
    }

    User getUserByName(std::string name) {
        for (User user : users) {
            if (user.name == name) {
                return user;
            }
        }
        // Return a default user if not found
        return User(""Unknown"", 0);
    }
};

int main() {
    UserService userService;
    userService.addUser(User(""John"", 30));
    userService.addUser(User(""Alice"", 25));

    std::vector<User> allUsers = userService.getAllUsers();
    for (User user : allUsers) {
        std::cout << user.name << "" is "" << user.age << "" years old"" << std::endl;
    }

    User user = userService.getUserByName(""John"");
    std::cout << user.name << "" is "" << user.age << "" years old"" << std::endl;

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Simulate processing
            std::cout << ""Processing "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 0; i < 5; ++i) {
        dp.addTask(i);
    }
    // Missing dp.stop(); leads to thread running after main exits
    return 0;
}
",code_defect,resource_leak_thread_not_joined,,openai/gpt-oss-120b
Java,"public class UserValidator {
    public boolean validateUser(User user) {
        if (user == null) {
            return false;
        }

        if (user.getEmail() == null || !user.getEmail().matches(""^[A-Za-z0-9+_.-]+@(.+)$"")) {
            return false;
        }

        if (user.getPassword() == null || user.getPassword().length() < 6) {
            return false;
        }

        if (user.getName() == null || user.getName().trim().isEmpty()) {
            return false;
        }

        if (user.getAge() < 18 || user.getAge() > 100) {
            return false;
        }

        return true;
    }

    public boolean validateEmail(String email) {
        return email != null && email.matches(""^[A-Za-z0-9+_.-]+@(.+)$""));
    }

    public boolean validatePassword(String password) {
        return password != null && password.length() >= 6;
    }

    public boolean validateName(String name) {
        return name != null && !name.trim().isEmpty();
    }

    public boolean validateAge(int age) {
        return age >= 18 && age <= 100;
    }
}",code_smell,duplicated_code,,qwen/qwen3-32b
Java,public class UserRepository { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUserByUsername(String username) { for (User user : users) { if (user.getUsername().equals(username)) { return user; } } return null; } public void removeUserByUsername(String username) { for (int i = 0; i < users.size(); i++) { if (users.get(i).getUsername().equals(username)) { users.remove(i); break; } } } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');
const path = require('path');

class ConfigLoader {
    constructor(configDir) {
        this.configDir = configDir;
        this.cache = {};
    }

    // Loads a JSON config file and caches it
    loadConfig(name) {
        const filePath = path.join(this.configDir, `${name}.json`);
        if (this.cache[name]) {
            return Promise.resolve(this.cache[name]);
        }
        // Asynchronously read file without proper error handling
        return new Promise((resolve, reject) => {
            fs.readFile(filePath, 'utf8', (err, data) => {
                if (err) {
                    // Swallow error, resolve with empty object
                    resolve({});
                    return;
                }
                try {
                    const parsed = JSON.parse(data);
                    this.cache[name] = parsed;
                    resolve(parsed);
                } catch (e) {
                    // Parsing error also swallowed
                    resolve({});
                }
            });
        });
    }
}

// Usage example that may lead to race condition
async function initializeApp() {
    const loader = new ConfigLoader('./config');
    const [dbConfig, apiConfig] = await Promise.all([
        loader.loadConfig('database'),
        loader.loadConfig('api')
    ]);
    // Assume dbConfig has required fields, but if file missing, we get empty object leading to runtime crash later
    const connectionString = `postgres://${dbConfig.user}:${dbConfig.password}@${dbConfig.host}:${dbConfig.port}/${dbConfig.name}`;
    console.log('Connecting to DB with', connectionString);
    // Further initialization...
}

initializeApp();",code_defect,unhandled_error_swallowing_leading_to_runtime_crash,,openai/gpt-oss-120b
Python,"import os
import subprocess

def run_external_command(command):
    try:
        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print('Command output:', result.stdout.decode())
    except subprocess.CalledProcessError as e:
        print('Error running command:', e.stderr.decode())
        raise


def process_user_input(user_input):
    if not user_input:
        return

    if not os.path.exists(user_input):
        print('File not found. Creating a new one.')
        with open(user_input, 'w') as f:
            f.write('')

    run_external_command(f'cat {user_input}')


def main():
    user_input = input('Enter file path to process: ')
    process_user_input(user_input)

if __name__ == '__main__':
    main()",code_defect,security_vulnerability,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    std::string name;
    int salary;
    Employee(std::string n, int s) : name(n), salary(s) {}
};

class Company {
public:
    std::vector<Employee> employees;
    void addEmployee(Employee e) { employees.push_back(e); }
    void sortEmployees() {
        std::sort(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) { return a.salary < b.salary; });
    }
    void printEmployees() {
        for (const auto& e : employees) {
            std::cout << e.name << "" - "" << e.salary << std::endl;
        }
    }
};

int main() {
    Company c;
    c.addEmployee(Employee(""John"", 50000));
    c.addEmployee(Employee(""Alice"", 60000));
    c.sortEmployees();
    c.printEmployees();
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>

class LogManager {
public:
    LogManager() {}
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        buffer_.push_back(msg);
        if (buffer_.size() > 10) {
            flush();
        }
    }
private:
    void flush() {
        for (const auto& line : buffer_) {
            std::cout << line << std::endl;
        }
        buffer_.clear();
    }
    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

int main() {
    LogManager logger;
    for (int i = 0; i <= 100; ++i) { // off‑by‑one: pushes 101 messages
        logger.log(""Event number "" + std::to_string(i));
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

class User {
public:
    User(std::string name, int id) : name(name), id(id) {}
    std::string getName() const { return name; }
    int getId() const { return id; }
private:
    std::string name;
    int id;
};

std::vector<User> loadUsers() {
    std::vector<User> users;
    users.push_back(User(""Alice"", 1));
    users.push_back(User(""Bob"", 2));
    users.push_back(User(""Charlie"", 3));
    return users;
}

void processUsers() {
    std::vector<User> users = loadUsers();
    for (const User& user : users) {
        std::cout << ""Processing user: "" << user.getName() << std::endl;
    }
}

int main() {
    processUsers();
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def get_all_users(self):
        query = ""SELECT * FROM users""
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        users_data = cursor.fetchall()
        return users_data

    def create_user(self, user_name, user_email):
        query = ""INSERT INTO users (name, email) VALUES ('"" + user_name + ""', '"" + user_email + ""')""
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()
        return True
",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and watches for changes.""""""
    def __init__(self, path: str):
        self.path = path
        self._config = {}
        self._lock = threading.Lock()
        self._load()
        self._watch_thread = threading.Thread(target=self._watch_file, daemon=True)
        self._watch_thread.start()

    def _load(self):
        with open(self.path, 'r') as f:
            data = json.load(f)
        with self._lock:
            self._config = data

    def _watch_file(self):
        last_mtime = os.path.getmtime(self.path)
        while True:
            try:
                cur_mtime = os.path.getmtime(self.path)
                if cur_mtime != last_mtime:
                    self._load()
                    last_mtime = cur_mtime
            except Exception:
                pass  # swallow all errors silently

    def get(self, key, default=None):
        with self._lock:
            return self._config.get(key, default)

# Global config instance (singleton pattern)
config = ConfigLoader('/etc/app/config.json')

def process_user_input(user_input: str):
    """"""Process a string of comma‑separated integers and return their sum.
    The function expects a safe integer list, but does not validate input.
    """"""
    # BUG: Using eval on untrusted input leads to code execution vulnerability
    numbers = eval(user_input)  # e.g., ""[1,2,3]"" or malicious payload
    total = 0
    for n in numbers:
        total += n
    return total

def main():
    # Example usage
    raw = ""[1, 2, 3]""
    print('Sum:', process_user_input(raw))

if __name__ == '__main__':
    main()",code_defect,unsafe_eval_execution,,openai/gpt-oss-120b
Python,"import os
import time

def process_files(directory):
    start_time = time.time()
    processed_count = 0
    
    for filename in os.listdir(directory):
        if filename.endswith('.txt'):
            file_path = os.path.join(directory, filename)
            
            with open(file_path, 'r') as file:
                content = file.read()
                
            processed_count += 1
            
            # Legacy code: was used for debugging
            # print(f'Processed {filename}')
            
    elapsed_time = time.time() - start_time
    print(f'Processed {processed_count} files in {elapsed_time:.2f} seconds.')

if __name__ == '__main__':
    process_files('/data')",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments""; private static final String DB_USER = ""payment_user""; private static final String DB_PASSWORD = ""password123""; public void processPayment(String paymentId) { try { Class.forName(""com.mysql.cj.jdbc.Driver""); Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD); Statement stmt = conn.createStatement(); ResultSet results = stmt.executeQuery(""SELECT * FROM payments WHERE id = '"" + paymentId + ""'""); if (results.next()) { System.out.println(""Payment found: "" + results.getString(1)); } else { System.out.println(""Payment not found""); } conn.close(); } catch (Exception e) { System.out.println(""Error processing payment: "" + e.getMessage()); } } }",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.configPath = configPath;
    this.cache = null;
  }

  // Loads configuration from file; caches result
  loadConfig() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.configPath, 'utf8');
    // BUG: JSON.parse may throw, but not caught, causing crash on malformed file
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

class UserService {
  constructor(db) {
    this.db = db;
    this.configLoader = new ConfigLoader('./config.json');
  }

  // Returns user profile with feature flags based on config
  async getUserProfile(userId) {
    const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
    const config = this.configLoader.loadConfig();
    // DEFECT: Using === on possibly undefined property leads to false negatives
    const enableBeta = config.features && config.features.enableBeta === true;
    if (enableBeta) {
      user.betaAccess = true;
    }
    return user;
  }
}

module.exports = { ConfigLoader, UserService };",code_defect,unhandled_json_parse_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    DataProcessor() {}

    std::string process(std::vector<int> input) {
        std::string result;
        for (int i = 0; i < input.size(); ++i) {
            result += std::to_string(input[i]) + "","";
        }
        result.pop_back();
        return result;
    }
};

int main() {
    DataProcessor dp;
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::string output = dp.process(data);
    std::cout << ""Processed data: "" << output << std::endl;
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor() {
         this.users = [];
      }

      async loadUsers() {
         const response = await fetch('https://api.example.com/users');
         const data = await response.json();
         this.users = data;
      }

      getUserById(id) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].id === id) {
               return this.users[i];
            }
         }
         return null;
      }
   }

   const userService = new UserService();
   userService.loadUsers();
   const user = userService.getUserById(1);
   console.log(user);
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Reads config file synchronously each time, ignoring cache
    const data = fs.readFileSync(this.path, 'utf8');
    try {
      this.cache = JSON.parse(data);
    } catch (e) {
      // Swallow parsing errors, return empty config
      this.cache = {};
    }
    return this.cache;
  }
}

function getDatabaseConnection() {
  const config = new ConfigLoader('./db_config.json').load();
  // Insecurely builds connection string with user-provided values
  const connStr = `postgres://${config.user}:${config.password}@${config.host}:${config.port}/${config.db}`;
  // Assume a global DB client that uses the connection string
  return require('pg').Client(connStr);
}

async function fetchUserData(userId) {
  const client = getDatabaseConnection();
  await client.connect();
  // SQL injection vulnerability: directly interpolates userId
  const res = await client.query(`SELECT * FROM users WHERE id = ${userId}`);
  await client.end();
  return res.rows[0];
}

module.exports = { fetchUserData };",code_defect,sql_injection_and_insecure_config_handling,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processItems(const std::vector<int>& items) {
    for (size_t i = 0; i < items.size(); ++i) {
        std::cout << ""Processing item "" << items[i] << std::endl;
        for (size_t j = 0; j < items.size(); ++j) {
            if (i != j) {
                std::cout << ""Comparing with "" << items[j] << std::endl;
            }
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    processItems(data);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public static void addUser(String id, User user) { users.put(id, user); } public static User getUser(String id) { return users.get(id); } public static void main(String[] args) { UserService.addUser(""1"", new User(""John"")); System.out.println(UserService.getUser(""1"")); } } class User { private String name; public User(String name) { this.name = name; } @Override public String toString() { return name; } }",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserCache {
  constructor(filePath) {
    this.filePath = filePath;
    this.cache = {};
    this._load();
  }

  _load() {
    // Synchronous file read without error handling – can crash the process if file is missing
    const data = fs.readFileSync(this.filePath, 'utf8');
    this.cache = JSON.parse(data);
  }

  getUser(id) {
    // Returns undefined if user not found – caller assumes object and may cause runtime error
    return this.cache[id];
  }

  addUser(user) {
    // No validation; directly mutates cache and writes back synchronously
    this.cache[user.id] = user;
    this._save();
  }

  _save() {
    // Overwrites file without locking – race condition if multiple instances run
    const data = JSON.stringify(this.cache, null, 2);
    fs.writeFileSync(this.filePath, data, 'utf8');
  }
}

// Usage example
const cache = new UserCache('./users.json');
cache.addUser({id: '123', name: 'Alice'});
const user = cache.getUser('123');
console.log('User loaded:', user.name.toUpperCase()); // May throw if user is undefined
",code_defect,unhandled_file_error_and_null_reference,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private List<String> userNames = new ArrayList<>();

    public void addUser(String name) {
        if (name != null && !name.trim().isEmpty()) {
            userNames.add(name);
        }
    }

    public String getAllUsersAsCommaSeparatedString() {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < userNames.size(); i++) {
            result.append(userNames.get(i));
            if (i != userNames.size() - 1) {
                result.append("", "");
            }
        }
        return result.toString();
    }

    public void processUsers() {
        for (String user : userNames) {
            if (user == null) continue;
            // Simulate processing
            System.out.println(""Processing: "" + user);
            // No error handling if processing fails
        }
    }
}",code_smell,long_method,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id in self.users:
            return False
        self.users[user_id] = user_data
        with open(self.db_file, 'a') as f:
            f.write(f'{user_id}:{user_data}\n')
        return True

    def get_user(self, user_id):
        if user_id in self.users:
            return self.users[user_id]
        with open(self.db_file, 'r') as f:
            for line in f.readlines():
                id, data = line.strip().split(':')
                if id == user_id:
                    return data
        return None",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, config_path):
        # Singleton pattern but flawed: ignores config_path after first creation
        if not cls._instance:
            with cls._lock:
                if not cls._instance:
                    cls._instance = super(ConfigLoader, cls).__new__(cls)
                    cls._instance._init(config_path)
        return cls._instance

    def _init(self, config_path):
        self.path = config_path
        self._load()

    def _load(self):
        with open(self.path, 'r') as f:
            # Unsafe: directly eval JSON content, potential code execution if file is tampered
            self.data = eval(f.read())

    def get(self, key, default=None):
        return self.data.get(key, default)

# Usage example (buggy): multiple threads may read stale config after a reload

def worker(id, config_path):
    cfg = ConfigLoader(config_path)
    print(f""Worker {id} sees mode: {cfg.get('mode')}"")

if __name__ == '__main__':
    config_file = os.getenv('APP_CONFIG', 'config.json')
    threads = []
    for i in range(5):
        t = threading.Thread(target=worker, args=(i, config_file))
        threads.append(t)
        t.start()
    for t in threads:
        t.join()",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    private static final int MAX_RETRIES = 3;

    public void processOrder(Order order) {
        int attempt = 0;
        boolean success = false;

        while (attempt < MAX_RETRIES) {
            try {
                validateOrder(order);
                if (order.isPriority()) {
                    applyPriorityDiscount(order);
                }
                chargeCustomer(order);
                sendConfirmation(order);
                success = true;
                break;
            } catch (PaymentException e) {
                log(""Payment failed, retrying..."");
                attempt++;
            } catch (Exception e) {
                log(""Order processing failed"");
                break;
            }
        }

        if (!success) {
            cancelOrder(order);
        }
    }

    private void validateOrder(Order order) {
        if (order.getItems().isEmpty()) {
            throw new IllegalArgumentException(""Order has no items"");
        }
        // More validation logic here
    }

    private void applyPriorityDiscount(Order order) {
        order.setTotal(order.getTotal() * 0.9);
    }

    private void chargeCustomer(Order order) {
        // Simulate payment processing
        if (Math.random() < 0.2) {
            throw new PaymentException(""Payment failed"");
        }
    }

    private void sendConfirmation(Order order) {
        // Send email or SMS
    }

    private void cancelOrder(Order order) {
        // Cancel order logic
    }

    private void log(String message) {
        // Logging logic
    }

    class PaymentException extends Exception {
        PaymentException(String message) {
            super(message);
        }
    }
}",code_smell,error_prone_exception_handling,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

    void setSalary(int newSalary) { salary = newSalary; }

private:
    std::string name;
    int salary;
};

class Company {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }

    int calculateTotalSalary() {
        int totalSalary = 0;
        for (const auto& employee : employees) {
            totalSalary += employee.getSalary();
        }
        return totalSalary;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));

    std::cout << ""Total salary: "" << company.calculateTotalSalary() << std::endl;

    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def add_user(self, username, email):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        conn.commit()
        conn.close()

    def get_users_page(self, page_number, page_size):
        """"""Return a list of users for the given page.
        Off‑by‑one error: uses page_number directly as offset.
        """"""
        offset = page_number * page_size  # Bug: should be (page_number - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cursor.fetchall()
        conn.close()
        return [{'id': r[0], 'username': r[1], 'email': r[2]} for r in rows]

# Example usage (would be in another module)
repo = UserRepository('app.db')
repo.add_user('alice', 'alice@example.com')
repo.add_user('bob', 'bob@example.com')
users_page = repo.get_users_page(1, 10)  # Expected first 10 users, but returns next 10 due to bug
print(users_page)",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json

def load_config():
    config_path = 'config.json'
    with open(config_path, 'r') as f:
        config = json.load(f)
    return config

class DataProcessor:
    def __init__(self, config):
        self.config = config
        self.data = []

    def process_data(self):
        raw_data = self._fetch_raw_data()
        for item in raw_data:
            processed = self._process_item(item)
            self.data.append(processed)

    def _fetch_raw_data(self):
        raw_path = self.config.get('raw_data_path')
        with open(raw_path, 'r') as f:
            raw_data = json.load(f)
        return raw_data

    def _process_item(self, item):
        processed = {
            'id': item['id'],
            'name': item['name'].strip().lower(),
            'value': item['value'] * 1.1
        }
        return processed

    def save_processed_data(self):
        output_path = self.config.get('output_path', 'output.json')
        with open(output_path, 'w') as f:
            json.dump(self.data, f, indent=2)

if __name__ == '__main__':
    config = load_config()
    processor = DataProcessor(config)
    processor.process_data()
    processor.save_processed_data()",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

    void setSalary(int newSalary) {
        salary = newSalary;
    }

private:
    std::string name;
    int salary;
};

class Company {
public:
    void addEmployee(Employee employee) {
        employees.push_back(employee);
    }

    int getTotalSalary() {
        int totalSalary = 0;
        for (Employee employee : employees) {
            totalSalary += employee.getSalary();
        }
        return totalSalary;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));

    std::cout << company.getTotalSalary() << std::endl;

    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute(f""INSERT INTO users (username, email) VALUES ('{username}', '{email}')"")
        conn.commit()
        conn.close()

    def get_user_by_username(self, username: str):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        # Vulnerable to SQL injection
        cursor.execute(f""SELECT id, username, email FROM users WHERE username = '{username}'"")
        result = cursor.fetchone()
        conn.close()
        return result

# Example usage
repo = UserRepository('app.db')
repo.add_user('alice', 'alice@example.com')
print(repo.get_user_by_username('alice'))",code_defect,SQL_injection,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUsers(String[][] userArray) {
        for (int i = 0; i < userArray.length; i++) {
            String[] user = userArray[i];
            if (user.length >= 3) {
                String name = user[0];
                String email = user[1];
                String role = user[2];

                if (role.equals(""admin"")) {
                    sendAdminEmail(email, name);
                } else if (role.equals(""user"")) {
                    sendUserEmail(email, name);
                } else {
                    sendDefaultEmail(email, name);
                }
            }
        }
    }

    private void sendAdminEmail(String email, String name) {
        // Simulated email sending logic
        System.out.println(""Sent admin email to "" + name + "" at "" + email);
    }

    private void sendUserEmail(String email, String name) {
        // Simulated email sending logic
        System.out.println(""Sent user email to "" + name + "" at "" + email);
    }

    private void sendDefaultEmail(String email, String name) {
        // Simulated email sending logic
        System.out.println(""Sent default email to "" + name + "" at "" + email);
    }
}",code_smell,type_switching,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
     constructor(userDatabase) {
       this.userDatabase = userDatabase;
     }

     async getUser(id) {
       try {
         const user = await this.userDatabase.getUser(id);
         if (!user) {
           throw new Error('User not found');
         }
         return user;
       } catch (error) {
         console.error(error);
       }
     }

     async getUsers() {
       try {
         const users = await this.userDatabase.getUsers();
         return users;
       } catch (error) {
         console.error(error);
       }
     }
   }

   class UserDatabase {
     async getUser(id) {
       // simulate a database query
       return new Promise((resolve) => {
         setTimeout(() => {
           resolve({ id: id, name: 'John Doe' });
         }, 100);
       });
     }

     async getUsers() {
       // simulate a database query
       return new Promise((resolve) => {
         setTimeout(() => {
           resolve([{ id: 1, name: 'John Doe' }, { id: 2, name: 'Jane Doe' }]);
         }, 100);
       });
     }
   }

   const userDatabase = new UserDatabase();
   const userManager = new UserManager(userDatabase);

   async function main() {
     const user = await userManager.getUser(1);
     console.log(user);

     const users = await userManager.getUsers();
     console.log(users);
   }

   main();
 ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.*;import java.util.*;public class UserService{private Connection getConnection(){try{return DriverManager.getConnection(""jdbc:mysql://localhost:3306/app"",""admin"",""password123"");}catch(SQLException e){throw new RuntimeException(e);} }public List<String> getUserRoles(String username){String query=""SELECT role FROM user_roles WHERE username='""+username+""'"";try(Statement stmt=getConnection().createStatement();ResultSet rs=stmt.executeQuery(query)){List<String> roles=new ArrayList<>();while(rs.next()){roles.add(rs.getString(""role""));}return roles;}catch(SQLException e){e.printStackTrace();return Collections.emptyList();}}}",code_defect,SQL_Injection,,openai/gpt-oss-120b
Python,"import os
import json

class ConfigManager:
    def __init__(self):
        self.config_file = 'app_config.json'
        self.cache = None

    def get_config(self):
        if os.path.exists(self.config_file):
            with open(self.config_file, 'r') as f:
                self.cache = json.load(f)
        return self.cache

    def update_config(self, key, value):
        if self.cache is None:
            self.cache = {}
        self.cache[key] = value
        with open(self.config_file, 'w') as f:
            json.dump(self.cache, f)

    def clear_cache(self):
        self.cache = None

    def get_database_url(self):
        return self.cache.get('database_url', 'sqlite:///default.db')

    def get_logging_level(self):
        return self.cache.get('logging_level', 'INFO')

    def get_max_connections(self):
        return self.cache.get('max_connections', 10)

    def get_cache_expiration(self):
        return self.cache.get('cache_expiration', 3600)",code_smell,feature envy,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userRepository) {
         this.userRepository = userRepository;
      }

      async getAllUsers() {
         return this.userRepository.findAll();
      }

      async getUserById(id) {
         return this.userRepository.findById(id);
      }

      async createUser(user) {
         if (!user || !user.username || !user.password) {
            throw new Error('Invalid user data');
         }
         const existingUser = await this.userRepository.findByUsername(user.username);
         if (existingUser) {
            throw new Error('Username already exists');
         }
         return this.userRepository.create(user);
      }
   }

   class UserRepository {
      async findAll() {
         // simulate a database query
         return [
            { id: 1, username: 'john', password: 'password123' },
            { id: 2, username: 'jane', password: 'password123' }
         ];
      }

      async findById(id) {
         const users = await this.findAll();
         return users.find(user => user.id === id);
      }

      async findByUsername(username) {
         const users = await this.findAll();
         return users.find(user => user.username === username);
      }

      async create(user) {
         // simulate a database insert
         return { id: 3, username: user.username, password: user.password };
      }
   }

   const userRepository = new UserRepository();
   const userService = new UserService(userRepository);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Fetch user by ID and write profile to a file
  async exportUserProfile(userId, outputPath) {
    const user = await this.db.getUser(userId);
    if (!user) {
      throw new Error('User not found');
    }
    const profile = {
      id: user.id,
      name: user.name,
      email: user.email,
      // Sensitive token should not be exported, but it is included by mistake
      apiToken: user.apiToken,
    };
    // Asynchronously write file but do not await, causing potential race condition
    fs.writeFile(outputPath, JSON.stringify(profile), (err) => {
      if (err) {
        console.error('Failed to write profile:', err);
      }
    });
    // Returns before file is actually written
    return { success: true, path: outputPath };
  }
}

module.exports = UserService;",code_defect,asynchronous race condition and leakage of sensitive data,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    if (data[i].type === 'A') {
      result.push({
        key: data[i].id,
        value: data[i].value * 2
      });
    } else if (data[i].type === 'B') {
      result.push({
        key: data[i].id,
        value: data[i].value + 10
      });
    } else if (data[i].type === 'C') {
      result.push({
        key: data[i].id,
        value: data[i].value / 3
      });
    }
  }
  return result;
}

function main() {
  const input = [
    { id: 1, type: 'A', value: 5 },
    { id: 2, type: 'B', value: 10 },
    { id: 3, type: 'C', value: 15 },
    { id: 4, type: 'D', value: 20 }
  ];
  const output = processData(input);
  console.log(output);
}

main();",code_smell,long_function,,qwen/qwen3-32b
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""P@ssw0rd""; // hardcoded secret

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        try {
            conn = getConnection();
            if (!hasSufficientBalance(conn, userId, amount)) {
                return false;
            }
            deductBalance(conn, userId, amount);
            logTransaction(conn, userId, amount);
            return true;
        } catch (SQLException e) {
            // Swallow exception, lose stack trace
            return false;
        } finally {
            // Missing close of connection leads to resource leak
        }
    }

    private Connection getConnection() throws SQLException {
        Properties props = new Properties();
        props.setProperty(""user"", DB_USER);
        props.setProperty(""password"", DB_PASS);
        return DriverManager.getConnection(DB_URL, props);
    }

    private boolean hasSufficientBalance(Connection conn, String userId, double amount) throws SQLException {
        String sql = ""SELECT balance FROM accounts WHERE user_id = '"" + userId + ""'""; // SQL injection risk
        try (PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                return balance >= amount;
            }
        }
        return false;
    }

    private void deductBalance(Connection conn, String userId, double amount) throws SQLException {
        String sql = ""UPDATE accounts SET balance = balance - ? WHERE user_id = ?"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setDouble(1, amount);
            stmt.setString(2, userId);
            stmt.executeUpdate();
        }
    }

    private void logTransaction(Connection conn, String userId, double amount) throws SQLException {
        String sql = ""INSERT INTO transactions (user_id, amount, timestamp) VALUES (?, ?, NOW())"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, userId);
            stmt.setDouble(2, amount);
            stmt.executeUpdate();
        }
    }
}
",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order != null && !order.getItems().isEmpty()) {
                double total = 0;
                for (OrderItem item : order.getItems()) {
                    total += item.getPrice() * item.getQuantity();
                }
                order.setTotal(total);
                order.setStatus(""Processed"");
                System.out.println(""Order ID "" + order.getId() + "" processed with total: "" + total);
            }
        }
    }

    public static void main(String[] args) {
        List<Order> orders = new ArrayList<>();
        orders.add(new Order(1, List.of(new OrderItem(1, 10, 5), new OrderItem(2, 15, 2))));
        orders.add(new Order(2, List.of(new OrderItem(3, 5, 0))));

        OrderProcessor processor = new OrderProcessor(orders);
        processor.processOrders();
    }
}

class Order {
    private int id;
    private List<OrderItem> items;
    private String status;
    private double total;

    public Order(int id, List<OrderItem> items) {
        this.id = id;
        this.items = items;
    }

    public int getId() { return id; }
    public List<OrderItem> getItems() { return items; }
    public void setTotal(double total) { this.total = total; }
    public void setStatus(String status) { this.status = status; }
}

class OrderItem {
    private int id;
    private double price;
    private int quantity;

    public OrderItem(int id, double price, int quantity) {
        this.id = id;
        this.price = price;
        this.quantity = quantity;
    }

    public double getPrice() { return price; }
    public int getQuantity() { return quantity; }
}",code_defect,incorrect_conditional_logic,,qwen/qwen3-32b
Java,"public class UserManager { private static final String DB_URL = ""jdbc:mysql://localhost:3306/userdb""; private static final String DB_USER = ""root""; private static final String DB_PASSWORD = ""password123""; public void updateUser(int userId, String newName) { try (java.sql.Connection conn = java.sql.DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) { java.sql.PreparedStatement stmt = conn.prepareStatement(""UPDATE users SET name = ? WHERE id = ?""); stmt.setString(1, newName); stmt.setInt(2, userId); stmt.executeUpdate(); } catch (java.sql.SQLException e) { System.out.println(""Error updating user: "" + e.getMessage()); } } }",code_smell,hardcoded_secrets,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // BUG: If no task was available, task remains 0 and is processed incorrectly
            std::cout << ""Processing: "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 1; i <= 5; ++i) dp.addTask(i);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}",code_defect,logic_error_unchecked_empty_queue,,openai/gpt-oss-120b
Python,"import os
import json

def load_config(path='config.json'):
    with open(path, 'r') as f:
        config = json.load(f)
    return config

def setup_database(config):
    db_user = config.get('db_user')
    db_pass = config.get('db_pass')
    db_host = config.get('db_host', 'localhost')
    db_port = config.get('db_port', 5432)

    connection_string = f'postgresql://{db_user}:{db_pass}@{db_host}:{db_port}'

    # Legacy connection logic commented out
    # if os.getenv('LEGACY_DB'):
    #     connection_string = os.getenv('LEGACY_DB')

    return connection_string

config = load_config()
db_conn = setup_database(config)
print(f'Connecting to database at {db_conn}')",code_smell,commented_out_code,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };
   class UserService {
   public:
       std::vector<User> users;
       void addUser(User user) { users.push_back(user); }
       User* getUserByName(std::string name) {
           for (auto& user : users) {
               if (user.getName() == name) {
                   return &user;
               }
           }
           return nullptr;
       }
   };
   int main() {
       UserService service;
       service.addUser(User(""John"", 30));
       User* user = service.getUserByName(""John"");
       if (user != nullptr) {
           std::cout << user->getName() << std::endl;
       }
       return 0;
   }
   ",code_defect,dangling_pointer,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String role) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users WHERE role = '"" + role + ""'""; // SQL injection risk
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
JavaScript,"class UserService {
  constructor(users) {
    this.users = users;
  }

  findUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  findUserByUsername(username) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        return this.users[i];
      }
    }
    return null;
  }

  findUserById(id) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        return this.users[i];
      }
    }
    return null;
  }
}

// Usage
const users = [
  { id: 1, username: 'alice', email: 'alice@example.com' },
  { id: 2, username: 'bob', email: 'bob@example.com' }
];

const userService = new UserService(users);
console.log(userService.findUserByEmail('alice@example.com'));",code_smell,duplicate_code,,qwen/qwen3-32b
JavaScript,"
   class ShoppingCart {
      constructor() {
         this.items = [];
      }

      addItem(item) {
         this.items.push(item);
      }

      removeItem(item) {
         let index = this.items.indexOf(item);
         if (index !== -1) {
            this.items.splice(index, 1);
         }
      }

      calculateTotal() {
         let total = 0;
         for (let item of this.items) {
            total += item.price;
         }
         return total;
      }
   }

   class Product {
      constructor(name, price) {
         this.name = name;
         this.price = price;
      }
   }

   let cart = new ShoppingCart();
   let product1 = new Product('Product 1', 10.99);
   let product2 = new Product('Product 2', 9.99);
   cart.addItem(product1);
   cart.addItem(product2);
   console.log(cart.calculateTotal());
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addEntry(const std::string& entry) {
        std::lock_guard<std::mutex> lock(mtx);
        buffer.push_back(entry);
    }
private:
    void process() {
        while (!stopFlag) {
            std::vector<std::string> localCopy;
            {
                std::lock_guard<std::mutex> lock(mtx);
                localCopy.swap(buffer);
            }
            for (const auto& line : localCopy) {
                // Simulate processing delay
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                std::cout << ""Processed: "" << line << std::endl;
            }
        }
    }
    std::vector<std::string> buffer;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.addEntry(""log"" + std::to_string(i));
    }
    // Missing lp.stop(); leads to program hanging on exit
    return 0;
}
",code_defect,resource_leak_hang,,openai/gpt-oss-120b
Python,"import os
import requests

def fetch_data_from_api(url, headers=None, params=None):
    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f'Error fetching data: {e}')
        return None

def process_and_save_data(data, output_file):
    with open(output_file, 'w') as f:
        for item in data:
            f.write(f""{item['id']},{item['name']}\n"")

    print(f'Data saved to {output_file}')

if __name__ == '__main__':
    api_url = 'https://api.example.com/data'
    headers = {'Authorization': 'Bearer YOUR_TOKEN_HERE'}

    data = fetch_data_from_api(api_url, headers=headers)

    if data:
        process_and_save_data(data, 'output.csv')",code_defect,hardcoded_secret,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void setName(std::string newName) { name = newName; }
    void setAge(int newAge) { age = newAge; }

private:
    std::string name;
    int age;
};

class UserService {
public:
    void saveUser(User user) {
        users.push_back(user);
    }

    User getUser(int index) {
        if (index < users.size()) {
            return users[index];
        } else {
            // Return the last user if index is out of bounds
            return users[users.size() - 1];
        }
    }

private:
    std::vector<User> users;
};

int main() {
    UserService userService;
    User user(""John Doe"", 30);
    userService.saveUser(user);
    User retrievedUser = userService.getUser(0);
    std::cout << ""Name: "" << retrievedUser.getName() << std::endl;
    std::cout << ""Age: "" << retrievedUser.getAge() << std::endl;
    return 0;
}
",code_smell,magic_number,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigManager:
    """"""Loads configuration from a JSON file and watches for changes.""""""
    def __init__(self, path: str):
        self.path = path
        self._config = {}
        self._lock = threading.Lock()
        self._load()
        self._watch_thread = threading.Thread(target=self._watch_file, daemon=True)
        self._watch_thread.start()

    def _load(self):
        with open(self.path, 'r') as f:
            data = json.load(f)
        with self._lock:
            self._config = data

    def _watch_file(self):
        last_mtime = os.path.getmtime(self.path)
        while True:
            try:
                cur_mtime = os.path.getmtime(self.path)
                if cur_mtime != last_mtime:
                    self._load()
                    last_mtime = cur_mtime
            except Exception:
                pass
            # BUG: missing sleep leads to busy-wait CPU spike

    def get(self, key, default=None):
        with self._lock:
            return self._config.get(key, default)

# Usage example (in production code this would be imported elsewhere)
config = ConfigManager('/etc/app/config.json')
value = config.get('feature_enabled', False)
print('Feature enabled:', value)",code_defect,busy_wait_cpu_spike,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getPrice() > 0 && item.getQuantity() > 0) {
                double total = item.getPrice() * item.getQuantity();
                System.out.println(""Processing item: "" + item.getName() + "" Total: "" + total);
                // Simulate processing logic
                // TODO: integrate with payment system
            }
        }
    }

    // Legacy code, might not be used anymore
    @SuppressWarnings(""unused"")
    private void calculateTax(double amount) {
        System.out.println(""Tax calculated: "" + (amount * 0.1));
    }
}",code_smell,dead_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

    void setSalary(int newSalary) { salary = newSalary; }

private:
    std::string name;
    int salary;
};

class EmployeeDatabase {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }

    Employee getEmployeeWithHighestSalary() {
        if (employees.empty()) {
            // Assume a default employee
            return Employee(""Default"", 0);
        }

        Employee highestPaid = employees[0];
        for (int i = 1; i < employees.size(); ++i) {
            if (employees[i].getSalary() > highestPaid.getSalary()) {
                highestPaid = employees[i];
            }
        }
        return highestPaid;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeDatabase db;
    db.addEmployee(Employee(""John"", 50000));
    db.addEmployee(Employee(""Alice"", 60000));
    Employee highestPaid = db.getEmployeeWithHighestSalary();
    std::cout << ""Highest paid employee: "" << highestPaid.getName() << std::endl;
    return 0;
}
",code_smell,inefficient_algorithm,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and watches for changes.""""""
    def __init__(self, path: str):
        self.path = path
        self._config = {}
        self._lock = threading.Lock()
        self._load()
        self._watch_thread = threading.Thread(target=self._watch_file, daemon=True)
        self._watch_thread.start()

    def _load(self):
        with open(self.path, 'r') as f:
            data = json.load(f)
        with self._lock:
            self._config.update(data)

    def _watch_file(self):
        last_mtime = os.path.getmtime(self.path)
        while True:
            try:
                cur_mtime = os.path.getmtime(self.path)
                if cur_mtime != last_mtime:
                    self._load()
                    last_mtime = cur_mtime
            except Exception:
                pass
            # BUG: No sleep, causing busy-wait and high CPU usage

    def get(self, key, default=None):
        with self._lock:
            return self._config.get(key, default)

# Usage example
config = ConfigLoader('config.json')
print(config.get('api_key'))",code_defect,resource_leak_busy_wait,,openai/gpt-oss-120b
Python,"import random

def generate_random_list(length):
    random_list = []
    for i in range(length):
        random_list.append(random.randint(1, 100))
    return random_list


def find_even_numbers(numbers):
    even_numbers = []
    for num in numbers:
        if num % 2 == 0:
            even_numbers.append(num)
    return even_numbers


def main():
    list_length = 20
    numbers = generate_random_list(list_length)
    even_numbers = find_even_numbers(numbers)
    print(f'Generated list: {numbers}')
    print(f'Even numbers: {even_numbers}')

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async getUser(id) {
            const user = await this.userDao.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return user;
         }

         async getUsers() {
            const users = await this.userDao.findAll();
            return users.map(user => ({ id: user.id, name: user.name }));
         }
      }

      class UserDao {
         async findById(id) {
            // simulate database query
            return new Promise(resolve => {
               setTimeout(() => {
                  resolve({ id: 1, name: 'John Doe' });
               }, 100);
            });
         }

         async findAll() {
            // simulate database query
            return new Promise(resolve => {
               setTimeout(() => {
                  resolve([
                     { id: 1, name: 'John Doe' },
                     { id: 2, name: 'Jane Doe' }
                  ]);
               }, 100);
            });
         }
      }

      const userDao = new UserDao();
      const userService = new UserService(userDao);
      userService.getUsers().then(users => console.log(users));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogManager {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        buffer_.push_back(msg);
    }

    void flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        for (const auto& line : buffer_) {
            std::cout << line << std::endl;
        }
        // Intentional bug: buffer not cleared, causing repeated output on next flush
    }

private:
    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

void worker(LogManager& logger, int id) {
    for (int i = 0; i < 5; ++i) {
        logger.log(""Thread "" + std::to_string(id) + "" iteration "" + std::to_string(i));
    }
}

int main() {
    LogManager logger;
    std::thread t1(worker, std::ref(logger), 1);
    std::thread t2(worker, std::ref(logger), 2);
    t1.join();
    t2.join();
    logger.flush();
    logger.flush(); // second flush prints duplicate logs
    return 0;
}",code_defect,state_not_reset,,openai/gpt-oss-120b
Python,"import random

def process_data(data):
    results = []
    for item in data:
        processed = []
        for i in range(3):
            val = random.randint(1, 10)
            processed.append(val)
        results.append((item, processed))
    return results

if __name__ == ""__main__"":
    input_data = [1, 2, 3, 4, 5]
    output = process_data(input_data)
    print(output)",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self.conn.row_factory = sqlite3.Row
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, email: str) -> int:
        cur = self.conn.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()
        return cur.lastrowid

    def get_users_page(self, page: int, page_size: int = 10):
        offset = page * page_size  # Off‑by‑one error: first page should be offset 0 when page=1
        cur = self.conn.execute('SELECT * FROM users ORDER BY id LIMIT ? OFFSET ?', (page_size, offset))
        return [dict(row) for row in cur.fetchall()]

# Example usage
if __name__ == '__main__':
    repo = UserRepository('example.db')
    for i in range(1, 31):
        repo.add_user(f'user{i}', f'user{i}@example.com')
    # Expect first page to contain users 1‑10, but will actually return users 11‑20
    first_page = repo.get_users_page(1)
    print('First page users:', first_page)
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

void processUserInput(const vector<string>& inputs, int threshold) {
    vector<string> filtered;

    for (const auto& input : inputs) {
        if (input.length() > threshold) {
            filtered.push_back(input);
        }
    }

    if (filtered.empty()) {
        return;
    }

    for (const auto& entry : filtered) {
        cout << ""Processing: "" << entry << endl;
    }

    // Legacy code for backward compatibility
    // if (oldSystemAvailable) {
    //     syncWithLegacy(filtered);
    // }
}

int main() {
    vector<string> data = {""alpha"", ""beta"", ""gamma"", ""delta""};
    processUserInput(data, 5);
    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void printInfo() {
        std::cout << ""Name: "" << name << "", Age: "" << age << std::endl;
    }

private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) {
        users.push_back(user);
    }

    void printAllUsers() {
        for (int i = 0; i < users.size(); i++) {
            users[i].printInfo();
        }
    }

private:
    std::vector<User> users;
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    service.addUser(User(""Alice"", 25));
    service.printAllUsers();
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        email TEXT NOT NULL)''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> None:
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        conn.commit()
        conn.close()

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cur.fetchall()
        conn.close()
        # BUG: Off-by-one error – should return empty list when page is 0, but returns first page
        return [dict(id=row[0], username=row[1], email=row[2]) for row in rows]

# Example usage (would be in another module)
repo = UserRepository('app.db')
repo.add_user('alice', 'alice@example.com')
repo.add_user('bob', 'bob@example.com')
# Requesting page 0 incorrectly returns the first page due to off-by-one bug
users = repo.get_users_page(0)
print(users)",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  process(order) {
    if (order.status === 'pending') {
      this.validateOrder(order);
      this.chargeCustomer(order);
      this.updateInventory(order);
      this.markOrderAsProcessed(order);
    }
  }

  validateOrder(order) {
    // Validates order data
    if (!order.customer || !order.items || order.total <= 0) {
      throw new Error('Invalid order data');
    }
  }

  chargeCustomer(order) {
    // Simulates a payment charge
    if (order.customer.creditCardNumber && order.total > 0) {
      console.log(`Charging $${order.total} to ${order.customer.name}`);
    }
  }

  updateInventory(order) {
    // Updates inventory for each item
    order.items.forEach(item => {
      if (item.stock >= item.quantity) {
        item.stock -= item.quantity;
      } else {
        throw new Error('Insufficient stock for item: ' + item.id);
      }
    });
  }

  markOrderAsProcessed(order) {
    order.status = 'processed';
    console.log(`Order ${order.id} marked as processed`);
  }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string n, int a) : name(n), age(a) {}

    bool operator<(const User& other) const {
        return age < other.age;
    }
};

void sortUsers(std::vector<User>& users) {
    std::sort(users.begin(), users.end());
}

int main() {
    std::vector<User> users = {User(""John"", 30), User(""Alice"", 25), User(""Bob"", 40)};
    sortUsers(users);
    for (const auto& user : users) {
        std::cout << user.name << "" is "" << user.age << "" years old"" << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""appuser"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public String getUserEmail(int userId) {
        String email = null;
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // vulnerable to SQL injection if userId were derived from user input elsewhere
            String sql = ""SELECT email FROM users WHERE id = "" + userId;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                email = rs.getString(""email"");
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return email;
    }
}
",code_defect,hardcoded_credentials_and_sql_injection_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    void process(const std::vector<int>& input, std::vector<int>& output) {
        for (int i = 0; i < input.size(); ++i) {
            if (i % 2 == 0) {
                output.push_back(input[i] * 2);
            } else {
                output.push_back(input[i] * 3);
            }
        }
    }
};

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> result;

    DataProcessor processor;
    processor.process(data, result);

    for (int val : result) {
        std::cout << val << "" "";
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
       constructor() {
           this.processedPayments = {};
       }

       processPayment(paymentId, amount) {
           if (this.processedPayments[paymentId]) {
               return true;
           }

           const paymentGateway = new PaymentGateway();
           paymentGateway.chargeCard(amount);

           this.processedPayments[paymentId] = true;
           return true;
       }
   }

   class PaymentGateway {
       chargeCard(amount) {
           // Simulating a payment processing delay
           const delay = Math.random() * 1000;
           setTimeout(() => {
               console.log(`Payment of $${amount} processed`);
           }, delay);
       }
   }

   const paymentProcessor = new PaymentProcessor();
   paymentProcessor.processPayment('payment-1', 100);
   paymentProcessor.processPayment('payment-2', 200);
   ",code_defect,race_condition,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public User getUserByUsername(String username) {
        User user = null;
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             Statement stmt = conn.createStatement()) {
            String query = ""SELECT id, username, email FROM users WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return user;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    public void processUser(User user) {
        if (user == null) {
            return;
        }

        String role = user.getRole();
        String name = user.getName();

        if (role != null && role.equals(""admin"")) {
            System.out.println(""Admin user: "" + name);
            grantAccess();
        } else {
            System.out.println(""Non-admin user: "" + name);
        }

        // Legacy code - might be removed in the future
        // logUser(user);

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            // Ignored for simplicity
        }
    }

    private void grantAccess() {
        System.out.println(""Access granted."");
    }

    // Unused method
    private void logUser(User user) {
        System.out.println(""Logging user: "" + user.getName());
    }
}",code_smell,,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
        self.is_active = True
    def deactivate_account(self):
        self.is_active = False
    def change_password(self, new_password):
        self.password = new_password
    def __str__(self):
        return f'User {self.username} - Active: {self.is_active}'

class UserManager:
    def __init__(self):
        self.users = {}
    def add_user(self, user):
        self.users[user.username] = user
    def get_user(self, username):
        return self.users.get(username)
    def update_user(self, username, new_password):
        user = self.get_user(username)
        if user:
            user.change_password(new_password)
            return True
        return False

# Usage example
user_manager = UserManager()
user = UserAccount('john_doe', 'mysecretpassword', 'john@example.com')
user_manager.add_user(user)
print(user)
user_manager.update_user('john_doe', 'newpassword123')
print(user)",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : logFile(file) {}
    void process() {
        std::vector<std::string> lines = readLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off‑by‑one error
            std::string entry = parseLine(lines[i]);
            if (entry.empty()) continue;
            std::lock_guard<std::mutex> lock(mtx);
            aggregated += entry + ""\n"";
        }
    }
    void dump() const {
        std::cout << aggregated;
    }
private:
    std::vector<std::string> readLines() {
        // Mocked read; in real code this would read from logFile
        return {""INFO start"", ""WARN low memory"", ""ERROR failure""};
    }
    std::string parseLine(const std::string& line) {
        // Simple split on first space
        size_t pos = line.find(' ');
        if (pos == std::string::npos) return """";
        return line.substr(pos + 1);
    }
    std::string logFile;
    std::string aggregated;
    std::mutex mtx;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    std::thread t1([&lp](){ lp.process(); });
    std::thread t2([&lp](){ lp.process(); }); // concurrent processing without proper partitioning
    t1.join();
    t2.join();
    lp.dump();
    return 0;
}",code_defect,off_by_one_and_race_condition,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders = new ArrayList<>();

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                System.out.println(""Processing order: "" + order.getId());
                if (order.getCustomer() != null && order.getItems() != null) {
                    for (Item item : order.getItems()) {
                        if (item.getPrice() > 0) {
                            System.out.println(""Item: "" + item.getName() + "", Price: "" + item.getPrice());
                        }
                    }
                }
            } else {
                System.out.println(""Skipping invalid order: "" + order.getId());
            }
        }
    }

    public void addOrder(Order order) {
        orders.add(order);
    }
}",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
   class UserService {
       constructor(userRepository) {
           this.userRepository = userRepository;
       }

       async getUsers() {
           try {
               const users = await this.userRepository.findAll();
               return users.map(user => ({ id: user.id, name: user.name }));
           } catch (error) {
               console.error(error);
               return [];
           }
       }

       async getUserById(id) {
           try {
               const user = await this.userRepository.findById(id);
               if (!user) {
                   throw new Error('User not found');
               }
               return { id: user.id, name: user.name };
           } catch (error) {
               console.error(error);
               throw error;
           }
       }
   }

   class UserRepository {
       async findAll() {
           // simulate a database query
           return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' },
           ];
       }

       async findById(id) {
           // simulate a database query
           const users = await this.findAll();
           return users.find(user => user.id === id);
       }
   }

   const userRepository = new UserRepository();
   const userService = new UserService(userRepository);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i] * 2; // may read out of bounds
            results_.push_back(value);
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& results() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(input); });
    t.join();
    for (int v : processor.results()) {
        std::cout << v << "" "";
    }
    std::cout << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input, std::vector<std::string>& outputList) {
    if (input.empty()) {
        return;
    }

    for (char c : input) {
        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
            std::string temp = ""Vowel: "";
            temp += c;
            outputList.push_back(temp);
        } else {
            std::string temp = ""Character: "";
            temp += c;
            outputList.push_back(temp);
        }
    }
}

int main() {
    std::string input;
    std::cout << ""Enter a string: "";
    std::getline(std::cin, input);

    std::vector<std::string> result;
    processUserInput(input, result);

    for (const auto& str : result) {
        std::cout << str << std::endl;
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
       constructor(username, password) {
           this.username = username;
           this.password = password;
       }

       authenticate(username, password) {
           if (username === this.username) {
               return true;
           }
           return false;
       }
   }

   let account = new UserAccount('admin', 'password123');
   console.log(account.authenticate('admin', 'wrongpassword'));",code_defect,incorrect_conditional_logic,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Synchronously read config file each time; caches result but never updates cache
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    // If cache is null, load config; otherwise return stale cached value
    if (!this.cache) {
      this.load();
    }
    return this.cache[key];
  }
}

// Usage example
const config = new ConfigLoader('./config.json');
function initialize() {
  const dbHost = config.get('dbHost');
  const dbPort = config.get('dbPort');
  // Missing error handling if config file is malformed
  connectToDatabase(`http://${dbHost}:${dbPort}`);
}

function connectToDatabase(url) {
  // Simulate async connection without proper promise handling
  setTimeout(() => {
    console.log('Connected to', url);
  }, 1000);
}

initialize();",code_defect,unhandled JSON parse error leading to crash,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input, std::vector<int>& results) {
    for (char c : input) {
        if (c >= '0' && c <= '9') {
            results.push_back(c - '0');
        }
    }
}

int main() {
    std::string user_input = ""a1b2c3d4e5"";
    std::vector<int> parsed_numbers;

    processUserInput(user_input, parsed_numbers);

    std::cout << ""Parsed digits from input: "";
    for (int num : parsed_numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};
class UserService {
public:
    UserService() {}
    void saveUser(User user) {
        users.push_back(user);
    }
    User getUserByName(std::string name) {
        for (User user : users) {
            if (user.getName() == name) {
                return user;
            }
        }
        return User("""", 0);
    }
private:
    std::vector<User> users;
};
int main() {
    UserService userService;
    User user(""John"", 30);
    userService.saveUser(user);
    User retrievedUser = userService.getUserByName(""John"");
    std::cout << retrievedUser.getName() << std::endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        if (this.cache) return this.cache;
        const data = fs.readFileSync(this.path, 'utf8');
        // NOTE: No try/catch, will crash if file missing
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function processUserInput(input) {
    // Vulnerable to prototype pollution
    const config = new ConfigLoader('./config.json').load();
    const merged = Object.assign({}, config.defaults, input);
    if (merged.enableFeature) {
        // Simulate async operation but forget to await
        setTimeout(() => {
            console.log('Feature enabled for', merged.userId);
        }, 0);
    }
    return merged;
}

module.exports = { ConfigLoader, processUserInput };",code_defect,prototype_pollution_and_missing_error_handling,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class User {
private:
    string username;
    string password;
    int role;

public:
    User(const string& un, const string& pwd, int r) {
        username = un;
        password = pwd;
        role = r;
    }

    string getUsername() const {
        return username;
    }

    string getPassword() const {
        return password;
    }

    int getRole() const {
        return role;
    }
};

void authenticateUser(const vector<User>& users, const string& username, const string& password) {
    for (const auto& user : users) {
        if (user.getUsername() == username && user.getPassword() == password) {
            cout << ""Authentication successful. Role: "" << user.getRole() << endl;
            return;
        }
    }
    cout << ""Authentication failed."" << endl;
}

int main() {
    vector<User> users = {
        User(""admin"", ""admin123"", 1),
        User(""user"", ""password"", 2),
        User(""guest"", ""guest"", 3)
    };

    string username, password;
    cout << ""Enter username: "";
    cin >> username;
    cout << ""Enter password: "";
    cin >> password;

    authenticateUser(users, username, password);

    return 0;
}",code_defect,security_issue,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    Student(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class StudentDatabase {
public:
    void addStudent(Student student) { students.push_back(student); }
    Student getOldestStudent() {
        if (students.empty()) {
            return Student(""Unknown"", 0);
        }
        return *std::max_element(students.begin(), students.end(), [](const Student& a, const Student& b) {
            return a.getAge() < b.getAge();
        });
    }

private:
    std::vector<Student> students;
};

int main() {
    StudentDatabase db;
    db.addStudent(Student(""John"", 20));
    db.addStudent(Student(""Alice"", 25));
    std::cout << db.getOldestStudent().getName() << std::endl;
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self._config = {}
        self.load()

    def load(self):
        # Loads configuration from a JSON file without any validation
        with open(self.path, 'r') as f:
            self._config = json.load(f)

    def get(self, key, default=None):
        return self._config.get(key, default)

class DataProcessor:
    def __init__(self, config_path):
        self.config = ConfigLoader(config_path)
        self.db_path = self.config.get('db_path')
        self.conn = None

    def connect(self):
        # Directly uses the path from config, may be insecure
        self.conn = open(self.db_path, 'a+')

    def process(self, data):
        # Assumes data is a dict with 'id' and 'value'
        if 'id' not in data or 'value' not in data:
            raise ValueError('Invalid data')
        # Writes data without proper escaping, leading to potential injection
        self.conn.write(f""INSERT INTO table (id, value) VALUES ({data['id']}, '{data['value']}');\n"")
        self.conn.flush()

    def close(self):
        if self.conn:
            self.conn.close()

def main():
    processor = DataProcessor('config.json')
    processor.connect()
    # Example data that could be crafted to break the file format
    processor.process({'id': 1, 'value': ""test'); DROP TABLE users; --""})
    processor.close()

if __name__ == '__main__':
    main()",code_defect,SQL_injection_via_file_write,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

def process_user_data(data):
    result = []
    for user in data:
        user['created_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        if 'metadata' in user:
            try:
                parsed_metadata = json.loads(user['metadata'])
                user['metadata'] = parsed_metadata
            except Exception:
                pass
        result.append(user)
    return result

def read_users_from_file(file_path):
    with open(file_path, 'r') as file:
        users = json.load(file)
    return users

def main():
    file_path = os.getenv('USER_DATA_FILE', 'users.json')
    users = read_users_from_file(file_path)
    processed_users = process_user_data(users)
    return processed_users

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final String DEFAULT_PASSWORD = ""password123""; public void createUser(String username) { User user = new User(username, DEFAULT_PASSWORD); // ... save user to database } }",code_defect,hardcoded_secrets,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation on limit
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception e) { /* ignored */ }
            try { if (conn != null) conn.close(); } catch (Exception e) { /* ignored */ }
        }
        return emails;
    }
}
",code_defect,SQL injection vulnerability due to concatenated limit parameter,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    DataProcessor(const std::string& config) {
        this->config = config;
        loadConfig();
    }

    void process(const std::vector<int>& input) {
        if (input.empty()) return;

        for (size_t i = 0; i < input.size(); ++i) {
            if (input[i] % 2 == 0) {
                evenValues.push_back(input[i]);
            } else {
                oddValues.push_back(input[i]);
            }
        }

        for (size_t i = 0; i < evenValues.size(); ++i) {
            evenValues[i] *= 2;
        }

        for (size_t i = 0; i < oddValues.size(); ++i) {
            oddValues[i] *= 3;
        }
    }

    void printResults() {
        std::cout << ""Even values: "";
        for (size_t i = 0; i < evenValues.size(); ++i) {
            std::cout << evenValues[i] << ' ';
        }
        std::cout << std::endl;

        std::cout << ""Odd values: "";
        for (size_t i = 0; i < oddValues.size(); ++i) {
            std::cout << oddValues[i] << ' ';
        }
        std::cout << std::endl;
    }

private:
    std::string config;
    std::vector<int> evenValues;
    std::vector<int> oddValues;

    void loadConfig() {
        // Placeholder for loading configuration
        if (config == ""debug"") {
            std::cout << ""Debug mode enabled"" << std::endl;
        }
    }
};

int main() {
    DataProcessor processor(""debug"");
    std::vector<int> data = {1, 2, 3, 4, 5, 6};
    processor.process(data);
    processor.printResults();
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   #include <algorithm>

   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}

       std::string getName() { return name; }
       int getAge() { return age; }

   private:
       std::string name;
       int age;
   };

   class UserService {
   public:
       void addUser(User user) { users.push_back(user); }
       std::vector<User> getAllUsers() { return users; }

   private:
       std::vector<User> users;
   };

   int main() {
       UserService service;
       service.addUser(User(""John"", 30));
       service.addUser(User(""Alice"", 25));

       std::vector<User> allUsers = service.getAllUsers();
       for (const auto& user : allUsers) {
           std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
       }

       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            username TEXT NOT NULL,
                            data TEXT)''')
        self.conn.commit()

    def load_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute(f""SELECT data FROM users WHERE username = '{username}'"")
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def save_user(self, username, data):
        cursor = self.conn.cursor()
        serialized = json.dumps(data)
        cursor.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{serialized}')"")
        self.conn.commit()

    def close(self):
        self.conn.close()

# Usage example (vulnerable to SQL injection)
if __name__ == '__main__':
    manager = UserManager('users.db')
    user_input = os.getenv('USER_INPUT')  # Assume this comes from an untrusted source
    manager.save_user(user_input, {'role': 'admin'})
    print(manager.load_user(user_input))
    manager.close()",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    public boolean authenticate(String username, String password, boolean rememberMe, boolean isGuest, String sessionToken) {
        if (username == null || password == null) {
            return false;
        }

        if (isGuest) {
            return true;
        }

        if (rememberMe) {
            // Simulate persistent login
            System.out.println(""Persistent session started."");
            if (sessionToken == null) {
                return false;
            }
        }

        // Dummy hardcoded users
        if (username.equals(""admin"") && password.equals(""admin123"")) {
            return true;
        } else if (username.equals(""user"") && password.equals(""user123"")) {
            return true;
        }

        return false;
    }
}",code_smell,hardcoded_data,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    std::string name;
    int age;

    User(std::string n, int a) {
        name = n;
        age = a;
    }

    void printInfo() {
        std::cout << ""Name: "" << name << std::endl;
        std::cout << ""Age: "" << age << std::endl;
    }
};

class UserService {
public:
    std::vector<User> users;

    void addUser(User u) {
        users.push_back(u);
    }

    void printAllUsers() {
        for (int i = 0; i <= users.size(); i++) {
            if (i < users.size()) {
                users[i].printInfo();
            }
        }
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    service.addUser(User(""Alice"", 25));
    service.printAllUsers();
    return 0;
}
",code_defect,off-by-one error,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> None:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        conn.commit()
        conn.close()

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cursor.fetchall()
        conn.close()
        # Off‑by‑one bug: returns one extra record when page is 1
        if page == 1:
            rows = rows[:-1]
        return [{'id': r[0], 'username': r[1], 'email': r[2]} for r in rows]

# Example usage (not part of production code)
repo = UserRepository('example.db')
for i in range(25):
    repo.add_user(f'user{i}', f'user{i}@example.com')
print(repo.get_users_page(1))
print(repo.get_users_page(2))",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserValidator {
  constructor() {
    this.allowedRoles = ['admin', 'editor', 'viewer'];
  }

  validateUser(user) {
    if (!user) {
      return 'Invalid user';
    }

    if (!user.name || !user.email) {
      return 'Missing name or email';
    }

    if (user.role && !this.allowedRoles.includes(user.role)) {
      return 'Invalid role';
    }

    if (!this.validateEmailFormat(user.email)) {
      return 'Invalid email format';
    }

    return 'User is valid';
  }

  validateEmailFormat(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  }
}

// Example usage:
const validator = new UserValidator();
const user = { name: 'Alice', email: 'alice@example.com', role: 'admin' };
console.log(validator.validateUser(user));",clean_code,well_structured,,qwen/qwen3-32b
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data):
        cursor = self.conn.cursor()
        # BUG: Directly embedding user-provided data into SQL leads to SQL injection
        query = f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')""
        cursor.execute(query)
        self.conn.commit()
        return cursor.lastrowid

    def get_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT username, data FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            username, data_json = row
            return {'id': user_id, 'username': username, 'data': json.loads(data_json)}
        return None

    def close(self):
        self.conn.close()

# Example usage (would be in production code)
if __name__ == ""__main__"":
    manager = UserManager(os.getenv('USER_DB', ':memory:'))
    user_id = manager.add_user(""alice"", {""role"": ""admin"", ""prefs"": {""theme"": ""dark""}})
    print(manager.get_user(user_id))
    manager.close()",code_defect,SQL_injection,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(usersDB) {
    this.usersDB = usersDB;
  }

  authenticate(username, password) {
    const user = this.usersDB.find(u => u.username === username);
    if (!user) {
      return false;
    }
    
    return user.password === password;
  }

  getUserRoles(username) {
    const user = this.usersDB.find(u => u.username === username);
    if (!user) {
      return [];
    }
    
    return user.roles || [];
  }

  resetPassword(username, newPassword) {
    const user = this.usersDB.find(u => u.username === username);
    if (user) {
      user.password = newPassword;
    }
  }
}

// Example usage:
const usersDB = [
  { username: 'admin', password: 'admin123', roles: ['admin'] },
  { username: 'user1', password: 'pass123', roles: ['user'] }
];

const auth = new UserAuth(usersDB);
console.log(auth.authenticate('admin', 'admin123')); // true",code_smell,insecure_authentication_practice,,qwen/qwen3-32b
Java,public class UserManager { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUser(String username) { for (User user : users) { if (user.getUsername().equals(username)) { return user; } } return null; } public void removeUser(String username) { for (int i = 0; i < users.size(); i++) { if (users.get(i).getUsername().equals(username)) { users.remove(i); break; } } } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if username contains malicious content
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (Exception ignored) {}
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,sql_injection,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    public void processUsers(String[] userInputs) {
        for (String input : userInputs) {
            String trimmed = input.trim();
            if (trimmed.length() > 0) {
                String[] parts = trimmed.split(""\\|"", -1);
                if (parts.length >= 3) {
                    String username = parts[0];
                    String email = parts[1];
                    String status = parts[2];

                    if (status.equals(""active"")) {
                        sendWelcomeEmail(email);
                        logUserActivity(username);
                    }
                }
            }
        }
    }

    private void sendWelcomeEmail(String email) {
        // Simulated email sending logic
        System.out.println(""Sending welcome email to "" + email);
    }

    private void logUserActivity(String username) {
        // Simulated logging logic
        System.out.println(""User "" + username + "" logged in."");
    }
}",code_smell,primitive_obsession,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    std::string name;
    int grade;

    Student(std::string name, int grade) : name(name), grade(grade) {}

    bool operator<(const Student& other) const {
        return grade < other.grade;
    }
};

void sortStudents(std::vector<Student>& students) {
    std::sort(students.begin(), students.end());
}

int main() {
    std::vector<Student> students = {Student(""John"", 85), Student(""Alice"", 90), Student(""Bob"", 78)};
    sortStudents(students);
    for (const auto& student : students) {
        std::cout << student.name << "" - "" << student.grade << std::endl;
    }
    return 0;
}
",code_smell,magic_number,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogProcessor {
public:
    LogProcessor() {}
    void addEntry(const std::string& entry) {
        std::lock_guard<std::mutex> lock(mutex_);
        buffer_.push_back(entry);
    }
    void flush() {
        // Write all buffered entries to stdout
        for (const auto& e : buffer_) {
            std::cout << e << std::endl;
        }
        // BUG: buffer not cleared, causing duplicate output on next flush
    }
private:
    std::vector<std::string> buffer_;
    std::mutex mutex_;
};

void worker(LogProcessor& lp, int id) {
    for (int i = 0; i < 5; ++i) {
        lp.addEntry(""Thread "" + std::to_string(id) + "" log "" + std::to_string(i));
    }
}

int main() {
    LogProcessor lp;
    std::thread t1(worker, std::ref(lp), 1);
    std::thread t2(worker, std::ref(lp), 2);
    t1.join();
    t2.join();
    lp.flush();
    lp.flush(); // second flush prints same entries again
    return 0;
}",code_defect,logic_error_duplicate_output,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user.status === 'active') {
        this.sendEmail(user.email, 'Welcome back!');
        this.logUserActivity(user.id);
      } else if (user.status === 'inactive') {
        this.sendEmail(user.email, 'We missed you!');
      }
    });
  }

  sendEmail(email, message) {
    // Simulated email sending logic
    console.log(`Email sent to ${email}: ${message}`);
  }

  logUserActivity(userId) {
    // Simulated logging
    console.log(`User ${userId} is active`);
  }
}

// Example usage
const users = [
  { id: 1, email: 'user1@example.com', status: 'active' },
  { id: 2, email: 'user2@example.com', status: 'inactive' }
];

const processor = new UserProcessor(users);
processor.processUsers();",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Person {
public:
    Person(std::string name, int age) : name(name), age(age) {}
    std::string name;
    int age;
};

class PersonDatabase {
public:
    void addPerson(Person person) {
        people.push_back(person);
    }

    Person getOldestPerson() {
        if (people.empty()) {
            return Person("""", 0);
        }
        return *std::max_element(people.begin(), people.end(), [](const Person& a, const Person& b) {
            return a.age < b.age;
        });
    }

private:
    std::vector<Person> people;
};

int main() {
    PersonDatabase db;
    db.addPerson(Person(""John"", 30));
    db.addPerson(Person(""Alice"", 25));
    Person oldest = db.getOldestPerson();
    std::cout << ""Oldest person: "" << oldest.name << std::endl;
    return 0;
}
",code_smell,magic_value,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""admin123""; // hardcoded credentials

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk if limit derived from user
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return payments;
    }

    public void processPayments() {
        try {
            List<String> pending = getPendingPayments(100);
            for (String paymentId : pending) {
                // Simulate processing
                Thread.sleep(50);
                // Update status without transaction handling
                updatePaymentStatus(paymentId, ""COMPLETED"");
            }
        } catch (Exception e) {
            // Swallow exception, no logging
        }
    }

    private void updatePaymentStatus(String paymentId, String status) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""UPDATE payments SET status = ? WHERE payment_id = ?"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, status);
        stmt.setString(2, paymentId);
        stmt.executeUpdate();
        // Missing stmt.close() and conn.close() leads to resource leak
    }
}
",code_defect,resource_leak_and_swallowed_exception,,openai/gpt-oss-120b
Python,"import requests
import json
import time

def fetch_and_save_data():
    url = 'https://api.example.com/data'
    headers = {'Authorization': 'Bearer 1234567890'}

    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        
        with open('data.json', 'w') as f:
            json.dump(data, f)
            print('Data saved successfully.')
            time.sleep(1)
    else:
        print('Failed to fetch data.')

    # Legacy code - do not use
    # old_data = requests.get('https://oldapi.example.com/data').json()
    # with open('old_data.json', 'w') as f:
    #     json.dump(old_data, f)

if __name__ == '__main__':
    fetch_and_save_data()",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor() {
         this.users = [];
      }

      async addUser(user) {
         try {
            const response = await fetch('https://example.com/validate-user', {
               method: 'POST',
               headers: {
                  'Content-Type': 'application/json'
               },
               body: JSON.stringify(user)
            });
            const isValid = await response.json();
            if (isValid) {
               this.users.push(user);
            }
         } catch (error) {
            console.error(error);
         }
      }

      getUserById(id) {
         return this.users.find(user => user.id === id);
      }
   }

   const userService = new UserService();
   userService.addUser({ id: 1, name: 'John Doe' });
   const user = userService.getUserById(1);
   console.log(user);
   ",code_defect,unhandled_async_operation,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    UserManager() {}
    void addUser(const std::string& username) {
        users.push_back(username);
    }
    // Returns the index of the user, or -1 if not found
    int findUser(const std::string& username) const {
        for (size_t i = 0; i <= users.size(); ++i) { // BUG: off-by-one, may access out of bounds
            if (users[i] == username) {
                return static_cast<int>(i);
            }
        }
        return -1;
    }
    void removeUser(const std::string& username) {
        int idx = findUser(username);
        if (idx != -1) {
            users.erase(users.begin() + idx);
        }
    }
    void printAll() const {
        for (const auto& u : users) {
            std::cout << u << std::endl;
        }
    }
private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.addUser(""carol"");
    um.removeUser(""bob"");
    um.printAll();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (data[i] == data[j]) {
                std::cout << ""Duplicate found at index "" << i << "" and "" << j << std::endl;
            }
        }
    }
}

int main() {
    std::vector<int> values = {1, 2, 3, 4, 2, 5, 6, 3};
    processData(values);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
JavaScript,"
   class UserService {
     constructor() {
       this.users = {};
     }

     async getUser(id) {
       if (this.users[id]) {
         return this.users[id];
       } else {
         const response = await fetch(`https://example.com/users/${id}`);
         const user = await response.json();
         this.users[id] = user;
         return user;
       }
     }

     async getUsers() {
       const response = await fetch('https://example.com/users');
       const users = await response.json();
       this.users = {};
       users.forEach((user) => {
         this.users[user.id] = user;
       });
       return users;
     }
   }

   const userService = new UserService();
   userService.getUsers().then((users) => console.log(users));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void process() {
        while (!stopFlag) {
            std::string msg;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    msg = queue.front();
                    queue.erase(queue.begin());
                }
            }
            // Simulate processing delay
            std::this_thread::sleep_for(std::chrono::milliseconds(10));
            if (!msg.empty()) {
                std::cout << ""Processed: "" << msg << std::endl;
            }
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(""Message "" + std::to_string(i));
    }
    // Missing lp.stop(); leads to thread running after main exits
    return 0;
}
",code_defect,resource_leak_thread_not_joined,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrder(order) {
    if (!order || !order.items || order.items.length === 0) {
      return null;
    }

    let total = 0;
    for (let i = 0; i < order.items.length; i++) {
      const item = order.items[i];
      if (item.price && item.quantity) {
        total += item.price * item.quantity;
      }
    }

    if (total <= 0) {
      return null;
    }

    const formattedOrder = {
      orderId: order.id || 'UNASSIGNED',
      customerName: order.customerName || 'Unknown',
      total: total.toFixed(2),
      items: order.items
    };

    // Logging order for debugging
    console.log('Processed Order:', formattedOrder);

    return formattedOrder;
  }
}

// Example usage:
const order = {
  id: '12345',
  customerName: 'John Doe',
  items: [
    { name: 'Item A', price: 10, quantity: 2 },
    { name: 'Item B', price: 5, quantity: 3 },
    { name: 'Item C' } // Missing price, should not contribute to total
  ]
};

const processor = new OrderProcessor();
const result = processor.processOrder(order);
console.log('Final Result:', result);",code_smell,poor_error_handling,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserService {
public:
    vector<User> users;
    void addUser(User user) {
        users.push_back(user);
    }
    User getUser(int index) {
        return users[index];
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    service.addUser(User(""Alice"", 25));
    cout << service.getUser(0).name << endl;
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and watches for changes.""""""
    def __init__(self, path: str):
        self.path = path
        self._config = {}
        self._lock = threading.Lock()
        self._load()
        self._start_watcher()

    def _load(self):
        with open(self.path, 'r') as f:
            data = json.load(f)
        # Directly assign without validation – potential defect if file is malformed
        self._config = data

    def _watcher(self):
        last_mtime = os.path.getmtime(self.path)
        while True:
            try:
                cur_mtime = os.path.getmtime(self.path)
                if cur_mtime != last_mtime:
                    with self._lock:
                        self._load()
                    last_mtime = cur_mtime
            except Exception:
                pass  # Swallow all errors silently
            # No sleep -> busy-wait, causing high CPU usage

    def _start_watcher(self):
        t = threading.Thread(target=self._watcher, daemon=True)
        t.start()

    def get(self, key: str, default=None):
        with self._lock:
            return self._config.get(key, default)

# Usage example (not part of library)
loader = ConfigLoader('config.json')
print(loader.get('api_key'))",code_defect,busy_wait_cpu_hog,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user.isActive) {
        this.sendEmail(user.email);
        this.logUser(user);
        this.updateDatabase(user);
      }
    });
  }

  sendEmail(email) {
    // Simulated email sending logic
    console.log(`Email sent to ${email}`);
  }

  logUser(user) {
    console.log(`User ${user.id} processed`);
  }

  updateDatabase(user) {
    // Simulated database update logic
    console.log(`Database updated for user ${user.id}`);
  }
}

// Example usage
const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com', isActive: true },
  { id: 2, name: 'Bob', email: 'bob@example.com', isActive: false },
  { id: 3, name: 'Charlie', email: 'charlie@example.com', isActive: true }
];

const processor = new UserProcessor(users);
processor.processUsers();",code_smell,large_class,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
        self.friends = []

    def add_friend(self, friend):
        self.friends.append(friend)

    def remove_friend(self, friend):
        if friend in self.friends:
            self.friends.remove(friend)

    def get_friends(self):
        return self.friends

    def update_password(self, new_password):
        self.password = new_password

    def update_email(self, new_email):
        self.email = new_email

class SocialNetwork:
    def __init__(self):
        self.users = {}

    def create_account(self, username, password, email):
        if username not in self.users:
            self.users[username] = UserAccount(username, password, email)
        else:
            print('Username already exists')

    def get_user(self, username):
        return self.users.get(username)
",code_smell,God class,,llama-3.3-70b-versatile
Java,"package com.example.account;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<User> getUsersByName(String nameFilter) {
        List<User> users = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT id, username, email FROM users WHERE username LIKE '%"" + nameFilter + ""%'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                users.add(user);
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        for (Item item : order.getItems()) {
            if (item != null && item.getPrice() > 0) {
                System.out.println(""Processing item: "" + item.getName());
                // TODO: Integrate with inventory system
                // TODO: Add payment processing
                // TODO: Validate order status
            }
        }

        System.out.println(""Order processed successfully"");
    }

    // Unused method, left for legacy reasons
    @Deprecated
    private void calculateDiscount(Order order) {
        // Intentionally left blank
    }
}",code_smell,dead_code,,qwen/qwen3-32b
Python,"class OrderProcessor:
    def __init__(self, orders):
        self.orders = orders
    
    def process_orders(self):
        total_cost = 0
        for order in self.orders:
            total_cost += order['price'] * order['quantity']
        return total_cost
    
    def get_orders_over(self, amount):
        return [order for order in self.orders if order['price'] * order['quantity'] > amount]

# Example usage
orders = [{'price': 10.99, 'quantity': 2}, {'price': 5.99, 'quantity': 3}, {'price': 7.99, 'quantity': 1}]
processor = OrderProcessor(orders)
print(processor.process_orders())
print(processor.get_orders_over(20))",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3
from datetime import datetime

class UserManager:
    def __init__(self, db_path='users.db'):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cur = self.conn.cursor()
        cur.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password):
        # NOTE: In real code we would hash the password properly
        cur = self.conn.cursor()
        cur.execute('INSERT INTO users (username, password_hash, created_at) VALUES (?, ?, ?)',
                    (username, password, datetime.utcnow().isoformat()))
        self.conn.commit()

    def get_user(self, username):
        cur = self.conn.cursor()
        cur.execute('SELECT * FROM users WHERE username = ?', (username,))
        return cur.fetchone()

    def authenticate(self, username, password):
        user = self.get_user(username)
        if user and user[2] == password:
            return True
        return False

    def export_user_data(self, export_path):
        cur = self.conn.cursor()
        cur.execute('SELECT username, created_at FROM users')
        users = cur.fetchall()
        # Vulnerable: directly writing user-provided path without validation
        with open(export_path, 'w') as f:
            json.dump([{'username': u[0], 'created_at': u[1]} for u in users], f)

# Usage example (would be in a different module)
if __name__ == '__main__':
    mgr = UserManager()
    mgr.add_user('alice', 'secret123')
    mgr.add_user('bob', 'password')
    print('Auth alice:', mgr.authenticate('alice', 'secret123'))
    # Potential defect: if export_path is a directory, open() will raise an exception and crash
    mgr.export_user_data('/tmp/user_export.json')
",code_defect,unhandled exception on invalid export path,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  findUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  addNewUser(newUser) {
    this.users.push(newUser);
  }

  updatePassword(email, newPassword) {
    const user = this.findUserByEmail(email);
    if (user) {
      user.password = newPassword;
    }
  }

  deleteUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        this.users.splice(i, 1);
        return;
      }
    }
  }
}

// Example usage:
const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com', password: 'pass123' },
  { id: 2, name: 'Bob', email: 'bob@example.com', password: 'securepass' }
];

const userManager = new UserManager(users);
userManager.addNewUser({ id: 3, name: 'Charlie', email: 'charlie@example.com', password: '123456' });
userManager.updatePassword('bob@example.com', 'newsecurepass');
userManager.deleteUserByEmail('alice@example.com');",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class PaymentProcessor:
    def __init__(self, payment_gateway):
        self.payment_gateway = payment_gateway

    def process_payment(self, amount, customer_id):
        if amount < 0:
            return False
        try:
            self.payment_gateway.charge_card(amount, customer_id)
            return True
        except Exception as e:
            print(f'Error processing payment: {e}')
            return False

    def refund_payment(self, amount, customer_id):
        try:
            self.payment_gateway.refund_card(amount, customer_id)
            return True
        except Exception as e:
            print(f'Error refunding payment: {e}')
            return False

class PaymentGateway:
    def charge_card(self, amount, customer_id):
        # simulate a successful charge
        print(f'Charged ${amount} to customer {customer_id}')

    def refund_card(self, amount, customer_id):
        # simulate a successful refund
        print(f'Refunded ${amount} to customer {customer_id}')

payment_gateway = PaymentGateway()
payment_processor = PaymentProcessor(payment_gateway)
payment_processor.process_payment(100, 'customer1')
payment_processor.refund_payment(50, 'customer1')
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password""; // hardcoded secret

    public List<Double> getUserPayments(int userId) throws SQLException {
        List<Double> amounts = new ArrayList<>();
        String query = ""SELECT amount FROM transactions WHERE user_id = "" + userId; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                amounts.add(rs.getDouble(""amount""));
            }
        }
        return amounts;
    }

    public double calculateTotal(List<Double> payments) {
        double total = 0.0;
        for (int i = 0; i <= payments.size(); i++) { // off-by-one error
            total += payments.get(i);
        }
        return total;
    }
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor() {
    this.orderQueue = [];
    this.statusMap = {
      '1': 'Processing',
      '2': 'Shipped',
      '3': 'Delivered'
    };
  }

  processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      this.orderQueue.push(order);
    }

    for (let i = 0; i < this.orderQueue.length; i++) {
      const order = this.orderQueue[i];
      this.processOrder(order);
    }
  }

  processOrder(order) {
    const status = this.statusMap[order.statusId];

    if (status === 'Processing') {
      console.log(`Order ${order.id} is being processed`);
    } else if (status === 'Shipped') {
      console.log(`Order ${order.id} has been shipped`);
    } else if (status === 'Delivered') {
      console.log(`Order ${order.id} has been delivered`);
    }

    // TODO: Add email notifications later
    // sendEmail(order.userEmail, `Your order ${order.id} is ${status}`);
  }

  getTotalOrders() {
    return this.orderQueue.length;
  }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class UserService {
public:
    void saveUser(User user) {
        users.push_back(user);
    }

    User getUserByName(std::string name) {
        for (User user : users) {
            if (user.getName() == name) {
                return user;
            }
        }
        // No user found, return default user
        return User(""Unknown"", 0);
    }

private:
    std::vector<User> users;
};

int main() {
    UserService userService;
    User user(""John"", 30);
    userService.saveUser(user);

    User retrievedUser = userService.getUserByName(""John"");
    std::cout << retrievedUser.getName() << std::endl;
    std::cout << retrievedUser.getAge() << std::endl;

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogManager {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        buffer_.push_back(msg);
        // Flush when buffer reaches 5 entries
        if (buffer_.size() >= 5) {
            flush();
        }
    }

    ~LogManager() {
        // Attempt to flush remaining messages
        flush();
    }

private:
    void flush() {
        for (const auto& line : buffer_) {
            std::cout << line << std::endl;
        }
        buffer_.clear();
    }

    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

void worker(LogManager& logger, int id) {
    for (int i = 0; i < 10; ++i) {
        logger.log(""Thread "" + std::to_string(id) + "" message "" + std::to_string(i));
    }
}

int main() {
    LogManager logger;
    std::thread t1(worker, std::ref(logger), 1);
    std::thread t2(worker, std::ref(logger), 2);
    t1.join();
    t2.join();
    return 0;
}
",code_defect,deadlock_due_to_mutex_in_destructor,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void process_data(std::vector<int>& data, int start, int end, int id) {
    for (int i = start; i < end; ++i) {
        data[i] = data[i] * 2;
    }
    std::lock_guard<std::mutex> lock(mtx);
    std::cout << ""Thread "" << id << "" processed data from "" << start << "" to "" << end << std::endl;
}

void parallel_processing(std::vector<int>& data) {
    const int num_threads = 4;
    std::vector<std::thread> threads;

    for (int i = 0; i < num_threads; ++i) {
        int chunk_size = data.size() / num_threads;
        int start = i * chunk_size;
        int end = start + chunk_size;
        threads.push_back(std::thread(process_data, std::ref(data), start, end, i));
    }

    for (auto& t : threads) {
        t.join();
    }
}

int main() {
    std::vector<int> data(1000, 1);
    parallel_processing(data);
    return 0;
}",code_defect,incorrect_concurrency_handling,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>

   class Employee {
   public:
       std::string name;
       int salary;

       Employee(std::string name, int salary) : name(name), salary(salary) {}

       bool operator<(const Employee& other) const {
           return salary < other.salary;
       }
   };

   void sortEmployees(std::vector<Employee>& employees) {
       std::sort(employees.begin(), employees.end());
   }

   void printEmployees(const std::vector<Employee>& employees) {
       for (const auto& employee : employees) {
           std::cout << employee.name << "" : "" << employee.salary << std::endl;
       }
   }

   int main() {
       std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
       sortEmployees(employees);
       printEmployees(employees);
       return 0;
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor(const std::vector<int>& data) : data_(data) {}
    void startProcessing() {
        // Launch two threads that both modify shared sum without proper synchronization
        std::thread t1(&DataProcessor::processRange, this, 0, data_.size()/2);
        std::thread t2(&DataProcessor::processRange, this, data_.size()/2, data_.size());
        t1.join();
        t2.join();
    }
    int getResult() const { return sum_; }
private:
    void processRange(size_t start, size_t end) {
        for (size_t i = start; i < end; ++i) {
            // Race condition: sum_ is updated without mutex protection
            sum_ += data_[i];
        }
    }
    const std::vector<int> data_;
    int sum_ = 0;
    std::mutex mtx_; // intended for protection but never used
};

int main() {
    std::vector<int> numbers = {1,2,3,4,5,6,7,8,9,10};
    DataProcessor processor(numbers);
    processor.startProcessing();
    std::cout << ""Total sum: "" << processor.getResult() << std::endl;
    return 0;
}
",code_defect,race_condition,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private final String API_KEY = ""hardcodedSecretKey123!"";

    public void processOrder(Order order) {
        if (order != null) {
            String customerEmail = order.getCustomerEmail();
            String productName = order.getProduct().getName();
            int quantity = order.getQuantity();

            if (quantity > 0 && productName != null) {
                sendOrderConfirmationEmail(customerEmail, productName, quantity);
                updateInventory(productName, quantity);
            }
        }
    }

    private void sendOrderConfirmationEmail(String email, String product, int quantity) {
        // Simulated email sending logic
    }

    private void updateInventory(String product, int quantity) {
        // Simulated inventory update logic
    }
}",code_defect,hardcoded_credentials,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }
        if (username.equals(""admin"") && password.equals(DEFAULT_PASSWORD)) {
            return true;
        }
        // Legacy code for old authentication system
        // if (username.equals(""legacyuser"") && password.equals(""legacy_password"")) {
        //     return true;
        // }
        return false;
    }
}",code_defect,hardcoded_secrets,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class UserService {
    private Connection dbConnection;

    public UserService(Connection connection) {
        this.dbConnection = connection;
    }

    // Retrieves user by ID, but uses string concatenation leading to SQL injection
    public Map<String, String> getUserById(String userId) throws SQLException {
        Statement stmt = dbConnection.createStatement();
        String query = ""SELECT username, email FROM users WHERE id = "" + userId;
        ResultSet rs = stmt.executeQuery(query);
        Map<String, String> user = new HashMap<>();
        if (rs.next()) {
            user.put(""username"", rs.getString(""username""));
            user.put(""email"", rs.getString(""email""));
        }
        rs.close();
        stmt.close();
        return user;
    }

    // Updates user email without proper transaction handling
    public void updateEmail(int userId, String newEmail) throws SQLException {
        String sql = ""UPDATE users SET email = ? WHERE id = ?"";
        PreparedStatement ps = dbConnection.prepareStatement(sql);
        ps.setString(1, newEmail);
        ps.setInt(2, userId);
        ps.executeUpdate();
        // Missing commit/rollback, may leave transaction open
    }
}
",code_defect,sql_injection_and_missing_transaction_handling,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

using namespace std;

class UserManager {
public:
    UserManager() {}

    void addNewUser(string name, string email, string password) {
        if (name.empty() || email.empty() || password.empty()) {
            return;
        }

        users.push_back({name, email, password});
    }

    void printUsers() {
        for (int i = 0; i < users.size(); i++) {
            cout << ""User "" << i + 1 << "": "" << users[i].first << "" ("" << users[i].second << "")"" << endl;
        }
    }

private:
    vector<pair<string, string>> users;
};

int main() {
    UserManager manager;
    manager.addNewUser(""Alice"", ""alice@example.com"", ""password123"");
    manager.addNewUser(""Bob"", ""bob@example.com"", ""123password"");

    manager.printUsers();

    return 0;
}",code_smell,poor_data_modeling,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    Student(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class StudentManager {
public:
    void addStudent(Student student) { students.push_back(student); }
    void sortStudents() { std::sort(students.begin(), students.end(), [](const Student& a, const Student& b) { return a.getAge() < b.getAge(); }); }
    void printStudents() {
        for (const auto& student : students) {
            std::cout << student.getName() << "" - "" << student.getAge() << std::endl;
        }
    }

private:
    std::vector<Student> students;
};

int main() {
    StudentManager manager;
    manager.addStudent(Student(""John"", 20));
    manager.addStudent(Student(""Alice"", 22));
    manager.addStudent(Student(""Bob"", 19));
    manager.sortStudents();
    manager.printStudents();
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, email: str) -> int:
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()
        return cursor.lastrowid

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a page of users. Pages are 1-indexed.
        BUG: Off‑by‑one error causes the first page to skip the first record.
        """"""
        offset = page * page_size  # Incorrect offset calculation
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, username, email FROM users ORDER BY id LIMIT ? OFFSET ?', (page_size, offset))
        return cursor.fetchall()

# Example usage (not part of the library)
if __name__ == '__main__':
    repo = UserRepository(':memory:')
    for i in range(1, 31):
        repo.add_user(f'user{i}', f'user{i}@example.com')
    print('Page 1:', repo.get_users_page(1))
    print('Page 2:', repo.get_users_page(2))
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import json
import requests

API_KEY = 'my_super_secret_key_do_not_share'

class WeatherService:
    def __init__(self):
        self.base_url = 'https://api.weatherapi.com/v1'
        self.headers = {'Content-Type': 'application/json'}

    def get_current_weather(self, city):
        url = f'{self.base_url}/current.json?key={API_KEY}&q={city}'
        response = requests.get(url, headers=self.headers)
        data = json.loads(response.text)
        return data['current']

    def get_forecast(self, city, days=3):
        url = f'{self.base_url}/forecast.json?key={API_KEY}&q={city}&days={days}'
        response = requests.get(url, headers=self.headers)
        data = json.loads(response.text)
        return data['forecast']['forecastday']

    def get_historical_data(self, city, date):
        url = f'{self.base_url}/history.json?key={API_KEY}&q={city}&dt={date}'
        response = requests.get(url, headers=self.headers)
        data = json.loads(response.text)
        return data['data']['history']

    def log_request(self, request):
        with open('logs.txt', 'a') as f:
            f.write(f'Request: {request}\n')

    def get_weather_report(self, city):
        current = self.get_current_weather(city)
        forecast = self.get_forecast(city)
        historical = self.get_historical_data(city, '2023-04-10')
        return {
            'current': current,
            'forecast': forecast,
            'history': historical
        }",code_defect,hardcoded_secret,,qwen/qwen3-32b
JavaScript,"
   class BankAccount {
      constructor(initialBalance) {
         this.balance = initialBalance;
      }

      withdraw(amount) {
         if (amount > this.balance) {
            this.balance = 0;
         } else {
            this.balance -= amount;
         }
      }

      deposit(amount) {
         this.balance += amount;
      }

      getBalance() {
         return this.balance;
      }
   }

   function main() {
      let account = new BankAccount(1000);
      account.withdraw(500);
      console.log(account.getBalance());
   }

   main();
   ",code_defect,inconsistent_state_management,,llama-3.3-70b-versatile
Python,"import json, os, logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # Insecure: directly evals JSON content, allowing code execution if file is tampered
        with open(self.config_path, 'r') as f:
            data = f.read()
            self.settings = eval(data)  # dangerous
        logger.info('Configuration loaded')

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader

    def process(self, input_file):
        # Missing error handling for file I/O
        with open(input_file, 'r') as f:
            lines = f.readlines()
        # Inefficient: builds a list of all lines then iterates
        results = []
        for line in lines:
            parts = line.strip().split(',')
            if len(parts) != 3:
                continue
            # Off‑by‑one error: should use int(parts[2]) but uses parts[1]
            try:
                value = int(parts[1]) * self.config.get('multiplier', 1)
                results.append((parts[0], value))
            except ValueError:
                logger.error('Invalid number in line: %s', line)
        return results

if __name__ == '__main__':
    cfg = ConfigLoader('config.cfg')
    processor = DataProcessor(cfg)
    output = processor.process('data.csv')
    print(json.dumps(output))",code_defect,insecure_eval_and_off_by_one_logic,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(const std::string& name, int age) : name(name), age(age) {}
    std::string getName() const { return name; }
    int getAge() const { return age; }
    void printDetails() const {
        std::cout << ""Name: "" << name << "", Age: "" << age << std::endl;
    }
private:
    std::string name;
    int age;
};

std::vector<User> getUsers() {
    std::vector<User> users;
    users.push_back(User(""Alice"", 25));
    users.push_back(User(""Bob"", 30));
    users.push_back(User(""Charlie"", 22));
    return users;
}

int main() {
    std::vector<User> users = getUsers();
    for (const auto& user : users) {
        user.printDetails();
    }
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

private:
    std::string name;
    int salary;
};

class Company {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    int getTotalSalary() {
        int total = 0;
        for (const auto& employee : employees) {
            total += employee.getSalary();
        }
        return total;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));
    std::cout << ""Total salary: "" << company.getTotalSalary() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import os
import json
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data_dict):
        # Directly embed user input into SQL – SQL injection risk
        cursor = self.conn.cursor()
        data_json = json.dumps(data_dict)
        query = f""INSERT INTO users (username, data) VALUES ('{username}', '{data_json}')""
        cursor.execute(query)
        self.conn.commit()
        return cursor.lastrowid

    def get_user_data(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            # Unsafe deserialization – could execute malicious code if data was crafted
            return eval(row[0])
        return None

    def close(self):
        self.conn.close()

# Example usage (would be in production code)
if __name__ == '__main__':
    manager = UserManager('/tmp/users.db')
    user_id = manager.add_user('alice', {'role': 'admin', 'prefs': {'theme': 'dark'}})
    data = manager.get_user_data(user_id)
    print(f'User data: {data}')
    manager.close()
",code_defect,sql_injection_and_unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders = new ArrayList<>();

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                processOrder(order);
            }
        }
    }

    private void processOrder(Order order) {
        try {
            if (order.getCustomer() != null && order.getItems() != null) {
                for (OrderItem item : order.getItems()) {
                    item.process();
                }
                order.markAsProcessed();
            }
        } catch (Exception e) {
            // Swallowing exceptions silently
        }
    }

    public void addOrder(Order order) {
        orders.add(order);
    }
}",code_smell,error_handling,,qwen/qwen3-32b
Java,"public class UserManager { private Map<String, User> users = new HashMap<>(); public void addUser(String id, User user) { users.put(id, user); } public User getUser(String id) { return users.get(id); } public void removeUser(String id) { users.remove(id); } public boolean containsUser(String id) { return users.containsKey(id); } public static class User { private String name; private String email; public User(String name, String email) { this.name = name; this.email = email; } public String getName() { return name; } public String getEmail() { return email; } } }",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i]; // out‑of‑bounds read may cause crash
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << ""\n"";
    std::cout << ""Odd sum: "" << processor.getOddSum() << ""\n"";
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

void processUserInput(const std::string& input, std::vector<int>& results) {
    if (input.empty()) return;

    for (size_t i = 0; i < input.size(); ++i) {
        if (isdigit(input[i])) {
            int value = input[i] - '0';
            results.push_back(value);
        }
    }

    for (size_t i = 0; i < results.size(); ++i) {
        std::cout << results[i] << ' ';
    }
    std::cout << std::endl;
}

int main() {
    std::string input = ""a1b2c3d4e5"";
    std::vector<int> results;

    processUserInput(input, results);

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class PaymentProcessor { public void processPayment(String paymentMethod, double amount) { if (paymentMethod.equals(""credit_card"")) { // Simulate payment processing delay Thread.sleep(1000); System.out.println(""Payment processed successfully""); } else if (paymentMethod.equals(""paypal"")) { System.out.println(""Payment processed successfully""); } } public static void main(String[] args) { PaymentProcessor processor = new PaymentProcessor(); processor.processPayment(""credit_card"", 100.0); } }",code_smell,magic_string,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user data and writes a report to a file
  async generateUserReport(userId) {
    const user = await this.db.getUserById(userId);
    if (!user) throw new Error('User not found');
    const orders = await this.db.getOrdersByUserId(userId);
    const total = orders.reduce((sum, o) => sum + o.amount, 0);
    const report = `User: ${user.name}\nTotal Orders: ${orders.length}\nTotal Amount: $${total}`;
    // BUG: Asynchronous write without awaiting, may cause race condition if called multiple times
    fs.writeFile('reports/' + userId + '.txt', report, (err) => {
      if (err) console.error('Failed to write report', err);
    });
    return report;
  }
}

module.exports = UserService;",code_defect,async_race_condition,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    private final String adminPassword = ""admin123!"";

    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        if (username.equalsIgnoreCase(""admin"") && password.equals(adminPassword)) {
            return true;
        }

        if (username.equals(""guest"") && password.equals(""guestpass"")) {
            return true;
        }

        return false;
    }

    public void resetPassword(String newPassword) {
        adminPassword = newPassword; // Compilation error here
    }
}",code_defect,defect_compilation_error,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, String> users = new HashMap<>(); public static void addUser(String username, String password) { users.put(username, password); } public static boolean authenticate(String username, String password) { String storedPassword = users.get(username); if (storedPassword != null && storedPassword.equals(password)) { return true; } return false; } public static void main(String[] args) { addUser(""admin"", ""password123""); System.out.println(authenticate(""admin"", ""password123"")); } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import json, os, logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # Loads JSON config without validation – potential security issue if file is tampered
        with open(self.config_path, 'r') as f:
            self.settings = json.load(f)
        logger.info('Configuration loaded')

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, db_conn_str):
        self.conn_str = db_conn_str
        self.conn = None
        self._connect()

    def _connect(self):
        # Simulated insecure DB connection string handling
        self.conn = self.conn_str  # placeholder for actual DB connection
        logger.info('Connected to DB')

    def fetch_user_data(self, user_id):
        # SQL injection vulnerability: directly interpolating user input
        query = f""SELECT * FROM users WHERE id = {user_id}""
        logger.debug(f'Executing query: {query}')
        # Simulate execution and return dummy data
        return {'id': user_id, 'name': 'John Doe'}

    def process(self, user_id):
        user = self.fetch_user_data(user_id)
        # Assume processing logic here
        return f""Processed data for {user['name']}""

if __name__ == '__main__':
    cfg = ConfigLoader(os.getenv('APP_CONFIG', 'config.json'))
    processor = DataProcessor(cfg.get('db_conn'))
    print(processor.process(42))
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  const processed = {};
  for (let i = 0; i < input.length; i++) {
    const key = input[i].toLowerCase().replace(/\s+/g, '_');
    processed[key] = input[i];
  }
  return processed;
}

function validateForm(form) {
  const errors = [];
  for (const field of form) {
    if (!field.isRequired || field.value.trim() === '') {
      errors.push(`Field ${field.name} is required.`);
    }
  }
  return errors;
}

function registerUser(data) {
  const cleanedData = processUserInput(data);
  const formErrors = validateForm(data);

  if (formErrors.length > 0) {
    throw new Error('Form validation failed: ' + formErrors.join(' '));
  }

  const userData = {
    username: cleanedData.username,
    email: cleanedData.email,
    password: cleanedData.password
  };

  console.log('Registering user:', userData);
  return userData;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class DataProcessor {
public:
   void process(const std::vector<int>& data) {
      for (int i = 0; i < data.size(); ++i) {
         if (data[i] > 10) {
            std::cout << data[i] << std::endl;
         }
      }
   }
};

int main() {
   DataProcessor processor;
   std::vector<int> data = {1, 5, 12, 7, 15};
   processor.process(data);
   return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& entry) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(entry);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            std::string entry;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    entry = queue.front();
                    queue.erase(queue.begin());
                }
            }
            // BUG: If queue is empty, entry is default-constructed empty string
            // and then processed, leading to loss of synchronization and potential deadlock.
            std::cout << ""Processing: "" << entry << std::endl;
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(""log entry "" + std::to_string(i));
    }
    lp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
Java,"public class UserAuthentication {
    private static final String ADMIN_PASSWORD = ""admin123"";

    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        if (username.equals(""admin"") && password.equals(ADMIN_PASSWORD)) {
            return true;
        }

        return false;
    }

    public void resetPassword(String username, String newPassword) {
        if (username == null || newPassword == null) {
            return;
        }

        if (username.equals(""admin"")) {
            ADMIN_PASSWORD = newPassword;
        }
    }
}",code_defect,hardcoded_secrets,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
     constructor(username, password) {
       this.username = username;
       this.password = password;
     }

     authenticate(password) {
       if (password === this.password) {
         return true;
       } else {
         return false;
       }
     }

     changePassword(newPassword) {
       this.password = newPassword;
     }
   }

   class UserManager {
     constructor() {
       this.accounts = {};
     }

     addAccount(account) {
       this.accounts[account.username] = account;
     }

     getAccount(username) {
       return this.accounts[username];
     }
   }

   const manager = new UserManager();
   const account = new UserAccount('user1', 'password123');
   manager.addAccount(account);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : logFile(file) {}
    void start() {
        running = true;
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        running = false;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& line) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(line);
    }
private:
    void process() {
        while (running) {
            std::vector<std::string> localCopy;
            {
                std::lock_guard<std::mutex> lock(mtx);
                localCopy.swap(queue);
            }
            for (const auto& line : localCopy) {
                // Simulate writing to file (omitted)
                std::cout << ""Processed: "" << line << std::endl;
            }
            // BUG: missing sleep leads to busy-wait, consuming 100% CPU
        }
    }
    std::string logFile;
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool running = false;
};

int main() {
    LogProcessor lp(""app.log"");
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(""event "" + std::to_string(i));
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    lp.stop();
    return 0;
}",code_defect,busy_wait_cpu_spike,,openai/gpt-oss-120b
Python,"import requests
import time

class DataFetcher:
    def __init__(self, api_url):
        self.api_url = api_url
        self.cache = {}
        self.cache_expiry = 60

    def get_cached_data(self, identifier):
        if identifier in self.cache:
            timestamp, data = self.cache[identifier]
            if time.time() - timestamp < self.cache_expiry:
                print(f""Using cached data for {identifier}"")
                return data
        return self.fetch_data(identifier)

    def fetch_data(self, identifier):
        response = requests.get(f""{self.api_url}/{identifier}"")
        if response.status_code == 200:
            data = response.json()
            self.cache[identifier] = (time.time(), data)
            return data
        elif response.status_code == 404:
            print(f""Resource {identifier} not found"")
            return None
        else:
            print(f""Failed to fetch {identifier}"")
            return None

    def process_data(self, data):
        processed = []
        for item in data:
            if item.get('type') == 'user':
                processed.append(item['id'])
            elif item.get('type') == 'group':
                processed.append(item['name'])
            else:
                processed.append(None)
        return processed",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
class User {
public:
    std::string name;
    int age;
    User(std::string n, int a) : name(n), age(a) {}
    void print() {
        std::cout << name << "" is "" << age << "" years old"" << std::endl;
    }
};
int main() {
    std::vector<User> users;
    users.push_back(User(""John"", 25));
    users.push_back(User(""Alice"", 30));
    for (int i = 0; i < users.size(); i++) {
        users[i].print();
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // No error handling – if file is missing or malformed, JSON.parse will throw and crash the process
    const raw = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(raw);
    return this.cache;
  }

  get(key) {
    // Returns undefined if key missing, but callers expect a string and may call .trim() leading to runtime error
    return this.cache[key];
  }
}

// Usage example
const config = new ConfigLoader('./config.json');
config.load();
const dbPassword = config.get('dbPassword'); // If dbPassword is undefined, next line throws
if (dbPassword.trim() === '') {
  console.error('Database password is empty');
  process.exit(1);
}

module.exports = ConfigLoader;",code_defect,unhandled_exception_and_null_reference,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(String customerId, List<OrderItem> items) {
        if (items == null || items.isEmpty()) {
            return;
        }

        double total = 0.0;
        for (OrderItem item : items) {
            total += item.getQuantity() * item.getPrice();
        }

        if (total < 100.0) {
            applyDiscount(customerId, 0.05);
        } else {
            applyDiscount(customerId, 0.1);
        }

        System.out.println(""Total after discount: "" + total);
        sendConfirmationEmail(customerId);
    }

    private void applyDiscount(String customerId, double discountRate) {
        // No actual logic to apply discount to items or update database
    }

    private void sendConfirmationEmail(String customerId) {
        // Placeholder for email logic; not implemented
    }
}",code_smell,logic_not_implemented,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userRepository) {
         this.userRepository = userRepository;
      }

      async getUser(id) {
         const user = await this.userRepository.findById(id);
         if (user) {
            return user;
         } else {
            throw new Error('User not found');
         }
      }

      async getUsers() {
         return await this.userRepository.findAll();
      }
   }

   class UserRepository {
      async findById(id) {
         // simulate a database query
         return { id: id, name: 'John Doe' };
      }

      async findAll() {
         // simulate a database query
         return [{ id: 1, name: 'John Doe' }, { id: 2, name: 'Jane Doe' }];
      }
   }

   const userRepository = new UserRepository();
   const userService = new UserService(userRepository);

   (async () => {
      try {
         const user = await userService.getUser(1);
         console.log(user);
         const users = await userService.getUsers();
         console.log(users);
      } catch (error) {
         console.error(error);
      }
   })();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }

    void flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        for (const auto& line : logs_) {
            std::cout << line << std::endl;
        }
        logs_.clear();
    }

private:
    std::vector<std::string> logs_;
    std::mutex mtx_;
};

void worker(LogAggregator* agg, int id) {
    for (int i = 0; i < 100; ++i) {
        agg->addLog(""Worker "" + std::to_string(id) + "" log "" + std::to_string(i));
    }
    // Missing flush call; logs may never be output if program exits early
}

int main() {
    LogAggregator aggregator;
    std::thread t1(worker, &aggregator, 1);
    std::thread t2(worker, &aggregator, 2);
    t1.join();
    // t2.join(); // Bug: t2 is not joined, causing potential data race on destruction
    aggregator.flush();
    return 0;
}",code_defect,thread_join_missing_leading_to_data_race_on_destruction,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    const activeUsers = this.users.filter(user => user.isActive);
    const inactiveUsers = this.users.filter(user => !user.isActive);

    activeUsers.forEach(user => {
      this.processActiveUser(user);
    });

    inactiveUsers.forEach(user => {
      this.processInactiveUser(user);
    });
  }

  processActiveUser(user) {
    console.log(`Processing active user: ${user.name}`);
    // Additional logic for active users
  }

  processInactiveUser(user) {
    console.log(`Processing inactive user: ${user.name}`);
    // Additional logic for inactive users
  }
}

const users = [
  { id: 1, name: 'Alice', isActive: true },
  { id: 2, name: 'Bob', isActive: false },
  { id: 3, name: 'Charlie', isActive: true }
];

const userProcessor = new UserProcessor(users);
userProcessor.processUsers();",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    std::string name;
    int age;

    User(std::string n, int a) : name(n), age(a) {}
};

class UserRepository {
private:
    std::vector<User> users;

public:
    void addUser(User user) {
        users.push_back(user);
    }

    User getUser(int index) {
        return users[index];
    }
};

int main() {
    UserRepository repo;
    repo.addUser(User(""John"", 30));
    repo.addUser(User(""Alice"", 25));

    std::cout << repo.getUser(0).name << std::endl;
    std::cout << repo.getUser(1).name << std::endl;
    std::cout << repo.getUser(2).name << std::endl;

    return 0;
}
",code_defect,out_of_bounds_access,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        // Reads config file synchronously each time, ignoring cache
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }

    get(key) {
        if (!this.cache) {
            this.load();
        }
        return this.cache[key];
    }
}

// Global singleton used across the app
const config = new ConfigLoader('./config.json');

function processData(input) {
    // Assume input is an array of objects with a numeric 'value' field
    let sum = 0;
    for (let i = 0; i <= input.length; i++) { // off‑by‑one error
        sum += input[i].value;
    }
    return sum / input.length;
}

module.exports = { config, processData };",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import sqlite3

def process_user_data(username):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute(""SELECT * FROM users WHERE username = '"")
    user_data = cursor.fetchone()

    if user_data:
        print(f""User {username} found:"")
        print(user_data)
    else:
        print(f""User {username} not found."")

    cursor.close()
    conn.close()

if __name__ == ""__main__"":
    process_user_data('admin')",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
        self.login_attempts = 0

    def login(self, password):
        if password == self.password:
            self.login_attempts += 1
            return True
        else:
            return False

    def reset_password(self, new_password):
        self.password = new_password

class UserManager:
    def __init__(self):
        self.accounts = {}

    def add_account(self, account):
        self.accounts[account.username] = account

    def get_account(self, username):
        return self.accounts.get(username)

user_manager = UserManager()
account = UserAccount('john_doe', 'password123', 'john@example.com')
user_manager.add_account(account)
print(user_manager.get_account('john_doe').login('password123'))",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data):
        cursor = self.conn.cursor()
        # BUG: directly interpolating user input into SQL leads to SQL injection
        query = f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')""
        cursor.execute(query)
        self.conn.commit()

    def get_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def close(self):
        self.conn.close()

# Example usage (would be in production code)
if __name__ == '__main__':
    manager = UserManager('/tmp/users.db')
    manager.add_user('admin', {'role': 'superuser', 'token': os.getenv('ADMIN_TOKEN')})
    user_data = manager.get_user('admin')
    print('Loaded user data:', user_data)
    manager.close()",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>

void processData(const std::vector<int>& data) {
    for (int i = 0; i <= data.size(); ++i) {
        if (i % 2 == 0) {
            std::cout << data[i] << std::endl;
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::thread t(processData, data);
    t.join();
    return 0;
}",code_defect,off_by_one_error,,qwen/qwen3-32b
JavaScript,"
      class PaymentProcessor {
         constructor() {
            this.pendingPayments = [];
         }

         addPayment(payment) {
            this.pendingPayments.push(payment);
         }

         processPayments() {
            while (this.pendingPayments.length > 0) {
               const payment = this.pendingPayments.shift();
               this.makeApiCall(payment);
            }
         }

         makeApiCall(payment) {
            const apiUrl = 'https://example.com/api/processPayment';
            const xmlHttpRequest = new XMLHttpRequest();
            xmlHttpRequest.open('POST', apiUrl, false);
            xmlHttpRequest.setRequestHeader('Content-Type', 'application/json');
            xmlHttpRequest.send(JSON.stringify(payment));
         }
      }

      const paymentProcessor = new PaymentProcessor();
      paymentProcessor.addPayment({ amount: 10.99, recipient: 'John Doe' });
      paymentProcessor.addPayment({ amount: 5.99, recipient: 'Jane Doe' });
      paymentProcessor.processPayments();
   ",code_defect,synchronous_api_call,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getPendingTransactions() throws SQLException {
        List<String> ids = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT transaction_id FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            ids.add(rs.getString(""transaction_id""));
        }
        // Missing rs.close(), stmt.close(), conn.close()
        return ids;
    }

    public void processTransaction(String transactionId) {
        try {
            // Simulate processing logic
            Thread.sleep(100);
            // Update status without transaction handling
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String updateSql = ""UPDATE transactions SET status='COMPLETED' WHERE transaction_id='"" + transactionId + ""'""; // SQL injection risk
            PreparedStatement updateStmt = conn.prepareStatement(updateSql);
            updateStmt.executeUpdate();
            // No cleanup of resources
        } catch (InterruptedException | SQLException e) {
            // Swallowing exception silently
        }
    }

    public void runBatchProcessing() {
        try {
            List<String> pending = getPendingTransactions();
            for (String id : pending) {
                processTransaction(id);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
Python,"import requests

def fetch_user_data(user_id):
    url = 'https://api.example.com/users/123'
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return None


def process_user_data(user_data):
    if user_data:
        name = user_data.get('name', 'Unknown')
        email = user_data.get('email')
        if email:
            return {
                'full_name': name,
                'email': email.lower().strip()
            }
        else:
            return None
    return None


def main():
    user_id = 456
    user_data = fetch_user_data(user_id)
    processed_user = process_user_data(user_data)
    if processed_user:
        print(f""User {processed_user['full_name']} has email: {processed_user['email']}"")

if __name__ == '__main__':
    main()",code_defect,incorrect_logic,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private String username;
    private String password;
    public UserAuthenticator(String username, String password) {
        this.username = username;
        this.password = password;
    }
    public boolean authenticate() {
        if (username.equals(""admin"") && password.equals(""password123"")) {
            return true;
        }
        return false;
    }
    public static void main(String[] args) {
        UserAuthenticator authenticator = new UserAuthenticator(""admin"", ""password123"");
        System.out.println(authenticator.authenticate());
    }
}",code_defect,hardcoded_secrets,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void process() {
        while (!stopFlag) {
            std::string entry;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    entry = queue.front();
                    queue.erase(queue.begin());
                }
            }
            // Simulate processing delay
            std::this_thread::sleep_for(std::chrono::milliseconds(10));
            if (!entry.empty()) {
                std::cout << ""Processed: "" << entry << std::endl;
            }
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(""msg"" + std::to_string(i));
    }
    // Missing lp.stop(); leads to thread running after main exits
    return 0;
}
",code_defect,resource_leak_thread_not_joined,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input, std::vector<std::string>& results) {
    std::string temp = input;
    for (int i = 0; i < input.length(); ++i) {
        temp[i] = toupper(input[i]);
    }
    if (temp != ""VALID"") {
        for (int i = 0; i < results.size(); ++i) {
            results[i].clear();
        }
    }
    results.push_back(temp);
}

int main() {
    std::string input = ""valid"";
    std::vector<std::string> results;
    processUserInput(input, results);
    std::cout << results[0] << std::endl;
    return 0;
}",code_defect,incorrect conditional logic,,qwen/qwen3-32b
JavaScript,"
      class UserProcessor {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async processUsers() {
            const users = await this.userRepository.findAll();
            for (let i = 0; i < users.length; i++) {
               const user = users[i];
               if (user.isActive) {
                  await this.updateUser(user);
               }
            }
         }

         async updateUser(user) {
            user.lastProcessed = new Date();
            await this.userRepository.save(user);
            await this.sendNotification(user);
         }

         async sendNotification(user) {
            // simulate a long-running operation
            await new Promise(resolve => globalThis.setTimeout(resolve, 1000));
            globalThis.console.log(`Notification sent to ${user.email}`);
         }
      }

      const userRepository = {
         async findAll() {
            return [
               { id: 1, email: 'user1@example.com', isActive: true },
               { id: 2, email: 'user2@example.com', isActive: false },
               { id: 3, email: 'user3@example.com', isActive: true }
            ];
         },
         async save(user) {
            // simulate saving to database
            globalThis.console.log(`User saved: ${user.email}`);
         }
      };

      const userProcessor = new UserProcessor(userRepository);
      userProcessor.processUsers();
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json, os, logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # Vulnerable: directly loading JSON from a file path without validation
        with open(self.config_path, 'r') as f:
            self.settings = json.load(f)
        logger.info('Configuration loaded')

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.db_conn_str = config_loader.get('db_connection')
        self.batch_size = config_loader.get('batch_size', 100)

    def process(self, data):
        # Assume data is a list of records
        for i in range(0, len(data), self.batch_size):
            batch = data[i:i+self.batch_size]
            self._store_batch(batch)

    def _store_batch(self, batch):
        # Insecure: constructing SQL with string formatting, vulnerable to injection
        sql = f""INSERT INTO records (payload) VALUES ('{json.dumps(batch)}')""
        # Placeholder for DB execution
        print(f'Executing SQL: {sql}')

if __name__ == '__main__':
    cfg = ConfigLoader('config.json')
    processor = DataProcessor(cfg)
    sample_data = [{'id': i, 'value': os.urandom(4).hex()} for i in range(1000)]
    processor.process(sample_data)
",code_defect,insecure_sql_injection,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        if (username.length() < 3 || password.length() < 8) {
            return false;
        }

        if (username.contains(password)) {
            return false;
        }

        String hashedPassword = hashPassword(password);

        String storedPasswordHash = fetchPasswordHashFromDatabase(username);
        return hashedPassword.equals(storedPasswordHash);
    }

    private String hashPassword(String password) {
        return password.hashCode() + """";
    }

    private String fetchPasswordHashFromDatabase(String username) {
        // Simulated database lookup
        if (""admin"".equals(username)) {
            return ""2147483647"";
        }
        return """";
    }
}",code_defect,insecure_authentication,,qwen/qwen3-32b
JavaScript,"class UserService { constructor(userDao) { this.userDao = userDao; } async getAllUsers() { const users = await this.userDao.findAll(); return users.map(user => ({ id: user.id, name: user.name })); } async getUserById(id) { const user = await this.userDao.findById(id); if (!user) return null; return { id: user.id, name: user.name }; } async createUser(user) { if (!user.name || !user.email) throw new Error('Name and email are required'); await this.userDao.create(user); } }",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import logging
import os
import sys
import time

class UserDataProcessor:
    def __init__(self, db_connection, cache_client, logger, config, metrics_collector, audit_service, notification_service):
        self.db = db_connection
        self.cache = cache_client
        self.logger = logger
        self.config = config
        self.metrics = metrics_collector
        self.audit = audit_service
        self.notifier = notification_service
        self._load_static_data()

    def _load_static_data(self):
        # Load a large static JSON file on every start, even though it never changes
        with open(os.path.join(self.config['data_dir'], 'static_lookup.json'), 'r') as f:
            self.static_lookup = json.load(f)
        self.logger.info('Static lookup data loaded')

    def process_user(self, user_id, user_payload, request_meta, session_info, extra_context):
        # Very long method doing many unrelated things
        start = time.time()
        user_record = self.db.fetch_user(user_id)
        if not user_record:
            self.logger.error(f""User {user_id} not found"")
            return None
        # Update cache
        self.cache.set(f'user:{user_id}', user_record, ttl=3600)
        # Audit log
        self.audit.log('user_access', {'user_id': user_id, 'timestamp': time.time()})
        # Validate payload (very naive)
        if 'email' not in user_payload:
            self.logger.warning('Missing email in payload')
        # Enrich payload with static data
        user_payload['country'] = self.static_lookup.get(user_payload.get('country_code'), 'Unknown')
        # Save changes
        self.db.update_user(user_id, user_payload)
        # Notify other services
        self.notifier.send('user_updated', {'id': user_id, 'changes': user_payload})
        # Record metrics
        duration = time.time() - start
        self.metrics.record('user_process_time', duration)
        return user_payload

# Example usage (would be in a different module)
if __name__ == '__main__':
    logger = logging.getLogger('processor')
    logger.setLevel(logging.INFO)
    config = {'data_dir': '/etc/app/data'}
    # The following objects are placeholders for real implementations
    db = type('DB', (), {'fetch_user': lambda self, uid: {'id': uid, 'name': 'John'}, 'update_user': lambda self, uid, data: None})()
    cache = type('Cache', (), {'set': lambda self, key, val, ttl: None})()
    metrics = type('Metrics', (), {'record': lambda self, name, val: None})()
    audit = type('Audit', (), {'log': lambda self, action, data: None})()
    notifier = type('Notifier', (), {'send': lambda self, topic, msg: None})()
    processor = UserDataProcessor(db, cache, logger, config, metrics, audit, notifier)
    processor.process_user('123', {'email': 'john@example.com', 'country_code': 'US'}, {}, {}, {})
",code_smell,God_class_with_long_parameter_list_and_inefficient_static_data_loading,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void process_data(std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] < 0) {
            data[i] = 0;
        }
    }
}

int main() {
    std::vector<int> data = {5, -3, 8, -2, 0, 11};
    process_data(data);

    for (const auto& val : data) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>
using namespace std;

class User {
public:
    User(string name, string password) : name(name), password(password) {}
    string getName() { return name; }
    string getPassword() { return password; }
private:
    string name;
    string password;
};

class UserRepository {
public:
    void addUser(User user) { users.push_back(user); }
    User getUserByName(string name) {
        for (User user : users) {
            if (user.getName() == name) {
                return user;
            }
        }
        // Return empty user if not found
        return User("""", """");
    }
private:
    vector<User> users;
};

int main() {
    UserRepository repository;
    User user1(""John"", ""password123"");
    repository.addUser(user1);
    User retrievedUser = repository.getUserByName(""John"");
    cout << retrievedUser.getName() << endl;
    return 0;
}",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Synchronously read config file each time; no error handling
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) {
      this.load();
    }
    // Missing check for undefined keys leads to returning undefined silently
    return this.cache[key];
  }
}

// Global singleton used across modules
const config = new ConfigLoader('/etc/app/config.json');

function processData(input) {
  // Assume input is a stringified JSON from untrusted source
  const parsed = JSON.parse(input); // No try/catch, can throw
  if (parsed.type === 'admin') {
    // Dangerous: uses eval on user-provided data
    eval(parsed.payload);
  }
  // Further processing...
  return parsed;
}

module.exports = { config, processData };",code_defect,unsafe_eval_and_missing_error_handling,,openai/gpt-oss-120b
Python,"import os
import time

def process_data(data):
    processed = []
    for item in data:
        if item % 2 == 0:
            processed.append(item * 2)
        else:
            processed.append(item)
    return processed

def fetch_data_from_file(file_path):
    if not os.path.exists(file_path):
        raise FileNotFoundError(f""File not found: {file_path}"")
    with open(file_path, 'r') as file:
        raw_data = [int(line.strip()) for line in file if line.strip().isdigit()]
    return raw_data

def main():
    start_time = time.time()
    file_path = ""data.txt""
    data = fetch_data_from_file(file_path)
    processed_data = process_data(data)
    print(f""Processed {len(processed_data)} items in {time.time() - start_time:.2f} seconds."")

if __name__ == ""__main__"":
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserService {
     constructor(userRepository) {
       this.userRepository = userRepository;
     }

     async getAllUsers() {
       try {
         const users = await this.userRepository.findAll();
         return users.map(user => ({ id: user.id, name: user.name }));
       } catch (error) {
         console.error(error);
       }
     }

     async getUserById(id) {
       try {
         const user = await this.userRepository.findById(id);
         if (!user) {
           throw new Error('User not found');
         }
         return { id: user.id, name: user.name };
       } catch (error) {
         console.error(error);
       }
     }
   }

   class UserRepository {
     async findAll() {
       // simulate database query
       return [
         { id: 1, name: 'John Doe' },
         { id: 2, name: 'Jane Doe' }
       ];
     }

     async findById(id) {
       // simulate database query
       const users = await this.findAll();
       return users.find(user => user.id === id);
     }
   }

   const userRepository = new UserRepository();
   const userService = new UserService(userRepository);

   async function main() {
     const users = await userService.getAllUsers();
     console.log(users);
     const user = await userService.getUserById(1);
     console.log(user);
   }

   main();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Missing error handling: if file is missing or malformed, JSON.parse will throw and crash the process
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) {
      this.load();
    }
    // Off‑by‑one bug: should return undefined if key not found, but returns the whole config
    return this.cache[key] || this.cache;
  }
}

// Usage example (in production code this would be elsewhere)
const config = new ConfigLoader('/etc/app/config.json');
const dbHost = config.get('database').host; // If 'database' missing, dbHost becomes undefined.host -> runtime error
",code_defect,unhandled_exception_and_off_by_one_logic_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    const activeUsers = this.users.filter(user => user.isActive);
    const processedUsers = [];

    for (let i = 0; i < activeUsers.length; i++) {
      const user = activeUsers[i];
      const processedUser = {
        id: user.id,
        name: user.firstName + ' ' + user.lastName,
        email: user.email,
        role: user.role || 'guest'
      };
      processedUsers.push(processedUser);

      if (user.isAdmin) {
        this.sendAdminNotification(user);
      }
    }

    return processedUsers;
  }

  sendAdminNotification(user) {
    console.log(`Notification sent to admin: ${user.email}`);
  }
}

module.exports = UserProcessor;",clean_code,well_structured,,qwen/qwen3-32b
Python,"import json
import logging
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

class UserService:
    def __init__(self, db_client):
        self.db = db_client

    def get_active_users(self, page: int, page_size: int) -> List[Dict[str, Any]]:
        """"""Fetch a page of active users from the database.

        Args:
            page: 1‑based page number.
            page_size: Number of records per page.
        Returns:
            List of user dictionaries.
        """"""
        offset = (page - 1) * page_size
        query = f""SELECT id, name, email FROM users WHERE active=1 LIMIT {page_size} OFFSET {offset}""
        rows = self.db.execute(query)
        return [dict(row) for row in rows]

    def get_user_profile(self, user_id: int) -> Dict[str, Any]:
        """"""Return a user's profile as a dictionary.

        Raises:
            ValueError: If the user does not exist.
        """"""
        query = f""SELECT * FROM users WHERE id = {user_id}""
        result = self.db.execute(query)
        if not result:
            raise ValueError(""User not found"")
        return dict(result[0])

    def update_user_email(self, user_id: int, new_email: str) -> None:
        """"""Update a user's email address without validation.
        """"""
        # NOTE: No validation of email format; potential security issue.
        query = f""UPDATE users SET email = '{new_email}' WHERE id = {user_id}""
        self.db.execute(query)

    def delete_user(self, user_id: int) -> None:
        """"""Delete a user from the database.
        """"""
        # Missing transaction handling; if an error occurs, the DB may be left inconsistent.
        self.db.execute(f""DELETE FROM users WHERE id = {user_id}"")

# Example usage (would be in a different module in real code)
if __name__ == ""__main__"":
    class MockDB:
        def __init__(self):
            self.storage = [{""id"": i, ""name"": f""User{i}"", ""email"": f""user{i}@example.com"", ""active"": 1} for i in range(1, 101)]
        def execute(self, query: str):
            logger.debug(f""Executing query: {query}"")
            # Very naive parsing for demo purposes
            if query.startswith(""SELECT""):
                if ""LIMIT"" in query:
                    limit = int(query.split(""LIMIT"")[1].split()[0])
                    offset = int(query.split(""OFFSET"")[1].split()[0])
                    return self.storage[offset:offset+limit]
                elif ""WHERE id ="" in query:
                    uid = int(query.split(""="")[1])
                    return [row for row in self.storage if row[""id""] == uid]
            elif query.startswith(""UPDATE""):
                # Simulate update
                pass
            elif query.startswith(""DELETE""):
                # Simulate delete
                pass
            return []

    db = MockDB()
    service = UserService(db)
    # Off‑by‑one bug: requesting page 0 returns the last page instead of error
    users = service.get_active_users(page=0, page_size=10)
    print(json.dumps(users, indent=2))
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(String orderId, String customerEmail, String paymentMethod, boolean isPriority) {
        if (orderId == null || customerEmail == null || paymentMethod == null) {
            throw new IllegalArgumentException(""Missing required order information"");
        }

        boolean isEmailValid = isValidEmail(customerEmail);
        if (!isEmailValid) {
            throw new IllegalArgumentException(""Invalid customer email address"");
        }

        if (isPriority) {
            System.out.println(""Processing priority order: "" + orderId);
        } else {
            System.out.println(""Processing standard order: "" + orderId);
        }

        processPayment(paymentMethod);

        sendEmailConfirmation(customerEmail);
    }

    private boolean isValidEmail(String email) {
        // Basic check; realistically this should be more robust
        return email.contains(""@"") && email.contains(""."");
    }

    private void processPayment(String paymentMethod) {
        // Assume this connects to a payment gateway
        if (""credit_card"".equals(paymentMethod)) {
            // Process credit card
            System.out.println(""Processed credit card payment"");
        } else if (""paypal"".equals(paymentMethod)) {
            // Process PayPal
            System.out.println(""Processed PayPal payment"");
        } else {
            throw new UnsupportedOperationException(""Unsupported payment method"");
        }
    }

    private void sendEmailConfirmation(String email) {
        // Simulate sending an email
        System.out.println(""Email confirmation sent to: "" + email);
    }
}",code_smell,long_function,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUser(id) { const user = await this.userDao.findById(id); if (!user) return null; return user; } async getUsers() { let users = []; for (let i = 0; i < 100; i++) { const user = await this.getUser(i); if (user) users.push(user); } return users; } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""P@ssw0rd!""; // hardcoded secret

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT balance FROM accounts WHERE user_id = '"" + userId + ""'""; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    double newBalance = balance - amount;
                    String updateSql = ""UPDATE accounts SET balance = "" + newBalance + "" WHERE user_id = '"" + userId + ""'"";
                    stmt.executeUpdate(updateSql);
                    logTransaction(userId, amount);
                    return true;
                }
            }
            return false;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }

    private void logTransaction(String userId, double amount) {
        // Simplified logging, ignores failures
        System.out.println(""Transaction logged: user="" + userId + "", amount="" + amount);
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"function processUserData(userData) {
  let processedData = [];
  for (let i = 0; i < userData.length; i++) {
    if (userData[i].age > 18) {
      let temp = {};
      temp.name = userData[i].name;
      temp.email = userData[i].email;
      temp.isVerified = userData[i].isVerified || false;
      processedData.push(temp);
    }
  }

  function logUserCount() {
    console.log(`Total processed users: ${processedData.length}`);
  }

  logUserCount();

  return processedData;
}

// Unused function
function unusedFunction() {
  console.log('This function is never used');
}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor() {
            this.users = [];
         }

         addUser(user) {
            this.users.push(user);
         }

         removeUser(userId) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === userId) {
                  this.users.splice(i, 1);
                  break;
               }
            }
         }

         getUserCount() {
            return this.users.length;
         }
      }

      const userService = new UserService();
      userService.addUser({ id: 1, name: 'John Doe' });
      userService.addUser({ id: 2, name: 'Jane Doe' });
      console.log(userService.getUserCount());
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and watches for changes.""""""
    def __init__(self, path: str):
        self.path = path
        self._config = {}
        self._lock = threading.Lock()
        self._load()
        self._start_watcher()

    def _load(self):
        with open(self.path, 'r') as f:
            data = json.load(f)
        with self._lock:
            self._config.update(data)

    def get(self, key, default=None):
        with self._lock:
            return self._config.get(key, default)

    def _watcher(self):
        last_mtime = os.path.getmtime(self.path)
        while True:
            try:
                cur_mtime = os.path.getmtime(self.path)
                if cur_mtime != last_mtime:
                    self._load()
                    last_mtime = cur_mtime
            except Exception:
                pass
            # Sleep omitted intentionally causing tight loop

    def _start_watcher(self):
        t = threading.Thread(target=self._watcher, daemon=True)
        t.start()

# Usage example
config = ConfigLoader('config.json')
value = config.get('api_key')
print(f""API Key: {value}"")",code_defect,resource_leak_cpu_spin,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, database) {
    this.users = users;
    this.db = database;
  }

  processUsers() {
    for (let user of this.users) {
      this.db.connect();
      const userData = this.db.fetchUserData(user.id);
      if (userData && userData.isActive) {
        this.db.updateUserStatus(user.id, 'processed');
        console.log(`User ${user.id} processed successfully.`);
      } else {
        console.log(`User ${user.id} skipped due to inactivity or missing data.`);
      }
      this.db.disconnect();
    }
  }
}

// Example usage:
const users = [{ id: 1 }, { id: 2 }, { id: 3 }];
const db = {
  connect: () => console.log('Connected to DB'),
  fetchUserData: (id) => ({ id, isActive: id % 2 === 0 }),
  updateUserStatus: (id, status) => console.log(`Status updated to ${status}`),
  disconnect: () => console.log('Disconnected from DB')
};

const processor = new UserProcessor(users, db);
processor.processUsers();",code_smell,resource_leak,,qwen/qwen3-32b
Java,public class UserService { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUser(int id) { for (User user : users) { if (user.getId() == id) { return user; } } return null; } public void removeUser(int id) { for (User user : users) { if (user.getId() == id) { users.remove(user); break; } } } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL injection due to unvalidated limit parameter and hardcoded credentials,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, roles) {
    this.users = users;
    this.roles = roles;
  }

  getAdmins() {
    return this.users.filter(user => {
      const role = this.roles.find(role => role.id === user.roleId);
      return role && role.name === 'admin';
    });
  }

  getManagers() {
    return this.users.filter(user => {
      const role = this.roles.find(role => role.id === user.roleId);
      return role && role.name === 'manager';
    });
  }

  getUsersByRole(roleName) {
    return this.users.filter(user => {
      const role = this.roles.find(role => role.id === user.roleId);
      return role && role.name === roleName;
    });
  }
}

const users = [
  { id: 1, roleId: 1 },
  { id: 2, roleId: 2 },
  { id: 3, roleId: 3 }
];

const roles = [
  { id: 1, name: 'admin' },
  { id: 2, name: 'manager' },
  { id: 3, name: 'guest' }
];

const processor = new UserProcessor(users, roles);
const admins = processor.getAdmins();
const managers = processor.getManagers();
const guests = processor.getUsersByRole('guest');",code_smell,duplicated_code,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public static void addUser(User user) { users.put(user.getUsername(), user); } public static User getUser(String username) { return users.get(username); } public static void main(String[] args) { User user = new User(""john"", ""password123""); addUser(user); System.out.println(getUser(""john"")); } } class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } public String toString() { return ""User{"" + ""username='"" + username + ''' + ',"" + ""password='"" + password + ''' + '}'; } }",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None
        self._lock = threading.Lock()
        self._load_config()

    def _load_config(self):
        # NOTE: No validation of file existence or JSON structure
        with open(self.config_path, 'r') as f:
            data = f.read()
        # Unsafe deserialization: directly evals content
        self._config = eval(data)  # Dangerous if file is tampered

    def get(self, key, default=None):
        with self._lock:
            return self._config.get(key, default)

    def refresh(self):
        # Potential race condition: another thread may be reading while we reload
        self._load_config()

# Usage example (would be in production code)
loader = ConfigLoader('/etc/app/config.cfg')
api_key = loader.get('API_KEY')
print('Loaded API key:', api_key)
",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }
        
        // Calculate total manually
        double total = 0;
        for (int i = 0; i < order.getItems().size(); i++) {
            Item item = order.getItems().get(i);
            total += item.getPrice() * item.getQuantity();
        }

        // Apply discounts
        if (order.getCustomer().isPremium()) {
            total *= 0.9;
        }
        
        // Update inventory
        for (int i = 0; i < order.getItems().size(); i++) {
            Item item = order.getItems().get(i);
            item.getInventory().subtract(item.getQuantity());
        }

        // Save order
        OrderDAO.save(order);
    }
}",code_smell,duplicate_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) {
        users.push_back(user);
    }
    std::vector<User> getUsers() {
        return users;
    }
private:
    std::vector<User> users;
};

int main() {
    UserService service;
    service.addUser(User(""John"", 25));
    service.addUser(User(""Alice"", 30));
    std::vector<User> users = service.getUsers();
    for (const auto& user : users) {
        std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<User> getActiveUsers() throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, username, email FROM users WHERE status = 'active'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        List<User> users = new ArrayList<>();
        while (rs.next()) {
            User u = new User();
            u.setId(rs.getInt(""id""));
            u.setUsername(rs.getString(""username""));
            u.setEmail(rs.getString(""email""));
            users.add(u);
        }
        // Missing: rs.close(); stmt.close(); conn.close(); leads to resource leak
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}
",code_defect,resource_leak_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string formatData(const std::string& input, int mode) {
    std::string result;
    if (mode == 1) {
        for (char c : input) {
            if (c >= 'a' && c <= 'z') {
                result += c - 32;
            } else {
                result += c;
            }
        }
    } else if (mode == 2) {
        for (char c : input) {
            if (c >= 'A' && c <= 'Z') {
                result += c + 32;
            } else {
                result += c;
            }
        }
    } else {
        result = input;
    }

    return result;
}

int main() {
    std::vector<std::string> data = {""hello World"", ""C++ is Fun"", ""123abc""};
    for (const std::string& s : data) {
        std::cout << formatData(s, 1) << std::endl;
    }
    return 0;
}",code_smell,duplicated_code,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}
        self.load_users()

    def load_users(self):
        try:
            with open(self.db_file, 'r') as f:
                for line in f:
                    username, password = line.strip().split(':')
                    self.users[username] = password
        except FileNotFoundError:
            pass

    def authenticate(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def add_user(self, username, password):
        self.users[username] = password
        with open(self.db_file, 'a') as f:
            f.write(f'{username}:{password}\n')

    def remove_user(self, username):
        if username in self.users:
            del self.users[username]
            with open(self.db_file, 'w') as f:
                for user, pwd in self.users.items():
                    f.write(f'{user}:{pwd}\n')
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(value);
    }
private:
    void process() {
        while (!stopFlag) {
            int item = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    item = queue.front();
                    queue.erase(queue.begin());
                }
            }
            // Simulate processing
            std::cout << ""Processing: "" << item << std::endl;
        }
    }
    std::vector<int> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(i);
    }
    // Missing lp.stop(); leads to thread running after main exits
    return 0;
}
",code_defect,resource_leak_thread_not_joined,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (i != j && data[i] == data[j]) {
                std::cout << ""Duplicate found at indices "" << i << "" and "" << j << std::endl;
            }
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 2, 4, 5, 3};
    processData(input);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
    
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
",code_smell,Tight Coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        if (this.cache) return this.cache;
        // Synchronously read config file (blocking I/O)
        const data = fs.readFileSync(this.path, 'utf8');
        // Parse JSON without try/catch – malformed JSON will crash the process
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user by ID, but uses string concatenation leading to SQL injection
    getUserById(userId) {
        const query = ""SELECT * FROM users WHERE id = "" + userId;
        return this.db.query(query);
    }
}

// Example usage
const config = new ConfigLoader('./config.json').load();
const db = require('some-db-lib').connect(config.dbUrl);
const userService = new UserService(db);

// Assume userId comes from an untrusted request parameter
const userId = process.argv[2];
userService.getUserById(userId).then(user => {
    console.log('User:', user);
}).catch(err => {
    console.error('Error:', err);
});
",code_defect,sql_injection_and_unhandled_json_parse_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    public void processUsers(List<User> users) {
        for (User user : users) {
            String name = user.getName();
            if (name != null && !name.isEmpty()) {
                String formattedName = name.trim().toUpperCase();
                System.out.println(""Processing user: "" + formattedName);

                List<Order> orders = fetchOrders(user);
                for (Order order : orders) {
                    if (order != null) {
                        double total = 0.0;
                        for (OrderItem item : order.getItems()) {
                            total += item.getPrice() * item.getQuantity();
                        }
                        System.out.println(""User "" + formattedName + "" has order total: "" + total);
                    }
                }
            }
        }
    }

    private List<Order> fetchOrders(User user) {
        // Simulated database fetch
        return new ArrayList<>();
    }

}",code_smell,large_function,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.connection = None

    def connect(self):
        import sqlite3
        self.connection = sqlite3.connect(self.db_file)

    def get_user(self, user_id):
        if self.connection is None:
            self.connect()
        cursor = self.connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        if self.connection is None:
            self.connect()
        cursor = self.connection.cursor()
        cursor.execute('UPDATE users SET name = ?, email = ? WHERE id = ?', (new_data['name'], new_data['email'], user_id))
        self.connection.commit()

    def close(self):
        if self.connection is not None:
            self.connection.close()
            self.connection = None

# Usage example
if __name__ == '__main__':
    db = UserDatabase('users.db')
    user_data = db.get_user(1)
    print(user_data)
    db.update_user(1, {'name': 'John Doe', 'email': 'john@example.com'})",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class UserService {
    private Connection connection;

    public UserService(Connection connection) {
        this.connection = connection;
    }

    // Retrieves user by ID without proper input validation
    public User getUserById(String userId) throws SQLException {
        String query = ""SELECT id, name, email FROM users WHERE id = "" + userId; // SQL injection risk
        Statement stmt = connection.createStatement();
        ResultSet rs = stmt.executeQuery(query);
        if (rs.next()) {
            User user = new User();
            user.setId(rs.getInt(""id""));
            user.setName(rs.getString(""name""));
            user.setEmail(rs.getString(""email""));
            return user;
        }
        return null;
    }

    // Updates user email but forgets to close resources, leading to resource leak
    public void updateUserEmail(int userId, String newEmail) throws SQLException {
        String sql = ""UPDATE users SET email = ? WHERE id = ?"";
        PreparedStatement ps = connection.prepareStatement(sql);
        ps.setString(1, newEmail);
        ps.setInt(2, userId);
        ps.executeUpdate();
        // Missing ps.close(); and statement cleanup
    }
}

class User {
    private int id;
    private String name;
    private String email;
    // getters and setters omitted for brevity
    public void setId(int id) { this.id = id; }
    public void setName(String name) { this.name = name; }
    public void setEmail(String email) { this.email = email; }
}
",code_defect,SQL injection and resource leak,,openai/gpt-oss-120b
Python,"import os
import json

CONFIG_FILE = 'config.json'

def read_config():
    config = {}
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'r') as f:
            try:
                config = json.load(f)
            except json.JSONDecodeError:
                pass
    return config


def get_user_id_from_config():
    config = read_config()
    if 'user' in config and 'id' in config['user']:
        return str(config['user']['id'])
    else:
        return 'default_user'


def fetch_user_data():
    user_id = get_user_id_from_config()
    print(f'Fetching data for user: {user_id}')
    return {'id': user_id, 'data': 'sample_data'}


def main():
    user_data = fetch_user_data()
    print(f'User data: {user_data}')

if __name__ == '__main__':
    main()",code_smell,error_handling,,qwen/qwen3-32b
Python,"
class UserDatabase:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username in self.users:
            return False
        self.users[username] = password
        return True

    def authenticate(self, username, password):
        if username in self.users:
            return self.users[username] == password
        return False

    def get_all_users(self):
        return list(self.users.keys())

    def remove_user(self, username):
        if username in self.users:
            del self.users[username]
            return True
        return False

    def update_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
            return True
        return False

db = UserDatabase()
db.add_user('admin', 'password123')
print(db.authenticate('admin', 'password123'))  # prints: True
print(db.get_all_users())  # prints: ['admin']
db.update_password('admin', 'new_password')
print(db.authenticate('admin', 'new_password'))  # prints: True
   ",code_smell,God class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public User findUserById(int userId) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId; // insecure concatenation
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        User user = null;
        if (rs.next()) {
            user = new User();
            user.setId(rs.getInt(""id""));
            user.setUsername(rs.getString(""username""));
            user.setEmail(rs.getString(""email""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return user;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  processUser(user) {
    if (!user) return;

    user.isActive = user.status === 'active';
    user.isAdmin = user.role === 'admin';

    if (user.isAdmin) {
      user.permissions = ['read', 'write', 'delete'];
    } else {
      user.permissions = ['read'];
    }

    user.createdAt = new Date();
    user.updatedAt = new Date();

    if (user.email && user.email.includes('@example.com')) {
      user.isExampleUser = true;
    }

    return user;
  }

  batchProcessUsers(users) {
    const processedUsers = [];
    for (let i = 0; i < users.length; i++) {
      const processedUser = this.processUser(users[i]);
      processedUsers.push(processedUser);
    }
    return processedUsers;
  }
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, balance=0.0):
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount > self.balance:
            return False
        self.balance -= amount
        return True
    def get_balance(self):
        return self.balance

account = BankAccount(100.0)
print(account.get_balance())
account.withdraw(50.0)
print(account.get_balance())",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserProfileManager:
    def __init__(self, db_path='users.db'):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def save_user(self, username, profile_dict):
        # Directly serializing user-provided dict without validation
        serialized = json.dumps(profile_dict)
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, data) VALUES (?, ?)', (username, serialized))
        self.conn.commit()

    def load_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            # Unsafe deserialization using eval
            return eval(row[0])
        return None

    def delete_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage (would be removed in production)
if __name__ == '__main__':
    manager = UserProfileManager()
    manager.save_user('alice', {'age': 30, 'role': 'admin'})
    profile = manager.load_user('alice')
    print('Loaded profile:', profile)
    manager.delete_user('alice')",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(userData) {
    this.users = userData;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      this.validateUser(user);
      this.formatUser(user);
      this.saveUser(user);
    }
  }

  validateUser(user) {
    if (!user.name || !user.email) {
      console.error('Invalid user data:', user);
    }
  }

  formatUser(user) {
    user.formattedName = user.name.trim().toUpperCase();
    user.formattedEmail = user.email.trim().toLowerCase();
  }

  saveUser(user) {
    // Simulate a database save
    console.log('Saving user:', user);
  }
}

const userInputs = [
  { name: 'Alice', email: 'alice@example.com' },
  { name: ' Bob ', email: 'BOB@EXAMPLE.COM' },
  { name: '', email: 'invalid@example.com' }
];

const processor = new UserProcessor(userInputs);
processor.processUsers();",code_smell,large_class,,qwen/qwen3-32b
Python,"
class UserAuthenticator:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def authenticate(self, username, password):
        query = ""SELECT * FROM users WHERE username = '%s' AND password = '%s'"" % (username, password)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user = cursor.fetchone()
        if user:
            return True
        return False
",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        // Synchronously read config file each time without caching
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }

    get(key) {
        // If config not loaded yet, load it
        if (!this.cache) this.load();
        return this.cache[key];
    }
}

// Usage in a web server
const http = require('http');
const config = new ConfigLoader('./config.json');

const server = http.createServer((req, res) => {
    // Vulnerable to path traversal via query parameter
    const file = req.url.split('?')[1];
    if (file) {
        const content = fs.readFileSync(`./public/${file}`);
        res.writeHead(200, {'Content-Type': 'application/octet-stream'});
        res.end(content);
    } else {
        res.writeHead(200, {'Content-Type': 'text/plain'});
        res.end('Hello World');
    }
});

server.listen(config.get('port') || 3000);",code_defect,path_traversal_vulnerability,,openai/gpt-oss-120b
Python,"import requests
import time

def fetch_and_process_data():
    data_sources = [
        'https://api.example.com/data1',
        'https://api.example.com/data2',
        'https://api.example.com/data3'
    ]
    results = []

    for url in data_sources:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            processed = process_data(data)
            results.append(processed)
        else:
            print(f""Failed to fetch data from {url}"")
            
        time.sleep(1)  # To be nice to the server

    return results


def process_data(data):
    # Example processing
    processed = {
        'sum': sum(data.get('numbers', [])),
        'count': len(data.get('numbers', []))
    }
    return processed

# Unused function
# def debug_print(data):
#     print(data)

if __name__ == ""__main__"":
    result = fetch_and_process_data()
    print(result)",code_smell,large_function,,qwen/qwen3-32b
JavaScript,"class UserService { constructor() { this.users = []; } async addUser(user) { await new Promise(resolve => setTimeout(resolve, 1000)); this.users.push(user); } async removeUser(id) { for (let i = 0; i < this.users.length; i++) { if (this.users[i].id === id) { this.users.splice(i, 1); break; } } } async getUser(id) { for (let i = 0; i < this.users.length; i++) { if (this.users[i].id === id) { return this.users[i]; } } return null; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void deleteUser(String username) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // SQL injection vulnerability
            String sql = ""DELETE FROM users WHERE username = '"" + username + ""'"";
            stmt.executeUpdate(sql);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,sql_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(db) {
    this.db = db;
  }

  async login(email, password) {
    const user = await this.db.findUserByEmail(email);

    if (!user) {
      return { success: false, message: 'User not found' };
    }

    if (user.password !== password) {
      return { success: false, message: 'Incorrect password' };
    }

    user.lastLogin = new Date();
    await this.db.updateUser(user);

    return { success: true, user };
  }

  async register(email, password) {
    const existingUser = await this.db.findUserByEmail(email);

    if (existingUser) {
      return { success: false, message: 'Email already exists' };
    }

    const newUser = {
      email,
      password,
      created_at: new Date()
    };

    await this.db.createUser(newUser);

    return { success: true, user: newUser };
  }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

    void setSalary(int newSalary) { salary = newSalary; }

private:
    std::string name;
    int salary;
};

class Company {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    void removeEmployee(std::string name) {
        for (auto it = employees.begin(); it != employees.end(); ++it) {
            if (it->getName() == name) {
                employees.erase(it);
                return;
            }
        }
    }

    int getTotalSalary() {
        int sum = 0;
        for (const auto& employee : employees) {
            sum += employee.getSalary();
        }
        return sum;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));

    std::cout << company.getTotalSalary() << std::endl;

    company.removeEmployee(""John"");
    std::cout << company.getTotalSalary() << std::endl;

    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it globally.""""""
    _cache = None
    _lock = threading.Lock()

    @classmethod
    def load(cls, path: str):
        # Double-checked locking pattern (flawed)
        if cls._cache is None:
            with cls._lock:
                if cls._cache is None:
                    with open(path, 'r') as f:
                        cls._cache = json.load(f)
        return cls._cache

class DataProcessor:
    def __init__(self, config_path):
        self.config = ConfigLoader.load(config_path)
        self.threshold = self.config.get('threshold', 10)

    def process(self, data):
        # Expect data to be a list of numbers
        result = []
        for i in range(len(data)):
            # Off-by-one error: should be < len(data)
            if i <= self.threshold:
                result.append(data[i] * 2)
        return result

def main():
    # Hardcoded path (security issue)
    config_path = '/etc/app/config.json'
    processor = DataProcessor(config_path)
    # Simulate incoming data stream
    raw_data = [i for i in range(20)]
    processed = processor.process(raw_data)
    print('Processed data:', processed)

if __name__ == '__main__':
    main()",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void process_data(int id, std::vector<int>& data) {
    for (int i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 0) {
            std::lock_guard<std::mutex> lock(mtx);
            std::cout << ""Thread "" << id << "" processed: "" << data[i] << std::endl;
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<std::thread> threads;

    for (int i = 0; i < 3; ++i) {
        threads.emplace_back(process_data, i, std::ref(data));
    }

    for (auto& t : threads) {
        t.join();
    }

    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
Java,"public class UserAccountManager { private Map<String, String> userAccounts = new HashMap<>(); public void createUserAccount(String username, String password) { userAccounts.put(username, password); } public boolean authenticateUser(String username, String password) { return userAccounts.containsKey(username) && userAccounts.get(username).equals(password); } public void changePassword(String username, String newPassword) { if (userAccounts.containsKey(username)) { userAccounts.put(username, newPassword); } } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserCache:
    def __init__(self, db_path='user_data.db'):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT NOT NULL,
                data TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def get_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE id=?', (user_id,))
        row = cursor.fetchone()
        if row:
            # Unsafe deserialization of stored JSON string
            return json.loads(row[0])
        return None

    def set_user(self, user_id, username, data_dict):
        cursor = self.conn.cursor()
        # Directly embed user-provided data into SQL without parameterization
        sql = f""INSERT OR REPLACE INTO users (id, username, data) VALUES ({user_id}, '{username}', '{json.dumps(data_dict)}')""
        cursor.execute(sql)
        self.conn.commit()

    def close(self):
        self.conn.close()

# Example usage
cache = UserCache()
cache.set_user(1, ""admin"", {""role"": ""admin"", ""prefs"": {""theme"": ""dark""}})
user = cache.get_user(1)
print(user)
cache.close()",code_defect,SQL injection and unsafe deserialization,,openai/gpt-oss-120b
Python,"import requests
import time

def fetch_and_cache_data(url, cache={}, delay=0.5):
    if url in cache:
        return cache[url]

    time.sleep(delay)  # Artificial delay to simulate API rate limiting

    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        cache[url] = data
        return data
    except requests.exceptions.RequestException as e:
        print(f'Error fetching {url}: {e}')
        return None

# Usage example
data1 = fetch_and_cache_data('https://api.example.com/data1')
data2 = fetch_and_cache_data('https://api.example.com/data2')
data3 = fetch_and_cache_data('https://api.example.com/data1')
print(data3['key'])",code_defect,mutable default argument,,qwen/qwen3-32b
JavaScript,class PaymentProcessor { constructor() { this.payments = []; } addPayment(amount) { this.payments.push(amount); } calculateTotal() { let total = 0; for (let i = 0; i < this.payments.length; i++) { total += this.payments[i]; } return total; } } function main() { const processor = new PaymentProcessor(); processor.addPayment(10); processor.addPayment(20); console.log(processor.calculateTotal()); } main();,code_smell,inefficient_data_structure,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # Unsafe deserialization: using eval on file content
        with open(self.config_path, 'r') as f:
            data = f.read()
            self.settings = eval(data)  # code defect: unsafe eval

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)

    def process(self, data_items):
        results = []
        for i in range(0, len(data_items), self.batch_size):
            batch = data_items[i:i + self.batch_size]
            # Simulate processing each item
            for item in batch:
                results.append(self._transform(item))
        return results

    def _transform(self, item):
        # Potential off‑by‑one error if item is a dict missing 'value'
        return item['value'] * 2

if __name__ == ""__main__"":
    loader = ConfigLoader('config.txt')
    processor = DataProcessor(loader)
    sample_data = [{'value': i} for i in range(10)]
    output = processor.process(sample_data)
    print(json.dumps(output))",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserData(const std::string& userData, std::vector<std::string>& results) {
    for (size_t i = 0; i < userData.size(); ++i) {
        std::string temp;
        for (size_t j = i; j < userData.size(); ++j) {
            if (userData[j] == ' ') {
                i = j;
                break;
            }
            temp += userData[j];
        }
        results.push_back(temp);
    }
}

int main() {
    std::string input = ""Alice Bob Charlie"";
    std::vector<std::string> output;
    processUserData(input, output);

    for (const auto& name : output) {
        std::cout << name << std::endl;
    }

    return 0;
}",code_defect,off_by_one_error,,qwen/qwen3-32b
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cur = self.conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        data TEXT NOT NULL)''')
        self.conn.commit()

    def add_user(self, username: str, profile: dict):
        # Serialize profile dict directly into SQL string (SQL injection risk)
        cur = self.conn.cursor()
        cur.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(profile)}')"")
        self.conn.commit()

    def get_user(self, username: str):
        cur = self.conn.cursor()
        cur.execute(f""SELECT data FROM users WHERE username = '{username}'"")
        row = cur.fetchone()
        if row:
            # Unsafe deserialization using eval (code execution risk)
            return eval(row[0])
        return None

    def delete_user(self, username: str):
        cur = self.conn.cursor()
        cur.execute(f""DELETE FROM users WHERE username = '{username}'"")
        self.conn.commit()

# Example usage
if __name__ == '__main__':
    manager = UserManager(os.getenv('USER_DB', ':memory:'))
    manager.add_user('alice', {'role': 'admin', 'active': True})
    profile = manager.get_user('alice')
    print('Loaded profile:', profile)
    manager.delete_user('alice')
",code_defect,security_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final int MAX_ITEMS = 100;

    public void processOrder(String userId, List<OrderItem> items, String promoCode) {
        if (userId == null || userId.isEmpty()) {
            throw new IllegalArgumentException(""User ID cannot be null or empty"");
        }

        if (items == null || items.size() > MAX_ITEMS) {
            throw new IllegalArgumentException(""Invalid number of items"");
        }

        // Process each item in the order
        for (OrderItem item : items) {
            if (item.getPrice() <= 0) {
                item.setPrice(1); // Default to $1 if price is invalid
            }
            item.calculateTax();
            item.applyDiscount(promoCode);
        }

        // Apply bulk discount if more than 50 items
        if (items.size() > 50) {
            double bulkDiscount = 0.1; // 10% discount
            for (OrderItem item : items) {
                item.setPrice(item.getPrice() * (1 - bulkDiscount));
            }
        }
    }

    private boolean isPromoCodeValid(String promoCode) {
        // Placeholder for promo validation logic
        return promoCode != null && promoCode.equals(""SAVE20"");
    }
}",code_smell,magic_number,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserRepository {
public:
    vector<User> users;
    void addUser(User u) { users.push_back(u); }
    User* getUserByName(string name) {
        for (User& u : users) {
            if (u.name == name) return &u;
        }
        return nullptr;
    }
};
int main() {
    UserRepository repo;
    repo.addUser(User(""John"", 30));
    User* user = repo.getUserByName(""John"");
    if (user) cout << user->name << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String domain) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // INSECURE: concatenating user input directly into SQL
            String sql = ""SELECT email FROM users WHERE email LIKE '"" + ""%@"" + domain + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Potential resource leak: stmt not closed if exception occurs before stmt assignment
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_resource_leak,,openai/gpt-oss-120b
Python,"import os
import json


class User:
    def __init__(self, user_data):
        self.user_data = user_data
        self.username = user_data['username']
        self.email = user_data['email']
        self.last_login = user_data.get('last_login', 'Never')

    def get_profile(self):
        return {
            'username': self.username,
            'email': self.email,
            'last_login': self.last_login
        }

    def update_last_login(self):
        self.last_login = 'Today'


def load_users_from_file(file_path):
    if not os.path.exists(file_path):
        return []

    with open(file_path, 'r') as f:
        data = json.load(f)

    users = []
    for user in data:
        users.append(User(user))
    return users


def find_user_by_username(users, username):
    for user in users:
        if user.username == username:
            return user
    return None


def main():
    file_path = 'users.json'
    users = load_users_from_file(file_path)
    if not users:
        print('No users found.')
        return

    target_username = input('Enter username to find: ')
    target_user = find_user_by_username(users, target_username)
    if target_user:
        print('User found:', json.dumps(target_user.get_profile()))
    else:
        print('User not found.')


if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class UserAuthenticator { constructor(dbConnection) { this.dbConnection = dbConnection; } authenticate(username, password) { const query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`; return this.dbConnection.query(query).then(results => results.length > 0); } }",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserProfileManager:
    def __init__(self, db_path='user_data.db'):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY,
                            username TEXT NOT NULL,
                            data TEXT NOT NULL)''')
        self.conn.commit()

    def load_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            # Unsafe deserialization of user data
            return json.loads(row[0])
        return None

    def save_user(self, user_id, username, data_dict):
        cursor = self.conn.cursor()
        # Directly embed JSON string without sanitization
        json_data = json.dumps(data_dict)
        cursor.execute('INSERT OR REPLACE INTO users (id, username, data) VALUES (?, ?, ?)',
                       (user_id, username, json_data))
        self.conn.commit()

    def delete_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE id = ?', (user_id,))
        self.conn.commit()

    def close(self):
        self.conn.close()

# Example usage
if __name__ == '__main__':
    manager = UserProfileManager()
    user_info = {'name': 'Alice', 'roles': ['admin', 'user'], 'prefs': {'theme': 'dark'}}
    manager.save_user(1, 'alice', user_info)
    loaded = manager.load_user(1)
    print('Loaded user:', loaded)
    manager.close()
",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex m;
int global_counter = 0;

void increment_counter(int times) {
    for (int i = 0; i < times; ++i) {
        m.lock();
        ++global_counter;
        m.unlock();
    }
}

int main() {
    std::vector<std::thread> threads;
    int num_threads = 4;
    int increments_per_thread = 100000;

    for (int i = 0; i < num_threads; ++i) {
        threads.push_back(std::thread(increment_counter, increments_per_thread));
    }

    for (auto& t : threads) {
        t.join();
    }

    std::cout << ""Final counter value: "" << global_counter << std::endl;
    return 0;
}",code_smell,poor_concurrency_practice,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUser(id) { let user = await this.userDao.getUser(id); if (user) { let roles = await this.userDao.getUserRoles(id); user.roles = roles; } return user; } } class UserDao { constructor(db) { this.db = db; } async getUser(id) { return this.db.query(`SELECT * FROM users WHERE id = ${id}`); } async getUserRoles(id) { return this.db.query(`SELECT * FROM user_roles WHERE user_id = ${id}`); } },code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""admin123""; // hardcoded password

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            conn.setAutoCommit(false);
            if (!hasSufficientBalance(conn, accountId, amount)) {
                return false;
            }
            // Debit source account
            updateBalance(conn, accountId, -amount);
            // Credit merchant account (hardcoded)
            updateBalance(conn, ""MERCHANT123"", amount);
            conn.commit();
            return true;
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ignored) {}
            return false;
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }

    private boolean hasSufficientBalance(Connection conn, String accountId, double amount) throws SQLException {
        String sql = ""SELECT balance FROM accounts WHERE id = ?"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, accountId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    double balance = rs.getDouble(""balance"");
                    return balance >= amount;
                }
                return false;
            }
        }
    }

    private void updateBalance(Connection conn, String accountId, double delta) throws SQLException {
        String sql = ""UPDATE accounts SET balance = balance + ? WHERE id = ?"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setDouble(1, delta);
            stmt.setString(2, accountId);
            stmt.executeUpdate();
        }
    }
}
",code_defect,hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class DataProcessor {
public:
    void process(const vector<string>& input) {
        for (const auto& str : input) {
            if (str.empty()) {
                cout << ""Skipping empty string."" << endl;
                continue;
            }

            string trimmed = str;
            while (!trimmed.empty() && trimmed.back() == ' ') {
                trimmed.pop_back();
            }

            if (trimmed.size() > 50) {
                trimmed = trimmed.substr(0, 50);
            }

            cout << ""Processed: "" << trimmed << endl;
        }
    }
};

int main() {
    vector<string> inputs = {""Hello World   "", ""   "", ""This is a very long string that exceeds fifty characters.   "", ""Test""};
    DataProcessor dp;
    dp.process(inputs);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserManager { private Map<String, User> users = new HashMap<>(); public void addUser(User user) { users.put(user.getUsername(), user); } public User getUser(String username) { return users.get(username); } public void updateUser(User user) { users.put(user.getUsername(), user); } public void deleteUser(String username) { users.remove(username); } public List<User> getAllUsers() { return new ArrayList<>(users.values()); } }",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, email: str) -> None:
        self.conn.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()

    def get_users_page(self, page: int, page_size: int = 10):
        offset = (page - 1) * page_size
        cursor = self.conn.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        return cursor.fetchall()

# Example usage
repo = UserRepository('example.db')
for i in range(1, 21):
    repo.add_user(f'user{i}', f'user{i}@example.com')

# Intended to fetch the first page (users 1-10)
first_page = repo.get_users_page(1)
print('First page:', first_page)

# Intended to fetch the second page (users 11-20) but due to off-by-one bug it returns users 10-19
second_page = repo.get_users_page(2)
print('Second page:', second_page)",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import time

def process_user_data(user_data):
    if not user_data:
        return

    processed_data = []
    for user in user_data:
        if user['role'] == 'admin':
            processed_data.append(user['id'])
        elif user['role'] == 'moderator':
            processed_data.append(user['id'])
        elif user['role'] == 'user':
            processed_data.append(user['id'])
        elif user['role'] == 'guest':
            processed_data.append(user['id'])
        else:
            print(f""Unknown role: {user['role']}"")
            continue

    for user_id in processed_data:
        print(f""Processing user ID: {user_id}"")
        time.sleep(0.1)

    return processed_data

if __name__ == '__main__':
    sample_users = [
        {'id': 1, 'role': 'admin'},
        {'id': 2, 'role': 'moderator'},
        {'id': 3, 'role': 'user'},
        {'id': 4, 'role': 'guest'},
        {'id': 5, 'role': 'invalid'}
    ]
    process_user_data(sample_users)",code_smell,duplicate_code,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUser(id) { let user = await this.userDao.findById(id); if (!user) return null; user.password = undefined; return user; } async getUsers() { let users = await this.userDao.findAll(); users.forEach(user => { user.password = undefined; }); return users; } },code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        // Missing rs.close(), stmt.close(), conn.close() leads to resource leak
        return payments;
    }

    public void processPayments() {
        try {
            List<String> pending = getPendingPayments(100);
            for (String paymentId : pending) {
                // Simulate processing
                Thread.sleep(50);
                // Update status without transaction safety
                updatePaymentStatus(paymentId, ""COMPLETED"");
            }
        } catch (Exception e) {
            // Swallowing exception, no logging
        }
    }

    private void updatePaymentStatus(String paymentId, String status) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""UPDATE payments SET status=? WHERE payment_id=?"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, status);
        stmt.setString(2, paymentId);
        stmt.executeUpdate();
        // Missing close statements, potential connection leak
    }
}
",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <cmath>

void processValues(std::vector<int>& values, int threshold, bool applyTransformation) {
    for (size_t i = 0; i < values.size(); ++i) {
        if (values[i] > threshold) {
            if (applyTransformation) {
                values[i] = std::pow(values[i], 2);
            } else {
                values[i] = values[i] + 10;
            }
        } else {
            values[i] = values[i] * 2;
        }
    }
}

int main() {
    std::vector<int> data = {15, 5, 20, 25, 10};
    processValues(data, 10, true);

    for (int val : data) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public void addUser(User user) { users.put(user.getUsername(), user); } public User getUser(String username) { return users.get(username); } public void updateUsername(String oldUsername, String newUsername) { User user = users.remove(oldUsername); if (user != null) { users.put(newUsername, user); } } }",code_smell,God class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // insecure concatenation, potential SQL injection if limit were user-supplied
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception, no logging
        } finally {
            // missing close for stmt and conn, resource leak
        }
        return emails;
    }
}
",code_defect,resource_leak_and_sql_injection_risk,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.users = [];
  }

  registerUser(username, password) {
    const user = this.findUser(username);
    if (user) {
      return false;
    }

    this.users.push({ username, password });
    return true;
  }

  loginUser(username, password) {
    const user = this.findUser(username);
    if (!user) {
      return false;
    }

    return user.password === password;
  }

  findUser(username) {
    return this.users.find(u => u.username === username);
  }

  deleteUser(username) {
    const index = this.users.findIndex(u => u.username === username);
    if (index === -1) {
      return false;
    }

    this.users.splice(index, 1);
    return true;
  }
}

const auth = new UserAuth();
auth.registerUser('alice', 'securepassword123');
auth.registerUser('bob', 'qwerty');
console.log(auth.loginUser('alice', 'securepassword123'));",clean_code,well_structured,,qwen/qwen3-32b
Python,"class PaymentProcessor:
    def __init__(self, api_key, api_secret):
        self.api_key = api_key
        self.api_secret = api_secret
        self.cache = {}

    def process_payment(self, amount, customer_id):
        if customer_id in self.cache:
            return self.cache[customer_id]
        else:
            # simulate api call
            import time
            time.sleep(1)
            result = amount * 2
            self.cache[customer_id] = result
            return result

    def get_cached_result(self, customer_id):
        return self.cache.get(customer_id)
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }

    std::string dump() {
        std::lock_guard<std::mutex> lock(mtx_);
        std::string result;
        for (size_t i = 0; i <= logs_.size(); ++i) { // off‑by‑one error
            result += logs_[i] + ""\n"";
        }
        return result;
    }

private:
    std::vector<std::string> logs_;
    std::mutex mtx_;
};

void worker(LogAggregator& agg, int id) {
    for (int i = 0; i < 5; ++i) {
        agg.addLog(""Thread "" + std::to_string(id) + "" log "" + std::to_string(i));
    }
}

int main() {
    LogAggregator aggregator;
    std::thread t1(worker, std::ref(aggregator), 1);
    std::thread t2(worker, std::ref(aggregator), 2);
    t1.join();
    t2.join();
    std::cout << aggregator.dump();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

class DataProcessor:
    def __init__(self, file_path):
        self.file_path = file_path
        self.data = None

    def load_data(self):
        if os.path.exists(self.file_path):
            with open(self.file_path, 'r') as file:
                self.data = json.load(file)
        else:
            self.data = []

    def process_data(self):
        processed = []
        for item in self.data:
            name = item.get('name', 'Unknown')
            value = item.get('value', 0)
            timestamp = item.get('timestamp')

            if timestamp:
                try:
                    timestamp = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
                except ValueError:
                    timestamp = None

            processed_item = {
                'name': name,
                'value': value,
                'timestamp': timestamp
            }
            processed.append(processed_item)
        return processed

    def save_processed_data(self, output_path):
        processed = self.process_data()
        with open(output_path, 'w') as file:
            json.dump(processed, file, default=str)

# Example usage
if __name__ == '__main__':
    processor = DataProcessor('data.json')
    processor.load_data()
    processor.save_processed_data('processed_data.json')",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
class User {
public:
    std::string name;
    int age;
    User(std::string n, int a) : name(n), age(a) {}
    void print() {
        std::cout << name << std::endl;
        std::cout << age << std::endl;
    }
};
class UserService {
public:
    std::vector<User> users;
    void addUser(User u) {
        users.push_back(u);
    }
    User getUser(int index) {
        return users[index];
    }
};
int main() {
    UserService us;
    us.addUser(User(""John"", 30));
    us.addUser(User(""Jane"", 25));
    std::cout << us.getUser(0).name << std::endl;
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    void addUser(const std::string& username) {
        users.push_back(username);
    }

    // Returns the user at the given index, but has an off‑by‑one error
    std::string getUserAt(int index) const {
        if (index < 0 || index > users.size()) { // bug: should be >=
            throw std::out_of_range(""Index out of bounds"");
        }
        return users[index];
    }

    // Finds a user by name, returns its position or -1
    int findUser(const std::string& name) const {
        auto it = std::find(users.begin(), users.end(), name);
        if (it != users.end()) {
            return static_cast<int>(it - users.begin());
        }
        return -1;
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.addUser(""carol"");

    try {
        // This will incorrectly throw for the last valid index
        std::cout << um.getUserAt(2) << std::endl;
    } catch (const std::exception& e) {
        std::cerr << ""Error: "" << e.what() << std::endl;
    }
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order.getItems() != null && !order.getItems().isEmpty()) {
            for (OrderItem item : order.getItems()) {
                if (item.getQuantity() > 0 && item.getPrice() > 0) {
                    item.setTotal(item.getQuantity() * item.getPrice());
                }
            }
            order.setStatus(""PROCESSING"");
            order.setTotal(calculateTotal(order.getItems()));
        }
    }

    private double calculateTotal(List<OrderItem> items) {
        double total = 0.0;
        for (OrderItem item : items) {
            if (item.getTotal() != null) {
                total += item.getTotal();
            }
        }
        return total;
    }
}",code_smell,primitive_obsession,,qwen/qwen3-32b
Python,"
class UserDatabase:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password

    def authenticate(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def get_all_users(self):
        return self.users.keys()

    def update_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
        else:
            raise Exception('User not found')

    def delete_user(self, username):
        if username in self.users:
            del self.users[username]
        else:
            raise Exception('User not found')

db = UserDatabase()
db.add_user('admin', 'password123')
print(db.authenticate('admin', 'password123'))  # prints: True
print(db.get_all_users())  # prints: dict_keys(['admin'])
db.update_password('admin', 'newpassword')
print(db.authenticate('admin', 'newpassword'))  # prints: True
db.delete_user('admin')
print(db.get_all_users())  # prints: dict_keys([])
",code_smell,God class,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class UserService {
    private Connection dbConnection;
    private static final String QUERY = ""SELECT id, name, email FROM users WHERE email = '"" + ""?"" + ""'""; // insecure concatenation

    public UserService(Connection connection) {
        this.dbConnection = connection;
    }

    public Optional<User> findUserByEmail(String email) {
        try (PreparedStatement stmt = dbConnection.prepareStatement(QUERY)) {
            stmt.setString(1, email);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                User user = new User(rs.getInt(""id""), rs.getString(""name""), rs.getString(""email""));
                return Optional.of(user);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return Optional.empty();
    }
}

class User {
    private int id;
    private String name;
    private String email;

    public User(int id, String name, String email) {
        this.id = id;
        this.name = name;
        this.email = email;
    }
    // getters and setters omitted for brevity
}
",code_defect,SQL injection due to unsafe query construction,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  findUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  getUserDetails(userId) {
    const user = this.findUserByEmail(userId);
    if (!user) {
      throw new Error(`User with email ${userId} not found`);
    }
    return {
      name: user.name,
      email: user.email,
      role: user.role
    };
  }

  updateUserRole(userId, newRole) {
    const user = this.findUserByEmail(userId);
    if (!user) {
      throw new Error(`User with email ${userId} not found`);
    }
    user.role = newRole;
  }
}

// Sample usage:
const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com', role: 'user' },
  { id: 2, name: 'Bob', email: 'bob@example.com', role: 'admin' }
];

const userManager = new UserManager(users);
console.log(userManager.getUserDetails('alice@example.com'));
userManager.updateUserRole('alice@example.com', 'admin');",code_defect,incorrect conditional logic,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Employee {
public:
    string name;
    int salary;
    Employee(string n, int s) : name(n), salary(s) {}
};

class Company {
public:
    vector<Employee> employees;
    void addEmployee(Employee e) { employees.push_back(e); }
    void sortEmployees() { sort(employees.begin(), employees.end(), [](Employee a, Employee b) { return a.salary < b.salary; }); }
    void printEmployees() {
        for (auto e : employees) {
            cout << e.name << "" - "" << e.salary << endl;
        }
    }
};

int main() {
    Company c;
    c.addEmployee(Employee(""John"", 50000));
    c.addEmployee(Employee(""Alice"", 60000));
    c.sortEmployees();
    c.printEmployees();
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mutex_);
        logs_.push_back(msg);
    }

    void flush() {
        // Write logs to file (simulated)
        for (const auto& entry : logs_) {
            std::cout << entry << std::endl;
        }
        logs_.clear();
    }

private:
    std::vector<std::string> logs_;
    std::mutex mutex_;
};

void worker(LogAggregator& agg, int id) {
    for (int i = 0; i < 5; ++i) {
        agg.addLog(""Thread "" + std::to_string(id) + "" log "" + std::to_string(i));
    }
}

int main() {
    LogAggregator aggregator;
    std::vector<std::thread> threads;
    for (int i = 0; i < 4; ++i) {
        threads.emplace_back(worker, std::ref(aggregator), i);
    }
    // Forget to join threads before flushing
    aggregator.flush();
    for (auto& t : threads) t.join();
    return 0;
}
",code_defect,race_condition_due_to_unjoined_threads,,openai/gpt-oss-120b
Python,"import requests

class DataFetcher:
    def __init__(self, base_url='https://api.example.com/data', headers=None):
        self.base_url = base_url
        self.headers = headers or {}

    def fetch_all(self, params=None):
        response = requests.get(self.base_url, headers=self.headers, params=params)
        return response.json()

    def fetch_by_id(self, data_id):
        url = f'{self.base_url}/{data_id}'
        response = requests.get(url, headers=self.headers)
        return response.json()

    def update_data(self, data_id, payload):
        url = f'{self.base_url}/{data_id}'
        response = requests.put(url, headers=self.headers, json=payload)
        return response.status_code

    def delete_data(self, data_id):
        url = f'{self.base_url}/{data_id}'
        response = requests.delete(url, headers=self.headers)
        return response.status_code

    def create_data(self, payload):
        response = requests.post(self.base_url, headers=self.headers, json=payload)
        return response.json()

# Example usage
data_fetcher = DataFetcher(headers={'Authorization': 'Bearer hardcoded_token'})
print(data_fetcher.fetch_all())",code_defect,hardcoded_credentials,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

    void promote(int percentage) {
        salary += (salary * percentage) / 100;
    }

private:
    std::string name;
    int salary;
};

class Company {
public:
    void addEmployee(Employee employee) {
        employees.push_back(employee);
    }

    int getTotalSalary() {
        int total = 0;
        for (int i = 0; i < employees.size(); i++) {
            total += employees[i].getSalary();
        }
        return total;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));
    std::cout << ""Total salary: "" << company.getTotalSalary() << std::endl;
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigManager:
    """"""Loads configuration from a JSON file and provides access to settings.""""""
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, config_path='config.json'):
        # Singleton pattern but incorrectly implemented: ignores config_path after first call
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super(ConfigManager, cls).__new__(cls)
                    cls._instance._load(config_path)
        return cls._instance

    def _load(self, path):
        with open(path, 'r') as f:
            self._data = json.load(f)
        # Store the path for later use (e.g., reload), but mistakenly store a mutable default
        self._config_path = path

    def get(self, key, default=None):
        return self._data.get(key, default)

    def reload(self):
        # Bug: uses stale path if ConfigManager was instantiated with a different path later
        self._load(self._config_path)

# Usage in the application
config = ConfigManager('/etc/app/config.json')
# Later in another module, expecting a different config file
config2 = ConfigManager('user_config.json')

# Both config and config2 refer to the same singleton instance, causing unexpected configuration mixing
print('Database host:', config.get('db_host'))
print('User setting:', config2.get('theme'))
",code_defect,singleton_misuse_leading_to_wrong_config,,openai/gpt-oss-120b
Python,"import requests

class UserProcessor:
    def __init__(self, user_data):
        self.user_data = user_data
        self.temp_cache = {}

    def process_users(self):
        results = []
        for user in self.user_data:
            result = self.fetch_user_details(user['id'])
            results.append(result)
        return results

    def fetch_user_details(self, user_id):
        if user_id in self.temp_cache:
            return self.temp_cache[user_id]

        url = f'https://api.example.com/users/{user_id}'
        response = requests.get(url, timeout=5)
        data = response.json()

        self.temp_cache[user_id] = data
        return data

    def log_data(self):
        for key, value in self.temp_cache.items():
            print(f""Cached user {key}: {value}"")",code_smell,inappropriate_intimacy,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, user_data):
        query = ""UPDATE users SET name = '"" + user_data['name'] + ""', email = '"" + user_data['email'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()
   ",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        # Loads configuration from a JSON file without any validation
        with open(self.path, 'r') as f:
            self.config = json.load(f)

    def get(self, key, default=None):
        return self.config.get(key, default)

class UserService:
    def __init__(self, db_conn_str):
        self.db_conn_str = db_conn_str
        self._connect()

    def _connect(self):
        # Simulate a database connection using eval on the connection string (dangerous)
        self.conn = eval(self.db_conn_str)  # BUG: unsafe eval leads to code execution

    def get_user(self, user_id):
        # Directly interpolates user_id into SQL query (SQL injection risk)
        query = f""SELECT * FROM users WHERE id = {user_id}""
        cursor = self.conn.cursor()
        cursor.execute(query)
        return cursor.fetchone()

# Usage example (would be in production code)
config = ConfigLoader('config.json')
service = UserService(config.get('db_conn'))
print(service.get_user(42))",code_defect,unsafe_eval_and_sql_injection,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, db) {
    this.users = users;
    this.db = db;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      this.db.save(user);
      if (user.isActive) {
        this.db.markActive(user);
      }
      if (user.isAdmin) {
        this.db.markAdmin(user);
      }
    }
  }
}

const users = [
  { id: 1, isActive: true, isAdmin: false },
  { id: 2, isActive: false, isAdmin: true },
  { id: 3, isActive: true, isAdmin: true }
];

const db = {
  save: (user) => console.log(`Saved user: ${user.id}`),
  markActive: (user) => console.log(`Marked active: ${user.id}`),
  markAdmin: (user) => console.log(`Marked admin: ${user.id}`)
};

const processor = new UserProcessor(users, db);
processor.processUsers();",code_smell,long_method,,qwen/qwen3-32b
C++,"#include <iostream>
#include <string>
#include <vector>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class UserService {
public:
    std::vector<User> getUsers() {
        std::vector<User> users;
        // Assume this is fetching users from a database
        users.push_back(User(""John"", 30));
        users.push_back(User(""Alice"", 25));
        return users;
    }
};

int main() {
    UserService service;
    std::vector<User> users = service.getUsers();
    for (const auto& user : users) {
        std::cout << user.getName() << "" is "" << user.getAge() << "" years old.\n"";
    }
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor(const std::vector<int>& data) : data_(data) {}
    void startProcessing() {
        // Launch two worker threads that share the same index without synchronization
        std::thread t1(&DataProcessor::processChunk, this);
        std::thread t2(&DataProcessor::processChunk, this);
        t1.join();
        t2.join();
    }
private:
    void processChunk() {
        while (true) {
            int idx = currentIndex_++; // Race condition: unsynchronized increment
            if (idx >= data_.size()) break;
            // Simulate work
            int value = data_[idx];
            std::lock_guard<std::mutex> lock(outputMutex_);
            std::cout << ""Thread "" << std::this_thread::get_id() << "" processing index "" << idx << "": "" << value << std::endl;
        }
    }
    const std::vector<int>& data_;
    size_t currentIndex_ = 0;
    std::mutex outputMutex_;
};

int main() {
    std::vector<int> numbers;
    for (int i = 0; i < 100; ++i) numbers.push_back(i);
    DataProcessor processor(numbers);
    processor.startProcessing();
    return 0;
}
",code_defect,race_condition,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders = new ArrayList<>();

    public void addOrder(Order order) {
        orders.add(order);
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                process(order);
            } else {
                System.out.println(""Invalid order: "" + order);
            }
        }
    }

    private void process(Order order) {
        if (order.getType() == OrderType.PREMIUM) {
            applyDiscount(order, 0.25);
        } else if (order.getType() == OrderType.STANDARD) {
            applyDiscount(order, 0.10);
        } else {
            applyDiscount(order, 0.05);
        }
        updateInventory(order);
        sendConfirmationEmail(order);
    }

    private void applyDiscount(Order order, double discount) {
        order.setTotal(order.getTotal() * (1 - discount));
    }

    private void updateInventory(Order order) {
        // Update inventory logic here
    }

    private void sendConfirmationEmail(Order order) {
        // Send email logic here
    }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    Student(std::string name, int grade) : name(name), grade(grade) {}

    std::string getName() { return name; }
    int getGrade() { return grade; }

private:
    std::string name;
    int grade;
};

bool compareStudents(const Student& s1, const Student& s2) {
    return s1.getGrade() < s2.getGrade();
}

void sortStudents(std::vector<Student>& students) {
    std::sort(students.begin(), students.end(), compareStudents);
}

int main() {
    std::vector<Student> students = {Student(""John"", 85), Student(""Alice"", 90), Student(""Bob"", 78)};
    sortStudents(students);
    for (const auto& student : students) {
        std::cout << student.getName() << "" : "" << student.getGrade() << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }

    std::vector<std::string> flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        auto copy = logs_;
        logs_.clear();
        return copy;
    }

private:
    std::vector<std::string> logs_;
    std::mutex mtx_;
};

void worker(LogAggregator& agg, int id) {
    for (int i = 0; i < 1000; ++i) {
        agg.addLog(""Thread "" + std::to_string(id) + "" message "" + std::to_string(i));
    }
}

int main() {
    LogAggregator aggregator;
    std::thread t1(worker, std::ref(aggregator), 1);
    std::thread t2(worker, std::ref(aggregator), 2);
    t1.join();
    // t2.join(); // BUG: forgetting to join second thread can cause data race on program exit
    auto logs = aggregator.flush();
    std::cout << ""Collected "" << logs.size() << "" logs"" << std::endl;
    return 0;
}
",code_defect,missing_thread_join,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

class DataProcessor {
public:
    void process(const std::string& input) {
        if (input.empty()) return;

        for (size_t i = 0; i < input.length(); ++i) {
            char c = input[i];
            if (c >= 'A' && c <= 'Z') {
                processedData += c;
            }
        }

        std::cout << ""Processed data: "" << processedData << std::endl;
    }

private:
    std::string processedData;
};

int main() {
    DataProcessor processor;
    std::string input = ""Hello, World! 123"";
    processor.process(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, account_number, balance=0):
        self.account_number = account_number
        self.balance = balance
    
    def deposit(self, amount):
        self.balance += amount
    
    def withdraw(self, amount):
        if amount > self.balance:
            print('Insufficient funds')
        else:
            self.balance -= amount
        
    def get_balance(self):
        return self.balance
    
    def transfer(self, amount, recipient_account):
        if amount > self.balance:
            print('Insufficient funds')
        else:
            self.balance -= amount
            recipient_account.balance += amount
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}

    void addTransaction(int amount) {
        std::lock_guard<std::mutex> lock(mtx_);
        transactions_.push_back(amount);
        // Update total lazily
        total_ += amount;
    }

    int getTotal() const {
        return total_;
    }

    // Process all pending transactions and clear the list
    void processAll() {
        std::lock_guard<std::mutex> lock(mtx_);
        for (int amt : transactions_) {
            // Simulate processing delay
            std::this_thread::sleep_for(std::chrono::milliseconds(1));
        }
        // BUG: forgetting to clear the transactions vector leads to double-counting on next add
    }

private:
    mutable std::mutex mtx_;
    std::vector<int> transactions_;
    int total_; // accumulates amounts, but not reset after processing
};

int main() {
    TransactionProcessor tp;
    std::thread t1([&tp]() { for (int i = 0; i < 100; ++i) tp.addTransaction(10); });
    std::thread t2([&tp]() { for (int i = 0; i < 100; ++i) tp.addTransaction(20); });
    t1.join();
    t2.join();
    tp.processAll();
    std::cout << ""Total processed: "" << tp.getTotal() << std::endl;
    // Adding more transactions after processing will incorrectly include previous amounts
    tp.addTransaction(30);
    std::cout << ""New total: "" << tp.getTotal() << std::endl;
    return 0;
}",code_defect,logic_error_double_count,,openai/gpt-oss-120b
Python,"import random

class Player:
    def __init__(self, name):
        self.name = name
        self.health = 100
        self.weapon = None

    def take_damage(self, amount):
        self.health -= amount
        if self.health < 0:
            self.health = 0

    def attack(self, target):
        if self.weapon is None:
            print(f""{self.name} has no weapon to attack with!"")
            return

        damage = self.weapon.damage
        if random.random() < 0.1:
            damage *= 2
            print(f""{self.name}'s attack critically hits!"")
        target.take_damage(damage)

    def heal(self):
        self.health += 20
        if self.health > 100:
            self.health = 100

    def set_weapon(self, weapon):
        self.weapon = weapon


class Weapon:
    def __init__(self, name, damage):
        self.name = name
        self.damage = damage


def main():
    player1 = Player(""Hero"")
    player2 = Player(""Villain"")

    sword = Weapon(""Sword"", 15)
    axe = Weapon(""Axe"", 20)

    player1.set_weapon(sword)
    player2.set_weapon(axe)

    for _ in range(10):
        player1.attack(player2)
        player2.attack(player1)

    print(f""{player1.name} health: {player1.health}"")
    print(f""{player2.name} health: {player2.health}"")

if __name__ == ""__main__"":
    main()",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
    
    def authenticate(self, input_password):
        if input_password == self.password:
            return True
        else:
            return False

    def change_password(self, new_password):
        self.password = new_password

class UserRepository:
    def __init__(self):
        self.accounts = {}
    
    def add_account(self, account):
        self.accounts[account.username] = account

    def get_account(self, username):
        return self.accounts.get(username)

repository = UserRepository()
account = UserAccount('john_doe', 'mysecretpassword', 'john@example.com')
repository.add_account(account)
print(repository.get_account('john_doe').authenticate('mysecretpassword'))",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogManager {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        buffer_.push_back(msg);
    }
    void flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        for (const auto& line : buffer_) {
            std::cout << line << std::endl;
        }
        buffer_.clear();
    }
private:
    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

LogManager globalLogger;

void worker(int id) {
    for (int i = 0; i < 100; ++i) {
        globalLogger.log(""Thread "" + std::to_string(id) + "" iteration "" + std::to_string(i));
    }
    // Missing flush call leads to lost logs if program exits before destructor
}

int main() {
    std::vector<std::thread> threads;
    for (int i = 0; i < 5; ++i) {
        threads.emplace_back(worker, i);
    }
    // Forget to join threads -> potential race and program may exit early
    return 0;
}
",code_defect,missing_thread_join_and_flush,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processUserInput(std::string input) {
    std::string result;
    for (int i = 0; i < input.length(); ++i) {
        if (input[i] == 'a') {
            result += 'A';
        } else if (input[i] == 'b') {
            result += 'B';
        } else if (input[i] == 'c') {
            result += 'C';
        } else {
            result += input[i];
        }
    }

    return result;
}

int main() {
    std::vector<std::string> users = {""alice"", ""bob"", ""carol"", ""dave""};
    for (const auto& user : users) {
        std::cout << processUserInput(user) << std::endl;
    }
    return 0;
}",code_smell,lack_of_abstraction,,qwen/qwen3-32b
JavaScript,"
      class BankAccount {
         constructor(accountNumber, balance) {
            this.accountNumber = accountNumber;
            this.balance = balance;
         }

         withdraw(amount) {
            if (amount > this.balance) {
               this.balance -= amount;
            } else {
               this.balance -= amount;
            }
         }

         deposit(amount) {
            this.balance += amount;
         }
      }

      function main() {
         let account = new BankAccount('12345', 1000);
         account.withdraw(500);
         console.log(account.balance);
      }

      main();
   ",code_defect,incorrect_conditional_logic,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.path = configPath;
    this.cache = null;
  }

  load() {
    // Synchronous read, blocks event loop
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) this.load();
    return this.cache[key];
  }
}

function processUserInput(input) {
  // Assume input is a JSON string from an external source
  const parsed = JSON.parse(input);
  // Directly use parsed values in a file path without validation
  const filePath = `/var/app/data/${parsed.username}/profile.json`;
  const content = fs.readFileSync(filePath, 'utf8');
  return JSON.parse(content);
}

module.exports = { ConfigLoader, processUserInput };",code_defect,path_traversal_via_unvalidated_input,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        String customerEmail = order.getCustomer().getEmail();
        if (customerEmail == null || customerEmail.isEmpty()) {
            return;
        }

        List<Item> items = order.getItems();
        if (items == null || items.isEmpty()) {
            return;
        }

        double total = 0.0;
        for (Item item : items) {
            if (item == null || item.getPrice() <= 0) {
                continue;
            }
            total += item.getPrice() * item.getQuantity();
        }

        if (total > 0) {
            EmailService.sendEmail(customerEmail, ""Order confirmation: $"" + total);
        }
    }
}

// Unused class
/*
class EmailService {
    public static void sendEmail(String to, String message) {
        // Simulated email sending logic
        System.out.println(""Sending email to "" + to + "": "" + message);
    }
}
*/

class EmailService {
    public static void sendEmail(String to, String message) {
        // Simulated email sending logic
        System.out.println(""Sending email to "" + to + "": "" + message);
    }
}

class Order {
    private Customer customer;
    private List<Item> items;

    public Customer getCustomer() {
        return customer;
    }

    public List<Item> getItems() {
        return items;
    }
}

class Customer {
    private String email;

    public String getEmail() {
        return email;
    }
}

class Item {
    private double price;
    private int quantity;

    public double getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }
}",code_smell,dead_code,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id] = user_data
        else:
            self.add_user(user_id, user_data)

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]

    def get_all_users(self):
        return self.users

    def get_user_count(self):
        return len(self.users)
",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes it to a file
    async exportUserProfile(userId) {
        const user = await this.db.getUserById(userId);
        if (!user) throw new Error('User not found');
        const profile = {
            id: user.id,
            name: user.name,
            email: user.email,
            // Sensitive token should not be exported
            token: user.authToken
        };
        // Asynchronously write file but do not await, causing race condition
        fs.writeFile(`/tmp/profile_${userId}.json`, JSON.stringify(profile), (err) => {
            if (err) console.error('Failed to write file', err);
        });
        // Returns before file is guaranteed to be written
        return { status: 'queued', path: `/tmp/profile_${userId}.json` };
    }
}

module.exports = UserService;",code_defect,race_condition_due_to_unawaited_async_write,,openai/gpt-oss-120b
Python,"import os
import time
import requests

def fetch_and_cache_data(url, cache_path, max_age_seconds=3600):
    if os.path.exists(cache_path):
        file_age_seconds = time.time() - os.path.getmtime(cache_path)
        if file_age_seconds < max_age_seconds:
            with open(cache_path, 'r') as f:
                return f.read()

    response = requests.get(url)
    # TODO: handle HTTP errors
    data = response.text

    with open(cache_path, 'w') as f:
        f.write(data)

    return data


def main():
    url = 'https://api.example.com/data'
    cache_path = '.cache/data_cache.txt'

    try:
        result = fetch_and_cache_data(url, cache_path)
        print(result)
    except Exception as e:
        print('An error occurred:', e)

if __name__ == '__main__':
    main()",code_defect,missing_error_handling,,qwen/qwen3-32b
JavaScript,"class UserAuthenticator { constructor(dbConnection) { this.dbConnection = dbConnection; } authenticate(username, password) { let query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`; return this.dbConnection.query(query).then(results => results.length > 0); } }",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // Parses JSON but does not handle errors – malformed JSON will crash the process
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function getUserPreference(userId) {
  const loader = new ConfigLoader('./user_prefs.json');
  const prefs = loader.load();
  // Direct property access without checking existence – may throw if userId missing
  return prefs[userId].theme;
}

module.exports = { getUserPreference };",code_defect,unhandled_JSON_parse_error_and_missing_property_check,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // BUG: If no task was retrieved, task remains 0 and is processed incorrectly
            std::cout << ""Processing: "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 1; i <= 5; ++i) dp.addTask(i);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

void processData(std::string input, int flag) {
    if (flag == 1) {
        std::string processed = input;
        for (int i = 0; i < processed.length(); i++) {
            processed[i] = toupper(processed[i]);
        }
        std::cout << ""Processed (uppercase): "" << processed << std::endl;
    } else if (flag == 2) {
        std::string processed = input;
        for (int i = 0; i < processed.length(); i++) {
            processed[i] = tolower(processed[i]);
        }
        std::cout << ""Processed (lowercase): "" << processed << std::endl;
    } else {
        std::cout << ""Invalid flag value."" << std::endl;
    }
}

int main() {
    std::string data = ""HelloWorld"";
    int mode = 1;
    processData(data, mode);
    return 0;
}",code_smell,duplicate_code,,qwen/qwen3-32b
JavaScript,"class PaymentProcessor { constructor() { this.payments = []; } processPayment(amount, callback) { let paymentId = this.payments.length; this.payments.push({ amount, status: 'pending' }); setTimeout(() => { this.payments[paymentId].status = 'processed'; callback(); }, 1000); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user data and writes a log file
  async getUserProfile(userId) {
    const user = await this.db.query('SELECT * FROM users WHERE id = ' + userId);
    // Missing error handling if user not found
    const profile = {
      id: user.id,
      name: user.name,
      email: user.email,
      // Assume address is a JSON string stored in DB
      address: JSON.parse(user.address) // unsafe parsing, can throw
    };
    // Asynchronously write log but do not await, causing unhandled promise rejection
    fs.promises.writeFile(`/var/log/user_${userId}.log`, JSON.stringify(profile))
      .catch(err => console.error('Log write failed', err));
    return profile;
  }
}

module.exports = UserService;",code_defect,unsafe_sql_concatenation_and_unhandled_async,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class DataProcessor {
public:
    void process(const vector<string>& input, vector<string>& output) {
        for (const auto& str : input) {
            if (str.length() > 5) {
                string trimmed = str.substr(0, 5);
                output.push_back(trimmed);
            } else {
                output.push_back(str);
            }
        }
    }
};

int main() {
    vector<string> data = {""apple"", ""banana"", ""grape"", ""kiwi""};
    vector<string> result;

    DataProcessor processor;
    processor.process(data, result);

    for (const auto& str : result) {
        cout << str << endl;
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserManager { private static final String DEFAULT_PASSWORD = ""password123""; public void createUser(String username) { System.out.println(""Creating user: "" + username); String password = DEFAULT_PASSWORD; // Create user with default password } public boolean authenticateUser(String username, String password) { return password.equals(DEFAULT_PASSWORD); } }",code_defect,insecure_default_password,,llama-3.3-70b-versatile
Python,"import json, os, logging

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # Insecurely deserialize JSON content directly
        with open(self.config_path, 'r') as f:
            data = f.read()
        self.settings = json.loads(data)  # Potential code execution if malicious JSON is provided

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.db_conn_str = config_loader.get('db_connection')
        self.batch_size = config_loader.get('batch_size', 100)
        self.logger = logging.getLogger('DataProcessor')
        self._connect()

    def _connect(self):
        # Simulated DB connection using os.system (unsafe)
        os.system(f""echo Connecting to DB with {self.db_conn_str}"")

    def process(self, records):
        for i in range(0, len(records), self.batch_size):
            batch = records[i:i+self.batch_size]
            self._process_batch(batch)

    def _process_batch(self, batch):
        for record in batch:
            # Missing validation leads to possible KeyError
            value = record['value'] * 2
            self.logger.info(f""Processed value: {value}"")

# Usage example (would be in production code)
loader = ConfigLoader('/etc/app/config.json')
processor = DataProcessor(loader)
processor.process([{'value': i} for i in range(1000)])
",code_defect,insecure_deserialization_and_command_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void processData(const std::vector<int>& data) {
    int sum = 0;
    for (int val : data) {
        sum += val;
    }

    std::lock_guard<std::mutex> lock(mtx);
    static int total = 0;
    total += sum;

    std::cout << ""Thread "" << std::this_thread::get_id() << "" sum: "" << sum << std::endl;
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};

    std::thread t1(processData, data);
    std::thread t2(processData, data);

    t1.join();
    t2.join();

    std::cout << ""Total sum: "" << total << std::endl;
    return 0;
}",code_defect,data_race,,qwen/qwen3-32b
JavaScript,"
      class PaymentProcessor {
         constructor(paymentGateway) {
            this.paymentGateway = paymentGateway;
         }

         processPayment(amount, currency) {
            if (currency !== 'USD') {
               const exchangeRate = this.getExchangeRate(currency);
               amount = amount * exchangeRate;
            }
            this.paymentGateway.chargeCard(amount);
         }

         getExchangeRate(currency) {
            const exchangeRates = {
               'EUR': 1.12,
               'GBP': 1.32,
               'JPY': 0.0091
            };
            return exchangeRates[currency];
         }
      }

      class PaymentGateway {
         chargeCard(amount) {
            // Simulate a payment gateway call
            console.log(`Charging card with amount: $${amount}`);
         }
      }

      const paymentGateway = new PaymentGateway();
      const paymentProcessor = new PaymentProcessor(paymentGateway);
      paymentProcessor.processPayment(100, 'EUR');
   ",code_smell,magic_number,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails() {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users""; // no pagination, may return huge result set
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallowing exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void deleteUserById(int userId) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // SQL injection vulnerability: userId concatenated directly
            String sql = ""DELETE FROM users WHERE id = "" + userId;
            stmt.executeUpdate(sql);
        } catch (Exception e) {
            // Ignored
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 0) {
            std::cout << data[i] << "" is even\n"";
        } else {
            std::cout << data[i] << "" is odd\n"";
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5, 6};
    processData(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

private:
    std::string name;
    int salary;
};

class Company {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    int getTotalSalary() {
        int total = 0;
        for (const auto& employee : employees) {
            total += employee.getSalary();
        }
        return total;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));
    std::cout << ""Total salary: "" << company.getTotalSalary() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');
class LogProcessor {
  constructor(logPath) {
    this.logPath = logPath;
    this.buffer = [];
  }
  async load() {
    const data = await fs.promises.readFile(this.logPath, 'utf8');
    this.buffer = data.split('\n');
  }
  // Returns the most recent N log entries
  getRecent(count) {
    // Off‑by‑one error: should be this.buffer.slice(-count)
    return this.buffer.slice(this.buffer.length - count - 1, this.buffer.length - 1);
  }
  async append(entry) {
    this.buffer.push(entry);
    // Writes entire buffer each time, may lose data on concurrent calls
    await fs.promises.writeFile(this.logPath, this.buffer.join('\n'));
  }
}
module.exports = LogProcessor;",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users) {
    this.users = users;
  }

  authenticate(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username && this.users[i].password === password) {
        return true;
      }
    }
    return false;
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  getAllUsers() {
    return this.users;
  }
}

const usersData = [
  { username: 'admin', password: '123456', email: 'admin@example.com' },
  { username: 'user', password: 'password', email: 'user@example.com' }
];

const auth = new UserAuth(usersData);
console.log(auth.authenticate('admin', '123456'));
console.log(auth.getUserByEmail('user@example.com'));
console.log(auth.getAllUsers());",code_smell,large_class,,qwen/qwen3-32b
Java,"public class UserManager { private static final int MAX_USERS = 100; private User[] users; private int userCount; public UserManager() { users = new User[MAX_USERS]; userCount = 0; } public void addUser(User user) { if (userCount < MAX_USERS) { users[userCount] = user; userCount++; } } public User getUser(int index) { if (index >= 0 && index < userCount) { return users[index]; } return null; } public static void main(String[] args) { UserManager manager = new UserManager(); manager.addUser(new User(""John"")); manager.addUser(new User(""Jane"")); System.out.println(manager.getUser(0).getName()); } } class User { private String name; public User(String name) { this.name = name; } public String getName() { return name; }}",code_smell,magic_number,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self._config = None
        self._lock = threading.Lock()
        self._load()

    def _load(self):
        # Loads configuration from a JSON file without any validation
        with open(self.path, 'r') as f:
            data = f.read()
        # Unsafe deserialization: using eval on file content
        self._config = eval(data)  # BUG: can execute arbitrary code

    def get(self, key, default=None):
        with self._lock:
            return self._config.get(key, default)

    def reload(self):
        # Race condition: reload may be called concurrently without proper sync
        self._load()

# Usage example (in production this would be called by multiple threads)
loader = ConfigLoader(os.getenv('APP_CONFIG_PATH', '/etc/app/config.json'))
api_key = loader.get('api_key')
",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Python,"import requests
import time

API_KEY = '1234567890abcdef'


def fetch_weather(city):
    url = f'https://api.weather.com/v1.0/forecast?city={city}&key={API_KEY}'
    response = requests.get(url)
    
    if response.status_code == 200:
        return response.json()
    else:
        return None


def main():
    cities = ['New York', 'London', 'Tokyo', 'Paris', 'Berlin']
    
    for city in cities:
        print(f'Fetching weather for {city}...')
        weather_data = fetch_weather(city)
        
        if weather_data:
            print(f'Weather in {city}: {weather_data.get(""description"")}')
        else:
            print(f'Failed to fetch weather for {city}')

        # Wait to avoid hitting API rate limits
        time.sleep(0.5)

if __name__ == '__main__':
    main()",code_defect,hardcoded_secrets,,qwen/qwen3-32b
JavaScript,"
   class UserService {
     constructor(userDao) {
       this.userDao = userDao;
     }

     async getUser(id) {
       const user = await this.userDao.findById(id);
       if (!user) {
         return null;
       }
       const roles = await this.userDao.findRolesByUserId(id);
       user.roles = roles;
       return user;
     }

     async getUsers() {
       const users = await this.userDao.findAll();
       for (let i = 0; i < users.length; i++) {
         const roles = await this.userDao.findRolesByUserId(users[i].id);
         users[i].roles = roles;
       }
       return users;
     }
   }

   class UserDao {
     async findById(id) {
       // simulate a database query
       return { id: id, name: 'John Doe' };
     }

     async findRolesByUserId(id) {
       // simulate a database query
       return ['admin', 'user'];
     }

     async findAll() {
       // simulate a database query
       return [{ id: 1, name: 'John Doe' }, { id: 2, name: 'Jane Doe' }];
     }
   }

   const userDao = new UserDao();
   const userService = new UserService(userDao);
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserCache {
    constructor(filePath) {
        this.filePath = filePath;
        this.cache = {};
        this._load();
    }

    _load() {
        // Synchronously read the cache file on startup
        const data = fs.readFileSync(this.filePath, 'utf8');
        this.cache = JSON.parse(data);
    }

    getUser(id) {
        // Return cached user or fetch from DB (simulated)
        if (this.cache[id]) {
            return this.cache[id];
        }
        const user = this._fetchFromDb(id);
        this.cache[id] = user;
        this._save();
        return user;
    }

    _fetchFromDb(id) {
        // Simulated DB call
        return { id, name: 'User' + id };
    }

    _save() {
        // Asynchronously write cache to disk, but do not wait for completion
        fs.writeFile(this.filePath, JSON.stringify(this.cache), (err) => {
            if (err) console.error('Failed to write cache');
        });
    }
}

// Usage example
const cache = new UserCache('./userCache.json');
cache.getUser(42);
",code_defect,race_condition_due_to_async_write,,openai/gpt-oss-120b
Python,"import os
import time

class DataProcessor:
    def __init__(self, file_path):
        self.file_path = file_path
        self.data = None

    def load_data(self):
        if not os.path.exists(self.file_path):
            print(""File not found!"")
            return
        
        with open(self.file_path, 'r') as f:
            self.data = f.readlines()

    def process_data(self):
        if self.data is None:
            print(""No data loaded."")
            return
        
        results = []
        for line in self.data:
            stripped = line.strip()
            if stripped:
                parts = stripped.split(',')
                if len(parts) == 3:
                    try:
                        x = int(parts[0])
                        y = int(parts[1])
                        z = x + y
                        results.append((x, y, z))
                    except ValueError:
                        print(f""Invalid line: {line}"")
        
        return results

    def save_results(self, output_path):
        results = self.process_data()
        with open(output_path, 'w') as f:
            for r in results:
                f.write(f""{r[0]}, {r[1]}, {r[2]}\n"")",code_smell,long_method,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data
    
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data
    
    def create_user(self, user_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""INSERT INTO users (name, email) VALUES (%s, %s) RETURNING *"", (user_data['name'], user_data['email']))
        new_user_data = cursor.fetchone()
        self.db_connection.commit()
        return new_user_data",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Fetch user profile and write to a log file
  async getUserProfile(userId) {
    const query = `SELECT * FROM users WHERE id = ${userId}`; // SQL injection risk
    const result = await this.db.query(query);
    const user = result[0];
    // Write sensitive info to log without sanitization
    fs.appendFileSync('user.log', JSON.stringify(user));
    return user;
  }

  // Update user email without proper validation
  async updateEmail(userId, newEmail) {
    const updateQuery = `UPDATE users SET email = '${newEmail}' WHERE id = ${userId}`;
    await this.db.query(updateQuery);
    // Missing error handling, assumes success
  }
}

module.exports = UserService;",code_defect,SQL_injection_and_insecure_logging,,openai/gpt-oss-120b
Python,"import os
import json
import requests

API_URL = 'https://api.example.com/data'


def fetch_data():
    response = requests.get(API_URL)
    if response.status_code == 200:
        return response.json()
    else:
        return None

def process_data(data):
    results = []
    for item in data:
        cleaned = {
            'id': item.get('id'),
            'name': item.get('name'),
            'value': item.get('value')
        }
        results.append(cleaned)
    return results

def save_results(data):
    filename = 'output_{}.json'.format(os.urandom(4).hex())
    with open(filename, 'w') as f:
        json.dump(data, f)


def main():
    raw_data = fetch_data()
    if raw_data:
        processed = process_data(raw_data)
        save_results(processed)
    else:
        print('Failed to fetch data.')

if __name__ == '__main__':
    main()
",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

    void setSalary(int newSalary) { salary = newSalary; }

private:
    std::string name;
    int salary;
};

class EmployeeDatabase {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }

    Employee getEmployee(std::string name) {
        for (auto& emp : employees) {
            if (emp.getName() == name) {
                return emp;
            }
        }
        // Return a default employee if not found
        return Employee(""Unknown"", 0);
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeDatabase db;
    db.addEmployee(Employee(""John"", 50000));
    db.addEmployee(Employee(""Jane"", 60000));

    Employee emp = db.getEmployee(""John"");
    std::cout << ""Employee Name: "" << emp.getName() << std::endl;
    std::cout << ""Employee Salary: "" << emp.getSalary() << std::endl;

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String domainFilter) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String query = ""SELECT email FROM users WHERE email LIKE '%"" + domainFilter + ""'""; // SQL injection risk
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,sql_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Python,"import os
import sqlite3

def fetch_user_data(username):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = ""SELECT * FROM users WHERE username = '{username}'"".format(username=username)
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result

if __name__ == ""__main__"":
    user = input(""Enter username: "")
    user_data = fetch_user_data(user)
    if user_data:
        print(""User data: "", user_data)
    else:
        print(""User not found."")",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
     constructor(paymentGateway) {
       this.paymentGateway = paymentGateway;
     }

     processPayment(order) {
       const paymentMethod = order.paymentMethod;
       if (paymentMethod === 'credit_card') {
         this.chargeCreditCard(order);
       } else if (paymentMethod === 'paypal') {
         this.chargePayPal(order);
       }
       // TODO: add more payment methods in the future
     }

     chargeCreditCard(order) {
       this.paymentGateway.chargeCreditCard(order);
     }

     chargePayPal(order) {
       this.paymentGateway.chargePayPal(order);
     }
   }

   class PaymentGateway {
     chargeCreditCard(order) {
       console.log('Charging credit card...');
     }

     chargePayPal(order) {
       console.log('Charging PayPal...');
     }
   }

   const paymentGateway = new PaymentGateway();
   const paymentProcessor = new PaymentProcessor(paymentGateway);
   const order = { paymentMethod: 'credit_card' };
   paymentProcessor.processPayment(order);
   ",code_smell,god_class,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL,
            data TEXT NOT NULL
        )''')
        self.conn.commit()

    def load_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            # Unsafe deserialization of user data
            return json.loads(row[0])
        return None

    def save_user(self, username, user_data):
        cursor = self.conn.cursor()
        # Directly serialize user data without validation
        serialized = json.dumps(user_data)
        cursor.execute('INSERT INTO users (username, data) VALUES (?, ?)', (username, serialized))
        self.conn.commit()

    def delete_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage
if __name__ == '__main__':
    manager = UserManager('users.db')
    manager.save_user('alice', {'role': 'admin', 'prefs': {'theme': 'dark'}})
    # The following line will raise an exception if the stored JSON is malformed
    user = manager.load_user('alice')
    print('Loaded user:', user)
    manager.delete_user('alice')",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Python,"import os
import time

def process_data(data):
    results = []
    for item in data:
        temp = item.strip()
        if temp:
            processed = temp.upper()
            results.append(processed)
    return results


def main():
    file_path = 'data.txt'
    if not os.path.exists(file_path):
        print(f'File {file_path} not found.')
        return

    with open(file_path, 'r') as file:
        data = file.readlines()

    processed = process_data(data)

    print('Processing complete.')
    time.sleep(5)  # Simulating additional processing
    print('Saving results...')

    with open('output.txt', 'w') as output_file:
        for line in processed:
            output_file.write(line + '\n')

    print('Results saved.')

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
       constructor(merchantId, apiKey) {
           this.merchantId = merchantId;
           this.apiKey = apiKey;
           this.cache = {};
       }

       async processPayment(amount, currency) {
           const cachedResult = this.cache[amount + '_' + currency];
           if (cachedResult) {
               return cachedResult;
           }

           const response = await fetch('https://example.com/payment', {
               method: 'POST',
               headers: {
                   'Content-Type': 'application/json',
                   'Authorization': 'Bearer ' + this.apiKey
               },
               body: JSON.stringify({
                   amount: amount,
                   currency: currency,
                   merchantId: this.merchantId
               })
           });

           const result = await response.json();
           this.cache[amount + '_' + currency] = result;
           return result;
       }
   }

   const processor = new PaymentProcessor('12345', 'abcdefg');
   processor.processPayment(10.99, 'USD').then(result => console.log(result));
   ",code_smell,unused_cache_invalidation,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        if (this.cache) return this.cache;
        const data = fs.readFileSync(this.path, 'utf8');
        // NOTE: JSON.parse can throw, but we ignore errors here
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function processUserInput(input) {
    // Vulnerable to prototype pollution
    const config = new ConfigLoader('./config.json');
    const settings = config.load();
    const merged = Object.assign({}, settings.defaults, input);
    if (merged.enableFeature) {
        // Do something critical
        console.log('Feature enabled');
    }
    return merged;
}

module.exports = { processUserInput };",code_defect,prototype_pollution_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null || order.getItems() == null) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() > 0 && item.getPrice() > 0) {
                calculateTotal(order);
                applyDiscount(order);
                if (order.getTotal() > 1000) {
                    applyLoyaltyBonus(order);
                }
                sendOrderToWarehouse(order);
                break;
            }
        }
    }

    private void calculateTotal(Order order) {
        double total = 0;
        for (OrderItem item : order.getItems()) {
            total += item.getQuantity() * item.getPrice();
        }
        order.setTotal(total);
    }

    private void applyDiscount(Order order) {
        if (order.getTotal() > 500) {
            order.setTotal(order.getTotal() * 0.9);
        }
    }

    private void applyLoyaltyBonus(Order order) {
        order.setTotal(order.getTotal() * 1.05);
    }

    private void sendOrderToWarehouse(Order order) {
        // Dummy implementation
    }
}",code_smell,inappropriate_intimacy,,qwen/qwen3-32b
Python,"
class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email

    def authenticate(self, input_password):
        if self.password == input_password:
            return True
        else:
            return False

    def update_password(self, new_password):
        self.password = new_password

class AuthenticationSystem:
    def __init__(self):
        self.accounts = {}

    def create_account(self, username, password, email):
        if username in self.accounts:
            return False
        else:
            self.accounts[username] = UserAccount(username, password, email)
            return True

    def authenticate_user(self, username, password):
        if username in self.accounts:
            return self.accounts[username].authenticate(password)
        else:
            return False

auth_system = AuthenticationSystem()
auth_system.create_account('user1', 'password123', 'user1@example.com')
print(auth_system.authenticate_user('user1', 'password123'))",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    // Returns the index of the user, or -1 if not found
    int findUser(const std::string& name) const {
        for (size_t i = 0; i <= users.size(); ++i) { // BUG: off‑by‑one, may read past end
            if (users[i] == name) {
                return static_cast<int>(i);
            }
        }
        return -1;
    }

    std::string getUserAt(int index) const {
        if (index < 0 || static_cast<size_t>(index) >= users.size()) {
            return """";
        }
        return users[index];
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    int idx = um.findUser(""bob"");
    std::cout << ""Found bob at index: "" << idx << ""\n"";
    std::cout << ""User at idx: "" << um.getUserAt(idx) << ""\n"";
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserHandler {
  constructor() {
    this.users = [];
    this.cache = {};
  }

  getUser(id) {
    if (this.cache[id]) {
      console.log('Cache hit');
      return this.cache[id];
    }

    const user = this.users.find(u => u.id === id);
    if (!user) {
      return null;
    }

    this.cache[id] = user;
    console.log('Cache miss');
    return user;
  }

  addUser(user) {
    this.users.push(user);
    this.cache = {};
  }

  updateUser(id, updatedFields) {
    const index = this.users.findIndex(u => u.id === id);
    if (index === -1) {
      return false;
    }

    this.users[index] = { ...this.users[index], ...updatedFields };
    this.cache = {};
    return true;
  }
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def get_all_users(self):
        query = ""SELECT * FROM users""
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        users_data = cursor.fetchall()
        return users_data

    def create_user(self, user_name, email):
        query = ""INSERT INTO users (name, email) VALUES ('"" + user_name + ""', '"" + email + ""')""
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()

# example usage
import mysql.connector
db_connection = mysql.connector.connect(host='localhost', database='mydb', user='myuser', password='mypassword')
user_service = UserService(db_connection)
user_service.create_user('John Doe', 'johndoe@example.com')
",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    // Synchronous file read without error handling
    const data = fs.readFileSync(this.path, 'utf8');
    // Assume JSON format
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function processUserInput(input) {
  // Directly use user input in a shell command (security defect)
  const exec = require('child_process').exec;
  exec(`ls ${input}`, (err, stdout, stderr) => {
    if (err) {
      console.error('Command failed');
      return;
    }
    console.log('Files:', stdout);
  });
}

function main() {
  const config = new ConfigLoader('./config.json').load();
  const userPath = process.argv[2] || '.';
  processUserInput(userPath);
}

main();",code_defect,command_injection,,openai/gpt-oss-120b
Python,"import requests
import json
import os

API_KEY = '1234567890abcdef'  # Hardcoded secret

def get_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    headers = {'Authorization': f'Bearer {API_KEY}'}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        return None

def update_user_profile(user_id, data):
    url = f'https://api.example.com/users/{user_id}'
    headers = {'Authorization': f'Bearer {API_KEY}'}
    response = requests.patch(url, headers=headers, json=data)
    return response.status_code

# Example usage
if __name__ == '__main__':
    user_data = get_user_data(1)
    if user_data:
        user_data['email'] = 'newemail@example.com'
        update_user_profile(1, user_data)",code_defect,hardcoded_secret,,qwen/qwen3-32b
JavaScript,"
      class PaymentProcessor {
         constructor(merchantId, apiKey) {
            this.merchantId = merchantId;
            this.apiKey = apiKey;
            this.cache = {};
         }

         processPayment(amount, callback) {
            const cacheKey = amount + this.merchantId;
            if (this.cache[cacheKey]) {
               callback(null, this.cache[cacheKey]);
            } else {
               const url = 'https://api.example.com/charge';
               const headers = {
                  'Authorization': 'Bearer ' + this.apiKey,
                  'Content-Type': 'application/json'
               };
               const data = {
                  amount: amount,
                  merchantId: this.merchantId
               };

               fetch(url, { method: 'POST', headers: headers, body: JSON.stringify(data) })
                  .then(response => response.json())
                  .then(data => {
                     this.cache[cacheKey] = data;
                     callback(null, data);
                  })
                  .catch(error => {
                     this.cache[cacheKey] = { error: 'Failed to process payment' };
                     callback(error, null);
                  });
            }
         }
      }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<Transaction> getPendingTransactions() throws SQLException {
        List<Transaction> pending = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction tx = new Transaction();
            tx.setId(rs.getInt(""id""));
            tx.setAmount(rs.getDouble(""amount""));
            tx.setStatus(rs.getString(""status""));
            pending.add(tx);
        }
        // Missing close of ResultSet, Statement, and Connection leads to resource leak
        return pending;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = getPendingTransactions();
            for (Transaction tx : pending) {
                // Simulate processing
                if (tx.getAmount() < 0) {
                    // Negative amount should be rejected, but logic proceeds
                    markAsFailed(tx);
                }
                // Update status without transaction management – possible race condition
                updateTransactionStatus(tx.getId(), ""COMPLETED"");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateTransactionStatus(int id, String newStatus) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""UPDATE transactions SET status='"" + newStatus + ""' WHERE id="" + id; // SQL injection risk
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.executeUpdate();
            // Resources not closed
        } catch (SQLException e) {
            // Swallow exception, no handling
        }
    }

    private void markAsFailed(Transaction tx) {
        // Placeholder for failure handling
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processUserInput(std::vector<int>& input, int threshold) {
    for (size_t i = 0; i < input.size(); ++i) {
        if (input[i] < threshold) {
            input[i] = threshold;
        }
    }

    for (int i = 0; i < input.size(); ++i) {
        std::cout << input[i] << "" "";
    }
    std::cout << std::endl;
}

int main() {
    std::vector<int> data = {5, 10, 15, 20};
    int min_value = 12;
    processUserInput(data, min_value);
    return 0;
}",code_smell,inefficient_looping,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data

    def create_user(self, name, email):
        cursor = self.db_connection.cursor()
        cursor.execute(""INSERT INTO users (name, email) VALUES (%s, %s)"", (name, email))
        self.db_connection.commit()

    def update_user(self, user_id, name, email):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (name, email, user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
   ",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
    constructor(db) {
        this.db = db; // expects a database client with query method
    }

    // Process an order and update inventory
    async process(orderId) {
        // Fetch order details
        const order = await this.db.query('SELECT * FROM orders WHERE id = ' + orderId);
        if (!order) throw new Error('Order not found');

        // Update inventory for each item
        for (let i = 0; i < order.items.length; i++) {
            const item = order.items[i];
            // Decrement stock without checking for negative values
            await this.db.query('UPDATE inventory SET stock = stock - ' + item.quantity + ' WHERE product_id = ' + item.productId);
        }

        // Mark order as processed
        await this.db.query('UPDATE orders SET status = ""processed"" WHERE id = ' + orderId);
    }
}

module.exports = OrderProcessor;",code_defect,SQL_injection_and_missing_stock_check,,openai/gpt-oss-120b
Python,"import os
import json

def load_config(config_path):
    with open(config_path, 'r') as f:
        config = json.load(f)
    
    db_config = {
        'host': config.get('database', {}).get('host', 'localhost'),
        'port': config.get('database', {}).get('port', 5432),
        'user': os.getenv('DB_USER', config.get('database', {}).get('user', 'default_user')),
        'password': os.getenv('DB_PASSWORD', config.get('database', {}).get('password', 'default_pass')),
    }
    
    return db_config


def connect_to_database():
    config = load_config('config.json')
    
    import psycopg2
    conn = psycopg2.connect(
        host=config['host'],
        port=config['port'],
        user=config['user'],
        password=config['password'],
        database='mydb'
    )
    
    return conn

connect_to_database()",code_defect,missing_error_handling,,qwen/qwen3-32b
Java,"public class UserAccountManager { private Map<String, String> userAccounts = new HashMap<>(); public void addUser(String username, String password) { userAccounts.put(username, password); } public boolean isValidUser(String username, String password) { return userAccounts.containsKey(username) && userAccounts.get(username).equals(password); } public void changePassword(String username, String newPassword) { if (userAccounts.containsKey(username)) { userAccounts.put(username, newPassword); } } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        # NOTE: using eval on file content – insecure!
        with open(self.path, 'r') as f:
            data = f.read()
            self.config = eval(data)  # potential code execution vulnerability

    def get(self, key, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, config_path):
        self.cfg = ConfigLoader(config_path)
        self.batch_size = self.cfg.get('batch_size', 100)
        self.output_dir = self.cfg.get('output_dir', '/tmp')
        if not os.path.isdir(self.output_dir):
            os.makedirs(self.output_dir)
        self.logger = logging.getLogger('DataProcessor')

    def process(self, data_items):
        results = []
        for i in range(0, len(data_items), self.batch_size):
            batch = data_items[i:i+self.batch_size]
            processed = self._process_batch(batch)
            results.extend(processed)
        self._save_results(results)
        return results

    def _process_batch(self, batch):
        # Simulate processing
        return [item * 2 for item in batch]

    def _save_results(self, results):
        out_path = os.path.join(self.output_dir, 'results.json')
        with open(out_path, 'w') as f:
            json.dump(results, f)
        self.logger.info('Results saved to %s', out_path)

# Example usage
if __name__ == '__main__':
    processor = DataProcessor('config.cfg')
    data = list(range(1000))
    processor.process(data)",code_defect,insecure_deserialization_using_eval,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    public void processUser(String userId, String userRole, boolean isActive) {
        if (userId == null || userId.isEmpty()) {
            userId = ""default_user"";
        }

        String finalRole = userRole;
        if (userRole == null || userRole.isEmpty()) {
            finalRole = ""guest"";
        }

        if (!isActive) {
            System.out.println(""User "" + userId + "" is not active. Skipping processing..."");
            return;
        }

        String sanitizedId = userId.trim().toLowerCase();
        String sanitizedRole = finalRole.trim().toLowerCase();

        if (sanitizedRole.equals(""admin"")) {
            System.out.println(""Granting admin access to "" + sanitizedId);
        } else if (sanitizedRole.equals(""moderator"")) {
            System.out.println(""Granting moderator access to "" + sanitizedId);
        } else {
            System.out.println(""Granting user access to "" + sanitizedId);
        }

        // TODO: Add logging
    }
}",code_smell,long_function,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

    void setSalary(int newSalary) {
        if (newSalary > salary) {
            salary = newSalary;
        }
    }

private:
    std::string name;
    int salary;
};

void processEmployees(std::vector<Employee>& employees) {
    for (auto& employee : employees) {
        if (employee.getSalary() < 50000) {
            employee.setSalary(50000);
        }
    }
}

int main() {
    std::vector<Employee> employees = {Employee(""John"", 40000), Employee(""Alice"", 60000), Employee(""Bob"", 30000)};
    processEmployees(employees);

    for (const auto& employee : employees) {
        std::cout << employee.getName() << ""'s salary is: "" << employee.getSalary() << std::endl;
    }

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY,
                            username TEXT NOT NULL,
                            data TEXT)''')
        self.conn.commit()

    def add_user(self, username, data):
        cursor = self.conn.cursor()
        # Directly interpolating user input into SQL – insecure
        cursor.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')"")
        self.conn.commit()

    def get_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT username, data FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            username, data_json = row
            # Unsafe deserialization – may execute malicious code if data_json is crafted
            return json.loads(data_json)
        return None

    def close(self):
        self.conn.close()

# Usage example (for illustration only)
if __name__ == '__main__':
    manager = UserManager('users.db')
    manager.add_user('alice', {'role': 'admin', 'prefs': {'theme': 'dark'}})
    user_data = manager.get_user(1)
    print('Loaded user data:', user_data)
    manager.close()",code_defect,SQL_injection_and_unsafe_deserialization,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrder(order) {
    if (!order || !order.items || !order.customer) {
      throw new Error('Invalid order data');
    }

    for (let i = 0; i < order.items.length; i++) {
      const item = order.items[i];
      if (!item || !item.productId || item.quantity <= 0) {
        throw new Error(`Invalid item at index ${i}`);
      }

      // Simulate item processing
      this.calculateItemPrice(item);
      this.applyDiscounts(item);
      this.logItemDetails(item);
    }

    // Simulate order completion
    console.log(`Order processed successfully for customer ${order.customer.name}`);
  }

  calculateItemPrice(item) {
    item.totalPrice = item.quantity * item.unitPrice;
  }

  applyDiscounts(item) {
    if (item.quantity >= 10) {
      item.totalPrice *= 0.9;
    }
  }

  logItemDetails(item) {
    console.log(`Processed item: ${item.productId}, Quantity: ${item.quantity}, Total: $${item.totalPrice.toFixed(2)}`);
  }
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class PaymentProcessor:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def process_payment(self, payment_amount, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT balance FROM users WHERE id = %s', (user_id,))
        user_balance = cursor.fetchone()[0]
        if user_balance >= payment_amount:
            new_balance = user_balance - payment_amount
            cursor.execute('UPDATE users SET balance = %s WHERE id = %s', (new_balance, user_id))
            self.db_connection.commit()
            return True
        else:
            return False",code_defect,inconsistent_error_handling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user profile and writes a log file
  async getUserProfile(userId) {
    // Missing validation: userId could be undefined or malicious
    const query = `SELECT * FROM users WHERE id = ${userId}`; // SQL injection risk
    const user = await this.db.query(query);
    if (!user) {
      throw new Error('User not found');
    }
    // Asynchronously write log but forget to await, causing unhandled promise
    fs.promises.appendFile('access.log', `${new Date().toISOString()} - User ${userId} accessed\n`).catch(()=>{});
    return user;
  }

  // Updates user email without proper sanitization
  async updateEmail(userId, newEmail) {
    const updateQuery = `UPDATE users SET email = '${newEmail}' WHERE id = ${userId}`; // SQL injection
    await this.db.query(updateQuery);
    // Returns undefined instead of the updated user object
  }
}

module.exports = UserService;",code_defect,sql_injection_and_unhandled_promise,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  let result = '';
  if (input.length > 0) {
    for (let i = 0; i < input.length; i++) {
      result += input[i].toUpperCase();
    }
  }
  return result;
}

function validateInput(input) {
  if (typeof input === 'string') {
    return true;
  } else {
    console.log('Invalid input type');
    return false;
  }
}

function main(input) {
  if (validateInput(input)) {
    const processed = processUserInput(input);
    console.log(`Processed result: ${processed}`);
  }
}

main('hello world');",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

class Person {
public:
    Person(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class PersonDatabase {
public:
    void addPerson(Person person) { people.push_back(person); }
    Person getOldestPerson() {
        if (people.empty()) {
            return Person("""", -1);
        }
        return *std::max_element(people.begin(), people.end(), [](const Person& a, const Person& b) {
            return a.getAge() < b.getAge();
        });
    }
private:
    std::vector<Person> people;
};

int main() {
    PersonDatabase db;
    db.addPerson(Person(""John"", 30));
    db.addPerson(Person(""Alice"", 25));
    Person oldest = db.getOldestPerson();
    std::cout << ""Oldest person: "" << oldest.getName() << std::endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._cache = {}
        self._lock = threading.Lock()

    def load(self, key):
        # Missing error handling if file does not exist
        with self._lock:
            if key in self._cache:
                return self._cache[key]
            with open(self.config_path, 'r') as f:
                data = json.load(f)
                # Assume the config is a dict of dicts
                value = data.get(key, {})
                self._cache[key] = value
                return value

    def reload_all(self):
        # Race condition: other threads may be reading from cache while it's cleared
        with self._lock:
            self._cache.clear()
            # Re-read the entire file
            with open(self.config_path, 'r') as f:
                data = json.load(f)
                self._cache.update(data)

# Usage example (not part of production code)
loader = ConfigLoader('/etc/app/config.json')
config = loader.load('database')
print(config.get('host', 'localhost'))
",code_defect,race_condition,,openai/gpt-oss-120b
Python,"import random

class DataProcessor:
    def __init__(self, source):
        self.source = source
        self._cache = []

    def process(self):
        raw = self._load_data()
        cleaned = self._clean(raw)
        results = []
        for item in cleaned:
            if random.random() < 0.5:
                results.append(item.upper())
            else:
                results.append(item.lower())
        return results

    def _load_data(self):
        # Simulate loading data from a source
        return self.source

    def _clean(self, data):
        return [item.strip() for item in data if item.strip()]

    def clear_cache(self):
        self._cache = []

    def _redundant_method(self):
        pass

    def _another_redundant_method(self):
        pass

    def process_and_cache(self):
        processed = self.process()
        self._cache = processed
        return self._cache

    def get_cached_results(self):
        if not self._cache:
            self.process_and_cache()
        return self._cache",code_smell,long_class,,qwen/qwen3-32b
JavaScript,"
   class UserDatabase {
      constructor() {
         this.users = [];
      }

      addUser(user) {
         this.users.push(user);
      }

      getUserById(id) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].id === id) {
               return this.users[i];
            }
         }
         return null;
      }

      removeUserById(id) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].id === id) {
               this.users.splice(i, 1);
               break;
            }
         }
      }
   }

   let db = new UserDatabase();
   db.addUser({ id: 1, name: 'John Doe' });
   db.addUser({ id: 2, name: 'Jane Doe' });
   console.log(db.getUserById(1));
   db.removeUserById(1);
   console.log(db.getUserById(1));
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<Transaction> fetchPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction t = new Transaction();
            t.setId(rs.getInt(""id""));
            t.setAmount(rs.getDouble(""amount""));
            t.setStatus(rs.getString(""status""));
            list.add(t);
        }
        // Missing rs.close(), stmt.close(), conn.close() -> resource leak
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = fetchPendingTransactions();
            for (Transaction t : pending) {
                // Simulate processing
                if (t.getAmount() < 0) {
                    // Incorrect logic: negative amounts should be rejected, but code proceeds
                    t.setStatus(""FAILED"");
                }
                updateTransactionStatus(t);
            }
        } catch (SQLException e) {
            // Swallow exception, no logging
        }
    }

    private void updateTransactionStatus(Transaction t) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""UPDATE transactions SET status=? WHERE id=?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, t.getStatus());
            stmt.setInt(2, t.getId());
            stmt.executeUpdate();
            // Missing stmt.close(), conn.close()
        } catch (SQLException e) {
            // Ignored
        }
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_logic_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor(database) {
    this.db = database;
  }

  processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      if (order.status === 'PENDING') {
        this.db.updateOrderStatus(order.id, 'PROCESSING');
        this.applyDiscount(order);
        this.db.updateOrderStatus(order.id, 'COMPLETED');
      }
    }
  }

  applyDiscount(order) {
    if (order.total > 100) {
      order.total -= 10;
    } else if (order.total > 50) {
      order.total -= 5;
    }
    this.db.updateOrderTotal(order.id, order.total);
  }
}

const db = {
  updateOrderStatus: (id, status) => console.log(`Order ${id} status updated to ${status}`),
  updateOrderTotal: (id, total) => console.log(`Order ${id} total updated to $${total}`)
};

const orders = [
  { id: 1, status: 'PENDING', total: 120 },
  { id: 2, status: 'SHIPPED', total: 80 },
  { id: 3, status: 'PENDING', total: 60 }
];

const processor = new OrderProcessor(db);
processor.processOrders(orders);",code_defect,race_condition,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        if user_data:
            return {'id': user_data[0], 'name': user_data[1], 'email': user_data[2]}
        else:
            return None
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        users = []
        for user_data in users_data:
            users.append({'id': user_data[0], 'name': user_data[1], 'email': user_data[2]})
        return users",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""P@ssw0rd!""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            conn.setAutoCommit(false);
            // Debit account
            if (!updateBalance(conn, accountId, -amount)) {
                conn.rollback();
                return false;
            }
            // Credit merchant account (hardcoded ID)
            if (!updateBalance(conn, ""MERCHANT123"", amount)) {
                conn.rollback();
                return false;
            }
            conn.commit();
            return true;
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ex) {}
            return false;
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException e) {}
        }
    }

    private boolean updateBalance(Connection conn, String acctId, double delta) throws SQLException {
        // Potential SQL injection if acctId is not validated
        String sql = ""UPDATE accounts SET balance = balance + ? WHERE account_id = '"" + acctId + ""'"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setDouble(1, delta);
            int rows = stmt.executeUpdate();
            return rows == 1;
        }
    }
}
",code_defect,SQL_injection_via_string_concatenation,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processData(const std::vector<int>& data, std::string& result) {
    result.clear();
    for (size_t i = 0; i < data.size(); ++i) {
        result += std::to_string(data[i]);
        if (i < data.size() - 1) {
            result += "","";
        }
    }
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::string output;
    processData(numbers, output);
    std::cout << ""Processed data: "" << output << std::endl;
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getUser(id) { let user = await this.userRepository.getUser(id); if (!user) return null; user.roles = await this.userRepository.getUserRoles(id); return user; } async getUsers() { let users = await this.userRepository.getUsers(); for (let user of users) { user.roles = await this.userRepository.getUserRoles(user.id); } return users; } },code_smell,N+1 query problem,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""admin123""; // hardcoded credentials

    public boolean processPayment(int userId, double amount) throws SQLException {
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            conn.setAutoCommit(false);
            // Check balance
            stmt = conn.prepareStatement(""SELECT balance FROM accounts WHERE user_id = ?"");
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();
            if (!rs.next()) {
                return false; // user not found
            }
            double balance = rs.getDouble(""balance"");
            if (balance < amount) {
                return false; // insufficient funds
            }
            // Deduct amount
            stmt = conn.prepareStatement(""UPDATE accounts SET balance = balance - ? WHERE user_id = ?"");
            stmt.setDouble(1, amount);
            stmt.setInt(2, userId);
            stmt.executeUpdate();
            // Log transaction
            stmt = conn.prepareStatement(""INSERT INTO transactions (user_id, amount, timestamp) VALUES (?, ?, ?)"" );
            stmt.setInt(1, userId);
            stmt.setDouble(2, amount);
            stmt.setDate(3, new java.sql.Date(new Date().getTime()));
            stmt.executeUpdate();
            conn.commit();
            return true;
        } finally {
            // Missing close of ResultSet and PreparedStatement resources
            if (conn != null) conn.close(); // may throw SQLException, hiding previous errors
        }
    }
}
",code_defect,resource_leak_and_unhandled_exception,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data, int threshold) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] > threshold) {
            std::cout << ""Value "" << data[i] << "" exceeds threshold."" << std::endl;
        }
    }

    // Legacy code, might be removed later
    // for (int i = 0; i < 100; ++i) {
    //     std::cout << ""Legacy debug: "" << i << std::endl;
    // }
}

int main() {
    std::vector<int> input = { 10, 25, 5, 40, 30, 50 };
    int threshold = 20;

    processData(input, threshold);

    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        if user_data:
            return {
                'id': user_data[0],
                'name': user_data[1],
                'email': user_data[2]
            }
        else:
            return None

    def update_user(self, user_id, name, email):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (name, email, user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
",code_smell,God class,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getPendingPayments() throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String query = ""SELECT id FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return payments;
    }

    public boolean processPayment(String paymentId, double amount) {
        // Missing validation: amount could be negative
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String update = ""UPDATE payments SET status='COMPLETED', amount="" + amount + "" WHERE id='"" + paymentId + ""'""; // SQL injection risk
            PreparedStatement stmt = conn.prepareStatement(update);
            int rows = stmt.executeUpdate();
            stmt.close();
            conn.close();
            return rows > 0;
        } catch (SQLException e) {
            // Swallow exception, no logging
            return false;
        }
    }

    public void batchProcess() throws SQLException {
        List<String> pending = getPendingPayments();
        for (String id : pending) {
            // Off-by-one: loop processes one extra non-existent ID if list is modified concurrently
            processPayment(id, 100.0);
        }
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final int MAX_RETRY_ATTEMPTS = 3;

    public void processOrder(Order order) {
        int retryCount = 0;
        boolean success = false;

        while (retryCount < MAX_RETRY_ATTEMPTS) {
            try {
                if (validateOrder(order)) {
                    if (chargeCustomer(order)) {
                        if (shipOrder(order)) {
                            success = true;
                            break;
                        }
                    }
                }
            } catch (Exception e) {
                retryCount++;
                System.out.println(""Error processing order. Retrying... ""+ retryCount);
            }
        }

        if (!success) {
            logFailure(order);
        }
    }

    private boolean validateOrder(Order order) {
        // Dummy validation logic
        return order != null && order.getAmount() > 0;
    }

    private boolean chargeCustomer(Order order) {
        // Dummy charge logic
        return Math.random() < 0.5;
    }

    private boolean shipOrder(Order order) {
        // Dummy shipping logic
        return Math.random() < 0.5;
    }

    private void logFailure(Order order) {
        System.out.println(""Order processing failed: "" + order.toString());
    }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>
using namespace std;

class User {
public:
    string name;
    int id;
    User(string n, int i) : name(n), id(i) {}
};

class UserService {
public:
    vector<User> users;
    void addUser(User u) {
        users.push_back(u);
    }
    User* getUserById(int id) {
        for (User& u : users) {
            if (u.id == id) return &u;
        }
        return nullptr;
    }
};
int main() {
    UserService us;
    us.addUser(User(""John"", 1));
    User* u = us.getUserById(1);
    if (u != nullptr) cout << u->name << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class UserService {
    private Connection dbConnection;

    public UserService(Connection connection) {
        this.dbConnection = connection;
    }

    // Retrieves user info by username; vulnerable to SQL injection
    public Map<String, String> getUserInfo(String username) throws SQLException {
        Statement stmt = dbConnection.createStatement();
        String query = ""SELECT id, email, role FROM users WHERE username = '"" + username + ""'"";
        ResultSet rs = stmt.executeQuery(query);
        Map<String, String> userInfo = new HashMap<>();
        if (rs.next()) {
            userInfo.put(""id"", rs.getString(""id""));
            userInfo.put(""email"", rs.getString(""email""));
            userInfo.put(""role"", rs.getString(""role""));
        }
        rs.close();
        stmt.close();
        return userInfo;
    }

    // Updates user email; missing transaction handling may cause partial updates
    public boolean updateUserEmail(int userId, String newEmail) throws SQLException {
        String sql = ""UPDATE users SET email = ? WHERE id = ?"";
        PreparedStatement ps = dbConnection.prepareStatement(sql);
        ps.setString(1, newEmail);
        ps.setInt(2, userId);
        int rows = ps.executeUpdate();
        ps.close();
        return rows == 1;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import json
import requests

API_URL = 'https://api.example.com/data'

def fetch_data(user_id, token):
    headers = {'Authorization': f'Bearer {token}'}
    response = requests.get(f'{API_URL}?user_id={user_id}', headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        return {}

def process_user_data(user_id, token):
    data = fetch_data(user_id, token)
    if not data:
        print('No data found.')
        return

    processed = {
        'user_id': data.get('id'),
        'email': data.get('email'),
        'name': data.get('name')
    }

    return processed

if __name__ == '__main__':
    user_id = '12345'
    token = 'my-secret-token'
    result = process_user_data(user_id, token)
    print(json.dumps(result, indent=2))",code_defect,hardcoded_secrets,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final int MAX_RETRIES = 3; public void processPayment(String paymentMethod, double amount) { for (int i = 0; i < MAX_RETRIES; i++) { try { if (paymentMethod.equals(""creditCard"")) { // simulate credit card processing delay Thread.sleep(100); } else if (paymentMethod.equals(""paypal"")) { // simulate paypal processing delay Thread.sleep(200); } System.out.println(""Payment processed successfully""); return; } catch (InterruptedException e) { System.out.println(""Payment processing failed, retrying...""); } } System.out.println(""Payment processing failed after "" + MAX_RETRIES + "" retries""); } }",code_smell,magic_number,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self._config = None

    def load(self):
        # Loads JSON config from a file without any validation
        with open(self.path, 'r') as f:
            data = f.read()
        # Unsafe deserialization: directly eval the content
        self._config = eval(data)  # BUG: using eval on untrusted input
        return self._config

    def get(self, key, default=None):
        return self._config.get(key, default) if self._config else default

# Usage example (vulnerable)
loader = ConfigLoader('/etc/app/config.json')
config = loader.load()
api_key = config.get('api_key')
print('API key loaded')
",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private final Inventory inventory;

    public OrderProcessor(Inventory inventory) {
        this.inventory = inventory;
    }

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (inventory.hasStock(item.getProduct(), item.getQuantity())) {
                inventory.reduceStock(item.getProduct(), item.getQuantity());
            } else {
                // TODO: Handle out-of-stock scenario
                System.out.println(""Not enough stock for product: "" + item.getProduct().getId());
            }
        }

        // TODO: Add order confirmation logic
        // TODO: Update customer loyalty points
    }

    public void processBulkOrders(List<Order> orders) {
        for (Order order : orders) {
            processOrder(order);
        }
    }

    // Unused method
    private void logOrder(Order order) {
        System.out.println(""Order processed: "" + order.getId());
    }
}",code_smell,"long_method, todo_comments, dead_code",,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username.equals(""admin"")) {
            return password.equals(DEFAULT_PASSWORD);
        } else {
            // legacy code, not used anymore
            // return password.equals(getPasswordFromDatabase(username));
            return false;
        }
    }
    private String getPasswordFromDatabase(String username) {
        // this method is not implemented and will always throw an exception
        throw new UnsupportedOperationException();
    }
}",code_defect,unhandled_exception,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {}
    void addUser(const std::string& name) {
        users.push_back(name);
    }
    // Returns the user at the given index (1-based)
    std::string getUser(int index) const {
        // Bug: uses 0-based indexing but expects 1-based callers
        if (index < 1 || index > static_cast<int>(users.size())) {
            return """";
        }
        return users[index]; // off‑by‑one error
    }
private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""Alice"");
    um.addUser(""Bob"");
    std::cout << um.getUser(1) << std::endl; // Expected Alice, prints Bob
    std::cout << um.getUser(2) << std::endl; // Expected Bob, may crash or print empty
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null || order.getItems() == null) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getPrice() > 0) {
                double discountedPrice = applyDiscount(item.getPrice());
                item.setPrice(discountedPrice);
            }
        }

        double total = calculateTotal(order);
        System.out.println(""Order processed. Total: "" + total);
    }

    private double applyDiscount(double price) {
        return price * 0.9; // 10% discount
    }

    private double calculateTotal(Order order) {
        double total = 0;
        for (OrderItem item : order.getItems()) {
            total += item.getPrice() * item.getQuantity();
        }
        return total;
    }
}

class Order {
    private List<OrderItem> items;

    public List<OrderItem> getItems() {
        return items;
    }

    public void setItems(List<OrderItem> items) {
        this.items = items;
    }
}

class OrderItem {
    private double price;
    private int quantity;

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAccountManager { private static final Map<String, String> userAccounts = new HashMap<>(); public synchronized void createUserAccount(String username, String password) { if (userAccounts.containsKey(username)) { throw new RuntimeException(""Username already exists""); } userAccounts.put(username, password); } public synchronized boolean authenticateUser(String username, String password) { return userAccounts.containsKey(username) && userAccounts.get(username).equals(password); } }",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : logfile(file) {}

    void start() {
        // Launch worker threads to process log lines
        for (int i = 0; i < 4; ++i) {
            workers.emplace_back(&LogProcessor::processLines, this);
        }
    }

    void join() {
        for (auto& t : workers) {
            if (t.joinable()) t.join();
        }
    }

private:
    std::string logfile;
    std::vector<std::thread> workers;
    std::mutex mtx;
    std::vector<std::string> buffer;

    void processLines() {
        while (true) {
            std::string line;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (buffer.empty()) break; // no more work
                line = buffer.back();
                buffer.pop_back();
            }
            // Simulate processing
            if (line.find(""ERROR"") != std::string::npos) {
                std::cout << ""Error found: "" << line << std::endl;
            }
        }
    }
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    // Fill buffer with dummy data
    for (int i = 0; i < 100; ++i) {
        lp.start(); // BUG: start is called inside the loop, spawning many threads repeatedly
    }
    lp.join();
    return 0;
}",code_defect,logic_error_thread_leak,,openai/gpt-oss-120b
Python,"import os
import json

def process_user_data(user_data):
    processed = []
    for user in user_data:
        if 'email' in user and 'name' in user:
            user['username'] = user['email'].split('@')[0]
            user['full_name'] = user['name'].title()
            user['status'] = 'active'
            processed.append(user)
        else:
            continue
    return processed


def load_user_data(file_path='data.json'):
    if not os.path.exists(file_path):
        raise FileNotFoundError(f""File {file_path} not found"")
    
    with open(file_path, 'r') as file:
        data = json.load(file)
    
    return data


def main():
    try:
        user_data = load_user_data()
        processed_data = process_user_data(user_data)
        print(json.dumps(processed_data, indent=2))
    except Exception as e:
        print(f""Error processing data: {e}"")

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public static void addUser(String id, User user) { users.put(id, user); } public static User getUser(String id) { return users.get(id); } public static void removeUser(String id) { users.remove(id); } }",code_smell,god_class,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""p@ssw0rd""; // hardcoded credentials

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            // Check balance
            String balanceQuery = ""SELECT balance FROM accounts WHERE account_id = '"" + accountId + ""'"";
            stmt = conn.prepareStatement(balanceQuery);
            rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    // Deduct amount
                    String update = ""UPDATE accounts SET balance = balance - "" + amount + "" WHERE account_id = '"" + accountId + ""'"";
                    stmt.executeUpdate(update);
                    // Log transaction (omitted)
                    return true;
                }
            }
            return false;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }
}
",code_defect,SQL injection vulnerability,,openai/gpt-oss-120b
Java,"public class UserService {
    private final UserRepository userRepository;

    public UserService() {
        this.userRepository = new UserRepository();
    }

    public String getFormattedUserInfo(int userId) {
        User user = userRepository.findUserById(userId);
        if (user == null) {
            return ""User not found."";
        }
        String name = user.getName();
        String email = user.getEmail();
        return ""Name: "" + name + ""\nEmail: "" + email;
    }

    public void processUserRequest(String request) {
        int userId = -1;
        try {
            userId = Integer.parseInt(request);
        } catch (NumberFormatException e) {
            System.out.println(""Invalid request format."");
            return;
        }

        String userInfo = getFormattedUserInfo(userId);
        System.out.println(userInfo);
    }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

std::vector<User> filterUsersByAge(std::vector<User>& users, int minAge) {
    std::vector<User> result;
    for (User user : users) {
        if (user.getAge() >= minAge) {
            result.push_back(user);
        }
    }
    return result;
}

int main() {
    std::vector<User> users = {User(""John"", 25), User(""Alice"", 30), User(""Bob"", 20)};
    std::vector<User> filteredUsers = filterUsersByAge(users, 25);
    for (User user : filteredUsers) {
        std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
    }
    return 0;
}",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<Payment> getPendingPayments() throws SQLException {
        List<Payment> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, status FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Payment p = new Payment();
            p.setId(rs.getInt(""id""));
            p.setAmount(rs.getDouble(""amount""));
            p.setStatus(rs.getString(""status""));
            payments.add(p);
        }
        // Missing close of ResultSet, Statement, and Connection -> resource leak
        return payments;
    }

    public void processPayments() {
        try {
            List<Payment> pending = getPendingPayments();
            for (Payment p : pending) {
                // Simulate processing
                if (p.getAmount() < 0) {
                    // Incorrect logic: negative amounts should be rejected, but code proceeds
                    p.setStatus(""PROCESSED"");
                } else {
                    p.setStatus(""PROCESSED"");
                }
                updatePaymentStatus(p);
            }
        } catch (SQLException e) {
            // Swallow exception, no logging or retry
        }
    }

    private void updatePaymentStatus(Payment payment) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""UPDATE payments SET status=? WHERE id=?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, payment.getStatus());
            stmt.setInt(2, payment.getId());
            stmt.executeUpdate();
            // Missing close of Statement and Connection
        } catch (SQLException e) {
            // Ignored
        }
    }
}

class Payment {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_logic_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.users = [];
    this.loggedUsers = [];
  }

  registerUser(id, name, email, password) {
    this.users.push({ id, name, email, password });
  }

  loginUser(email, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email && this.users[i].password === password) {
        this.loggedUsers.push(this.users[i].email);
        return true;
      }
    }
    return false;
  }

  logoutUser(email) {
    for (let i = 0; i < this.loggedUsers.length; i++) {
      if (this.loggedUsers[i] === email) {
        this.loggedUsers.splice(i, 1);
      }
    }
  }

  getAllUsers() {
    return this.users;
  }
}

const auth = new UserAuth();
auth.registerUser(1, 'Alice', 'alice@example.com', 'password123');
auth.registerUser(2, 'Bob', 'bob@example.com', 'password123');
auth.loginUser('alice@example.com', 'password123');",code_smell,poor_encapsulation,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUser(id) { let user = await this.userDao.findById(id); if (!user) return null; user.roles = await this.userDao.findRolesByUserId(id); return user; } } class UserDao { constructor(db) { this.db = db; } async findById(id) { return this.db.query(`SELECT * FROM users WHERE id = ${id}`); } async findRolesByUserId(id) { return this.db.query(`SELECT * FROM roles WHERE user_id = ${id}`); } },code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Python,"import json
import logging
import os
import sys

class UserDataProcessor:
    def __init__(self, config_path):
        self.config = self._load_config(config_path)
        self.cache = {}
        self.logger = logging.getLogger('UserDataProcessor')
        self.logger.setLevel(logging.DEBUG)
        handler = logging.StreamHandler(sys.stdout)
        handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
        self.logger.addHandler(handler)

    def _load_config(self, path):
        with open(path, 'r') as f:
            return json.load(f)

    def process_user(self, user_id, raw_data):
        # Very large function doing many unrelated things
        self.logger.debug(f""Processing user {user_id}"")
        if user_id in self.cache:
            self.logger.debug(""Cache hit"")
            return self.cache[user_id]
        # Validate data (but validation is shallow)
        if not isinstance(raw_data, dict):
            raise ValueError(""Invalid data format"")
        # Transform data
        transformed = {}
        for key, value in raw_data.items():
            if isinstance(value, str):
                transformed[key] = value.strip().lower()
            else:
                transformed[key] = value
        # Enrich data with config settings
        for setting, val in self.config.get('default_settings', {}).items():
            transformed.setdefault(setting, val)
        # Save to DB (placeholder code, no error handling)
        self._save_to_db(user_id, transformed)
        self.cache[user_id] = transformed
        return transformed

    def _save_to_db(self, user_id, data):
        # Simulated DB write - no transaction, no retries
        with open(os.path.join(self.config.get('db_path', '.'), f""user_{user_id}.json""), 'w') as f:
            json.dump(data, f)
        self.logger.info(f""User {user_id} saved to DB"")

    def clear_cache(self):
        self.cache.clear()
        self.logger.debug(""Cache cleared"")

# Legacy code left commented out
# def old_process(user):
#     pass
",code_smell,large_god_class_with_multiple_responsibilities,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrders(List<Order> orders) {
        for (Order order : orders) {
            if (order.getStatus() == OrderStatus.CREATED) {
                validateOrder(order);
                if (order.isValid()) {
                    if (order.getPayment().isPaid()) {
                        try {
                            processPayment(order);
                            fulfillOrder(order);
                            log.info(""Order processed successfully: {}"", order.getId());
                        } catch (Exception e) {
                            log.error(""Error processing order: {}"", order.getId(), e);
                        }
                    } else {
                        log.warn(""Order payment not processed: {}"", order.getId());
                    }
                } else {
                    log.warn(""Invalid order: {}"", order.getId());
                }
            } else {
                log.info(""Skipping already processed order: {}"", order.getId());
            }
        }
    }

    private void validateOrder(Order order) {
        // Basic validation logic
        if (order.getItems() == null || order.getItems().isEmpty()) {
            order.setValid(false);
        } else {
            order.setValid(true);
        }
    }

    private void processPayment(Order order) {
        // Simulate external payment processing
        Thread.sleep(500);
        order.getPayment().setPaid(true);
    }

    private void fulfillOrder(Order order) {
        // Simulate fulfillment logic
        order.setStatus(OrderStatus.FULFILLED);
    }
}",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
      class UserAccount {
         constructor(username, password, email) {
            this.username = username;
            this.password = password;
            this.email = email;
            this.isLoggedIn = false;
         }

         login() {
            this.isLoggedIn = true;
         }

         logout() {
            this.isLoggedIn = false;
         }

         changePassword(newPassword) {
            this.password = newPassword;
         }
      }

      class UserService {
         constructor() {
            this.users = {};
         }

         registerUser(username, password, email) {
            if (this.users[username]) {
               throw new Error('Username already exists');
            }
            const user = new UserAccount(username, password, email);
            this.users[username] = user;
         }

         loginUser(username, password) {
            const user = this.users[username];
            if (!user) {
               throw new Error('User not found');
            }
            if (user.password === password) {
               user.login();
            } else {
               throw new Error('Incorrect password');
            }
         }
      }

      const userService = new UserService();
      userService.registerUser('johnDoe', 'password123', 'johndoe@example.com');
      userService.loginUser('johnDoe', 'password123');
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  // Loads JSON config synchronously but caches result
  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // BUG: JSON.parse may throw, but not caught – leads to crash on malformed config
    this.cache = JSON.parse(data);
    return this.cache;
  }

  // Refreshes cache; intended to be async but uses sync call
  async refresh() {
    // Race condition: if refresh is called concurrently, multiple reads may occur
    this.cache = null;
    return this.load();
  }
}

// Usage example
(async () => {
  const loader = new ConfigLoader('./config.json');
  const config = await loader.refresh();
  console.log('Config loaded:', config);
})();",code_defect,unhandled_json_parse_exception_and_race_condition,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final String DB_PASSWORD = ""superSecretPassword123!"";

    public void processOrder(Order order) {
        if (order != null && order.isValid()) {
            String customerEmail = order.getCustomerEmail();
            if (customerEmail != null && !customerEmail.isEmpty()) {
                sendConfirmationEmail(customerEmail);
            }
            updateOrderStatusInDatabase(order);
        }
    }

    private void sendConfirmationEmail(String email) {
        // Email sending logic
    }

    private void updateOrderStatusInDatabase(Order order) {
        String query = ""UPDATE orders SET status='PROCESSED' WHERE id="" + order.getId();
        // Execute raw SQL query using hardcoded password
        // JDBC logic with no input sanitization or prepared statements
    }
}",code_defect,insecure_sql_query,,qwen/qwen3-32b
JavaScript,"class ShoppingCart {
    constructor() {
        this.items = [];
    }

    addItem(item) {
        this.items.push(item);
    }

    removeItem(item) {
        const index = this.items.indexOf(item);
        if (index !== -1) {
            this.items.splice(index, 1);
        }
    }

    calculateTotal() {
        return this.items.reduce((total, item) => total + item.price, 0);
    }
}

const cart = new ShoppingCart();
cart.addItem({ name: 'Product 1', price: 10.99 });
cart.addItem({ name: 'Product 2', price: 5.99 });
console.log(cart.calculateTotal());",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <fstream>

class LogProcessor {
public:
    LogProcessor(const std::string& filename) : fileName(filename) {}
    void loadAndProcess() {
        std::ifstream in(fileName);
        std::string line;
        while (std::getline(in, line)) {
            logs.push_back(line);
        }
        // Process last N entries, but off‑by‑one error skips the newest entry
        size_t N = 5;
        size_t start = logs.size() > N ? logs.size() - N - 1 : 0;
        for (size_t i = start; i < logs.size(); ++i) {
            processEntry(logs[i]);
        }
    }
private:
    void processEntry(const std::string& entry) {
        // Simulate processing
        std::cout << ""Processing: "" << entry << std::endl;
    }
    std::string fileName;
    std::vector<std::string> logs;
};

int main() {
    LogProcessor lp(""app.log"");
    lp.loadAndProcess();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    DataProcessor() {}

    void process(const std::vector<std::string>& input) {
        for (const auto& line : input) {
            if (line.empty()) continue;
            
            if (line == ""start"") {
                std::cout << ""Starting processing...\n"";
            } else if (line == ""stop"") {
                std::cout << ""Stopping processing...\n"";
            } else {
                // Do some processing
                std::cout << ""Processing line: "" << line << ""\n"";
            }
        }
    }
};

int main() {
    std::vector<std::string> input = { ""start"", ""data1"", ""data2"", ""stop"" };
    DataProcessor dp;
    dp.process(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class ShoppingCart {
public:
    void addItem(const std::string& item) {
        items.push_back(item);
    }

    void removeItem(const std::string& item) {
        auto it = std::find(items.begin(), items.end(), item);
        if (it != items.end()) {
            items.erase(it);
        }
    }

    void displayItems() {
        for (const auto& item : items) {
            std::cout << item << std::endl;
        }
    }

private:
    std::vector<std::string> items;
};

int main() {
    ShoppingCart cart;
    cart.addItem(""Product A"");
    cart.addItem(""Product B"");
    cart.displayItems();
    cart.removeItem(""Product A"");
    cart.displayItems();
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        // Synchronously read config file each time load is called
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }

    get(key) {
        // If cache is empty, load config
        if (!this.cache) {
            this.load();
        }
        return this.cache[key];
    }
}

// Global singleton used throughout the app
const config = new ConfigLoader('./config.json');

function processUserInput(input) {
    // Assume input is a JSON string from an untrusted source
    const obj = JSON.parse(input); // No validation!
    // Directly use a property to build a file path
    const filePath = `/tmp/${obj.filename}`;
    // Write user-provided content to a file without sanitization
    fs.writeFileSync(filePath, obj.content);
    return `File written to ${filePath}`;
}

module.exports = { config, processUserInput };",code_defect,insecure_file_write,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor() {
    this.discountRules = {
      'VIP': 0.2,
      'GOLD': 0.1,
      'SILVER': 0.05
    };
  }

  processOrder(order) {
    let total = 0;
    for (let i = 0; i < order.items.length; i++) {
      total += order.items[i].price * order.items[i].quantity;
    }

    if (order.customerType && this.discountRules[order.customerType]) {
      total *= (1 - this.discountRules[order.customerType]);
    }

    if (total > 1000) {
      total -= 50;
    }

    return total;
  }
}

const order = {
  items: [
    { name: 'Item 1', price: 200, quantity: 2 },
    { name: 'Item 2', price: 300, quantity: 1 }
  ],
  customerType: 'VIP'
};

const processor = new OrderProcessor();
console.log(processor.processOrder(order));",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.connection = None

    def connect(self):
        import sqlite3
        self.connection = sqlite3.connect(self.db_file)

    def get_user(self, user_id):
        if not self.connection:
            self.connect()
        cursor = self.connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def close(self):
        if self.connection:
            self.connection.close()
            self.connection = None

    def __del__(self):
        self.close()

# Usage example
if __name__ == '__main__':
    db = UserDatabase('users.db')
    user_data = db.get_user(1)
    print(user_data)
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self._config = {}
        self._load()

    def _load(self):
        # Insecure: directly eval the file content, allowing code execution if file is tampered
        with open(self.path, 'r') as f:
            data = f.read()
        self._config = eval(data)  # dangerous

    def get(self, key, default=None):
        return self._config.get(key, default)

class UserService:
    def __init__(self, config_path):
        self.config = ConfigLoader(config_path)
        self.db_conn = self._connect_db()

    def _connect_db(self):
        # Placeholder for DB connection, returns a mock object
        class MockDB:
            def execute(self, query, params=None):
                print(f""Executing: {query}"")
        return MockDB()

    def create_user(self, username, password):
        # No password hashing, stores plain text
        query = f""INSERT INTO users (username, password) VALUES ('{username}', '{password}')""
        self.db_conn.execute(query)
        self._log_creation(username)

    def _log_creation(self, username):
        log_path = self.config.get('log_path', '/tmp/user.log')
        with open(log_path, 'a') as log_file:
            log_file.write(f""User {username} created\n"")

# Usage example (would be in production code)
service = UserService('/etc/app/config.cfg')
service.create_user('alice', 's3cr3t')
",code_defect,unsafe_eval_and_plaintext_password,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data, int threshold, bool flag, int limit) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (flag) {
            for (int j = 0; j < limit; ++j) {
                if (data[i] < threshold) {
                    data[i] *= 2;
                }
            }
        } else {
            data[i] += 10;
        }
    }
}

int main() {
    std::vector<int> values = {5, 15, 25, 35};
    processData(values, 10, true, 3);

    for (int val : values) {
        std::cout << val << ' ';
    }

    return 0;
}",code_smell,inefficient_loops,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, new_data):
        query = ""UPDATE users SET name = '"" + new_data['name'] + ""', email = '"" + new_data['email'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()
",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // JSON.parse can throw, but not caught -> defect
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

class UserService {
  constructor(configPath) {
    this.config = new ConfigLoader(configPath).load();
    this.users = [];
  }

  addUser(username, email) {
    // Missing validation leads to duplicate entries
    this.users.push({ username, email, createdAt: new Date() });
  }

  getUserByEmail(email) {
    // Off-by-one error: loop stops early
    for (let i = 0; i < this.users.length - 1; i++) {
      if (this.users[i].email === email) return this.users[i];
    }
    return null;
  }
}

module.exports = { UserService };",code_defect,unhandled_exception_and_logic_error,,openai/gpt-oss-120b
Python,"import os
import sqlite3

def fetch_user_data(user_id):
    db_path = os.path.join('data', 'users.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    query = 'SELECT * FROM users WHERE id = ?'
    cursor.execute(query, (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result

# Unused function
def update_user_data(user_id, new_data):
    db_path = os.path.join('data', 'users.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    update_query = 'UPDATE users SET name = ?, email = ? WHERE id = ?'
    cursor.execute(update_query, (new_data['name'], new_data['email'], user_id))
    conn.commit()
    conn.close()",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class UserValidator {
    public boolean isValidUser(String username, String password) {
        if (username.length() > 5 && password.length() > 8) {
            return true;
        }
        return false;
    }
}",code_smell,magic_number,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;public class UserRepository {    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";    private static final String DB_USER = ""app_user"";    private static final String DB_PASSWORD = ""s3cr3t"";    public User findUserById(int userId) throws SQLException {        Connection conn = null;        PreparedStatement stmt = null;        ResultSet rs = null;        try {            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId; // vulnerable concatenation            stmt = conn.prepareStatement(sql);            rs = stmt.executeQuery();            if (rs.next()) {                return new User(rs.getInt(""id""), rs.getString(""username""), rs.getString(""email""));            } else {                return null;            }        } finally {            // Missing close of ResultSet and PreparedStatement, and no handling of SQLException
            if (conn != null) {                conn.close();            }        }    }}class User {    private final int id;    private final String username;    private final String email;    public User(int id, String username, String email) {        this.id = id;        this.username = username;        this.email = email;    }    public int getId() { return id; }    public String getUsername() { return username; }    public String getEmail() { return email; } }",code_defect,SQL_injection_and_resource_leak,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    DataProcessor() {}

    void process(const std::vector<std::string>& input) {
        for (const auto& str : input) {
            std::string trimmed = str;
            trim(trimmed);
            if (!trimmed.empty()) {
                results_.push_back(trimmed);
            }
        }
    }

    const std::vector<std::string>& getResults() const {
        return results_;
    }

private:
    void trim(std::string& str) {
        size_t first = str.find_first_not_of(' ');
        size_t last = str.find_last_not_of(' ');
        if (first == std::string::npos) {
            str.clear();
        } else {
            str = str.substr(first, last - first + 1);
        }
    }

    std::vector<std::string> results_;
};

int main() {
    std::vector<std::string> input = { ""   example   "", ""data   "", """", ""   test   "" };
    DataProcessor processor;
    processor.process(input);

    const auto& results = processor.getResults();
    for (const auto& str : results) {
        std::cout << ""'"" << str << ""'\n"";
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserDatabase {
    private static final Map<String, String> users = new HashMap<>();
    public static void addUser(String username, String password) {
        users.put(username, password);
    }
    public static String getPassword(String username) {
        return users.get(username);
    }
    public static void main(String[] args) {
        addUser(""admin"", ""password123"");
        System.out.println(getPassword(""admin""));
    }
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class LogProcessor {
    constructor(logFilePath) {
        this.logFilePath = logFilePath;
        this.buffer = [];
    }

    // Reads the entire log file synchronously and stores lines in buffer
    loadLogs() {
        const data = fs.readFileSync(this.logFilePath, 'utf8');
        this.buffer = data.split('\n');
    }

    // Returns the number of error entries in the buffer
    countErrors() {
        let count = 0;
        for (let i = 0; i <= this.buffer.length; i++) { // off‑by‑one error
            if (this.buffer[i] && this.buffer[i].includes('ERROR')) {
                count++;
            }
        }
        return count;
    }

    // Clears the buffer without writing back to file
    clear() {
        this.buffer = [];
    }
}

// Usage example (would be called elsewhere)
const processor = new LogProcessor('/var/log/app.log');
processor.loadLogs();
console.log('Error count:', processor.countErrors());
processor.clear();",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrders(List<Order> orders, String discountCode, boolean isPriority) {
        for (Order order : orders) {
            if (order != null) {
                if (isPriority) {
                    order.applyPriorityDiscount();
                }
                if (discountCode != null && discountCode.equals(""SUMMER20"")) {
                    order.applyDiscount(0.2);
                }
                if (order.getTotal() > 1000) {
                    order.applyBulkDiscount();
                }
                order.save();
            }
        }
    }

    private void applyAllDiscounts(Order order, String discountCode) {
        if (discountCode != null) {
            if (discountCode.equals(""SUMMER20"")) {
                order.applyDiscount(0.2);
            } else if (discountCode.equals(""WINTER30"")) {
                order.applyDiscount(0.3);
            }
        }
    }
}",code_smell,large_function,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class UserRepository {
public:
    void addUser(User user) { users.push_back(user); }
    std::vector<User> getUsers() { return users; }
private:
    std::vector<User> users;
};

int main() {
    UserRepository repo;
    repo.addUser(User(""John Doe"", 30));
    repo.addUser(User(""Jane Doe"", 25));
    for (const auto& user : repo.getUsers()) {
        std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
    }
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data):
        cursor = self.conn.cursor()
        # Directly embedding user input into SQL – SQL injection risk
        cursor.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')"")
        self.conn.commit()

    def get_user_data(self, username):
        cursor = self.conn.cursor()
        cursor.execute(""SELECT data FROM users WHERE username = ?"", (username,))
        row = cursor.fetchone()
        if row:
            # Unsafe deserialization of JSON data – could execute malicious code if data is crafted
            return json.loads(row[0])
        return None

    def delete_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute(""DELETE FROM users WHERE username = ?"", (username,))
        self.conn.commit()

    def close(self):
        self.conn.close()

# Example usage (would be removed in production)
if __name__ == ""__main__"":
    manager = UserManager('users.db')
    manager.add_user('alice', {'role': 'admin', 'prefs': {}})
    print(manager.get_user_data('alice'))
    manager.delete_user('alice')
    manager.close()",code_defect,SQL_injection_and_unsafe_deserialization,,openai/gpt-oss-120b
Python,"import os
import requests

def fetch_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    response = requests.get(url)

    if response.status_code == 200:
        return response.json()
    else:
        print('Error fetching data')

    return None

def process_user_data(data):
    processed = {
        'id': data.get('id'),
        'name': f""{data.get('first_name')} {data.get('last_name')}"".strip(),
        'email': data.get('email'),
        'is_active': data.get('status') == 'active',
    }
    return processed

def main():
    user_ids = [1001, 1002, 1003]
    for user_id in user_ids:
        user_data = fetch_user_data(user_id)
        if user_data:
            processed_user = process_user_data(user_data)
            print(processed_user)

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserDatabase:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username in self.users:
            return False
        self.users[username] = password
        return True

    def authenticate(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def get_all_users(self):
        return list(self.users.keys())

    def update_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
            return True
        return False

    def delete_user(self, username):
        if username in self.users:
            del self.users[username]
            return True
        return False

    def check_password_strength(self, password):
        if len(password) < 8:
            return False
        return True

db = UserDatabase()
db.add_user('admin', 'password123')
print(db.authenticate('admin', 'password123'))",code_smell,Tight Coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it globally.""""""
    _cache = None
    _lock = threading.Lock()

    @classmethod
    def load(cls, path: str) -> dict:
        # Missing validation: path could be user supplied, leading to path traversal
        with cls._lock:
            if cls._cache is None:
                with open(path, 'r') as f:
                    cls._cache = json.load(f)
            return cls._cache

class DataProcessor:
    def __init__(self, config_path: str):
        self.config = ConfigLoader.load(config_path)
        self.threshold = self.config.get('threshold', 10)

    def process(self, data: list) -> list:
        # Off‑by‑one error: should iterate up to len(data)-1
        result = []
        for i in range(1, len(data)):
            if data[i] > self.threshold:
                result.append(data[i] * 2)
        return result

# Example usage (would be called from elsewhere)
processor = DataProcessor('/etc/app/config.json')
input_data = [5, 12, 7, 20]
output = processor.process(input_data)
print('Processed:', output)",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrders(orders, discountCodes, taxRate) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      let total = 0;

      for (let j = 0; j < order.items.length; j++) {
        const item = order.items[j];
        const itemTotal = item.price * item.quantity;
        total += itemTotal;
      }

      let discountApplied = 0;
      if (discountCodes.length > 0) {
        for (let k = 0; k < discountCodes.length; k++) {
          if (discountCodes[k].code === order.discountCode) {
            discountApplied = discountCodes[k].discount;
            break;
          }
        }
      }

      total = total * (1 - discountApplied);
      total = total * (1 + taxRate);

      order.total = total.toFixed(2);
    }
  }

  getProcessedOrders(orders) {
    this.processOrders(orders, [], 0.1);
    return orders;
  }
}",code_smell,long_function,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private static final String DEFAULT_PASSWORD = ""password123""; public boolean authenticate(String username, String password) { if (username.equals(""admin"")) { return password.equals(DEFAULT_PASSWORD); } else { return false; } } }",code_defect,hardcoded_secret,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');
const path = require('path');

class ConfigLoader {
    constructor(configDir) {
        this.configDir = configDir;
        this.cache = {};
    }

    // Loads a JSON config file and caches it
    loadConfig(name) {
        const filePath = path.join(this.configDir, `${name}.json`);
        // Asynchronously read file but forget to await, returning before data is ready
        const dataPromise = new Promise((resolve, reject) => {
            fs.readFile(filePath, 'utf8', (err, data) => {
                if (err) return reject(err);
                try {
                    const parsed = JSON.parse(data);
                    this.cache[name] = parsed;
                    resolve(parsed);
                } catch (e) {
                    reject(e);
                }
            });
        });
        // BUG: returns the promise itself, callers expect the config object
        return dataPromise;
    }

    // Retrieves config from cache or loads it synchronously (incorrectly)
    getConfig(name) {
        if (this.cache[name]) {
            return this.cache[name];
        }
        // Calls loadConfig but does not handle the async nature, leading to undefined
        this.loadConfig(name);
        return this.cache[name]; // always undefined on first call
    }
}

module.exports = ConfigLoader;",code_defect,asynchronous_logic_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processData(const std::vector<std::string>& data) {
    for (const auto& item : data) {
        if (item.empty()) {
            continue;
        }
        std::string processed = item;
        for (size_t i = 0; i < processed.length(); ++i) {
            if (processed[i] == 'a') {
                processed[i] = 'A';
            }
        }
        std::cout << processed << std::endl;
    }
}

int main() {
    std::vector<std::string> input = {""apple"", ""banana"", ""cherry"", """", ""grape""};
    processData(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, username, email):
        if user_id in self.users:
            return
        self.users[user_id] = {'username': username, 'email': email}

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, username=None, email=None):
        if user_id not in self.users:
            return
        if username:
            self.users[user_id]['username'] = username
        if email:
            self.users[user_id]['email'] = email

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]

    def get_all_users(self):
        return list(self.users.values())

def main():
    user_manager = UserManager()
    user_manager.add_user(1, 'john_doe', 'johndoe@example.com')
    user_manager.add_user(2, 'jane_doe', 'janedoe@example.com')
    print(user_manager.get_all_users())

if __name__ == '__main__':
    main()
",code_smell,God class,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class UserService {
    private Connection conn;
    public UserService(Connection conn) { this.conn = conn; }
    public List<String> getUserEmails(List<Integer> userIds) throws SQLException {
        List<String> emails = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        sb.append(""SELECT email FROM users WHERE id IN ("");
        for (int i = 0; i < userIds.size(); i++) {
            sb.append(userIds.get(i));
            if (i < userIds.size() - 1) sb.append("","");
        }
        sb.append("")"");
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sb.toString());
        while (rs.next()) {
            emails.add(rs.getString(""email""));
        }
        rs.close();
        stmt.close();
        return emails;
    }
}",code_defect,SQL injection vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

using namespace std;

void processData(vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 0) {
            data[i] *= 2;
        }
        else {
            data[i] -= 1;
        }
    }
}

int main() {
    vector<int> input = {1, 2, 3, 4, 5, 6};
    processData(input);
    for (int val : input) {
        cout << val << "" "";
    }
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    Student(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void setName(std::string name) { this->name = name; }
    void setAge(int age) { this->age = age; }

private:
    std::string name;
    int age;
};

bool compareStudents(Student s1, Student s2) {
    return s1.getAge() < s2.getAge();
}

int main() {
    std::vector<Student> students = {Student(""John"", 20), Student(""Alice"", 22), Student(""Bob"", 19)};
    std::sort(students.begin(), students.end(), compareStudents);
    for (auto& student : students) {
        std::cout << student.getName() << "" is "" << student.getAge() << "" years old."" << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            // Vulnerable to SQL injection if accountId is not sanitized
            String sql = ""SELECT balance FROM accounts WHERE account_id = '"" + accountId + ""'"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    double newBalance = balance - amount;
                    // Missing commit, auto-commit may be false leading to lost update
                    String updateSql = ""UPDATE accounts SET balance = "" + newBalance + "" WHERE account_id = '"" + accountId + ""'"";
                    stmt.executeUpdate(updateSql);
                    return true;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Connection not closed properly if exception occurs before assignment
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
        return false;
    }
}
",code_defect,SQL_injection_and_missing_transaction_commit,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users || [];
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  getAllUsers() {
    return this.users;
  }

  addUser(newUser) {
    this.users.push(newUser);
  }

  removeUserByEmail(email) {
    const updatedUsers = [];
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email !== email) {
        updatedUsers.push(this.users[i]);
      }
    }
    this.users = updatedUsers;
  }
}

const userManager = new UserManager([
  { id: 1, name: 'Alice', email: 'alice@example.com' },
  { id: 2, name: 'Bob', email: 'bob@example.com' }
]);",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string n, int a) : name(n), age(a) {}

    bool operator<(const User& other) const {
        return age < other.age;
    }
};

void sortUsers(std::vector<User>& users) {
    std::sort(users.begin(), users.end());
}

int main() {
    std::vector<User> users = {User(""John"", 25), User(""Alice"", 30), User(""Bob"", 20)};
    sortUsers(users);
    for (const auto& user : users) {
        std::cout << user.name << "" is "" << user.age << "" years old."" << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        # Insecure: directly eval the config file content
        with open(self.path, 'r') as f:
            data = f.read()
            self.config = eval(data)  # unsafe deserialization

    def get(self, key, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, config_path):
        self.cfg = ConfigLoader(config_path)
        self.batch_size = self.cfg.get('batch_size', 100)
        self.output_dir = self.cfg.get('output_dir', '/tmp')

    def process(self, records):
        # Off-by-one error: should be range(0, len(records), self.batch_size)
        for i in range(0, len(records) - 1, self.batch_size):
            batch = records[i:i+self.batch_size]
            self._save_batch(batch, i)

    def _save_batch(self, batch, index):
        filename = os.path.join(self.output_dir, f'batch_{index}.json')
        with open(filename, 'w') as f:
            json.dump(batch, f)

# Example usage
if __name__ == '__main__':
    processor = DataProcessor('config.cfg')
    data = [{'id': i, 'value': i*2} for i in range(250)]
    processor.process(data)",code_defect,unsafe_deserialization_and_off_by_one,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      if (user.role === 'admin') {
        this.sendAdminEmail(user);
      } else {
        this.sendUserEmail(user);
      }
    }
  }

  sendAdminEmail(user) {
    console.log(`Sending admin email to ${user.email}`);
    // Simulate email sending
    setTimeout(() => {
      console.log(`Admin email sent to ${user.email}`);
    }, 1000);
  }

  sendUserEmail(user) {
    console.log(`Sending user email to ${user.email}`);
    // Simulate email sending
    setTimeout(() => {
      console.log(`User email sent to ${user.email}`);
    }, 1000);
  }
}

const users = [
  { name: 'Alice', email: 'alice@example.com', role: 'admin' },
  { name: 'Bob', email: 'bob@example.com', role: 'user' }
];

const processor = new UserProcessor(users);
processor.processUsers();",code_smell,duplicated_code,,qwen/qwen3-32b
JavaScript,"
   class UserService {
     constructor(userRepository) {
       this.userRepository = userRepository;
     }

     async getAllUsers() {
       const users = await this.userRepository.findAll();
       return users.map(user => ({ id: user.id, name: user.name }));
     }

     async getUserById(id) {
       const user = await this.userRepository.findById(id);
       if (!user) {
         throw new Error('User not found');
       }
       return { id: user.id, name: user.name };
     }
   }

   class UserRepository {
     constructor(dbConnection) {
       this.dbConnection = dbConnection;
     }

     async findAll() {
       const query = 'SELECT * FROM users';
       const results = await this.dbConnection.query(query);
       return results.rows;
     }

     async findById(id) {
       const query = 'SELECT * FROM users WHERE id = $1';
       const results = await this.dbConnection.query(query, [id]);
       return results.rows[0];
     }
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.path = configPath;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    // Synchronous file read blocks event loop
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

class UserService {
  constructor(db) {
    this.db = db;
    this.config = new ConfigLoader('./config.json');
  }

  // Returns user profile with settings merged from config
  async getUserProfile(userId) {
    const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
    const settings = this.config.load();
    // Bug: mutates shared config object, affecting all users
    settings.lastAccessedUser = user.id;
    return { ...user, settings };
  }
}

module.exports = { ConfigLoader, UserService };",code_defect,shared mutable state causing cross-request contamination,,openai/gpt-oss-120b
Python,"import requests
import time

def fetch_and_cache_data(url, cache, timeout=5):
    if url in cache:
        print('Using cached data...')
        return cache[url]

    try:
        response = requests.get(url, timeout=timeout)
        response.raise_for_status()
        data = response.json()
        cache[url] = data
        return data
    except requests.RequestException as e:
        print(f'Request failed: {e}')
        return None

    # Legacy code, might be removed in future releases
    # if url.endswith('.json'):
    #     return fetch_json_data(url)

    # time.sleep(2)  # Simulate delay for testing


def process_data(data):
    results = []
    for item in data['items']:
        if item['type'] == 'user' and item['active']:
            results.append({
                'id': item['id'],
                'name': item['name'],
                'email': item.get('email', 'N/A'),
                'status': 'active'
            })
    return results


def main():
    cache = {}
    url = 'https://api.example.com/data'
    data = fetch_and_cache_data(url, cache)
    if data:
        active_users = process_data(data)
        print(f'Found {len(active_users)} active users.')
    else:
        print('No data to process.')

if __name__ == '__main__':
    main()",code_smell,dead_code,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
    def authenticate(self, input_password):
        return self.password == input_password
    def update_password(self, new_password):
        self.password = new_password
    def send_verification_email(self):
        # Simulate sending an email
        print(f""Verification email sent to {self.email}"")

# Usage example
account = UserAccount(""john_doe"", ""mysecretpassword"", ""johndoe@example.com"")
if account.authenticate(""mysecretpassword""):
    print(""Authentication successful"")
    account.update_password(""newpassword123"")
    account.send_verification_email()
else:
    print(""Authentication failed"")",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Fetch user by ID and write profile to a file
  async exportUserProfile(userId, filePath) {
    const user = await this.db.getUser(userId);
    if (!user) {
      throw new Error('User not found');
    }
    const profile = {
      id: user.id,
      name: user.name,
      email: user.email,
      // Sensitive token should not be exported
      token: user.apiToken,
    };
    // Asynchronously write file but do not await, causing race condition
    fs.writeFile(filePath, JSON.stringify(profile), (err) => {
      if (err) {
        console.error('Failed to write profile:', err);
      }
    });
    // Returns before file is actually written
    return { success: true, path: filePath };
  }
}

module.exports = UserService;",code_defect,race_condition_due_to_unawaited_async_write,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input, std::vector<int>& result) {
    std::string buffer;
    for (char c : input) {
        if (c >= '0' && c <= '9') {
            buffer += c;
        } else {
            if (!buffer.empty()) {
                result.push_back(std::stoi(buffer));
                buffer.clear();
            }
        }
    }
    if (!buffer.empty()) {
        result.push_back(std::stoi(buffer));
    }
}

int main() {
    std::string input = ""123,456;789"";
    std::vector<int> result;
    processUserInput(input, result);

    for (int num : result) {
        std::cout << num << ""\n"";
    }

    return 0;
}",code_smell,poor_error_handling,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final int MAX_RETRIES = 3; public void processPayment(String paymentId, double amount) { for (int i = 0; i < MAX_RETRIES; i++) { try { // Simulate a payment processing API call Thread.sleep(100); System.out.println(""Payment processed: "" + paymentId); return; } catch (InterruptedException e) { System.out.println(""Error processing payment: "" + e.getMessage()); } } System.out.println(""Failed to process payment after "" + MAX_RETRIES + "" retries""); } }",code_smell,inefficient_error_handling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""p@ssw0rd""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            conn.setAutoCommit(false);
            // Debit source account
            if (!updateBalance(conn, accountId, -amount)) {
                conn.rollback();
                return false;
            }
            // Credit merchant account (hardcoded ID)
            if (!updateBalance(conn, ""MERCHANT_123"", amount)) {
                conn.rollback();
                return false;
            }
            conn.commit();
            return true;
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ex) {}
            return false;
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException e) {}
        }
    }

    private boolean updateBalance(Connection conn, String acctId, double delta) throws SQLException {
        // Vulnerable to SQL injection via acctId
        String sql = ""UPDATE accounts SET balance = balance + "" + delta + "" WHERE account_id = '"" + acctId + ""'"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            int rows = stmt.executeUpdate();
            return rows == 1;
        }
    }

    public double getBalance(String accountId) {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(""SELECT balance FROM accounts WHERE account_id = ?"")) {
            stmt.setString(1, accountId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getDouble(""balance"");
            }
        } catch (SQLException e) {
            // ignore
        }
        return 0.0;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }
        
        List<Item> items = order.getItems();
        for (Item item : items) {
            if (item.getPrice() > 0) {
                item.setProcessed(true);
            }
        }
        
        // Legacy code, do not remove
        // updateInventoryLegacy(order);

        if (order.getTotal() > 0 && order.getCustomer() != null) {
            sendOrderConfirmation(order);
        }
    }

    private void sendOrderConfirmation(Order order) {
        // Dummy implementation for demo
    }

    // @Deprecated
    // private void updateInventoryLegacy(Order order) {
    //     // Legacy inventory update logic
    // }

}

// Order and Item classes are assumed to be defined elsewhere.",code_smell,dead_code,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            self.users[user_id] = user_data

    def get_user(self, user_id):
        return self.users.get(user_id)

    def remove_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
        else:
            print('User not found')

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id] = user_data
        else:
            print('User not found')

    def display_users(self):
        for user_id, user_data in self.users.items():
            print(f'User ID: {user_id}, User Data: {user_data}')

def main():
    user_manager = UserManager()
    user_manager.add_user('1', {'name': 'John Doe', 'age': 30})
    user_manager.add_user('2', {'name': 'Jane Doe', 'age': 25})
    user_manager.display_users()
    user_manager.remove_user('1')
    user_manager.display_users()

if __name__ == '__main__':
    main()
",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None
        self.load()

    def load(self):
        # NOTE: Using eval on file contents – insecure!
        with open(self.config_path, 'r') as f:
            data = f.read()
        self._config = eval(data)  # security defect: arbitrary code execution
        logger.info('Configuration loaded')

    def get(self, key, default=None):
        return self._config.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.cfg = config_loader
        self.batch_size = self.cfg.get('batch_size', 100)

    def process(self, records):
        processed = []
        for i in range(0, len(records), self.batch_size):
            batch = records[i:i+self.batch_size]
            # Simulate processing
            processed.extend([self._transform(r) for r in batch])
        return processed

    def _transform(self, record):
        # Potential KeyError if 'value' missing
        return record['value'] * 2

if __name__ == '__main__':
    cfg = ConfigLoader('config.cfg')
    processor = DataProcessor(cfg)
    sample_data = [{'value': i} for i in range(10)]
    result = processor.process(sample_data)
    print(json.dumps(result))",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void processData(const std::vector<int>& data) {
    for (int val : data) {
        if (val % 2 == 0) {
            std::lock_guard<std::mutex> lock(mtx);
            std::cout << ""Processing even: "" << val << std::endl;
        } else {
            std::cout << ""Processing odd: "" << val << std::endl;
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6};

    std::thread t1(processData, data);
    std::thread t2(processData, data);

    t1.join();
    t2.join();

    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
Java,public class UserService { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUserById(int id) { for (User user : users) { if (user.getId() == id) { return user; } } return null; } public void removeUser(int id) { for (int i = 0; i < users.size(); i++) { if (users.get(i).getId() == id) { users.remove(i); break; } } } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""admin123""; // hardcoded secret

    public List<Payment> getPendingPayments() throws SQLException {
        List<Payment> pending = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String sql = ""SELECT id, amount, user_id FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Payment p = new Payment();
            p.setId(rs.getInt(""id""));
            p.setAmount(rs.getDouble(""amount""));
            p.setUserId(rs.getInt(""user_id""));
            pending.add(p);
        }
        // Missing rs.close(), stmt.close(), conn.close() -> resource leak
        return pending;
    }

    public void processPayments() {
        try {
            List<Payment> payments = getPendingPayments();
            for (Payment p : payments) {
                // Simulate external service call
                boolean success = externalCharge(p.getUserId(), p.getAmount());
                updatePaymentStatus(p.getId(), success ? ""COMPLETED"" : ""FAILED"");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private boolean externalCharge(int userId, double amount) {
        // Dummy implementation that always returns true
        return true;
    }

    private void updatePaymentStatus(int paymentId, String status) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""UPDATE payments SET status='"" + status + ""' WHERE id="" + paymentId; // SQL injection risk
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.executeUpdate();
            // Missing stmt.close(), conn.close()
        } catch (SQLException e) {
            // Swallow exception, no logging
        }
    }
}

class Payment {
    private int id;
    private double amount;
    private int userId;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
}",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders = new ArrayList<>();

    public void addOrder(Order order) {
        orders.add(order);
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.getTotal() > 100) {
                applyLargeOrderDiscount(order);
            } else {
                applyRegularOrderDiscount(order);
            }
            sendOrderToInventory(order);
            sendOrderToShipping(order);
            sendOrderToBilling(order);
        }
    }

    private void applyLargeOrderDiscount(Order order) {
        order.setTotal(order.getTotal() * 0.9);
    }

    private void applyRegularOrderDiscount(Order order) {
        order.setTotal(order.getTotal() * 0.95);
    }

    private void sendOrderToInventory(Order order) {
        // complex logic for inventory update
    }

    private void sendOrderToShipping(Order order) {
        // complex logic for shipping
    }

    private void sendOrderToBilling(Order order) {
        // complex logic for billing
    }
}",code_smell,feature_envy,,qwen/qwen3-32b
JavaScript,"
      class PaymentProcessor {
         constructor(paymentGateway) {
            this.paymentGateway = paymentGateway;
         }

         async processPayment(order) {
            try {
               const paymentResult = await this.paymentGateway.chargeCard(order);
               if (paymentResult.success) {
                  order.status = 'paid';
               } else {
                  order.status = 'failed';
               }
               return order;
            } catch (error) {
               console.error(error);
               return null;
            }
         }
      }

      class PaymentGateway {
         async chargeCard(order) {
            // Simulating a payment gateway API call
            return { success: true };
         }
      }

      const paymentGateway = new PaymentGateway();
      const paymentProcessor = new PaymentProcessor(paymentGateway);
      const order = { id: 1, status: 'pending' };
      paymentProcessor.processPayment(order).then((result) => console.log(result));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_schema()

    def _ensure_schema(self):
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        email TEXT NOT NULL)
                    ''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> int:
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        user_id = cur.lastrowid
        conn.commit()
        conn.close()
        return user_id

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('SELECT id, username, email FROM users ORDER BY id LIMIT ? OFFSET ?', (page_size, offset))
        rows = cur.fetchall()
        conn.close()
        # BUG: off-by-one error - returns one extra record when page > 1
        if page > 1:
            rows = rows[1:]
        return [{'id': r[0], 'username': r[1], 'email': r[2]} for r in rows]

# Example usage (would be in separate module)
repo = UserRepository('example.db')
repo.add_user('alice', 'alice@example.com')
repo.add_user('bob', 'bob@example.com')
repo.add_user('carol', 'carol@example.com')
print(repo.get_users_page(1, page_size=2))
print(repo.get_users_page(2, page_size=2))",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserService {
    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public User getUserDetails(String userId) {
        User user = userRepository.findUserById(userId);
        if (user != null) {
            if (user.getProfile() != null && user.getProfile().getEmail() != null) {
                String email = user.getProfile().getEmail();
                if (userRepository.isEmailValid(email)) {
                    user.setProfile(user.getProfile().toBuilder().emailValidated(true).build());
                }
            }
            if (user.getPreferences() != null) {
                if (user.getPreferences().getLanguage() == null) {
                    user.getPreferences().setLanguage(""en"");
                }
                if (user.getPreferences().getTimezone() == null) {
                    user.getPreferences().setTimezone(""UTC"");
                }
            }
            return user;
        }
        return null;
    }
}",code_smell,long_method,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, account_number, balance=0):
        self.account_number = account_number
        self.balance = balance
        self.transactions = []

    def deposit(self, amount):
        self.balance += amount
        self.transactions.append(('deposit', amount))

    def withdraw(self, amount):
        if amount > self.balance:
            print('Insufficient funds')
        else:
            self.balance -= amount
            self.transactions.append(('withdrawal', amount))

    def get_balance(self):
        return self.balance

    def get_transactions(self):
        return self.transactions

account = BankAccount('1234567890', 1000)
account.deposit(500)
account.withdraw(200)
print(account.get_balance())
print(account.get_transactions())",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    UserManager() {
        // Load users from a mock database
        users_ = {""alice"", ""bob"", ""carol""};
    }

    // Returns true if the user exists
    bool hasUser(const std::string& name) const {
        return std::find(users_.begin(), users_.end(), name) != users_.end();
    }

    // Returns the user at the given index (1-based indexing bug)
    std::string getUserByIndex(size_t index) const {
        // BUG: index is expected to be 1-based by callers, but vector is 0-based
        if (index <= 0 || index > users_.size()) {
            return """"; // empty string signals error
        }
        return users_[index]; // off‑by‑one error: should be index-1
    }

private:
    std::vector<std::string> users_;
};

int main() {
    UserManager um;
    for (size_t i = 1; i <= 3; ++i) {
        std::string user = um.getUserByIndex(i);
        if (!user.empty()) {
            std::cout << ""User "" << i << "": "" << user << std::endl;
        } else {
            std::cout << ""Invalid index: "" << i << std::endl;
        }
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserService {
  constructor(db) {
    this.db = db;
  }

  getUserData(userId) {
    const user = this.db.find(user => user.id === userId);
    if (!user) {
      return null;
    }

    const { id, name, email } = user;
    const userPreferences = this.db.userPreferences.find(pref => pref.userId === userId);
    const preferences = userPreferences || {};

    return {
      id,
      name,
      email,
      preferences
    };
  }

  updateUserPreferences(userId, newPreferences) {
    let userPreferences = this.db.userPreferences.find(pref => pref.userId === userId);
    if (!userPreferences) {
      userPreferences = { userId };
      this.db.userPreferences.push(userPreferences);
    }

    Object.keys(newPreferences).forEach(key => {
      userPreferences[key] = newPreferences[key];
    });
  }
}",code_smell,feature envy,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& message) {
        std::lock_guard<std::mutex> lock(mutex_);
        std::cout << message << std::endl;
    }

private:
    std::mutex mutex_;
};

void worker(Logger& logger, int id) {
    for (int i = 0; i < 10; ++i) {
        logger.log(""Worker "" + std::to_string(id) + "": "" + std::to_string(i));
    }
}

int main() {
    Logger logger;
    std::vector<std::thread> threads;
    for (int i = 0; i < 5; ++i) {
        threads.emplace_back(worker, std::ref(logger), i);
    }
    for (auto& thread : threads) {
        thread.join();
    }
    return 0;
}
",code_smell,God class,,llama-3.3-70b-versatile
Java,"import java.sql.*;

public class UserService {
    private Connection connection;

    public UserService(Connection connection) {
        this.connection = connection;
    }

    public boolean authenticate(String username, String password) throws SQLException {
        String query = ""SELECT count(*) FROM users WHERE username='"" + username + ""' AND password='"" + password + ""'"";
        Statement stmt = connection.createStatement();
        ResultSet rs = stmt.executeQuery(query);
        rs.next();
        int count = rs.getInt(1);
        rs.close();
        stmt.close();
        return count > 0;
    }
}
",code_defect,SQL_injection,,openai/gpt-oss-120b
Python,"import os
import time

def process_user_data(user, logs):
    user_data = []
    for log in logs:
        if log['user_id'] == user['id']:
            user_data.append(log)

    processed = []
    for entry in user_data:
        if 'timestamp' in entry:
            entry['processed_at'] = time.time()
            processed.append(entry)
        else:
            print(f""Skipping invalid log entry for user {user['id']}"")

    return processed

def main():
    users = [
        {'id': 1, 'name': 'Alice'},
        {'id': 2, 'name': 'Bob'},
        {'id': 3, 'name': 'Charlie'}
    ]

    logs = [
        {'user_id': 1, 'action': 'login', 'timestamp': 1622000000},
        {'user_id': 1, 'action': 'logout'},
        {'user_id': 2, 'action': 'login', 'timestamp': 1622000001},
        {'user_id': 3, 'action': 'login', 'timestamp': 1622000002}
    ]

    for user in users:
        result = process_user_data(user, logs)
        print(f""Processed {len(result)} logs for {user['name']}"")

if __name__ == '__main__':
    main()",code_smell,inefficient_loop,,qwen/qwen3-32b
Python,"
class UserAccount:
    def __init__(self, username, password):
        self.username = username
        self.password = password
        self.login_attempts = 0

    def login(self, password):
        if password == self.password:
            self.login_attempts = 0
            return True
        else:
            self.login_attempts += 1
            if self.login_attempts >= 5:
                raise Exception('Account locked')
            return False

    def reset_password(self, new_password):
        self.password = new_password

account = UserAccount('test_user', 'test_password')
print(account.login('wrong_password'))
print(account.login('wrong_password'))
print(account.login('wrong_password'))
print(account.login('wrong_password'))
print(account.login('wrong_password'))
print(account.login('test_password'))
   ",code_defect,unhandled_exception,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // SQL injection vulnerability: directly concatenating limit
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallowing exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,sql_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        int sum = 0;
        for (size_t j = 0; j < data.size(); ++j) {
            sum += data[i] * data[j];
        }
        std::cout << ""Sum for index "" << i << "" is "" << sum << std::endl;
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5};
    processData(input);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public synchronized User getUser(String username) { if (!users.containsKey(username)) { User user = new User(username); users.put(username, user); return user; } else { return users.get(username); } } public synchronized void updateUser(String username, String newPassword) { if (users.containsKey(username)) { User user = users.get(username); user.setPassword(newPassword); } } } class User { private String username; private String password; public User(String username) { this.username = username; } public void setPassword(String password) { this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogManager {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        buffer_.push_back(msg);
        if (buffer_.size() > 100) {
            flush();
        }
    }

    ~LogManager() {
        flush();
    }

private:
    void flush() {
        for (const auto& line : buffer_) {
            std::cout << line << std::endl;
        }
        buffer_.clear();
    }

    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

void processData(LogManager& logger, const std::vector<int>& data) {
    for (size_t i = 0; i <= data.size(); ++i) { // off-by-one error
        logger.log(""Processing index "" + std::to_string(i));
        // Simulate work
        int value = data[i] * 2; // may access out of bounds
        (void)value;
    }
}

int main() {
    LogManager logger;
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::thread t1(processData, std::ref(logger), std::cref(numbers));
    std::thread t2(processData, std::ref(logger), std::cref(numbers));
    t1.join();
    t2.join();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

class ConfigManager:
    def __init__(self):
        self.config_path = os.path.join(os.getcwd(), 'config.json')
        self.cache = None

    def get_config(self):
        if self.cache is not None:
            return self.cache
        
        if not os.path.exists(self.config_path):
            print('Config file not found. Creating default.')n            self.create_default_config()

        with open(self.config_path, 'r') as f:
            config = json.load(f)
            self.cache = config
            return config

    def create_default_config(self):
        default_config = {
            'app_name': 'MyApp',
            'log_level': 'INFO',
            'db_url': 'localhost:5432',
            'features': {
                'feature_a': True,
                'feature_b': False,
                'feature_c': True
            }
        }
        with open(self.config_path, 'w') as f:
            json.dump(default_config, f, indent=4)

    def update_config(self, key, value):
        self.cache[key] = value
        with open(self.config_path, 'w') as f:
            json.dump(self.cache, f, indent=4)

    def get_logging_level(self):
        return self.get_config()['log_level']

    def get_db_url(self):
        return self.get_config()['db_url']

    def is_feature_enabled(self, feature):
        return self.get_config()['features'].get(feature, False)",code_smell,lack_of_error_handling,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
      constructor() {
         this.users = {};
      }

      async addUser(username, password) {
         if (this.users[username]) {
            throw new Error('User already exists');
         }
         const hashedPassword = await this.hashPassword(password);
         this.users[username] = hashedPassword;
      }

      async hashPassword(password) {
         return new Promise((resolve) => {
            setTimeout(() => {
               resolve(password);
            }, 100);
         });
      }

      async authenticate(username, password) {
         if (!this.users[username]) {
            return false;
         }
         const storedHash = this.users[username];
         const providedHash = await this.hashPassword(password);
         return storedHash === providedHash;
      }
   }

   const userManager = new UserManager();
   async function main() {
      await userManager.addUser('testUser', 'testPassword');
      console.log(await userManager.authenticate('testUser', 'testPassword'));
   }
   main();
   ",code_smell,inefficient_loop_or_repeated_work,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""p@ssw0rd""; // hardcoded secret

    public User findUserById(int userId) throws SQLException {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
            return null;
        } finally {
            // Resources not closed properly, may leak connections
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
}

class User {
    private int id;
    private String username;
    private String email;
    public void setId(int id) { this.id = id; }
    public void setUsername(String username) { this.username = username; }
    public void setEmail(String email) { this.email = email; }
    public int getId() { return id; }
    public String getUsername() { return username; }
    public String getEmail() { return email; }
}
",code_defect,SQL_injection_and_resource_leak,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processData(const std::string& input) {
    std::string result;
    for (char c : input) {
        if (c >= 'A' && c <= 'Z') {
            result += c;
        } else if (c >= 'a' && c <= 'z') {
            result += c;
        } else {
            result += '#';
        }
    }
    return result;
}

int main() {
    std::string input;
    std::cout << ""Enter text: "";
    std::getline(std::cin, input);

    std::string processed = processData(input);
    std::cout << ""Processed data: "" << processed << std::endl;

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private static final String DEFAULT_PASSWORD = ""password123""; public boolean authenticateUser(String username, String password) { if (username.equals(""admin"") && password.equals(DEFAULT_PASSWORD)) { return true; } else { return false; } } public static void main(String[] args) { UserAuthenticator authenticator = new UserAuthenticator(); System.out.println(authenticator.authenticateUser(""admin"", ""password123"")); } }",code_defect,hardcoded_secrets,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');
const path = require('path');

class LogProcessor {
    constructor(logDir) {
        this.logDir = logDir;
        this.processed = new Set();
    }

    // Process all log files in the directory
    processAll() {
        const files = fs.readdirSync(this.logDir);
        files.forEach(file => {
            if (file.endsWith('.log')) {
                this.processFile(path.join(this.logDir, file));
            }
        });
    }

    // Asynchronously read and parse a log file
    async processFile(filePath) {
        if (this.processed.has(filePath)) return;
        // Missing await leads to race condition: multiple calls may read the same file concurrently
        fs.readFile(filePath, 'utf8', (err, data) => {
            if (err) {
                console.error('Failed to read', filePath, err);
                return;
            }
            const entries = data.split('\n').filter(line => line.trim() !== '');
            entries.forEach(entry => this.handleEntry(entry));
            this.processed.add(filePath);
        });
    }

    handleEntry(entry) {
        // Assume CSV: timestamp,level,message
        const [timestamp, level, ...msgParts] = entry.split(',');
        const message = msgParts.join(',');
        // Simple filter: only error level
        if (level === 'ERROR') {
            console.log(`[${timestamp}] ERROR: ${message}`);
        }
    }
}

// Usage example
const processor = new LogProcessor('/var/log/myapp');
processor.processAll();",code_defect,race_condition_due_to_missing_await,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data, int* resultArray, int size) {
    for (int i = 0; i < size; ++i) {
        resultArray[i] = data[i] * 2;
    }

    for (int i = 0; i < size; ++i) {
        if (data[i] % 2 == 0) {
            resultArray[i] += 1;
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5};
    int result[5];
    
    processData(input, result, 5);

    for (int i = 0; i < 5; ++i) {
        std::cout << result[i] << ""\n"";
    }

    return 0;
}",code_smell,inefficient_code,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger logger = LoggerFactory.getLogger(UserService.class); public void saveUser(User user) { try { Thread.sleep(1000); } catch (InterruptedException e) { logger.error(""Error saving user"", e); } user.setId(UUID.randomUUID()); user.setCreatedAt(new Date()); UserRepository.getInstance().save(user); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : filename(file) {}
    void process() {
        std::vector<std::string> lines = readLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off‑by‑one error
            std::lock_guard<std::mutex> lock(mtx);
            if (lines[i].find(""ERROR"") != std::string::npos) {
                ++errorCount;
            }
        }
    }
    int getErrorCount() const { return errorCount; }
private:
    std::vector<std::string> readLines() {
        // Simulated read; in real code would read from file
        return {""INFO start"", ""ERROR failed"", ""WARN low"", ""ERROR crash""};
    }
    std::string filename;
    int errorCount = 0;
    std::mutex mtx;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    std::thread t1([&lp](){ lp.process(); });
    std::thread t2([&lp](){ lp.process(); });
    t1.join();
    t2.join();
    std::cout << ""Total errors: "" << lp.getErrorCount() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.users = [];
  }

  validatePassword(password) {
    if (password.length < 8) return false;
    if (!/[A-Z]/.test(password)) return false;
    if (!/[a-z]/.test(password)) return false;
    if (!/\d/.test(password)) return false;
    return true;
  }

  registerUser(username, password) {
    const user = this.users.find(u => u.username === username);
    if (user) {
      console.log('User already exists');
      return false;
    }

    if (!this.validatePassword(password)) {
      console.log('Password is not valid');
      return false;
    }

    this.users.push({ username, password });
    console.log('User registered successfully');
    return true;
  }

  authenticateUser(username, password) {
    const user = this.users.find(u => u.username === username);
    if (!user) {
      console.log('User not found');
      return false;
    }

    // Potential defect in password comparison
    if (user.password !== password) {
      console.log('Incorrect password');
      return false;
    }

    console.log('User authenticated successfully');
    return true;
  }
}

// Example usage
const auth = new UserAuth();
auth.registerUser('john_doe', 'Password123');
auth.authenticateUser('john_doe', 'Password123');",code_defect,security_defect,,qwen/qwen3-32b
Python,"
class UserDatabase:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password
            return True
        return False

    def authenticate(self, username, password):
        if username in self.users:
            stored_password = self.users[username]
            for _ in range(100000):  # simulate some work
                pass
            return stored_password == password
        return False

    def get_all_users(self):
        return list(self.users.keys())

db = UserDatabase()
db.add_user('admin', 'password123')
print(db.authenticate('admin', 'password123'))
print(db.get_all_users())
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no input sanitization
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,hardcoded_credentials_and_sql_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  let result = '';
  if (input) {
    const temp = input.trim();
    if (temp.length > 0) {
      for (let i = 0; i < temp.length; i++) {
        const char = temp[i];
        if (/[a-zA-Z0-9]/.test(char)) {
          result += char.toUpperCase();
        } else {
          result += '*';
        }
      }
    }
  }
  return result;
}

function renderOutput(output) {
  const container = document.getElementById('output');
  if (container) {
    container.textContent = output;
  }
}

function handleFormSubmit(event) {
  event.preventDefault();
  const input = document.getElementById('userInput').value;
  const processed = processUserInput(input);
  renderOutput(processed);
}

document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('inputForm');
  if (form) {
    form.addEventListener('submit', handleFormSubmit);
  }
});",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async getUser(id) {
            const user = await this.userDao.findById(id);
            if (user) {
               return user;
            } else {
               throw new Error('User not found');
            }
         }

         async getUsers() {
            const users = await this.userDao.findAll();
            return users;
         }

         async createUser(user) {
            const existingUser = await this.userDao.findByEmail(user.email);
            if (existingUser) {
               throw new Error('Email already in use');
            }
            const newUser = await this.userDao.create(user);
            return newUser;
         }
      }

      class UserDao {
         async findById(id) {
            // simulate database query
            return { id: id, email: 'user@example.com' };
         }

         async findAll() {
            // simulate database query
            return [{ id: 1, email: 'user1@example.com' }, { id: 2, email: 'user2@example.com' }];
         }

         async findByEmail(email) {
            // simulate database query
            return { id: 1, email: email };
         }

         async create(user) {
            // simulate database query
            return { id: 3, email: user.email };
         }
      }

      const userDao = new UserDao();
      const userService = new UserService(userDao);
      userService.getUser(1).then(user => console.log(user)).catch(error => console.error(error));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        if (this.cache) return this.cache;
        const data = fs.readFileSync(this.path, 'utf8');
        // Missing try/catch: if file is malformed JSON, JSON.parse will throw and crash the process
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function processUserInput(input) {
    // Assume input is an object with a 'type' field
    if (input.type = 'admin') { // Bug: assignment instead of comparison
        grantAllPermissions();
    } else {
        grantLimitedPermissions();
    }
}

function grantAllPermissions() {
    console.log('All permissions granted');
    // ... more privileged actions ...
}

function grantLimitedPermissions() {
    console.log('Limited permissions granted');
}

module.exports = { ConfigLoader, processUserInput };",code_defect,logic_error,,openai/gpt-oss-120b
Python,"import os
import requests

def fetch_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    response = requests.get(url)
    data = response.json()

    if response.status_code != 200:
        return None

    return {
        'id': data['id'],
        'name': data['name'],
        'email': data.get('email', 'N/A'),
        'age': data.get('age', 0)
    }


def save_user_profile_to_file(user_data, output_dir='data'):
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    filename = os.path.join(output_dir, f""{user_data['id']}.txt"")

    with open(filename, 'w') as f:
        f.write(f""Name: {user_data['name']}\n"")
        f.write(f""Email: {user_data['email']}\n"")
        f.write(f""Age: {user_data['age']}\n"")


def process_users(user_ids):
    for user_id in user_ids:
        user_data = fetch_user_data(user_id)
        if user_data:
            save_user_profile_to_file(user_data)
        else:
            print(f'Failed to fetch data for user ID: {user_id}')

if __name__ == '__main__':
    user_ids = [1, 2, 3, 4, 5]
    process_users(user_ids)",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserManager { private Map<String, User> users = new HashMap<>(); public void addUser(String username, String password) { users.put(username, new User(username, password)); } public void authenticate(String username, String password) { User user = users.get(username); if (user != null && user.getPassword().equals(password)) { System.out.println(""Authentication successful""); } else { System.out.println(""Authentication failed""); } } public static class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            stmt = conn.createStatement();
            // Insecure concatenation leads to SQL injection if limit is derived from user input elsewhere
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        } catch (Exception e) {
            // Swallow exception, lose error information
        } finally {
            // Resources not closed properly, potential leak
        }
        return emails;
    }
}
",code_defect,resource_leak_and_sql_injection_risk,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

void processUserInput(const string& input, vector<string>& output) {
    string temp = input;
    for (int i = 0; i < temp.length(); ++i) {
        temp[i] = tolower(temp[i]);
    }

    if (temp.find(""keyword"") != string::npos) {
        output.push_back(temp);
    }

    for (int i = 0; i < 1000; ++i) {
        if (i % 2 == 0) {
            output.push_back(""even"");
        }
    }

    // Legacy code, not in use
    // output.clear();
}

int main() {
    vector<string> results;
    string input = ""SomeKeywordData"";
    processUserInput(input, results);

    for (const auto& item : results) {
        cout << item << endl;
    }

    return 0;
}",code_smell,long_function,,qwen/qwen3-32b
Python,"import json
import os
import threading

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self._config = {}
        self._lock = threading.Lock()
        self._load()

    def _load(self):
        # No error handling; will crash if file missing or malformed
        with open(self.path, 'r') as f:
            data = f.read()
        # Unsafe deserialization: using eval on file content
        self._config = eval(data)

    def get(self, key, default=None):
        with self._lock:
            return self._config.get(key, default)

    def set(self, key, value):
        with self._lock:
            self._config[key] = value
            # Writes back insecurely without atomicity
            with open(self.path, 'w') as f:
                f.write(str(self._config))

# Usage example
loader = ConfigLoader('config.cfg')
api_key = loader.get('API_KEY')  # Potentially loads secret from insecure source
",code_defect,unsafe_deserialization_using_eval,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(db, logger) {
    this.db = db;
    this.logger = logger;
  }

  authenticateUser(email, password) {
    const user = this.db.findUserByEmail(email);

    if (!user) {
      return false;
    }

    if (user.password !== password) {
      return false;
    }

    this.logger.log(`User ${email} authenticated successfully`);
    return true;
  }

  updatePassword(email, newPassword) {
    const user = this.db.findUserByEmail(email);

    if (!user) {
      return false;
    }

    user.password = newPassword;

    this.db.saveUser(user);
    this.logger.log(`Password for user ${email} updated`);
    return true;
  }

  generateToken(user) {
    const token = Math.random().toString(36).substring(2) + Date.now().toString(36);
    user.token = token;
    this.db.saveUser(user);
    return token;
  }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class UserService { constructor(userDao) { this.userDao = userDao; } async getUser(id) { let user = await this.userDao.getUser(id); if (!user) { user = { id, name: 'Unknown' }; } return user; } async getUsers() { let users = await this.userDao.getUsers(); if (!users) { users = []; } return users; } } class UserDao { constructor(db) { this.db = db; } async getUser(id) { return this.db.collection('users').findOne({ id }); } async getUsers() { return this.db.collection('users').find().toArray(); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : total_(0) {}
    void addData(const std::vector<int>& data) {
        std::lock_guard<std::mutex> lock(mtx_);
        for (int v : data) {
            buffer_.push_back(v);
        }
    }
    void process() {
        // Process data in parallel without proper synchronization
        std::thread t1(&DataProcessor::worker, this);
        std::thread t2(&DataProcessor::worker, this);
        t1.join();
        t2.join();
    }
    int getTotal() const { return total_; }
private:
    void worker() {
        while (true) {
            int value = 0;
            {
                std::lock_guard<std::mutex> lock(mtx_);
                if (buffer_.empty()) break;
                value = buffer_.back();
                buffer_.pop_back();
            }
            // Intentional race on total_ (no lock)
            total_ += value;
        }
    }
    std::vector<int> buffer_;
    int total_;
    mutable std::mutex mtx_;
};

int main() {
    DataProcessor dp;
    dp.addData({1,2,3,4,5,6,7,8,9,10});
    dp.process();
    std::cout << ""Total: "" << dp.getTotal() << std::endl;
    return 0;
}
",code_defect,data_race_on_shared_variable,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  addUser(newUser) {
    this.users.push(newUser);
  }

  removeUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        this.users.splice(i, 1);
        return;
      }
    }
  }

  getUserRolesByEmail(email) {
    const user = this.getUserByEmail(email);
    if (!user) {
      return [];
    }

    // Simulate fetching roles from an external source
    return fetchRolesFromDatabase(user.id);
  }

  getAllUsers() {
    return this.users;
  }
}

function fetchRolesFromDatabase(userId) {
  // Simulated role fetching logic
  const roles = {
    1: ['admin', 'user'],
    2: ['user'],
    3: ['guest']
  };

  return roles[userId] || [];
}

// Example usage
const userManager = new UserManager([
  { id: 1, name: 'Alice', email: 'alice@example.com' },
  { id: 2, name: 'Bob', email: 'bob@example.com' },
  { id: 3, name: 'Charlie', email: 'charlie@example.com' }
]);

console.log(userManager.getUserRolesByEmail('alice@example.com'));",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
       constructor(username, password) {
           this.username = username;
           this.password = password;
           this.loginAttempts = 0;
       }

       authenticate(passwordAttempt) {
           this.loginAttempts++;
           if (passwordAttempt === this.password) {
               return true;
           } else {
               return false;
           }
       }

       isLoggedIn() {
           return this.loginAttempts > 0;
       }
   }

   function main() {
       let account = new UserAccount('testUser', 'testPassword');
       console.log(account.authenticate('wrongPassword')); // Should print: false
       console.log(account.isLoggedIn()); // Should print: true
       console.log(account.authenticate('testPassword')); // Should print: true
   }

   main();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self._load_users()
        self.logger = logging.getLogger('UserManager')

    def _load_users(self):
        if not os.path.exists(self.db_path):
            self.users = {}
            return
        with open(self.db_path, 'r') as f:
            self.users = json.load(f)

    def save(self):
        with open(self.db_path, 'w') as f:
            json.dump(self.users, f)

    def add_user(self, username, email, is_admin=False, password_hash=None, last_login=None, profile_picture=None, bio=None):
        # Too many parameters, some rarely used
        self.users[username] = {
            'email': email,
            'is_admin': is_admin,
            'password_hash': password_hash,
            'last_login': last_login,
            'profile_picture': profile_picture,
            'bio': bio
        }
        self.logger.info(f""Added user {username}"")
        self.save()

    def get_user(self, username):
        return self.users.get(username)

    def delete_user(self, username):
        if username in self.users:
            del self.users[username]
            self.logger.warning(f""Deleted user {username}"")
            self.save()

    def list_admins(self):
        admins = []
        for user, data in self.users.items():
            if data.get('is_admin'):
                admins.append(user)
        return admins

# Usage example (would be removed in production)
if __name__ == '__main__':
    manager = UserManager('users.json')
    manager.add_user('alice', 'alice@example.com', is_admin=True)
    manager.add_user('bob', 'bob@example.com')
    print('Admins:', manager.list_admins())",code_smell,large_parameter_list,,openai/gpt-oss-120b
Python,"import os
import json

def parse_config(config_path='config.json'):
    with open(config_path, 'r') as f:
        config = json.load(f)

    for key in config:
        if isinstance(config[key], dict):
            for sub_key in config[key]:
                if sub_key == 'secret':
                    os.environ[sub_key] = config[key][sub_key]

    return config

if __name__ == '__main__':
    config = parse_config()
    print('Configuration loaded successfully.')",code_defect,security_issue,,qwen/qwen3-32b
JavaScript,"class PaymentProcessor { constructor() { this.paymentGateways = {}; } addGateway(gatewayName, gateway) { this.paymentGateways[gatewayName] = gateway; } processPayment(gatewayName, amount) { if (this.paymentGateways[gatewayName]) { return this.paymentGateways[gatewayName].processPayment(amount); } else { throw new Error('Gateway not found'); } } }",code_smell,Tight Coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}

    void addTransaction(int amount) {
        std::lock_guard<std::mutex> lock(mtx_);
        pending_.push_back(amount);
    }

    void processAll() {
        // Process pending transactions in parallel
        std::vector<std::thread> workers;
        for (size_t i = 0; i < pending_.size(); ++i) {
            workers.emplace_back([this, i]() {
                // Simulate work
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                // BUG: race condition – total_ is updated without holding the mutex
                total_ += pending_[i];
            });
        }
        for (auto &t : workers) {
            if (t.joinable()) t.join();
        }
        pending_.clear();
    }

    int getTotal() const { return total_; }

private:
    std::vector<int> pending_;
    int total_;
    mutable std::mutex mtx_;
};

int main() {
    TransactionProcessor tp;
    for (int i = 0; i < 100; ++i) {
        tp.addTransaction(1);
    }
    tp.processAll();
    std::cout << ""Total processed: "" << tp.getTotal() << std::endl;
    return 0;
}
",code_defect,race_condition,,openai/gpt-oss-120b
Python,"import requests

class DataProcessor:
    def __init__(self, base_url=""https://api.example.com/data""):
        self.base_url = base_url
        self.api_key = ""hardcoded_secret_key_123""

    def fetch_and_process(self, user_id):
        response = requests.get(f""{self.base_url}/{user_id}"", headers={""Authorization"": self.api_key})
        if response.status_code != 200:
            return None

        data = response.json()
        result = []
        for item in data:
            if item['type'] == 'user' and item['status'] == 'active':
                result.append({
                    'id': item['id'],
                    'name': item['name'],
                    'email': item['email']
                })
        return result

processor = DataProcessor()
active_users = processor.fetch_and_process(12345)
print(active_users)",code_defect,hardcoded_secrets,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserRepository {
public:
    vector<User> users;
    void addUser(User u) { users.push_back(u); }
    User* getUser(string name) {
        for (auto& u : users) {
            if (u.name == name) return &u;
        }
        return nullptr;
    }
};

int main() {
    UserRepository repo;
    repo.addUser(User(""John"", 30));
    User* user = repo.getUser(""John"");
    if (user) cout << user->name << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {
        // Load users from a data source (simulated)
        users_ = {""alice"", ""bob"", ""carol""};
    }

    // Returns the user at the given index. If index is out of range, returns empty string.
    std::string getUserByIndex(size_t idx) const {
        if (idx < users_.size()) {
            return users_[idx];
        }
        return """";
    }

    // Finds a user by name and returns its index, or -1 if not found.
    int findUser(const std::string& name) const {
        for (size_t i = 0; i <= users_.size(); ++i) { // BUG: off‑by‑one, may read past end
            if (users_[i] == name) {
                return static_cast<int>(i);
            }
        }
        return -1;
    }

private:
    std::vector<std::string> users_;
};

int main() {
    UserManager um;
    std::cout << ""User at 1: "" << um.getUserByIndex(1) << std::endl;
    int idx = um.findUser(""bob"");
    std::cout << ""Index of bob: "" << idx << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import sqlite3

class UserAuth:
    def __init__(self):
        self.db_path = 'users.db'
        self.connection = sqlite3.connect(self.db_path, check_same_thread=False)
        self.cursor = self.connection.cursor()
        self._init_db()

    def _init_db(self):
        self.cursor.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)')
        self.connection.commit()

    def authenticate_user(self, username, password):
        query = f""SELECT * FROM users WHERE username = '{username}' AND password = '{password}'""
        self.cursor.execute(query)
        result = self.cursor.fetchone()
        return result is not None

    def add_user(self, username, password):
        if not username or not password:
            return False
        query = f""INSERT INTO users (username, password) VALUES ('{username}', '{password}')""
        try:
            self.cursor.execute(query)
            self.connection.commit()
            return True
        except Exception as e:
            print(f""Error adding user: {e}"")
            return False",code_defect,security_vulnerability,,qwen/qwen3-32b
JavaScript,"class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getUsers() { const users = await this.userRepository.findAll(); return users.map(user => ({ id: user.id, name: user.name })); } async getUserById(id) { const user = await this.userRepository.findById(id); if (!user) return null; return { id: user.id, name: user.name }; } } class UserRepository { constructor(db) { this.db = db; } async findAll() { return await this.db.query('SELECT * FROM users'); } async findById(id) { return (await this.db.query('SELECT * FROM users WHERE id = $1', [id]))[0]; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // No try/catch: if file is missing, exception propagates and crashes the process
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

class UserService {
  constructor(db) {
    this.db = db;
    this.config = new ConfigLoader('./config.json');
  }

  async getUserProfile(userId) {
    const config = this.config.load(); // synchronous I/O in async method
    const query = `SELECT * FROM users WHERE id = ${userId}`; // SQL injection risk
    const result = await this.db.query(query);
    if (!result) return null;
    // Off‑by‑one error: assumes result[0] exists
    const user = result[0];
    user.role = config.defaultRole; // mutates result object unintentionally
    return user;
  }
}

module.exports = { ConfigLoader, UserService };",code_defect,sql_injection_and_off_by_one,,openai/gpt-oss-120b
Python,"import requests
import json

class DataProcessor:
    def __init__(self, url, auth_token):
        self.url = url
        self.auth_token = auth_token
        self.data_cache = []

    def fetch_and_process_data(self):
        headers = {
            'Authorization': f'Bearer {self.auth_token}',
            'Content-Type': 'application/json'
        }
        response = requests.get(self.url, headers=headers)
        
        if response.status_code == 200:
            raw_data = json.loads(response.text)
            for item in raw_data:
                if 'id' in item and 'value' in item:
                    processed = {
                        'identifier': item['id'],
                        'normalized_value': self.normalize_value(item['value'])
                    }
                    self.data_cache.append(processed)
            return self.data_cache
        else:
            print('Error fetching data')
            return []

    def normalize_value(self, value):
        return value.strip().lower()",code_smell,large_class,,qwen/qwen3-32b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  async getAllUsers() {
    return this.users;
  }

  async getUserById(id) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        return this.users[i];
      }
    }
    return null;
  }
}

const users = [
  { id: 1, name: 'John Doe' },
  { id: 2, name: 'Jane Doe' },
  { id: 3, name: 'Bob Smith' }
];

const userManager = new UserManager(users);

async function main() {
  const allUsers = await userManager.getAllUsers();
  console.log(allUsers);
  const user = await userManager.getUserById(2);
  console.log(user);
}

main();",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i];
            if (value % 2 == 0) {
                results_.push_back(value * 2);
            }
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& results() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1,2,3,4,5};
    std::thread t([&](){ processor.process(input); });
    t.join();
    for (int v : processor.results()) {
        std::cout << v << "" "";
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    std::vector<int> result;
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] > 10) {
            result.push_back(data[i]);
        }
    }

    // Legacy code - not used anymore
    // for (size_t i = 0; i < result.size(); ++i) {
    //     std::cout << ""Legacy: "" << result[i] << std::endl;
    // }

    for (size_t i = 0; i < result.size(); ++i) {
        std::cout << ""Processed: "" << result[i] << std::endl;
    }
}

int main() {
    std::vector<int> input = {5, 15, 3, 20, 8, 30};
    processData(input);
    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"class UserService { constructor(userDao) { this.userDao = userDao; } async getUser(id) { let user = await this.userDao.getUser(id); if (user) { user.roles = await this.userDao.getUserRoles(id); } return user; } } class UserDao { async getUser(id) { return { id: id, name: 'John Doe' }; } async getUserRoles(id) { return ['admin', 'moderator']; } } let userDao = new UserDao(); let userService = new UserService(userDao); userService.getUser(1).then(user => console.log(user));",code_smell,Tight Coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Synchronously read config file each time, ignoring cache
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) this.load();
    return this.cache[key];
  }
}

function processData(input) {
  const loader = new ConfigLoader('./config.json');
  const threshold = loader.get('threshold');
  // Off-by-one error: should be i < input.length
  for (let i = 0; i <= input.length; i++) {
    if (input[i] > threshold) {
      console.log('Value exceeds threshold:', input[i]);
    }
  }
}

module.exports = { ConfigLoader, processData };",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import time

def process_data(data):
    result = []
    for item in data:
        if item['status'] == 'active':
            processed = {
                'id': item['id'],
                'name': item['name'],
                'timestamp': time.time()
            }
            result.append(processed)
        else:
            # Legacy items should be ignored for now
            pass
    return result

def main():
    file_path = 'data.json'
    with open(file_path, 'r') as f:
        data = f.read()
        items = eval(data)
        processed = process_data(items)
        print(f'Processed {len(processed)} items.')

if __name__ == '__main__':
    main()",code_smell,use_of_eval,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = "" + str(user_id))
        user_data = cursor.fetchone()
        return user_data

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = '"" + new_data['name'] + ""', email = '"" + new_data['email'] + ""' WHERE id = "" + str(user_id))
        self.db_connection.commit()

# usage
import sqlite3
db_connection = sqlite3.connect('users.db')
user_service = UserService(db_connection)
user = user_service.get_user(1)
print(user)
",code_defect,insecure_SQL_queries,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // JSON.parse can throw, but we ignore errors -> defect
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    const cfg = this.load();
    return cfg[key];
  }
}

// Usage
const loader = new ConfigLoader('/etc/app/config.json');
const port = loader.get('port');
console.log(`Server will start on port ${port}`);
",code_defect,unhandled_exception_on_invalid_json,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

string process_user_data(const string& input) {
    string processed = input;

    if (processed.length() > 100) {
        processed = processed.substr(0, 100);
    }

    if (processed.find('!') != string::npos) {
        processed = processed.replace(processed.find('!'), 1, """");
    }

    if (processed.find(''') != string::npos) {
        processed = processed.replace(processed.find('''), 1, """");
    }

    if (processed.find(""--"") != string::npos) {
        processed = processed.replace(processed.find(""--""), 2, """");
    }

    return processed;
}

int main() {
    string user_input;
    cout << ""Enter data: "";
    getline(cin, user_input);

    string result = process_user_data(user_input);
    cout << ""Processed data: "" << result << endl;

    return 0;
}",code_smell,long_function,,qwen/qwen3-32b
Python,"
class UserDatabase:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password
        else:
            print('User already exists')

    def check_credentials(self, username, password):
        if username in self.users:
            return self.users[username] == password
        else:
            return False

    def get_all_users(self):
        return list(self.users.keys())

    def remove_user(self, username):
        if username in self.users:
            del self.users[username]
        else:
            print('User does not exist')

    def update_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
        else:
            print('User does not exist')

    def authenticate(self, username, password):
        if self.check_credentials(username, password):
            return True
        else:
            for user in self.users:
                if self.users[user] == password:
                    return True
            return False
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self.conn.row_factory = sqlite3.Row
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, email: str) -> int:
        cur = self.conn.execute(
            ""INSERT INTO users (username, email) VALUES (?, ?)"",
            (username, email)
        )
        self.conn.commit()
        return cur.lastrowid

    def get_users_page(self, page: int, page_size: int = 10):
        offset = (page - 1) * page_size
        cur = self.conn.execute(
            ""SELECT * FROM users ORDER BY id LIMIT ? OFFSET ?"",
            (page_size, offset)
        )
        return [dict(row) for row in cur.fetchall()]

    def delete_user(self, user_id: int) -> bool:
        cur = self.conn.execute(""DELETE FROM users WHERE id = ?"", (user_id,))
        self.conn.commit()
        return cur.rowcount > 0

# Usage example (not part of production code)
if __name__ == ""__main__"":
    repo = UserRepository(':memory:')
    for i in range(1, 21):
        repo.add_user(f'user{i}', f'user{i}@example.com')
    # Intent: get the second page of users (items 11-20)
    second_page = repo.get_users_page(2)
    print('Second page users:', second_page)
    # Bug: requesting page 0 returns the last page instead of an empty list
    zero_page = repo.get_users_page(0)
    print('Zero page users (should be empty):', zero_page)",code_defect,off_by_one_error_in_pagination,,openai/gpt-oss-120b
Python,"import os
import sqlite3

def get_user_data(username):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = f""SELECT * FROM users WHERE username = '{username}'""  # Vulnerable to SQL injection
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result


def main():
    user_input = input(""Enter username: "")
    user_data = get_user_data(user_input)
    if user_data:
        print(f""User found: {user_data}"")
    else:
        print(""User not found."")

if __name__ == ""__main__"":
    main()",code_defect,security_vulnerability,,qwen/qwen3-32b
Python,"class UserAuthenticator:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def authenticate(self, username, password):
        query = ""SELECT * FROM users WHERE username = '{}' AND password = '{}'"".format(username, password)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user = cursor.fetchone()
        if user:
            return True
        return False",code_defect,insecure SQL query,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getPendingTransactions() throws Exception {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(""SELECT id FROM transactions WHERE status='PENDING'"");
        List<String> ids = new ArrayList<>();
        while (rs.next()) {
            ids.add(rs.getString(""id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return ids;
    }

    public void processTransactions() throws Exception {
        List<String> pending = getPendingTransactions();
        for (int i = 0; i <= pending.size(); i++) { // off-by-one error
            String txId = pending.get(i);
            // Simulate processing
            System.out.println(""Processing transaction "" + txId);
            // Update status without proper transaction handling
            updateTransactionStatus(txId, ""COMPLETED"");
        }
    }

    private void updateTransactionStatus(String transactionId, String newStatus) throws Exception {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        Statement stmt = conn.createStatement();
        String sql = ""UPDATE transactions SET status='"" + newStatus + ""' WHERE id='"" + transactionId + ""'"";
        stmt.executeUpdate(sql);
        stmt.close();
        conn.close();
    }
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processData(const std::vector<std::string>& input, std::vector<int>& results) {
    for (size_t i = 0; i < input.size(); ++i) {
        int val = 0;
        try {
            val = std::stoi(input[i]);
        } catch (...) {
            // Ignore invalid input
        }
        results.push_back(val);
    }
}

int main() {
    std::vector<std::string> data = {""123"", ""abc"", ""456"", """", ""789""};
    std::vector<int> output;
    processData(data, output);

    for (int num : output) {
        std::cout << num << ""\n"";
    }

    return 0;
}",code_defect,missing_error_handling,,qwen/qwen3-32b
JavaScript,"
   class UserDatabase {
      constructor() {
         this.users = {};
      }

      addUser(id, name, email) {
         if (this.users[id]) {
            return;
         }
         this.users[id] = { name, email };
      }

      removeUser(id) {
         delete this.users[id];
      }

      getUser(id) {
         return this.users[id];
      }
   }

   class UserService {
      constructor(database) {
         this.database = database;
      }

      registerUser(id, name, email) {
         this.database.addUser(id, name, email);
      }

      getUserProfile(id) {
         const user = this.database.getUser(id);
         if (!user) {
            throw new Error('User not found');
         }
         return user;
      }
   }

   const database = new UserDatabase();
   const service = new UserService(database);
   service.registerUser(1, 'John Doe', 'john@example.com');
   console.log(service.getUserProfile(1));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    // Returns the index of the user or -1 if not found
    int findUser(const std::string& name) const {
        for (size_t i = 0; i <= users.size(); ++i) { // BUG: off‑by‑one, may access out of bounds
            if (users[i] == name) {
                return static_cast<int>(i);
            }
        }
        return -1;
    }

    void removeUser(const std::string& name) {
        int idx = findUser(name);
        if (idx != -1) {
            users.erase(users.begin() + idx);
        }
    }

    void printAll() const {
        for (const auto& u : users) {
            std::cout << u << std::endl;
        }
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.addUser(""carol"");
    um.removeUser(""bob"");
    um.printAll();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor() {
    this.orders = [];
    this.totalRevenue = 0;
  }

  addOrder(order) {
    this.orders.push(order);
    this.totalRevenue += order.amount;
  }

  processOrders() {
    this.orders.forEach(order => {
      if (order.status === 'unpaid') {
        this.sendPaymentReminder(order);
      }
    });
  }

  sendPaymentReminder(order) {
    // Simulate email sending
    console.log(`Sending payment reminder for order ${order.id}`);
    this.updateOrderStatus(order.id, 'reminder_sent');
  }

  updateOrderStatus(id, status) {
    const order = this.orders.find(o => o.id === id);
    if (order) {
      order.status = status;
    }
  }

  getOrdersByStatus(status) {
    return this.orders.filter(order => order.status === status);
  }
}

// Example usage
const processor = new OrderProcessor();
processor.addOrder({ id: 1, amount: 100, status: 'unpaid' });
processor.addOrder({ id: 2, amount: 50, status: 'paid' });
processor.processOrders();",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""appuser"";
    private static final String PASS = ""apppass"";

    public String getUserEmail(String username) {
        String email = null;
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT email FROM users WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                email = rs.getString(""email"");
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception e) {}
            try { if (conn != null) conn.close(); } catch (Exception e) {}
        }
        return email;
    }
}
",code_defect,sql_injection,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  let result = '';
  for (let i = 0; i < input.length; i++) {
    if (input[i] === 'a') {
      result += '1';
    } else if (input[i] === 'e') {
      result += '2';
    } else if (input[i] === 'i') {
      result += '3';
    } else if (input[i] === 'o') {
      result += '4';
    } else if (input[i] === 'u') {
      result += '5';
    } else {
      result += input[i];
    }
  }
  return result;
}

function main() {
  const userInput = 'This is an example input';
  const processed = processUserInput(userInput);
  console.log(`Processed: ${processed}`);
}

main();",code_smell,long_function,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, user_id, username, password):
        self.users[user_id] = {'username': username, 'password': password}

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, username, password):
        if user_id in self.users:
            self.users[user_id]['username'] = username
            self.users[user_id]['password'] = password
        else:
            print('User not found')

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
        else:
            print('User not found')

    def save_to_file(self):
        import pickle
        with open(self.db_file, 'wb') as f:
            pickle.dump(self.users, f)

    def load_from_file(self):
        import pickle
        try:
            with open(self.db_file, 'rb') as f:
                self.users = pickle.load(f)
        except FileNotFoundError:
            pass

# usage
user_db = UserDatabase('users.db')
user_db.add_user(1, 'john', 'password123')
user_db.save_to_file()
user_db.load_from_file()
print(user_db.get_user(1))",code_defect,insecure_deserialization,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<Transaction> getPendingTransactions() throws SQLException {
        List<Transaction> pending = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction tx = new Transaction();
            tx.setId(rs.getInt(""id""));
            tx.setAmount(rs.getDouble(""amount""));
            tx.setStatus(rs.getString(""status""));
            pending.add(tx);
        }
        // Missing close of ResultSet, Statement, and Connection -> resource leak
        return pending;
    }

    public void processTransactions() {
        try {
            List<Transaction> txs = getPendingTransactions();
            for (Transaction tx : txs) {
                // Simulate processing
                if (tx.getAmount() < 0) {
                    // Incorrect logic: negative amounts should be rejected, but code proceeds
                    tx.setStatus(""PROCESSED"");
                }
                updateTransactionStatus(tx);
            }
        } catch (SQLException e) {
            // Swallow exception, no logging
        }
    }

    private void updateTransactionStatus(Transaction tx) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""UPDATE transactions SET status=? WHERE id=?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, tx.getStatus());
            stmt.setInt(2, tx.getId());
            stmt.executeUpdate();
            // Missing close of Statement and Connection
        } catch (SQLException e) {
            // Ignored
        }
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_logic_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

struct User {
    std::string name;
    int age;
    std::string email;
};

void processUser(const User& user) {
    if (user.age < 18) {
        std::cout << ""User is underage.\n"";
        return;
    }

    std::string emailDomain = user.email.substr(user.email.find('@') + 1);
    if (emailDomain != ""example.com"") {
        std::cout << ""Invalid email domain.\n"";
        return;
    }

    std::cout << ""User is valid: "" << user.name << ""\n"";
}

int main() {
    User user1 = {""Alice"", 25, ""alice@example.com""};
    User user2 = {""Bob"", 17, ""bob@example.com""};
    User user3 = {""Charlie"", 30, ""charlie@invalid.com""};

    processUser(user1);
    processUser(user2);
    processUser(user3);

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    std::string name;
    int age;

    User(std::string name, int age) : name(name), age(age) {}

    void printInfo() {
        std::cout << ""Name: "" << name << std::endl;
        std::cout << ""Age: "" << age << std::endl;
    }
};

class UserManager {
public:
    std::vector<User> users;

    void addUser(User user) {
        users.push_back(user);
    }

    void printAllUsers() {
        for (User user : users) {
            user.printInfo();
        }
    }
};

int main() {
    UserManager userManager;
    userManager.addUser(User(""John Doe"", 30));
    userManager.addUser(User(""Jane Doe"", 25));
    userManager.printAllUsers();
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <mutex>

class ConfigLoader {
public:
    ConfigLoader(const std::string& path) : filePath(path) {}
    std::vector<std::string> load() {
        std::ifstream file(filePath);
        std::vector<std::string> lines;
        std::string line;
        while (std::getline(file, line)) {
            lines.push_back(line);
        }
        return lines;
    }
private:
    std::string filePath;
};

class Logger {
public:
    static Logger& instance() {
        static Logger logger;
        return logger;
    }
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << msg << std::endl;
    }
private:
    Logger() {}
    std::mutex mtx;
};

class Processor {
public:
    Processor(const std::string& cfgPath) : loader(cfgPath) {}
    void run() {
        auto lines = loader.load();
        for (size_t i = 0; i <= lines.size(); ++i) { // off-by-one error
            processLine(lines[i]);
        }
    }
private:
    void processLine(const std::string& line) {
        // Simulate processing
        if (line.empty()) return;
        Logger::instance().log(""Processed: "" + line);
    }
    ConfigLoader loader;
};

int main(int argc, char* argv[]) {
    if (argc < 2) {
        std::cerr << ""Usage: "" << argv[0] << "" <config_file>"" << std::endl;
        return 1;
    }
    Processor proc(argv[1]);
    proc.run();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input, std::vector<int>& results) {
    for (size_t i = 0; i < input.length(); ++i) {
        char c = input[i];
        if (c >= '0' && c <= '9') {
            int num = c - '0';
            results.push_back(num);
        } else {
            std::cout << ""Skipping non-digit character: ' "" << c << "" ' at position "" << i << std::endl;
        }
    }
}

int main() {
    std::string input = ""12a34b56c78"";
    std::vector<int> extractedNumbers;

    processUserInput(input, extractedNumbers);

    std::cout << ""Extracted numbers: "";
    for (int num : extractedNumbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserRepository { private static Map<String, User> users = new HashMap<>(); public synchronized User getUser(String id) { for (User user : users.values()) { if (user.getId().equals(id)) { return user; } } return null; } public synchronized void saveUser(User user) { users.put(user.getId(), user); } }",code_smell,inefficient_data_structure,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        try {
            conn = getConnection();
            conn.setAutoCommit(false);
            if (deductBalance(conn, userId, amount)) {
                recordTransaction(conn, userId, amount);
                conn.commit();
                return true;
            } else {
                conn.rollback();
                return false;
            }
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ignored) {}
            return false;
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }

    private Connection getConnection() throws SQLException {
        Properties props = new Properties();
        props.setProperty(""user"", DB_USER);
        props.setProperty(""password"", DB_PASS);
        return DriverManager.getConnection(DB_URL, props);
    }

    private boolean deductBalance(Connection conn, String userId, double amount) throws SQLException {
        String sql = ""SELECT balance FROM accounts WHERE user_id = ? FOR UPDATE"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, userId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    double newBalance = balance - amount;
                    String update = ""UPDATE accounts SET balance = "" + newBalance + "" WHERE user_id = ?""; // SQL injection risk
                    try (PreparedStatement upd = conn.prepareStatement(update)) {
                        upd.setString(1, userId);
                        upd.executeUpdate();
                    }
                    return true;
                }
            }
        }
        return false;
    }

    private void recordTransaction(Connection conn, String userId, double amount) throws SQLException {
        String sql = ""INSERT INTO transactions (user_id, amount, timestamp) VALUES (?, ?, NOW())"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, userId);
            stmt.setDouble(2, amount);
            stmt.executeUpdate();
        }
    }
}
",code_defect,SQL injection vulnerability and hardcoded credentials,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private final Database database;

    public OrderProcessor(Database database) {
        this.database = database;
    }

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }
        String userId = order.getUserId();
        if (userId == null || userId.isEmpty()) {
            return;
        }
        User user = database.getUser(userId);
        if (user == null) {
            return;
        }
        if (order.getTotalPrice() <= 0) {
            return;
        }
        if (user.getBalance() < order.getTotalPrice()) {
            return;
        }
        user.setBalance(user.getBalance() - order.getTotalPrice());
        database.saveUser(user);
        database.saveOrder(order);
    }
}

class Database {
    public User getUser(String id) {
        // Simulated DB lookup
        return new User(""123"", 1000.0);
    }

    public void saveUser(User user) {
        // Simulated DB save
    }

    public void saveOrder(Order order) {
        // Simulated DB save
    }
}

class User {
    private String id;
    private double balance;

    public User(String id, double balance) {
        this.id = id;
        this.balance = balance;
    }

    public String getId() {
        return id;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }
}

class Order {
    private String userId;
    private double totalPrice;

    public Order(String userId, double totalPrice) {
        this.userId = userId;
        this.totalPrice = totalPrice;
    }

    public String getUserId() {
        return userId;
    }

    public double getTotalPrice() {
        return totalPrice;
    }
}",code_defect,race_condition,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
       constructor(paymentGateway) {
           this.paymentGateway = paymentGateway;
       }

       processPayment(amount, currency) {
           if (this.paymentGateway === 'paypal') {
               return this.payWithPaypal(amount, currency);
           } else if (this.paymentGateway === 'stripe') {
               return this.payWithStripe(amount, currency);
           } else {
               return this.payWithBankTransfer(amount, currency);
           }
       }

       payWithPaypal(amount, currency) {
           // implementation details
           return true;
       }

       payWithStripe(amount, currency) {
           // implementation details
           return true;
       }

       payWithBankTransfer(amount, currency) {
           // implementation details
           return true;
       }
   }

   function main() {
       const paymentProcessor = new PaymentProcessor('stripe');
       paymentProcessor.processPayment(100, 'USD');
   }

   main();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  // Loads JSON config synchronously; caches result
  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // BUG: JSON.parse can throw, but not caught -> crashes the process
    this.cache = JSON.parse(data);
    return this.cache;
  }

  // Returns a config value; defaults to undefined if missing
  get(key) {
    const cfg = this.load();
    // BUG: missing check for nested keys, leads to TypeError
    return cfg[key];
  }
}

// Usage example
const loader = new ConfigLoader('./config.json');
const port = loader.get('serverPort');
console.log(`Server will start on port ${port}`);

// Simulate async init that depends on config
async function startServer() {
  // BUG: Not awaiting load, but load is sync, so this is fine; however, if load throws, unhandled promise rejection
  const dbConfig = loader.get('db');
  // Simulated DB connection using insecure string interpolation
  const connStr = `postgres://${dbConfig.user}:${dbConfig.pass}@${dbConfig.host}/${dbConfig.name}`;
  // BUG: Hardcoded credentials may be logged
  console.log('Connecting to DB with', connStr);
  // Placeholder for actual DB connection
}

startServer();",code_defect,unhandled_exception,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                continue;
            }

            Product product = item.getProduct();
            if (product == null) {
                continue;
            }

            double totalPrice = product.getPrice() * item.getQuantity();
            if (totalPrice <= 0) {
                continue;
            }

            order.setTotalPrice(order.getTotalPrice() + totalPrice);
            item.setStatus(""Processed"");
        }
    }

    // TODO: Need to handle tax and shipping
}

// Legacy code below
// public void calculateTax(Order order) {
//     // Old implementation removed
// }",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor() {
            this.users = [];
         }

         addUser(user) {
            this.users.push(user);
         }

         getUserById(id) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === id) {
                  return this.users[i];
               }
            }
            return null;
         }

         getUsers() {
            return this.users;
         }
      }

      class UserController {
         constructor(userService) {
            this.userService = userService;
         }

         handleGetUsersRequest() {
            return this.userService.getUsers();
         }
      }

      const userService = new UserService();
      const userController = new UserController(userService);

      userController.handleGetUsersRequest();
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            conn.setAutoCommit(false);
            if (deductFromAccount(conn, accountId, amount)) {
                if (logTransaction(conn, accountId, amount)) {
                    conn.commit();
                    return true;
                }
            }
            conn.rollback();
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ex) {}
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException ex) {}
        }
        return false;
    }

    private boolean deductFromAccount(Connection conn, String accountId, double amount) throws SQLException {
        String sql = ""SELECT balance FROM accounts WHERE id = '"" + accountId + ""'""; // SQL injection risk
        try (PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    String update = ""UPDATE accounts SET balance = balance - "" + amount + "" WHERE id = '"" + accountId + ""'"";
                    try (PreparedStatement upd = conn.prepareStatement(update)) {
                        upd.executeUpdate();
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean logTransaction(Connection conn, String accountId, double amount) throws SQLException {
        String sql = ""INSERT INTO transactions (account_id, amount, timestamp) VALUES (?, ?, NOW())"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, accountId);
            stmt.setDouble(2, amount);
            stmt.executeUpdate();
            return true;
        }
    }
}
",code_defect,SQL injection vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) return;

        String customerEmail = order.getCustomerEmail();
        double total = 0.0;

        for (Item item : order.getItems()) {
            total += item.getPrice() * item.getQuantity();
        }

        // Apply discount if applicable
        if (order.getCustomerType() == CustomerType.VIP) {
            total *= 0.9;
        }

        // Send confirmation email
        EmailService.sendEmail(customerEmail, ""Order Confirmation"", ""Your order has been processed."");

        // Save to database
        try {
            Database.save(order);
        } catch (Exception e) {
            // Ignored silently
        }
    }
}",code_smell,error_swallowed,,qwen/qwen3-32b
JavaScript,"
      class User {
         constructor(id, name, email) {
            this.id = id;
            this.name = name;
            this.email = email;
            this.address = {};
         }

         save() {
            const users = JSON.parse(localStorage.getItem('users')) || [];
            users.push(this);
            localStorage.setItem('users', JSON.stringify(users));
         }

         static getAllUsers() {
            return JSON.parse(localStorage.getItem('users')) || [];
         }
      }

      function loadUsers() {
         const users = User.getAllUsers();
         users.forEach(user => {
            console.log(user.name);
         });
      }

      const user = new User(1, 'John Doe', 'john@example.com');
      user.save();
      loadUsers();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASS = ""password"";

    public List<String> getUserEmails(int limit) throws SQLException {
        List<String> emails = new ArrayList<>();
        String sql = ""SELECT email FROM users LIMIT "" + limit; // vulnerable to injection if limit derived from user input
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        }
        return emails;
    }

    public void deleteUser(String username) throws SQLException {
        String sql = ""DELETE FROM users WHERE username = ?"";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            stmt.executeUpdate();
        }
    }
}
",code_defect,SQL injection via concatenated limit parameter,,openai/gpt-oss-120b
Python,"import os
import time
import requests

API_KEY = '1234567890'


def get_weather_data(city_name):
    url = f'https://api.weatherapi.com/v1/current.json?key={API_KEY}&q={city_name}'
    response = requests.get(url)
    return response.json()


def main():
    city = input('Enter city name: ')
    weather_data = get_weather_data(city)

    if weather_data:
        print(f'Weather in {city}:')
        print(f'- Temperature: {weather_data[""current""][""temp_c""]}°C')
        print(f'- Condition: {weather_data[""current""][""condition""][""text""]}')
        print(f'- Wind Speed: {weather_data[""current""][""wind_kph""]} kph')
        print(f'- Humidity: {weather_data[""current""][""humidity""]}%')
    else:
        print('Failed to fetch weather data.')

    time.sleep(5)

if __name__ == '__main__':
    main()",code_defect,hardcoded_secret,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
   User(std::string name, int age) : name(name), age(age) {}
   std::string getName() { return name; }
   int getAge() { return age; }
private:
   std::string name;
   int age;
};

class UserService {
public:
   static UserService& getInstance() {
      static UserService instance;
      return instance;
   }

   void saveUser(User user) {
      users.push_back(user);
   }

   User* getUserByName(std::string name) {
      for (auto& user : users) {
         if (user.getName() == name) {
            return &user;
         }
      }
      return nullptr;
   }

private:
   UserService() {}
   std::vector<User> users;
};

int main() {
   UserService::getInstance().saveUser(User(""John Doe"", 30));
   User* user = UserService::getInstance().getUserByName(""John Doe"");
   if (user != nullptr) {
      std::cout << user->getName() << std::endl;
   }
   return 0;
}
",code_defect,dangling_pointer,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}

    void addTransaction(int amount) {
        // No validation, negative amounts allowed
        std::lock_guard<std::mutex> lock(mtx_);
        transactions_.push_back(amount);
        total_ += amount;
    }

    int getTotal() const {
        return total_;
    }

    void processAll() {
        // Process each transaction in a separate thread
        for (size_t i = 0; i < transactions_.size(); ++i) {
            std::thread([this, i]() {
                // Simulate work
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                // Intentional bug: using i after loop may cause out-of-bounds if vector resized
                int val = transactions_[i];
                // Dummy processing
                (void)val;
            }).detach();
        }
    }

private:
    std::vector<int> transactions_;
    int total_;
    mutable std::mutex mtx_;
};

int main() {
    TransactionProcessor tp;
    tp.addTransaction(100);
    tp.addTransaction(-50); // negative transaction allowed
    tp.processAll();
    std::cout << ""Total: "" << tp.getTotal() << std::endl;
    // Program may exit before detached threads finish
    return 0;
}",code_defect,race_condition_and_use_after_detach,,openai/gpt-oss-120b
Python,"import requests
import json
import os

API_KEY = '1234567890'

def fetch_weather_data(city):
    url = f'https://api.weatherapi.com/v1/current.json?key={API_KEY}&q={city}'
    response = requests.get(url)
    if response.status_code == 200:
        data = json.loads(response.text)
        return data
    return None

def display_weather_info(data):
    print(f""Temperature: {data['current']['temp_c']}°C"")
    print(f""Condition: {data['current']['condition']['text']}"")
    print(f""Humidity: {data['current']['humidity']}%"")

if __name__ == '__main__':
    city = input(""Enter city name: "")
    weather_data = fetch_weather_data(city)
    if weather_data:
        display_weather_info(weather_data)
    else:
        print(""Failed to fetch weather data."")",code_defect,hardcoded_credentials,,qwen/qwen3-32b
Python,"class UserManager:
    def __init__(self, db_connection):
        self.db_connection = db_connection
        self.users = {}

    def get_user(self, user_id):
        if user_id not in self.users:
            self.users[user_id] = self.db_connection.get_user(user_id)
        return self.users[user_id]

    def update_user(self, user_id, new_data):
        if user_id in self.users:
            self.users[user_id].update(new_data)
            self.db_connection.update_user(user_id, new_data)
        else:
            self.db_connection.create_user(user_id, new_data)
            self.users[user_id] = new_data

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
            self.db_connection.delete_user(user_id)
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data):
        cursor = self.conn.cursor()
        # BUG: Directly interpolating user data into SQL leads to SQL injection
        cursor.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')"")
        self.conn.commit()

    def get_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute(""SELECT data FROM users WHERE username = ?"", (username,))
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def close(self):
        self.conn.close()

# Example usage (would be in production code)
if __name__ == ""__main__"":
    manager = UserManager(os.getenv('USER_DB', ':memory:'))
    manager.add_user('admin', {'role': 'superuser', 'permissions': ['*']})
    print(manager.get_user('admin'))
    manager.close()
",code_defect,sql_injection,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor() {
    this.orderStatuses = {
      PENDING: 'pending',
      PROCESSING: 'processing',
      COMPLETED: 'completed',
      CANCELLED: 'cancelled'
    };
  }

  processOrder(orderId) {
    const order = this.findOrderById(orderId);
    if (!order) {
      return 'Order not found';
    }

    if (order.status === this.orderStatuses.PROCESSING) {
      console.log('Order already being processed');
      return 'Already processing';
    }

    order.status = this.orderStatuses.PROCESSING;

    setTimeout(() => {
      order.status = this.orderStatuses.COMPLETED;
      this.sendConfirmationEmail(order.email);
    }, 3000);

    return 'Processing...';
  }

  findOrderById(orderId) {
    // Simulating database lookup
    return {
      id: '123',
      email: 'customer@example.com',
      status: this.orderStatuses.PENDING
    };
  }

  sendConfirmationEmail(email) {
    console.log(`Email sent to ${email}`);
  }
}

const processor = new OrderProcessor();
processor.processOrder('123');",code_defect,race_condition,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
        self.login_attempts = 0
    
    def login(self, password):
        if self.password == password:
            self.login_attempts += 1
            return True
        else:
            return False
    
    def reset_password(self, new_password):
        self.password = new_password
        
    def get_login_attempts(self):
        return self.login_attempts

account = UserAccount('test_user', 'test_password', 'test@example.com')
print(account.login('test_password'))  # Should print: True
print(account.get_login_attempts())  # Should print: 1",code_smell,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : logFile(file) {}
    void start() {
        for (int i = 0; i < 4; ++i) {
            workers.emplace_back(&LogProcessor::process, this);
        }
        for (auto& t : workers) t.join();
    }
private:
    void process() {
        std::lock_guard<std::mutex> lock(mtx);
        // Simulate reading a line (actually just a placeholder)
        std::string line = ""INFO: operation completed"";
        if (line.find(""ERROR"") != std::string::npos) {
            std::cerr << ""Error found"" << std::endl;
        }
    }
    std::string logFile;
    std::vector<std::thread> workers;
    std::mutex mtx;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.start();
    return 0;
}
",code_defect,race_condition_due_to_locked_io,,openai/gpt-oss-120b
JavaScript,"class UserSession {
  constructor(userId, token) {
    this.userId = userId;
    this.token = token;
    this.sessionId = Math.random().toString(36).substring(2);
  }

  validateToken() {
    if (!this.token || this.token.length < 16) {
      return false;
    }

    const tokenParts = this.token.split('_');
    if (tokenParts.length !== 3) {
      return false;
    }

    const expiration = parseInt(tokenParts[2], 10);
    if (isNaN(expiration) || expiration < Date.now()) {
      return false;
    }

    return true;
  }

  getUserDetails() {
    if (!this.validateToken()) {
      return null;
    }

    const userDetails = {
      id: this.userId,
      token: this.token,
      session: this.sessionId
    };

    // Legacy code that might be unused but left in the codebase
    // const oldSession = new LegacySession(this.userId);
    // oldSession.start();

    return userDetails;
  }
}",code_smell,dead_code,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password):
        self.username = username
        self.password = password
        self.logged_in = False

    def login(self, username, password):
        if username == self.username and password == self.password:
            self.logged_in = True
        return self.logged_in

    def logout(self):
        self.logged_in = False

    def is_logged_in(self):
        return self.logged_in

    def change_password(self, new_password):
        self.password = new_password

account = UserAccount('test_user', 'test_password')
print(account.login('test_user', 'test_password'))
print(account.is_logged_in())
print(account.change_password('new_password'))",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json, os, logging

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        # Loads JSON config without validation – potential security issue if file is tampered
        with open(self.path, 'r') as f:
            self.config = json.load(f)

    def get(self, key, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, db_conn_str):
        self.db_conn_str = db_conn_str
        self.logger = logging.getLogger(__name__)
        self._connect()

    def _connect(self):
        # Simulated insecure DB connection using raw string (SQL injection risk elsewhere)
        self.conn = self.db_conn_str

    def fetch_user(self, user_id):
        # Directly interpolates user_id into query – SQL injection vulnerability
        query = f""SELECT * FROM users WHERE id = {user_id}""
        self.logger.debug(f""Executing query: {query}"")
        # Placeholder for actual DB call
        return self._execute(query)

    def _execute(self, query):
        # Mock execution returning dummy data
        return {""id"": 1, ""name"": ""Alice""}

def main():
    cfg = ConfigLoader('config.json')
    db = DataProcessor(cfg.get('db_connection'))
    user = db.fetch_user(os.getenv('USER_ID'))
    print(json.dumps(user))

if __name__ == '__main__':
    main()",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import os
import requests

class UserAuthenticator:
    def __init__(self):
        self.base_url = 'https://api.example.com'
        self.api_key = 'my_secret_api_key'
        
    def login_user(self, username, password):
        url = f'{self.base_url}/login'
        payload = {
            'username': username,
            'password': password
        }
        headers = {
            'Authorization': f'Bearer {self.api_key}'
        }
        response = requests.post(url, json=payload, headers=headers)
        if response.status_code == 200:
            return response.json().get('token')
        return None

    def get_user_profile(self, token):
        url = f'{self.base_url}/profile'
        headers = {
            'Authorization': f'Bearer {token}'
        }
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            return response.json()
        return None

if __name__ == '__main__':
    auth = UserAuthenticator()
    token = auth.login_user('testuser', 'testpass')
    profile = auth.get_user_profile(token)
    print(profile)",code_defect,hardcoded_credentials,,qwen/qwen3-32b
Java,"public class UserValidator { private static final int MAX_USERNAME_LENGTH = 50; public boolean isValidUser(String username, String password) { if (username.length() > MAX_USERNAME_LENGTH) return false; if (password.length() < 8) return false; return true; } public static void main(String[] args) { UserValidator validator = new UserValidator(); System.out.println(validator.isValidUser(""testuser"", ""password123"")); } }",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            // Check account balance
            stmt = conn.prepareStatement(""SELECT balance FROM accounts WHERE id = ?"");
            stmt.setString(1, accountId);
            rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    // Deduct amount
                    stmt = conn.prepareStatement(""UPDATE accounts SET balance = balance - ? WHERE id = ?"");
                    stmt.setDouble(1, amount);
                    stmt.setString(2, accountId);
                    stmt.executeUpdate();
                    // Log transaction (no error handling)
                    stmt = conn.prepareStatement(""INSERT INTO transactions(account_id, amount) VALUES (?, ?)"");
                    stmt.setString(1, accountId);
                    stmt.setDouble(2, amount);
                    stmt.executeUpdate();
                    return true;
                }
            }
            return false;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            // Resources not closed properly if stmt is reassigned
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }
}
",code_defect,hardcoded_secret_and_resource_leak,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.getTotalAmount() > 0) {
                if (order.getCustomer().getCreditScore() > 600) {
                    if (order.getItems().size() > 0) {
                        for (Item item : order.getItems()) {
                            if (item.getQuantity() > 0) {
                                if (item.getPrice() > 0) {
                                    double amount = item.getQuantity() * item.getPrice();
                                    // Business logic for processing the item
                                    System.out.println(""Processing item: "" + item.getName() + "" with amount: "" + amount);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}",code_smell,large_function,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
            return True
        return False

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id] = user_data
            return True
        return False

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
            return True
        return False

    def get_all_users(self):
        return list(self.users.values())

def main():
    manager = UserManager()
    manager.add_user(1, {'name': 'John', 'age': 30})
    manager.add_user(2, {'name': 'Alice', 'age': 25})
    print(manager.get_all_users())
    manager.update_user(1, {'name': 'John', 'age': 31})
    print(manager.get_all_users())
    manager.delete_user(2)
    print(manager.get_all_users())

if __name__ == '__main__':
    main()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // NOTE: No try/catch, assume file always exists
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

class UserService {
  constructor(db) {
    this.db = db;
    this.config = new ConfigLoader('./config.json');
  }

  getUserProfile(userId) {
    const cfg = this.config.load();
    const table = cfg.userTable || 'users';
    const query = `SELECT * FROM ${table} WHERE id = ${userId}`; // vulnerable to SQL injection
    return this.db.query(query);
  }
}

// Simulated DB client
class FakeDb {
  query(sql) {
    console.log('Executing:', sql);
    // Returns dummy data
    return Promise.resolve({ id: 1, name: 'Alice' });
  }
}

// Usage example
const db = new FakeDb();
const service = new UserService(db);
service.getUserProfile(42).then(console.log);",code_defect,sql_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    private final List<Order> orders;
    private final Map<String, Product> productCache = new HashMap<>();

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order == null) continue;
            
            Product product = getProductFromCache(order.getProductId());
            if (product != null) {
                processOrder(order, product);
            } else {
                System.out.println(""Product not found for order: "" + order.getId());
            }
        }
    }

    private Product getProductFromCache(String productId) {
        if (productId == null || productId.isEmpty()) {
            return null;
        }
        return productCache.get(productId);
    }

    private void processOrder(Order order, Product product) {
        if (order.getQuantity() <= 0) {
            System.out.println(""Invalid quantity for order: "" + order.getId());
            return;
        }
        
        double totalCost = product.getPrice() * order.getQuantity();
        System.out.println(""Processing order: "" + order.getId() + "", Total Cost: "" + totalCost);
        
        // Dummy logic to simulate external system call
        try {
            Thread.sleep(500);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            System.out.println(""Interrupted during processing: "" + order.getId());
        }
    }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

    void setSalary(int newSalary) {
        if (newSalary > salary) {
            salary = newSalary;
        }
    }

private:
    std::string name;
    int salary;
};

void processEmployees(std::vector<Employee>& employees) {
    for (auto& employee : employees) {
        employee.setSalary(employee.getSalary() + 1000);
    }
}

int main() {
    std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000)};
    processEmployees(employees);
    for (const auto& employee : employees) {
        std::cout << employee.getName() << ""'s new salary is "" << employee.getSalary() << std::endl;
    }
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor{constructor(db){this.db=db;}async processOrders(userIds){for(let i=0;i<userIds.length;i++){const userId=userIds[i];const orders=await this.db.query('SELECT * FROM orders WHERE user_id='+userId);for(const order of orders){await this._charge(order);await this.db.execute('UPDATE orders SET status=""processed"" WHERE id='+order.id);}}}async _charge(order){if(!order.amount){throw new Error('Invalid amount');}await paymentGateway.charge(order.userId,order.amount);}}",code_defect,SQL_injection_via_string_concatenation,,openai/gpt-oss-120b
Python,"import requests

def fetch_and_process_data(url, headers=None):
    response = requests.get(url, headers=headers or {})
    response.raise_for_status()

    data = response.json()

    results = []
    for item in data:
        processed = {
            'id': item.get('id'),
            'name': item.get('name').upper() if 'name' in item else '',
            'value': item.get('value', 0) * 1.1
        }
        results.append(processed)
    return results

# Legacy code that is no longer used
# def old_method():
#     print('This is unused')

if __name__ == '__main__':
    url = 'https://api.example.com/data'
    headers = {'Authorization': 'Bearer hardcoded_token'}
    data = fetch_and_process_data(url, headers)
    print(data)",code_smell,dead_code,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
        self.is_active = True

    def login(self, password):
        if self.password == password:
            return True
        else:
            return False

    def change_password(self, old_password, new_password):
        if self.password == old_password:
            self.password = new_password
            return True
        else:
            return False",code_smell,plaintext_password_storage,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }

    public static void main(String[] args) {
        UserService service = new UserService();
        // Example usage: attacker can inject ""' OR '1'='1"" to retrieve all roles
        List<String> adminRoles = service.getUserRoles(""admin"");
        System.out.println(""Roles for admin: "" + adminRoles);
    }
}",code_defect,sql_injection,,openai/gpt-oss-120b
Python,"import os
import json
import requests

API_URL = 'https://api.example.com/data'
API_KEY = 'secret12345'


def fetch_data_from_api():
    headers = {'Authorization': f'Bearer {API_KEY}'}
    response = requests.get(API_URL, headers=headers)

    if response.status_code == 200:
        return response.json()
    else:
        return None


def process_data(data):
    results = []
    for item in data['items']:
        if item.get('status') == 'active':
            results.append({
                'id': item['id'],
                'name': item['name'].title(),
                'score': item.get('score', 0)
            })
    return results


def write_results_to_file(results):
    with open('output.json', 'w') as f:
        json.dump(results, f, indent=2)


def main():
    data = fetch_data_from_api()
    if data:
        processed = process_data(data)
        write_results_to_file(processed)
    else:
        print('Failed to fetch data.')

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

    void setSalary(int newSalary) {
        salary = newSalary;
    }

private:
    std::string name;
    int salary;
};

std::vector<Employee> getHighPaidEmployees(const std::vector<Employee>& employees) {
    std::vector<Employee> highPaidEmployees;
    for (const auto& employee : employees) {
        if (employee.getSalary() > 50000) {
            highPaidEmployees.push_back(employee);
        }
    }
    return highPaidEmployees;
}

int main() {
    std::vector<Employee> employees = {
        Employee(""John"", 60000),
        Employee(""Alice"", 40000),
        Employee(""Bob"", 70000)
    };

    std::vector<Employee> highPaid = getHighPaidEmployees(employees);
    for (const auto& employee : highPaid) {
        std::cout << employee.getName() << "" salary: "" << employee.getSalary() << std::endl;
    }

    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it in memory.""""""
    _cache = {}
    _lock = threading.Lock()

    @classmethod
    def get_config(cls, path: str) -> dict:
        # Missing validation of path, potential path traversal
        with cls._lock:
            if path in cls._cache:
                return cls._cache[path]
            with open(path, 'r') as f:
                data = json.load(f)
                cls._cache[path] = data
                return data

class UserManager:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_db()

    def _ensure_db(self):
        # Initialize a simple JSON ""database"" if it doesn't exist
        if not os.path.exists(self.db_path):
            with open(self.db_path, 'w') as f:
                json.dump({""users"": []}, f)

    def add_user(self, username: str, password: str):
        # Insecure: stores password in plaintext
        with open(self.db_path, 'r+') as f:
            data = json.load(f)
            data[""users""].append({""username"": username, ""password"": password})
            f.seek(0)
            json.dump(data, f)
            f.truncate()

    def authenticate(self, username: str, password: str) -> bool:
        with open(self.db_path, 'r') as f:
            data = json.load(f)
            for user in data[""users""]:
                if user[""username""] == username and user[""password""] == password:
                    return True
        return False

# Example usage (would be called from a web handler in real app)
config = ConfigLoader.get_config('config.json')
user_mgr = UserManager(config.get('user_db_path', 'users.json'))
user_mgr.add_user('alice', 's3cr3t')
print('Authenticated:', user_mgr.authenticate('alice', 's3cr3t'))",code_defect,insecure_password_storage,,openai/gpt-oss-120b
JavaScript,"class UserValidator {
  constructor() {
    this.minPasswordLength = 8;
  }

  validatePassword(password) {
    if (password.length < this.minPasswordLength) {
      return false;
    }

    if (!/[A-Z]/.test(password)) {
      return false;
    }

    if (!/[a-z]/.test(password)) {
      return false;
    }

    if (!/[0-9]/.test(password)) {
      return false;
    }

    return true;
  }

  validateEmail(email) {
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return emailRegex.test(email);
  }

  validateUser(user) {
    if (!this.validatePassword(user.password)) {
      throw new Error('Invalid password');
    }

    if (!this.validateEmail(user.email)) {
      throw new Error('Invalid email');
    }

    // Additional checks can be added here
  }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(paymentGateway) {
         this.paymentGateway = paymentGateway;
      }

      processPayment(order) {
         const paymentMethod = order.paymentMethod;
         if (paymentMethod === 'creditCard') {
            this.chargeCreditCard(order);
         } else if (paymentMethod === 'paypal') {
            this.chargePaypal(order);
         } else {
            // silently fail for unknown payment methods
         }
      }

      chargeCreditCard(order) {
         this.paymentGateway.chargeCreditCard(order);
      }

      chargePaypal(order) {
         this.paymentGateway.chargePaypal(order);
      }
   }

   class PaymentGateway {
      chargeCreditCard(order) {
         // simulate a successful charge
         console.log('Charged credit card');
      }

      chargePaypal(order) {
         // simulate a successful charge
         console.log('Charged paypal');
      }
   }

   const paymentGateway = new PaymentGateway();
   const paymentProcessor = new PaymentProcessor(paymentGateway);
   const order = {
      paymentMethod: 'creditCard'
   };
   paymentProcessor.processPayment(order);
   ",code_smell,unhandled_unknown_payment_method,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class LogProcessor {
    constructor(logFilePath) {
        this.logFilePath = logFilePath;
        this.buffer = [];
    }

    // Reads the entire log file synchronously and splits into lines
    loadLogs() {
        const data = fs.readFileSync(this.logFilePath, 'utf8');
        this.buffer = data.split('\n');
    }

    // Returns the last N log entries; N defaults to 10
    getRecentEntries(count = 10) {
        // Off‑by‑one bug: slice end index should be this.buffer.length, not length-1
        return this.buffer.slice(this.buffer.length - count - 1, this.buffer.length - 1);
    }

    // Asynchronously writes a new log entry
    async addEntry(entry) {
        const line = `${new Date().toISOString()} - ${entry}\n`;
        // Missing await; fire‑and‑forget may cause race conditions
        fs.appendFile(this.logFilePath, line, (err) => {
            if (err) console.error('Failed to write log:', err);
        });
    }
}

module.exports = LogProcessor;",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserHandler {
  constructor(users) {
    this.users = users;
  }

  findUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  getActiveUsers() {
    const activeUsers = [];
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].status === 'active') {
        activeUsers.push(this.users[i]);
      }
    }
    return activeUsers;
  }

  getUserCountByRole(role) {
    let count = 0;
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].role === role) {
        count++;
      }
    }
    return count;
  }
}

module.exports = UserHandler;",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAccountManager { private Map<String, String> userAccounts = new HashMap<>(); public void createUser(String username, String password) { userAccounts.put(username, password); } public boolean authenticateUser(String username, String password) { return userAccounts.containsKey(username) && userAccounts.get(username).equals(password); } public void changePassword(String username, String newPassword) { if (userAccounts.containsKey(username)) { userAccounts.put(username, newPassword); } } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Simulate work
            if (task != 0) {
                // BUG: division by zero when task is zero, but also race condition: task may be stale
                int result = 100 / task;
                std::cout << ""Processed "" << task << "": "" << result << std::endl;
            }
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 5; i >= 0; --i) {
        dp.addTask(i);
    }
    std::this_thread::sleep_for(std::chrono::seconds(2));
    dp.stop();
    return 0;
}",code_defect,division_by_zero_and_race_condition,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

struct User {
    std::string name;
    int age;
    std::string email;
};

std::vector<User> processUsers(const std::vector<std::string>& userStrings) {
    std::vector<User> users;

    for (const auto& str : userStrings) {
        std::vector<std::string> parts;
        std::string current;
        for (char c : str) {
            if (c == ',') {
                parts.push_back(current);
                current.clear();
            } else {
                current += c;
            }
        }
        parts.push_back(current);

        if (parts.size() < 3) continue;

        User u;
        u.name = parts[0];
        u.age = std::stoi(parts[1]);
        u.email = parts[2];

        users.push_back(u);
    }

    return users;
}

int main() {
    std::vector<std::string> input = { ""Alice,30,alice@example.com"", ""Bob,25,bob@example.com"" };
    std::vector<User> users = processUsers(input);

    for (const User& u : users) {
        std::cout << u.name << "" ("" << u.age << "") <"" << u.email << "">\n"";
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, username, password):
        if username in self.users:
            print('User already exists')
        else:
            self.users[username] = password

    def authenticate(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def get_all_users(self):
        return list(self.users.keys())

    def remove_user(self, username):
        if username in self.users:
            del self.users[username]
        else:
            print('User does not exist')

    def update_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
        else:
            print('User does not exist')

    def save_to_file(self):
        with open(self.db_file, 'w') as f:
            for username, password in self.users.items():
                f.write(f'{username}:{password}\n')

    def load_from_file(self):
        try:
            with open(self.db_file, 'r') as f:
                for line in f.readlines():
                    username, password = line.strip().split(':')
                    self.users[username] = password
        except FileNotFoundError:
            pass
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserCache {
  constructor(filePath) {
    this.filePath = filePath;
    this.cache = {};
    this._load();
  }

  _load() {
    try {
      const data = fs.readFileSync(this.filePath, 'utf8');
      this.cache = JSON.parse(data);
    } catch (e) {
      // ignore errors, start with empty cache
      this.cache = {};
    }
  }

  getUser(id) {
    if (this.cache[id]) {
      return this.cache[id];
    }
    // Simulate DB fetch
    const user = { id, name: 'User' + id };
    this.cache[id] = user;
    return user;
  }

  // Flushes cache to disk asynchronously but does not wait for completion
  persist() {
    const data = JSON.stringify(this.cache);
    fs.writeFile(this.filePath, data, (err) => {
      if (err) console.error('Failed to write cache');
    });
  }
}

// Usage example
const cache = new UserCache('./userCache.json');
for (let i = 1; i <= 1000; i++) {
  cache.getUser(i);
}
cache.persist();
// Process exits immediately, cache may never be written to disk",code_defect,race_condition_missing_sync,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

def process_data(data):
    results = []
    for item in data:
        if item['type'] == 'user':
            processed = {
                'id': item.get('id'),
                'name': item.get('name'),
                'created_at': datetime.now().isoformat()
            }
            results.append(processed)
        elif item['type'] == 'group':
            processed = {
                'id': item.get('id'),
                'name': item.get('name'),
                'members': item.get('members', []),
                'created_at': datetime.now().isoformat()
            }
            results.append(processed)
        # Legacy code for compatibility with old version
        # if item['type'] == 'org':
        #     processed = {
        #         'id': item.get('id'),
        #         'name': item.get('name'),
        #         'created_at': datetime.now().isoformat()
        #     }
        #     results.append(processed)
    return results

def load_data_from_file(file_path):
    with open(file_path, 'r') as f:
        return json.load(f)

if __name__ == ""__main__"":
    data = load_data_from_file('input.json')
    processed = process_data(data)
    print(json.dumps(processed, indent=2))",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"class PaymentProcessor { constructor(paymentGateway) { this.paymentGateway = paymentGateway; } processPayment(amount, callback) { let paymentId = this.generatePaymentId(); this.paymentGateway.chargeCard(amount, paymentId, (err, result) => { if (err) { callback(err); } else { this.savePaymentToDatabase(paymentId, amount, () => { callback(null, result); }); } }); } generatePaymentId() { return Math.floor(Math.random() * 1000000); } savePaymentToDatabase(paymentId, amount, callback) { // simulate database operation setTimeout(() => { callback(); }, 2000); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    UserManager() {
        // Load users from a config file (simulated)
        users_ = {""alice"", ""bob"", ""carol""};
    }

    // Returns the index of the user, or -1 if not found
    int findUser(const std::string& name) const {
        for (size_t i = 0; i <= users_.size(); ++i) { // BUG: off-by-one, may read past end
            if (users_[i] == name) {
                return static_cast<int>(i);
            }
        }
        return -1;
    }

    // Removes a user by name
    void removeUser(const std::string& name) {
        int idx = findUser(name);
        if (idx >= 0) {
            users_.erase(users_.begin() + idx);
        }
    }

    void printAll() const {
        for (const auto& u : users_) {
            std::cout << u << std::endl;
        }
    }

private:
    std::vector<std::string> users_;
};

int main() {
    UserManager um;
    um.removeUser(""bob"");
    um.printAll();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final int MAX_RETRIES = 3;

    public void processOrder(Order order) {
        for (int i = 0; i < MAX_RETRIES; i++) {
            try {
                if (order == null) {
                    return;
                }
                if (order.isProcessed()) {
                    return;
                }
                boolean result = chargeCreditCard(order);
                if (result) {
                    updateInventory(order);
                    markOrderAsProcessed(order);
                    return;
                }
            } catch (Exception e) {
                // Swallowing exception without logging or handling
            }
        }
        sendNotification(order);
    }

    private boolean chargeCreditCard(Order order) {
        // Simulated credit card processing logic
        return Math.random() < 0.5;
    }

    private void updateInventory(Order order) {
        // Simulated inventory update
    }

    private void markOrderAsProcessed(Order order) {
        order.setProcessed(true);
    }

    private void sendNotification(Order order) {
        // Simulated notification logic
    }
}",code_smell,exception_swallowing,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    void printInfo() {
        std::cout << ""Name: "" << name << std::endl;
        std::cout << ""Age: "" << age << std::endl;
    }

    std::string name;
    int age;
};

void processUsers(std::vector<User>& users) {
    for (auto& user : users) {
        user.printInfo();
    }
}

int main() {
    std::vector<User> users = {User(""John"", 25), User(""Alice"", 30)};
    processUsers(users);
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public User getUserById(int userId) {
        User user = null;
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            Statement stmt = conn.createStatement();
            // SQL injection vulnerable concatenation
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (Exception e) {
            // Swallow exception silently
        }
        return user;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"class DataProcessor {
  process(data) {
    let results = [];
    for (let i = 0; i < data.length; i++) {
      if (data[i].valid) {
        let processed = this._sanitize(data[i]);
        results.push(processed);
      }
    }
    return this._aggregate(results);
  }

  _sanitize(item) {
    return {
      id: item.id || 0,
      name: item.name || 'Unknown',
      value: item.value || 0
    };
  }

  _aggregate(items) {
    let sum = 0;
    for (let i = 0; i < items.length; i++) {
      sum += items[i].value;
    }
    return sum;
  }
}

module.exports = DataProcessor;",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger LOGGER = LoggerFactory.getLogger(UserService.class); public List<User> getUsers(String role) { List<User> users = new ArrayList<>(); try (Connection conn = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""root"", ""password123"")) { PreparedStatement stmt = conn.prepareStatement(""SELECT * FROM users WHERE role = ?""); stmt.setString(1, role); ResultSet rs = stmt.executeQuery(); while (rs.next()) { User user = new User(rs.getInt(""id""), rs.getString(""name""), rs.getString(""role"")); users.add(user); } } catch (SQLException e) { LOGGER.error(""Error fetching users"", e); } return users; } }",code_smell,hardcoded_secrets,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<User> getActiveUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String sql = ""SELECT id, username, email FROM users WHERE active = 1"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            User u = new User();
            u.setId(rs.getInt(""id""));
            u.setUsername(rs.getString(""username""));
            u.setEmail(rs.getString(""email""));
            users.add(u);
        }
        // Missing rs.close(), stmt.close(), conn.close()
        return users;
    }

    public void deactivateUser(int userId) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String sql = ""UPDATE users SET active = 0 WHERE id = "" + userId; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        // Resources not closed, potential leak
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection and resource leak,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private final List<User> users;

    public UserProcessor(List<User> users) {
        this.users = users;
    }

    public void processUsers() {
        for (User user : users) {
            if (user.getEmail() != null && user.getEmail().contains(""@"")) {
                if (user.getStatus() == UserStatus.ACTIVE) {
                    sendWelcomeEmail(user);
                } else {
                    log.info(""User is not active: "" + user.getName());
                }
            }
        }
    }

    private void sendWelcomeEmail(User user) {
        String subject = ""Welcome, "" + user.getName() + ""!"";
        String body = ""Dear "" + user.getName() + "",\n\nThank you for registering."";
        EmailService.sendEmail(user.getEmail(), subject, body);
    }
}",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
   class User {
       constructor(id, name, email) {
           this.id = id;
           this.name = name;
           this.email = email;
           this.orders = [];
       }

       addOrder(order) {
           this.orders.push(order);
       }

       getTotalOrders() {
           return this.orders.length;
       }
   }

   class Order {
       constructor(id, userId, total) {
           this.id = id;
           this.userId = userId;
           this.total = total;
       }
   }

   function calculateTotalOrders(users) {
       let totalOrders = 0;
       for (let user of users) {
           totalOrders += user.getTotalOrders();
       }
       return totalOrders;
   }

   let users = [
       new User(1, 'John Doe', 'john@example.com'),
       new User(2, 'Jane Doe', 'jane@example.com')
   ];

   users[0].addOrder(new Order(1, 1, 100));
   users[0].addOrder(new Order(2, 1, 200));
   users[1].addOrder(new Order(3, 2, 50));

   console.log(calculateTotalOrders(users));
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigManager:
    """"""Loads configuration from a JSON file and provides access to settings.""""""
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, config_path='config.json'):
        # Singleton pattern with double-checked locking
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super(ConfigManager, cls).__new__(cls)
                    cls._instance._load(config_path)
        return cls._instance

    def _load(self, path):
        # BUG: Uses os.path.expanduser on untrusted path, leading to path traversal
        safe_path = os.path.expanduser(path)
        with open(safe_path, 'r') as f:
            self._config = json.load(f)

    def get(self, key, default=None):
        return self._config.get(key, default)

    def set(self, key, value):
        self._config[key] = value
        # BUG: Writes back to the same file without atomic write, possible race condition
        with open('config.json', 'w') as f:
            json.dump(self._config, f, indent=2)

# Usage example (would be in another module)
config = ConfigManager('/etc/app/../config.json')
api_key = config.get('api_key')
if not api_key:
    raise RuntimeError('API key missing')
",code_defect,path_traversal_and_race_condition,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void processData(const std::vector<int>& data) {
    for (int val : data) {
        if (val % 2 == 0) {
            std::lock_guard<std::mutex> lock(mtx);
            std::cout << ""Processing even value: "" << val << std::endl;
        }
    }
}

int main() {
    std::vector<int> input = { 1, 2, 3, 4, 5, 6 };

    std::thread t1(processData, input);
    std::thread t2(processData, input);

    t1.join();
    t2.join();

    return 0;
}",code_defect,incorrect_mutex_usage,,qwen/qwen3-32b
JavaScript,"class UserDatabase {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  removeUser(username) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        this.users.splice(i, 1);
      }
    }
  }

  getUser(username) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        return this.users[i];
      }
    }
    return null;
  }
}",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<User> getActiveUsers() throws SQLException {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        List<User> users = new ArrayList<>();
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT id, username, email FROM users WHERE status = 'ACTIVE'"";
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            while (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                users.add(user);
            }
        } finally {
            // Missing close of ResultSet and PreparedStatement, potential resource leak
            if (conn != null) {
                conn.close(); // may throw SQLException, not handled
            }
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,resource_leak_and_unhandled_exception,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    private String dbPasswordHash = ""secure_hash_example"";

    public boolean authenticate(String username, String inputPassword) {
        if (username == null || inputPassword == null) {
            return false;
        }

        String storedPasswordHash = getPasswordHashFromDatabase(username);
        if (storedPasswordHash == null) {
            return false;
        }

        String inputHash = hashPassword(inputPassword);
        return storedPasswordHash.equals(inputHash);
    }

    private String getPasswordHashFromDatabase(String username) {
        // Simulate a database lookup
        if (username.equals(""admin"")) {
            return dbPasswordHash;
        }
        return null;
    }

    private String hashPassword(String password) {
        // Intentionally insecure hashing for demonstration
        return password.hashCode() + """";
    }
}",code_defect,insecure_password_hashing,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        if user_data:
            return {
                'id': user_data[0],
                'name': user_data[1],
                'email': user_data[2]
            }
        else:
            return None

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        users = []
        for user_data in users_data:
            users.append({
                'id': user_data[0],
                'name': user_data[1],
                'email': user_data[2]
            })
        return users

    def update_user(self, user_id, name, email):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (name, email, user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // Assume JSON config, but no try/catch – malformed JSON will crash the process
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

class UserService {
  constructor(db) {
    this.db = db;
    this.config = new ConfigLoader('./config.json');
  }

  getUserPermissions(userId) {
    const config = this.config.load();
    const role = this.db.query(`SELECT role FROM users WHERE id = ${userId}`); // SQL injection risk
    return config.roles[role] || [];
  }
}

module.exports = { UserService, ConfigLoader };",code_defect,sql_injection_and_unhandled_json_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private final List<User> users;

    public UserProcessor(List<User> users) {
        this.users = users;
    }

    public void processUsers() {
        for (User user : users) {
            if (user != null) {
                String username = user.getUsername();
                if (username != null && !username.isEmpty()) {
                    if (username.startsWith(""A"")) {
                        sendWelcomeEmail(user);
                    } else {
                        sendRegistrationEmail(user);
                    }
                }
            }
        }
    }

    private void sendWelcomeEmail(User user) {
        // Simulated email sending logic
        System.out.println(""Welcome email sent to "" + user.getUsername());
    }

    private void sendRegistrationEmail(User user) {
        // Simulated email sending logic
        System.out.println(""Registration email sent to "" + user.getUsername());
    }
}",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
      class PaymentGateway {
         constructor(merchantId) {
            this.merchantId = merchantId;
         }

         processPayment(amount, cardDetails) {
            const paymentUrl = 'https://example.com/payment';
            const requestBody = {
               amount: amount,
               cardDetails: cardDetails,
               merchantId: this.merchantId
            };

            const xml2js = require('xml2js');
            const builder = new xml2js.Builder();
            const xml = builder.buildObject(requestBody);

            const https = require('https');
            const options = {
               method: 'POST',
               headers: {
                  'Content-Type': 'application/xml'
               }
            };

            const req = https.request(paymentUrl, options, (res) => {
               let data = '';
               res.on('data', (chunk) => {
                  data += chunk;
               });
               res.on('end', () => {
                  console.log('Payment processed');
               });
            });

            req.on('error', (error) => {
               console.log('Error processing payment: ' + error);
            });

            req.write(xml);
            req.end();
         }
      }

      const gateway = new PaymentGateway('MERCHANT123');
      gateway.processPayment(100, { cardNumber: '1234-1234-1234-1234', expiry: '12/25', cvv: '123' });
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3
from typing import List, Dict

class UserManager:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, email: str, data: Dict):
        cursor = self.conn.cursor()
        # Storing user data as JSON string
        cursor.execute('INSERT INTO users (username, email, data) VALUES (?, ?, ?)',
                       (username, email, json.dumps(data)))
        self.conn.commit()

    def get_user(self, user_id: int) -> Dict:
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, username, email, data FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            return {
                'id': row[0],
                'username': row[1],
                'email': row[2],
                'data': json.loads(row[3])
            }
        return {}

    def delete_user(self, user_id: int):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE id = ?', (user_id,))
        self.conn.commit()

    def close(self):
        self.conn.close()

# Example usage
if __name__ == '__main__':
    manager = UserManager('/tmp/users.db')
    manager.add_user('alice', 'alice@example.com', {'role': 'admin'})
    manager.add_user('bob', 'bob@example.com', {'role': 'user'})
    # Intentional bug: using string ID instead of int leads to no result
    user = manager.get_user('1')
    print('Fetched user:', user)
    manager.delete_user(2)
    manager.close()",code_defect,type_mismatch_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUser(User user) {
        if (user == null) {
            return;
        }
        if (user.isActive() && user.getEmail() != null && !user.getEmail().isEmpty()) {
            String normalizedEmail = user.getEmail().toLowerCase();
            if (isValidEmail(normalizedEmail)) {
                sendWelcomeEmail(user);
            }
        }
    }

    private boolean isValidEmail(String email) {
        return email != null && email.matches(""^[A-Za-z0-9+_.-]+@(.+)$"");
    }

    private void sendWelcomeEmail(User user) {
        EmailService emailService = new EmailService();
        String subject = ""Welcome, "" + user.getName();
        String body = ""Dear "" + user.getName() + "",\n\nWelcome to our platform!"";
        emailService.sendEmail(user.getEmail(), subject, body);
    }
}",code_smell,feature envy,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            self.users[user_id] = user_data

    def get_user(self, user_id):
        return self.users.get(user_id)

    def remove_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
        else:
            print('User not found')

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id] = user_data
        else:
            print('User not found')

    def get_all_users(self):
        return list(self.users.values())

user_manager = UserManager()
user_manager.add_user('1', {'name': 'John', 'age': 30})
user_manager.add_user('2', {'name': 'Jane', 'age': 25})
print(user_manager.get_all_users())
",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL,
                profile TEXT
            )
        ''')
        self.conn.commit()

    def create_user(self, username, password):
        # Insecure: storing raw password in DB
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, password_hash) VALUES (?, ?)', (username, password))
        self.conn.commit()
        return cursor.lastrowid

    def load_user_profile(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT profile FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row and row[0]:
            # Unsafe deserialization of user-controlled data
            return json.loads(row[0])
        return {}

    def update_profile(self, user_id, profile_dict):
        cursor = self.conn.cursor()
        # Serialize profile without validation
        profile_json = json.dumps(profile_dict)
        cursor.execute('UPDATE users SET profile = ? WHERE id = ?', (profile_json, user_id))
        self.conn.commit()

    def authenticate(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute('SELECT id FROM users WHERE username = ? AND password_hash = ?', (username, password))
        result = cursor.fetchone()
        return result[0] if result else None

# Example usage (would be removed in production)
if __name__ == '__main__':
    manager = UserManager('users.db')
    uid = manager.create_user('alice', 's3cr3t')
    manager.update_profile(uid, {'theme': 'dark', 'notifications': True})
    print('Authenticated ID:', manager.authenticate('alice', 's3cr3t'))
    print('Profile:', manager.load_user_profile(uid))
",code_defect,insecure_storage_and_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

std::string processInput(const std::string& input) {
    std::string result = input;
    if (input.length() > 100) {
        result = input.substr(0, 100);
    }

    // Temporarily commented out for testing
    // if (input.empty()) {
    //     throw std::invalid_argument(""Input cannot be empty"");
    // }

    for (int i = 0; i < result.length(); ++i) {
        if (result[i] == 'a') {
            result[i] = 'A';
        }
    }

    return result;
}

int main() {
    std::string userInput = """"; // User input would normally come from user input or external source
    std::cout << ""Processed: "" << processInput(userInput) << std::endl;
    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class UserDatabase { private static UserDatabase instance; private Map<String, User> users = new HashMap<>(); private UserDatabase() {} public static UserDatabase getInstance() { if (instance == null) { instance = new UserDatabase(); } return instance; } public void addUser(String username, String password) { users.put(username, new User(username, password)); } public User getUser(String username) { return users.get(username); } public class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, email):
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()
        return cursor.lastrowid

    def find_user_by_name(self, name):
        # Vulnerable to SQL injection because it concatenates user input directly
        query = f""SELECT id, username, email FROM users WHERE username = '{name}'""
        cursor = self.conn.cursor()
        cursor.execute(query)
        return cursor.fetchone()

    def close(self):
        self.conn.close()

# Example usage
repo = UserRepository('app.db')
repo.add_user('alice', 'alice@example.com')
# An attacker could pass a malicious name like ""' OR '1'='1"" to retrieve all users
user = repo.find_user_by_name(""' OR '1'='1"")
print(user)
repo.close()",code_defect,SQL_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order, Customer customer, Inventory inventory, Payment payment) {
        if (order == null || customer == null || inventory == null || payment == null) {
            return;
        }

        if (!inventory.hasStock(order.getItem(), order.getQuantity())) {
            return;
        }

        if (!payment.processPayment(order.getTotal())) {
            return;
        }

        inventory.deductStock(order.getItem(), order.getQuantity());
        customer.addOrderToHistory(order);
        
        // TODO: Add logging
        // TODO: Add order confirmation email
    }

    // Unused method
    private void calculateDiscount(Customer customer) {
        // Placeholder
    }
}",code_smell,long_parameter_list,,qwen/qwen3-32b
Python,"class OrderProcessor:
    def __init__(self, orders):
        self.orders = orders
    
    def process_orders(self):
        total_revenue = 0
        for order in self.orders:
            total_revenue += order['price'] * order['quantity']
        return total_revenue
    
    def get_average_order_value(self):
        total_revenue = self.process_orders()
        return total_revenue / len(self.orders)
",code_smell,inefficient_repeated_work,,llama-3.3-70b-versatile
Python,"import json, os, threading

class ConfigLoader:
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, config_path='config.json'):
        # Singleton pattern but flawed: does not store config_path
        if not cls._instance:
            with cls._lock:
                if not cls._instance:
                    cls._instance = super(ConfigLoader, cls).__new__(cls)
        return cls._instance

    def __init__(self, config_path='config.json'):
        # Reinitializes on every call, potentially overwriting data
        self.path = config_path
        self._load()

    def _load(self):
        with open(self.path, 'r') as f:
            # Unsafe: assumes file contains valid JSON
            self.data = json.load(f)

    def get(self, key, default=None):
        return self.data.get(key, default)

# Usage example
loader = ConfigLoader('/etc/app/config.json')
api_key = loader.get('api_key')
# The following line will raise an exception if the key is missing, but code proceeds anyway
print('API Key:', api_key.upper())
",code_defect,singleton_initialization_bug,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    void process(const std::vector<std::string>& input) {
        if (input.empty()) return;

        for (const auto& item : input) {
            if (item.length() > 0) {
                std::string processed = item;
                for (int i = 0; i < processed.length(); ++i) {
                    if (processed[i] == 'a') {
                        processed[i] = 'b';
                    }
                }
                std::cout << processed << std::endl;
            }
        }
    }
};

int main() {
    std::vector<std::string> data = { ""apple"", ""banana"", ""cherry"" };
    DataProcessor processor;
    processor.process(data);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        return user_data
    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute('UPDATE users SET name = %s, email = %s WHERE id = %s', (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
        return True",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // JSON.parse can throw, but we ignore errors
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function processUserInput(input) {
  // Assume input is a JSON string containing user settings
  const settings = JSON.parse(input);
  if (settings.enableFeature) {
    // Directly eval user-provided code, insecure!
    eval(settings.code);
  }
  return settings;
}

function main() {
  const loader = new ConfigLoader('./config.json');
  const config = loader.load();
  const userInput = '{""enableFeature"":true,""code"":""console.log(\""Hacked!\"");""}';
  const result = processUserInput(userInput);
  console.log('Processed:', result);
}

main();",code_defect,unsafe_eval_execution,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
    constructor(db) {
        this.db = db;
    }

    // Process a batch of orders and update inventory
    async processOrders(orders) {
        for (let i = 0; i < orders.length; i++) {
            const order = orders[i];
            // Update inventory synchronously (potential race condition)
            await this.updateInventory(order.items);
            // Save order without awaiting, fire-and-forget
            this.db.saveOrder(order);
        }
    }

    async updateInventory(items) {
        for (const item of items) {
            const product = await this.db.getProduct(item.id);
            if (product.stock < item.quantity) {
                throw new Error('Insufficient stock for product ' + item.id);
            }
            product.stock -= item.quantity;
            // Missing await here; updates may not persist before next call
            this.db.updateProduct(product);
        }
    }
}

module.exports = OrderProcessor;",code_defect,race_condition_and_missing_await,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        if (order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                continue;
            }

            if (item.getPrice() <= 0) {
                continue;
            }

            double total = item.getQuantity() * item.getPrice();
            System.out.println(""Processing item: "" + item.getName() + "" Total: "" + total);

            // Temporary fix for tax calculation
            // TODO: Remove this hardcoded tax rate and use configuration
            double tax = total * 0.1; // Hardcoded tax rate
            double finalAmount = total + tax;
            System.out.println(""Final amount with tax: "" + finalAmount);
        }
    }
}",code_smell,hardcoded_values,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async getUser(id) {
            const user = await this.userDao.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return user;
         }

         async getAllUsers() {
            return await this.userDao.findAll();
         }

         async createUser(user) {
            const existingUser = await this.userDao.findByEmail(user.email);
            if (existingUser) {
               throw new Error('Email already in use');
            }
            return await this.userDao.save(user);
         }
      }

      class UserDao {
         async findById(id) {
            // simulate database query
            return { id: 1, name: 'John Doe', email: 'john@example.com' };
         }

         async findAll() {
            // simulate database query
            return [{ id: 1, name: 'John Doe', email: 'john@example.com' }, { id: 2, name: 'Jane Doe', email: 'jane@example.com' }];
         }

         async findByEmail(email) {
            // simulate database query
            return { id: 1, name: 'John Doe', email: 'john@example.com' };
         }

         async save(user) {
            // simulate database save
            return user;
         }
      }

      const userDao = new UserDao();
      const userService = new UserService(userDao);
      userService.createUser({ name: 'New User', email: 'new@example.com' }).then((user) => console.log(user)).catch((error) => console.error(error));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // BUG: If tasks were empty, task remains 0 and is processed erroneously
            processTask(task);
        }
    }
    void processTask(int value) {
        // Simulate work
        std::cout << ""Processing: "" << value << std::endl;
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 1; i <= 5; ++i) {
        dp.addTask(i);
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}",code_defect,logic_error_unchecked_empty_queue,,openai/gpt-oss-120b
Python,"import os
import subprocess

def execute_command(command):
    try:
        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return result.stdout.decode()
    except subprocess.CalledProcessError as e:
        print(f'Command failed: {e}')
        return ''


def deploy_application():
    if os.getenv('ENV') == 'production':
        command = 'git pull && pip install -r requirements.txt && python manage.py migrate && systemctl restart myapp'
    else:
        command = 'git pull && pip install -r requirements.txt && python manage.py migrate'

    output = execute_command(command)
    print(f'Deploy output: {output}')

    if 'requirements' not in output:
        print('Requirements installed successfully')
    else:
        print('Failed to install requirements')

if __name__ == '__main__':
    deploy_application()",code_defect,security_vulnerability,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_name):
        if user_id not in self.users:
            self.users[user_id] = user_name
        else:
            print('User already exists')

    def remove_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
        else:
            print('User does not exist')

    def get_all_users(self):
        return list(self.users.values())

    def get_user_by_id(self, user_id):
        return self.users.get(user_id)

    def update_user_name(self, user_id, new_name):
        if user_id in self.users:
            self.users[user_id] = new_name
        else:
            print('User does not exist')

def main():
    manager = UserManager()
    manager.add_user(1, 'John')
    manager.add_user(2, 'Jane')
    print(manager.get_all_users())
    manager.remove_user(1)
    print(manager.get_all_users())

if __name__ == '__main__':
    main()
",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  loadConfig() {
    // Asynchronously read config file but return before it's loaded
    fs.readFile(this.path, 'utf8', (err, data) => {
      if (err) throw err;
      this.cache = JSON.parse(data);
    });
    return this.cache; // Returns null the first time
  }

  get(key) {
    const cfg = this.loadConfig();
    return cfg ? cfg[key] : undefined;
  }
}

module.exports = ConfigLoader;",code_defect,async_race_condition,,openai/gpt-oss-120b
Java,"public class UserAuthentication {
    private String userDB = ""users.txt"";

    public boolean authenticate(String username, String password) {
        try {
            java.io.File file = new java.io.File(userDB);
            if (!file.exists()) {
                return false;
            }

            java.util.Scanner scanner = new java.util.Scanner(file);

            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] parts = line.split("":"");
                if (parts.length >= 2 && parts[0].equals(username) && parts[1].equals(password)) {
                    scanner.close();
                    return true;
                }
            }
            scanner.close();
        } catch (Exception e) {
            // Ignoring all exceptions silently
        }
        return false;
    }
}",code_defect,security_vulnerability,,qwen/qwen3-32b
Python,"
class UserAccount:
    def __init__(self, username, password):
        self.username = username
        self.password = password
        self.is_logged_in = False

    def login(self, username, password):
        if username == self.username and password == self.password:
            self.is_logged_in = True
            return True
        return False

    def logout(self):
        self.is_logged_in = False

    def get_user_data(self, username, password):
        if self.is_logged_in:
            return {'username': self.username, 'password': self.password}
        elif username == self.username and password == self.password:
            return {'username': self.username, 'password': self.password}
        else:
            return None

account = UserAccount('test_user', 'test_password')
print(account.get_user_data('test_user', 'test_password'))
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserCache {
    constructor(filePath) {
        this.filePath = filePath;
        this.cache = {};
        this._load();
    }

    _load() {
        // Synchronous file read on module load – blocks event loop
        const data = fs.readFileSync(this.filePath, 'utf8');
        this.cache = JSON.parse(data);
    }

    getUser(id) {
        // Returns a reference to internal object – caller can mutate cache
        return this.cache[id];
    }

    addUser(user) {
        // Missing validation, may overwrite existing entry silently
        this.cache[user.id] = user;
        // Asynchronously write but ignore errors
        fs.writeFile(this.filePath, JSON.stringify(this.cache), (err) => {});
    }
}

// Usage example
const userCache = new UserCache('./users.json');
const user = userCache.getUser('123');
user.name = 'Hacked'; // Mutates internal cache unintentionally
userCache.addUser(user);
",code_defect,mutable_shared_state,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  const result = [];
  for (let i = 0; i < input.length; i++) {
    const item = input[i];
    if (item !== undefined && item !== null && typeof item === 'string') {
      result.push(item.toUpperCase());
    } else {
      console.log(`Skipping invalid input: ${item}`);
    }
  }
  return result;
}

function generateOutput(input) {
  const processed = processUserInput(input);
  const finalOutput = [];
  for (let i = 0; i < processed.length; i++) {
    finalOutput.push(`Processed: ${processed[i]}`);
  }
  return finalOutput;
}

const userInput = [null, 'hello', undefined, 'world', 123];
const output = generateOutput(userInput);
console.log(output);",code_smell,large_function,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class UserRepository {
public:
    void addUser(User user) { users.push_back(user); }
    std::vector<User> getAllUsers() { return users; }

private:
    std::vector<User> users;
};

int main() {
    UserRepository repo;
    repo.addUser(User(""John"", 30));
    repo.addUser(User(""Jane"", 25));

    std::vector<User> allUsers = repo.getAllUsers();
    for (const auto& user : allUsers) {
        std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
    }

    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import os
import json
import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def save_user(self, username, data):
        # Directly serializes user data without validation
        serialized = json.dumps(data)
        self.conn.execute('INSERT INTO users (username, data) VALUES (?, ?)', (username, serialized))
        self.conn.commit()

    def load_user(self, username):
        cursor = self.conn.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            # Unsafe deserialization: using eval on stored data
            return eval(row[0])
        return None

    def delete_user(self, username):
        self.conn.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage (would be removed in production)
repo = UserRepository('/tmp/users.db')
repo.save_user('alice', {'role': 'admin', 'prefs': {'theme': 'dark'}})
print(repo.load_user('alice'))
repo.delete_user('alice')",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    private static final int MAX_RETRIES = 3;

    public void processOrder(Order order) {
        for (int i = 0; i < MAX_RETRIES; i++) {
            try {
                validateOrder(order);
                chargeCustomer(order);
                sendConfirmationEmail(order);
                break;
            } catch (Exception e) {
                if (i == MAX_RETRIES - 1) {
                    logError(order, e);
                }
            }
        }
    }

    private void validateOrder(Order order) throws ValidationException {
        if (order.getItems() == null || order.getItems().isEmpty()) {
            throw new ValidationException(""Order has no items"");
        }
        if (order.getTotal() <= 0) {
            throw new ValidationException(""Order total is invalid"");
        }
    }

    private void chargeCustomer(Order order) {
        if (order.getPayment().getCardNumber() == null || order.getPayment().getCardNumber().isEmpty()) {
            throw new RuntimeException(""Payment details are missing"");
        }
        // Actual payment processing logic would go here
    }

    private void sendConfirmationEmail(Order order) {
        // Simulated email sending
        System.out.println(""Email sent for order: "" + order.getId());
    }

    private void logError(Order order, Exception e) {
        System.err.println(""Failed to process order "" + order.getId() + "": "" + e.getMessage());
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserService {
     constructor() {
       this.users = {};
     }

     async addUser(user) {
       const existingUser = this.users[user.id];
       if (existingUser) {
         throw new Error(`User with id ${user.id} already exists`);
       }
       this.users[user.id] = user;
       await this.persistUser(user);
     }

     async persistUser(user) {
       // simulate a delay
       await new Promise(resolve => setTimeout(resolve, 100));
       // no actual persistence, just a simulation
     }

     async getUsers() {
       return Object.values(this.users);
     }
   }

   const userService = new UserService();

   async function main() {
     await userService.addUser({ id: 1, name: 'John Doe' });
     const users = await userService.getUsers();
     console.log(users);
   }

   main();
 ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <fstream>
#include <iostream>

class ConfigLoader {
public:
    ConfigLoader(const std::string& path) : filePath(path) {}
    std::vector<std::string> loadKeys() {
        std::ifstream in(filePath);
        std::vector<std::string> keys;
        std::string line;
        while (std::getline(in, line)) {
            // Assume each line is a key=value pair
            size_t eqPos = line.find('=');
            if (eqPos != std::string::npos) {
                keys.push_back(line.substr(0, eqPos));
            }
        }
        return keys;
    }
private:
    std::string filePath;
};

int main() {
    ConfigLoader loader(""/etc/app/config.cfg"");
    auto keys = loader.loadKeys();
    // Process keys
    for (size_t i = 0; i <= keys.size(); ++i) { // off‑by‑one error
        std::cout << ""Key: "" << keys[i] << std::endl;
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (i != j) {
                data[i] += data[j];
            }
        }
    }
}

int main() {
    std::vector<int> values = {1, 2, 3, 4, 5};
    processData(values);

    for (int val : values) {
        std::cout << val << "" "";
    }

    return 0;
}",code_defect,inefficient_algorithm,,qwen/qwen3-32b
Python,"class PaymentProcessor:
    def __init__(self, payment_gateway):
        self.payment_gateway = payment_gateway
    
    def process_payment(self, amount, currency):
        if amount > 0:
            self.payment_gateway.charge_card(amount, currency)
        else:
            print('Invalid amount')
    
    def process_refund(self, amount, currency):
        if amount > 0:
            self.payment_gateway.refund_card(amount, currency)
        else:
            print('Invalid amount')

    def get_payment_status(self, payment_id):
        return self.payment_gateway.get_payment_status(payment_id)

class PaymentGateway:
    def charge_card(self, amount, currency):
        # Simulate a successful charge
        return True
    
    def refund_card(self, amount, currency):
        # Simulate a successful refund
        return True
    
    def get_payment_status(self, payment_id):
        # Simulate a successful status retrieval
        return 'success'

payment_gateway = PaymentGateway()
processor = PaymentProcessor(payment_gateway)
processor.process_payment(100, 'USD')
processor.process_refund(50, 'EUR')",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""p@ssw0rd""; // hardcoded secret

    public User getUserById(int userId) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String query = ""SELECT id, username, email FROM users WHERE id = "" + userId; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();
        User user = null;
        if (rs.next()) {
            user = new User();
            user.setId(rs.getInt(""id""));
            user.setUsername(rs.getString(""username""));
            user.setEmail(rs.getString(""email""));
        }
        // Missing rs.close(), stmt.close(), conn.close()
        return user;
    }
}

class User {
    private int id;
    private String username;
    private String email;
    public void setId(int id) { this.id = id; }
    public void setUsername(String username) { this.username = username; }
    public void setEmail(String email) { this.email = email; }
    // getters omitted for brevity
}",code_defect,SQL_injection_and_resource_leak,,openai/gpt-oss-120b
Python,"import requests
import json

API_KEY = '1234567890'

def fetch_and_save_weather_data(city, unit='metric'):
    url = f'https://api.weatherapi.com/v1/current.json?key={API_KEY}&q={city}&units={unit}'
    response = requests.get(url)
    data = json.loads(response.text)

    with open(f'{city}_weather.json', 'w') as file:
        json.dump(data, file, indent=4)

    print(f""Data for {city} has been saved."")

    return data

if __name__ == '__main__':
    city = 'New York'
    fetch_and_save_weather_data(city)",code_defect,hardcoded_secrets,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
        else:
            self.users[user_id].update(user_data)

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            raise Exception('User not found')

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
        else:
            raise Exception('User not found')

    def get_all_users(self):
        return list(self.users.values())

manager = UserManager()
manager.add_user('1', {'name': 'John', 'age': 30})
manager.add_user('2', {'name': 'Alice', 'age': 25})
print(manager.get_all_users())
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        // Reads the config file synchronously every time, ignoring cache
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }

    get(key) {
        // If config not loaded yet, load it (but load() may be called concurrently)
        if (!this.cache) {
            this.load();
        }
        return this.cache[key];
    }
}

// Usage in an async context
async function startServer() {
    const config = new ConfigLoader('./config.json');
    const port = config.get('port');
    const server = require('http').createServer((req, res) => {
        res.writeHead(200, {'Content-Type': 'text/plain'});
        res.end('Server running');
    });
    server.listen(port);
    console.log(`Server listening on ${port}`);
}

startServer();",code_defect,race_condition_due_to_sync_load_in_async_context,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {

    public boolean authenticateUser(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        if (!isValidUsername(username)) {
            return false;
        }

        if (!isValidPassword(password)) {
            return false;
        }

        // Simulate a database lookup
        if (""admin"".equals(username) && ""password123"".equals(password)) {
            return true;
        }

        return false;
    }

    private boolean isValidUsername(String username) {
        return username.length() > 3 && username.length() < 20;
    }

    private boolean isValidPassword(String password) {
        return password.length() > 7 && password.matches(""[a-zA-Z0-9]+"");
    }

    // TODO: Remove hardcoded credentials in production
    public void resetPassword(String username, String newPassword) {
        if (""admin"".equals(username)) {
            System.out.println(""Password reset for admin to: "" + newPassword);
        }
    }
}",code_smell,hardcoded_values,,qwen/qwen3-32b
JavaScript,"
      class PaymentProcessor {
         constructor(merchantId, apiKey) {
            this.merchantId = merchantId;
            this.apiKey = apiKey;
            this.cache = {};
         }

         processPayment(amount, paymentMethod) {
            const cacheKey = amount + paymentMethod;
            if (this.cache[cacheKey]) {
               return this.cache[cacheKey];
            }

            const paymentGateway = new PaymentGateway(this.merchantId, this.apiKey);
            const result = paymentGateway.chargeCard(amount, paymentMethod);
            this.cache[cacheKey] = result;
            return result;
         }
      }

      class PaymentGateway {
         constructor(merchantId, apiKey) {
            this.merchantId = merchantId;
            this.apiKey = apiKey;
         }

         chargeCard(amount, paymentMethod) {
            // simulate a payment processing delay
            const delay = Math.random() * 1000;
            setTimeout(() => {}, delay);

            // assume payment processing is successful
            return { status: 'success', transactionId: Math.random().toString(36).substr(2, 10) };
         }
      }

      const paymentProcessor = new PaymentProcessor('MERCHANT_ID', 'API_KEY');
      const result = paymentProcessor.processPayment(10.99, 'visa');
      console.log(result);
   ",code_smell,inefficient_caching,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def add_user(self, username, email):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        conn.commit()
        conn.close()

    def get_users_page(self, page_number, page_size=10):
        """"""Return a page of users.
        Note: page_number is 1-indexed.
        """"""
        offset = (page_number - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cursor.fetchall()
        conn.close()
        # Bug: returns one extra record when page_number is 0
        return [{'id': r[0], 'username': r[1], 'email': r[2]} for r in rows]

# Example usage
repo = UserRepository('app.db')
for i in range(1, 31):
    repo.add_user(f'user{i}', f'user{i}@example.com')

# This will incorrectly fetch 11 records instead of 10 because page_number=0 is not handled
users = repo.get_users_page(0)
print(f'Fetched {len(users)} users')",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void processData(const std::vector<int>& data) {
    for (int val : data) {
        std::lock_guard<std::mutex> lock(mtx);
        if (val % 2 == 0) {
            std::cout << ""Even value: "" << val << std::endl;
        }
    }
}

void processInThread(const std::vector<int>& data) {
    std::thread t(processData, data);
    t.join();
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    processInThread(input);
    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
       constructor(username, password) {
           this.username = username;
           this.password = password;
           this.loggedIn = false;
       }

       login() {
           if (this.loggedIn) return;
           this.loggedIn = true;
       }

       logout() {
           if (!this.loggedIn) return;
           this.loggedIn = false;
       }
   }

   class UserManager {
       constructor() {
           this.accounts = [];
       }

       addAccount(account) {
           this.accounts.push(account);
       }

       removeAccount(username) {
           this.accounts = this.accounts.filter(account => account.username !== username);
       }
   }

   const userManager = new UserManager();
   const user1 = new UserAccount('user1', 'password123');
   const user2 = new UserAccount('user2', 'password456');

   userManager.addAccount(user1);
   userManager.addAccount(user2);

   user1.login();
   user2.login();

   console.log(user1.loggedIn); // true
   console.log(user2.loggedIn); // true

   userManager.removeAccount('user1');

   console.log(user1.loggedIn); // still true
   ",code_defect,inconsistent_state,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> pending = new ArrayList<>();
        String query = ""SELECT id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL concatenation
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                pending.add(rs.getString(""id""));
            }
        }
        return pending;
    }

    public boolean processPayment(String paymentId, double amount) {
        // Simulate processing logic
        if (amount <= 0) {
            throw new IllegalArgumentException(""Amount must be positive"");
        }
        // Missing transaction handling, potential partial updates
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS)) {
            String update = ""UPDATE payments SET status='COMPLETED', amount=? WHERE id='"" + paymentId + ""'""; // unsafe concatenation
            try (PreparedStatement stmt = conn.prepareStatement(update)) {
                stmt.setDouble(1, amount);
                int rows = stmt.executeUpdate();
                return rows == 1;
            }
        } catch (SQLException e) {
            // Swallow exception, no logging
            return false;
        }
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Python,"import os
import requests

class DataProcessor:
    def __init__(self, url, timeout=5):
        self.url = url
        self.timeout = timeout
        self.data_cache = []

    def fetch_data(self):
        try:
            response = requests.get(self.url, timeout=self.timeout)
            response.raise_for_status()
            self.data_cache = response.json()
        except Exception as e:
            print(f""Error fetching data: {e}"")

    def process_data(self):
        result = []
        for item in self.data_cache:
            if 'id' in item and 'name' in item:
                processed = {
                    'identifier': item['id'],
                    'label': item['name'].strip().upper()
                }
                result.append(processed)
        return result

    def save_to_file(self, filename=""output.txt""):
        with open(filename, 'w') as f:
            for item in self.data_cache:
                f.write(f""{item}\n"")

if __name__ == ""__main__"":
    processor = DataProcessor(""https://api.example.com/data"")
    processor.fetch_data()
    processed = processor.process_data()
    print(processed)",code_smell,inconsistent_data_handling,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, user_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (user_data['name'], user_data['email'], user_id))
        self.db_connection.commit()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a report to a file
    async generateUserReport(userId) {
        const user = await this.db.getUserById(userId);
        if (!user) throw new Error('User not found');
        const orders = await this.db.getOrdersByUserId(userId);
        const total = orders.reduce((sum, o) => sum + o.amount, 0);
        const report = `User: ${user.name}\nTotal Orders: ${orders.length}\nTotal Amount: $${total}`;
        // BUG: Asynchronous file write without awaiting, may cause race condition if called multiple times
        fs.writeFile('reports/' + userId + '.txt', report, (err) => {
            if (err) console.error('Failed to write report', err);
        });
        return report;
    }
}

module.exports = UserService;",code_defect,async_race_condition,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processUserData(std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] > 100) {
            data[i] = 100;
        }
        std::cout << data[i] << std::endl;
    }
}

int main() {
    std::vector<int> user_data = {150, 80, 200, 50, 90};
    processUserData(user_data);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public static void addUser(User user) { users.put(user.getId(), user); } public static User getUser(String id) { return users.get(id); } public static void removeUser(String id) { users.remove(id); } }",code_smell,God class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""p@ssw0rd""; // hardcoded secret

    public List<String> getUserEmailsByRole(String role) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""SELECT email FROM users WHERE role = '"" + role + ""'""; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order.getItems().isEmpty()) {
            return;
        }

        double total = 0.0;
        for (OrderItem item : order.getItems()) {
            total += item.getPrice() * item.getQuantity();
        }

        if (total <= 0) {
            return;
        }

        // Dummy inventory check
        for (OrderItem item : order.getItems()) {
            if (item.getInventory() < item.getQuantity()) {
                throw new RuntimeException(""Not enough inventory for item: "" + item.getName());
            }
        }

        // Apply discount
        if (order.getCustomer().isPremium()) {
            total *= 0.9;
        }

        // Simulate payment processing
        boolean paymentSuccess = processPayment(total);
        if (!paymentSuccess) {
            throw new RuntimeException(""Payment processing failed"");
        }

        // Update inventory
        for (OrderItem item : order.getItems()) {
            item.setInventory(item.getInventory() - item.getQuantity());
        }

        System.out.println(""Order processed successfully"");
    }

    private boolean processPayment(double total) {
        // Simulate payment processing (always succeeds)
        return true;
    }

    // TODO: Refactor inventory logic to a separate class
    // TODO: Add logging for better traceability
}

// Order class
class Order {
    private List<OrderItem> items = new ArrayList<>();
    private Customer customer;

    public List<OrderItem> getItems() {
        return items;
    }

    public Customer getCustomer() {
        return customer;
    }
}

class OrderItem {
    private String name;
    private double price;
    private int quantity;
    private int inventory;

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }

    public int getInventory() {
        return inventory;
    }

    public void setInventory(int inventory) {
        this.inventory = inventory;
    }
}

class Customer {
    private boolean premium = false;

    public boolean isPremium() {
        return premium;
    }
}",code_smell,long_method,,qwen/qwen3-32b
Java,"public class UserDatabase {
    private static Map<String, String> users = new HashMap<>();
    public static void addUser(String username, String password) {
        users.put(username, password);
    }
    public static String getPassword(String username) {
        return users.get(username);
    }
    public static void main(String[] args) {
        addUser(""admin"", ""password123"");
        System.out.println(getPassword(""admin""));
    }
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json, os, threading

class ConfigManager:
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, config_path='config.json'):
        with cls._lock:
            if cls._instance is None:
                cls._instance = super(ConfigManager, cls).__new__(cls)
                cls._instance._load(config_path)
        return cls._instance

    def _load(self, path):
        # Insecure: directly loads JSON from a file path supplied by caller without validation
        with open(path, 'r') as f:
            self.settings = json.load(f)

    def get(self, key, default=None):
        return self.settings.get(key, default)

def process_user_input(user_input):
    # Vulnerable: uses string formatting to build a shell command
    cmd = ""ls -l {}"".format(user_input)
    os.system(cmd)

def main():
    cfg = ConfigManager('/etc/app/config.json')
    data_dir = cfg.get('data_dir', '/tmp')
    for i in range(5):
        # Off-by-one: should iterate over files in data_dir, but uses hardcoded range
        file_path = os.path.join(data_dir, f""file_{i}.txt"")
        with open(file_path, 'r') as f:
            content = f.read()
        process_user_input(content.strip())

if __name__ == '__main__':
    main()",code_defect,command_injection_and_off_by_one,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  findUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  getUserRole(email) {
    const user = this.findUserByEmail(email);
    if (user) {
      return user.role;
    }
    return 'guest';
  }

  assignRole(email, newRole) {
    const user = this.findUserByEmail(email);
    if (user) {
      user.role = newRole;
    }
  }
}

// Example usage
const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com', role: 'admin' },
  { id: 2, name: 'Bob', email: 'bob@example.com', role: 'user' },
  { id: 3, name: 'Charlie', email: 'charlie@example.com', role: 'moderator' }
];

const userManager = new UserManager(users);
userManager.assignRole('alice@example.com', 'editor');",clean_code,well_structured,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, account_number, balance=0):
        self.account_number = account_number
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount > self.balance:
            self.balance = 0
        else:
            self.balance -= amount
    def get_balance(self):
        return self.balance

account = BankAccount('12345', 1000)
print(account.get_balance())
account.withdraw(500)
print(account.get_balance())",code_defect,inconsistent_state_management,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class OrderProcessor {
    private Connection dbConnection;
    private static final String INSERT_ORDER_SQL = ""INSERT INTO orders (id, amount, status) VALUES (?, ?, ?)"";

    public OrderProcessor(Connection connection) {
        this.dbConnection = connection;
    }

    public void processOrders(List<Order> orders) throws SQLException {
        for (Order order : orders) {
            if (order.getAmount() < 0) {
                // negative amount should be rejected, but we just continue
                continue;
            }
            saveOrder(order);
        }
    }

    private void saveOrder(Order order) throws SQLException {
        PreparedStatement stmt = dbConnection.prepareStatement(INSERT_ORDER_SQL);
        stmt.setInt(1, order.getId());
        stmt.setDouble(2, order.getAmount());
        stmt.setString(3, order.getStatus());
        stmt.executeUpdate();
        // Missing stmt.close(); leads to resource leak
    }
}

class Order {
    private int id;
    private double amount;
    private String status;

    public Order(int id, double amount, String status) {
        this.id = id;
        this.amount = amount;
        this.status = status;
    }

    public int getId() { return id; }
    public double getAmount() { return amount; }
    public String getStatus() { return status; }
}
",code_defect,resource_leak,,openai/gpt-oss-120b
Java,"public class UserRegistrationService {

    private static final String[] BANNED_USERNAMES = {""admin"", ""root"", ""support""};

    public boolean registerUser(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        for (String banned : BANNED_USERNAMES) {
            if (username.equalsIgnoreCase(banned)) {
                return false;
            }
        }

        if (username.length() < 3 || username.length() > 20) {
            return false;
        }

        if (password.length() < 8) {
            return false;
        }

        // Legacy code, to be removed in next release
        // if (!isValidPassword(password)) {
        //     return false;
        // }

        // TODO: Store user in DB
        // User user = new User(username, password);
        // userRepository.save(user);

        return true;
    }

    private boolean isValidPassword(String password) {
        // Intentionally commented out
        // return password.matches("".*[A-Z].*"") && password.matches("".*[0-9].*"");
        return true;
    }
}",code_smell,dead_code,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount > self.balance:
            self.balance -= amount
        else:
            self.balance -= amount
    def get_balance(self):
        return self.balance
account = BankAccount(100)
account.withdraw(50)
print(account.get_balance())",code_defect,incorrect_conditional_logic,,llama-3.3-70b-versatile
Python,"import os
import json
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it globally.""""""
    _cache = None
    _lock = threading.Lock()

    @classmethod
    def load(cls, path: str):
        # Double-checked locking pattern (incorrectly implemented)
        if cls._cache is None:
            with cls._lock:
                if cls._cache is None:
                    with open(path, 'r') as f:
                        # Unsafe: directly eval the file content
                        cls._cache = eval(f.read())
        return cls._cache

def process_user_data(user_id):
    # Simulate fetching user data from a file named after the user_id
    file_path = f""/tmp/user_{user_id}.json""
    try:
        with open(file_path, 'r') as f:
            data = json.load(f)
    except FileNotFoundError:
        data = {}
    # Bug: using mutable default argument in subsequent call
    return update_stats(data, user_id)

def update_stats(stats, user_id, increment=1, cache={}):
    # The cache dict is shared across calls, leading to unexpected state retention
    if user_id not in cache:
        cache[user_id] = 0
    cache[user_id] += increment
    stats['visit_count'] = cache[user_id]
    return stats

def main():
    config = ConfigLoader.load('config.json')
    for uid in range(1, 5):
        user_data = process_user_data(uid)
        print(f""User {uid}: {user_data}"")

if __name__ == '__main__':
    main()",code_defect,unsafe_eval_and_shared_mutable_default,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    void process(const std::vector<std::string>& input) {
        for (const auto& line : input) {
            if (line.empty()) {
                continue;
            }
            auto parsed = parseData(line);
            storeData(parsed);
        }
    }

private:
    std::string parseData(const std::string& line) {
        if (line.size() < 2) {
            return """";
        }
        std::string result;
        for (size_t i = 0; i < line.size(); ++i) {
            result += line[i] - 'A' + 'a';
        }
        return result;
    }

    void storeData(const std::string& parsed) {
        std::cout << ""Stored: "" << parsed << std::endl;
    }
};

int main() {
    DataProcessor processor;
    std::vector<std::string> input = {""HELLO"", ""WORLD"", ""123"", """"};
    processor.process(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class UserService { 
  constructor(userDao) { 
    this.userDao = userDao; 
  } 
 
  async getUser(id) { 
    const user = await this.userDao.findById(id); 
    if (!user) { 
      throw new Error('User not found'); 
    } 
    return user; 
  } 
 
  async getUsers() { 
    return await this.userDao.findAll(); 
  } 
 } 
 
 class UserDao { 
  async findById(id) { 
    // simulate a database query 
    return { id: 1, name: 'John Doe' }; 
  } 
 
  async findAll() { 
    // simulate a database query 
    return [{ id: 1, name: 'John Doe' }, { id: 2, name: 'Jane Doe' }]; 
  } 
 } 
 
 const userDao = new UserDao(); 
 const userService = new UserService(userDao); 
 
 async function main() { 
  try { 
    const user = await userService.getUser(1); 
    console.log(user); 
  } catch (error) { 
    console.error(error); 
  } 
 } 
 
 main();",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // Unsafe: directly eval JSON-like content, allowing code injection
    this.cache = eval('(' + data + ')');
    return this.cache;
  }
}

function processUserInput(input) {
  const loader = new ConfigLoader('./config.json');
  const config = loader.load();
  // Assume config has a 'multiplier' field
  return input * config.multiplier;
}

module.exports = { processUserInput, ConfigLoader };",code_defect,unsafe_eval_deserialization,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  getAllUsers() {
    const result = [];
    for (let i = 0; i < this.users.length; i++) {
      result.push({
        id: this.users[i].id,
        name: this.users[i].name,
        email: this.users[i].email
      });
    }
    return result;
  }

  deleteUserByEmail(email) {
    this.users = this.users.filter(user => user.email !== email);
  }
}

// Example usage
const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com' },
  { id: 2, name: 'Bob', email: 'bob@example.com' }
];

const userManager = new UserManager(users);
userManager.deleteUserByEmail('alice@example.com');",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <string>
   #include <vector>
   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
       void setName(std::string newName) { name = newName; }
   private:
       std::string name;
       int age;
   };
   class UserRepository {
   public:
       void addUser(User user) { users.push_back(user); }
       User getUser(int index) { return users[index]; }
   private:
       std::vector<User> users;
   };
   int main() {
       UserRepository repo;
       repo.addUser(User(""John"", 30));
       std::cout << repo.getUser(0).getName() << std::endl;
       return 0;
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data):
        cursor = self.conn.cursor()
        # Directly embedding user input into SQL -> SQL injection vulnerability
        cursor.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')"")
        self.conn.commit()

    def get_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT username, data FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            username, data_json = row
            return {'username': username, 'data': json.loads(data_json)}
        return None

    def close(self):
        self.conn.close()

# Example usage (would be removed in production)
if __name__ == ""__main__"":
    manager = UserManager('users.db')
    manager.add_user(""admin"", {""role"": ""admin""})
    print(manager.get_user(1))
    manager.close()",code_defect,SQL_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void process_data(const std::vector<int>& data) {
    int sum = 0;
    for (int i = 0; i < data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
}

void thread_task(int id, const std::vector<int>& data) {
    int result = 0;
    for (int i = 0; i < data.size(); ++i) {
        result += data[i];
    }
    std::lock_guard<std::mutex> lock(mtx);
    std::cout << ""Thread "" << id << "" result: "" << result << std::endl;
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    process_data(data);

    std::thread t1(thread_task, 1, std::ref(data));
    std::thread t2(thread_task, 2, std::ref(data));
    t1.join();
    t2.join();

    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
JavaScript,"
      class BankAccount {
         constructor(accountNumber, balance) {
            this.accountNumber = accountNumber;
            this.balance = balance;
         }

         deposit(amount) {
            this.balance += amount;
         }

         withdraw(amount) {
            if (amount > this.balance) {
               this.balance = 0;
            } else {
               this.balance -= amount;
            }
         }

         getBalance() {
            return this.balance;
         }
      }

      function processTransactions(transactions) {
         let account = new BankAccount('12345', 1000);
         for (let i = 0; i < transactions.length; i++) {
            if (transactions[i].type === 'deposit') {
               account.deposit(transactions[i].amount);
            } else if (transactions[i].type === 'withdrawal') {
               account.withdraw(transactions[i].amount);
            }
         }
         return account.getBalance();
      }

      let transactions = [
         { type: 'deposit', amount: 500 },
         { type: 'withdrawal', amount: 200 },
         { type: 'deposit', amount: 300 }
      ];

      console.log(processTransactions(transactions));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}

    void addTransaction(int amount) {
        std::lock_guard<std::mutex> lock(mtx_);
        pending_.push_back(amount);
    }

    void processAll() {
        // Launch a thread for each pending transaction (inefficient and can cause resource exhaustion)
        std::vector<std::thread> workers;
        for (int amt : pending_) {
            workers.emplace_back([this, amt]() {
                // Simulate processing delay
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                // BUG: missing lock when updating total_, leading to race condition
                total_ += amt;
            });
        }
        for (auto &t : workers) {
            if (t.joinable()) t.join();
        }
        pending_.clear();
    }

    int getTotal() const {
        return total_;
    }

private:
    std::vector<int> pending_;
    int total_;
    mutable std::mutex mtx_;
};

int main() {
    TransactionProcessor tp;
    for (int i = 0; i < 1000; ++i) {
        tp.addTransaction(1);
    }
    tp.processAll();
    std::cout << ""Total processed: "" << tp.getTotal() << std::endl;
    return 0;
}",code_defect,race_condition,,openai/gpt-oss-120b
Python,"import os
import json

class ConfigManager:
    def __init__(self):
        self.config_path = os.path.join(os.getcwd(), 'config.json')
        self.config_data = self._load_config()

    def _load_config(self):
        try:
            with open(self.config_path, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f""Error loading config: {e}"")
            return {}  # Return empty dict if config load fails

    def get_database_url(self):
        db_host = self.config_data.get('database', {}).get('host', 'localhost')
        db_port = self.config_data.get('database', {}).get('port', 5432)
        db_name = self.config_data.get('database', {}).get('name', 'default_db')
        db_user = self.config_data.get('database', {}).get('user', 'default_user')
        db_password = self.config_data.get('database', {}).get('password', 'default_password')
        
        return f""postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}""

    def get_cache_timeout(self):
        return self.config_data.get('cache', {}).get('timeout', 300)

    def get_logging_level(self):
        return self.config_data.get('logging', {}).get('level', 'INFO')

    def get_api_key(self):
        return self.config_data.get('api', {}).get('key', None)",code_smell,poor_error_handling,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

    void setSalary(int newSalary) {
        if (newSalary > salary) {
            salary = newSalary;
        }
    }

private:
    std::string name;
    int salary;
};

void processEmployees(std::vector<Employee>& employees) {
    for (auto& employee : employees) {
        employee.setSalary(employee.getSalary() * 2);
    }
}

int main() {
    std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000)};
    processEmployees(employees);
    for (const auto& employee : employees) {
        std::cout << employee.getName() << ""'s new salary is: "" << employee.getSalary() << std::endl;
    }
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self.conn.row_factory = sqlite3.Row
        self._ensure_schema()

    def _ensure_schema(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, email: str) -> int:
        cur = self.conn.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()
        return cur.lastrowid

    def get_users_page(self, page: int, page_size: int = 10):
        offset = (page - 1) * page_size
        # Off‑by‑one defect: should use LIMIT page_size OFFSET offset
        cur = self.conn.execute('SELECT * FROM users LIMIT ? OFFSET ?', (page_size, offset + 1))
        return [dict(row) for row in cur.fetchall()]

# Example usage (not part of production code)
if __name__ == '__main__':
    repo = UserRepository(':memory:')
    for i in range(25):
        repo.add_user(f'user{i}', f'user{i}@example.com')
    print('Page 1:', repo.get_users_page(1))
    print('Page 2:', repo.get_users_page(2))
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json

def load_config(config_path):
    if not os.path.exists(config_path):
        raise FileNotFoundError(f""Config file not found: {config_path}"")

    with open(config_path, 'r') as f:
        config_data = json.load(f)

    # Legacy code for backwards compatibility
    # if 'old_setting' in config_data:
    #     config_data['new_setting'] = config_data.pop('old_setting')

    return config_data


class App:
    def __init__(self, config):
        self.config = config
        self.verbose = self.config.get('verbose', False)

    def process_data(self, data):
        if self.verbose:
            print(""Processing data..."")

        for item in data:
            if item['id'] == self.config['target_id']:
                result = self._process_item(item)
                return result
        return None

    def _process_item(self, item):
        if not item.get('valid'):
            return 'Invalid item'

        # Complex nested processing
        temp_result = item['value'] * 2
        if temp_result > 100:
            temp_result += 5
        elif temp_result < 10:
            temp_result -= 5

        return temp_result

    def start(self):
        print(""Starting application..."")
        sample_data = [
            {'id': 1, 'valid': True, 'value': 50},
            {'id': 2, 'valid': False, 'value': 10},
            {'id': 3, 'valid': True, 'value': 5}
        ]
        result = self.process_data(sample_data)
        print(f""Result: {result}"")

if __name__ == '__main__':
    config = load_config('config.json')
    app = App(config)
    app.start()",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final int MAX_RETRIES = 3; public void processPayment(String paymentId, double amount) { for (int i = 0; i < MAX_RETRIES; i++) { try { // Simulate a payment processing API call Thread.sleep(100); if (Math.random() < 0.5) { throw new RuntimeException(""Payment processing failed""); } System.out.println(""Payment processed successfully: "" + paymentId); break; } catch (Exception e) { System.out.println(""Retry "" + (i + 1) + "": "" + e.getMessage()); } } } }",code_smell,magic_number,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public User getUserById(int userId) throws SQLException {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
            return null;
        } finally {
            // Resources not closed properly, may cause leaks
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
}

class User {
    private int id;
    private String username;
    private String email;
    public void setId(int id) { this.id = id; }
    public void setUsername(String username) { this.username = username; }
    public void setEmail(String email) { this.email = email; }
    // getters omitted for brevity
}",code_defect,SQL injection and resource leak,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private List<User> users;

    public UserProcessor() {
        this.users = new ArrayList<>();
    }

    public void addUser(String name, String email) {
        if (name != null && !name.trim().isEmpty()) {
            users.add(new User(name, email));
        }
    }

    public void processUsers() {
        for (User user : users) {
            if (user.getEmail() != null && user.getEmail().contains(""@example.com"")) {
                sendWelcomeEmail(user);
            }
        }
    }

    private void sendWelcomeEmail(User user) {
        System.out.println(""Sending email to "" + user.getName() + "" at "" + user.getEmail());
        // Simulate sending email
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    public static void main(String[] args) {
        UserProcessor processor = new UserProcessor();
        processor.addUser(""John Doe"", ""john@example.com"");
        processor.addUser("""", ""jane@example.com"");
        processor.processUsers();
    }
}

class User {
    private String name;
    private String email;

    public User(String name, String email) {
        this.name = name;
        this.email = email;
    }

    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }
}",code_smell,poor_error_handling,,qwen/qwen3-32b
Java,"public class PaymentProcessor { public void processPayment(String userId, String paymentMethod, double amount) { if (amount > 0) { if (paymentMethod.equals(""creditCard"")) { // Simulate payment processing delay Thread.sleep(100); } else if (paymentMethod.equals(""paypal"")) { // No delay for paypal Thread.sleep(10); } } } }",code_smell,magic_number,,llama-3.3-70b-versatile
Java,"package com.example.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<User> getUsersPage(int pageNumber, int pageSize) throws SQLException {
        // pageNumber is 1-based, but the query uses 0-based offset
        int offset = (pageNumber - 1) * pageSize;
        String sql = ""SELECT id, username, email FROM users LIMIT ? OFFSET ?"";
        List<User> users = new ArrayList<>();
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, pageSize);
            stmt.setInt(2, offset);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    User u = new User();
                    u.setId(rs.getInt(""id""));
                    u.setUsername(rs.getString(""username""));
                    u.setEmail(rs.getString(""email""));
                    users.add(u);
                }
            }
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,off_by_one_error_in_pagination,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.validTokens = [];
  }

  validateUserToken(token) {
    for (let i = 0; i < this.validTokens.length; i++) {
      if (this.validTokens[i].token === token) {
        return true;
      }
    }
    return false;
  }

  addNewToken(userToken) {
    this.validTokens.push(userToken);
  }

  removeExpiredTokens() {
    const now = new Date();
    for (let i = 0; i < this.validTokens.length; i++) {
      if (this.validTokens[i].expiry < now) {
        this.validTokens.splice(i, 1);
      }
    }
  }

  resetTokens() {
    this.validTokens = [];
  }
}

const authInstance = new UserAuth();
authInstance.addNewToken({ token: 'abc123', expiry: new Date(2030, 1, 1) });
authInstance.addNewToken({ token: 'xyz456', expiry: new Date(2020, 1, 1) });
authInstance.removeExpiredTokens();",code_smell,inefficient_loop,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private static final String DEFAULT_PASSWORD = ""password123""; public boolean authenticate(String username, String password) { if (username == null || password == null) { return false; } if (username.equals(""admin"") && password.equals(DEFAULT_PASSWORD)) { return true; } return false; } public static void main(String[] args) { UserAuthenticator authenticator = new UserAuthenticator(); System.out.println(authenticator.authenticate(""admin"", ""password123"")); } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i] * 2;
            results_.push_back(value);
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& results() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(input); });
    t.join();
    for (int v : processor.results()) {
        std::cout << v << "" "";
    }
    std::cout << std::endl;
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import time

class FileProcessor:
    def __init__(self, file_path):
        self.file_path = file_path
        self.data = None

    def load_data(self):
        try:
            with open(self.file_path, 'r') as f:
                self.data = f.readlines()
        except Exception as e:
            print(f""Error loading file: {e}"")

    def process_data(self):
        processed = []
        for line in self.data:
            line = line.strip()
            if line.startswith('#'):
                continue
            if line:
                processed.append(line.upper())
        self.data = processed

    def save_processed_data(self, output_path):
        if not self.data:
            print(""No data to save."")
            return
        try:
            with open(output_path, 'w') as f:
                for line in self.data:
                    f.write(line + ""\n"")
        except Exception as e:
            print(f""Error saving data: {e}"")

    def run_pipeline(self, output_path):
        self.load_data()
        self.process_data()
        self.save_processed_data(output_path)

if __name__ == ""__main__"":
    input_file = 'input.txt'
    output_file = 'output.txt'
    processor = FileProcessor(input_file)
    processor.run_pipeline(output_file)
    print(""Processing complete."")",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    std::string name;
    int grade;

    Student(std::string n, int g) : name(n), grade(g) {}

    bool operator<(const Student& other) const {
        return grade < other.grade;
    }
};

void sortStudents(std::vector<Student>& students) {
    std::sort(students.begin(), students.end());
}

int main() {
    std::vector<Student> students = {Student(""John"", 85), Student(""Alice"", 90), Student(""Bob"", 78)};
    sortStudents(students);
    for (const auto& student : students) {
        std::cout << student.name << "" : "" << student.grade << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, returns empty list silently
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,hardcoded_credentials_and_sql_injection_risk,,openai/gpt-oss-120b
Python,"import requests

class UserAuthenticator:
    def __init__(self):
        self.base_url = 'https://api.example.com/v1'
        self.session = requests.Session()

    def authenticate_user(self, username, password):
        url = f'{self.base_url}/login'
        payload = {'username': username, 'password': password}
        response = self.session.post(url, json=payload)
        if response.status_code == 200:
            return response.json()['token']
        else:
            return None

    def get_user_profile(self, token):
        url = f'{self.base_url}/profile'
        headers = {'Authorization': f'Bearer {token}'}
        response = self.session.get(url, headers=headers)
        return response.json()

    def update_user_profile(self, token, new_email):
        url = f'{self.base_url}/profile'
        headers = {'Authorization': f'Bearer {token}'}
        payload = {'email': new_email}
        response = self.session.patch(url, json=payload, headers=headers)
        return response.status_code == 200",code_smell,lack_of_error_handling,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string n, int a) : name(n), age(a) {}

    bool operator<(const User& other) const {
        return age < other.age;
    }
};

class UserService {
public:
    std::vector<User> users;

    void addUser(User user) {
        users.push_back(user);
    }

    void sortUsers() {
        std::sort(users.begin(), users.end());
    }

    User* getUserByName(std::string name) {
        for (User& user : users) {
            if (user.name == name) {
                return &user;
            }
        }
        return nullptr;
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 25));
    service.addUser(User(""Alice"", 30));
    service.sortUsers();
    User* user = service.getUserByName(""John"");
    if (user != nullptr) {
        std::cout << user->name << std::endl;
    }
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            username TEXT NOT NULL,
                            data TEXT NOT NULL)''')
        self.conn.commit()

    def add_user(self, username, data_dict):
        # Directly embed user-provided data into SQL – SQL injection risk
        cursor = self.conn.cursor()
        data_json = json.dumps(data_dict)
        query = f""INSERT INTO users (username, data) VALUES ('{username}', '{data_json}')""
        cursor.execute(query)
        self.conn.commit()
        return cursor.lastrowid

    def get_user_data(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            # Unsafe deserialization – may execute malicious code if data is crafted
            return eval(row[0])
        return None

    def delete_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE id = ?', (user_id,))
        self.conn.commit()

# Example usage (would be removed in production)
if __name__ == '__main__':
    manager = UserManager('users.db')
    uid = manager.add_user('alice', {'role': 'admin', 'active': True})
    print('Created user id:', uid)
    data = manager.get_user_data(uid)
    print('User data:', data)
    manager.delete_user(uid)
    os.remove('users.db')",code_defect,SQL_injection_and_unsafe_deserialization,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor() {
    this.users = [];
  }

  addUsers(userList) {
    for (let i = 0; i < userList.length; i++) {
      this.users.push(userList[i]);
    }
  }

  findUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  processAllUsers() {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].status === 'active') {
        this.users[i].lastProcessed = new Date();
      }
    }
  }

  getUsers() {
    return this.users;
  }
}

const userProcessor = new UserProcessor();
userProcessor.addUsers([
  { email: 'alice@example.com', status: 'active' },
  { email: 'bob@example.com', status: 'inactive' },
  { email: 'carol@example.com', status: 'active' }
]);

userProcessor.processAllUsers();",code_smell,lack_of_reusability,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def get_all_users(self):
        query = ""SELECT * FROM users""
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        users_data = cursor.fetchall()
        return users_data

    def create_user(self, name, email, password):
        query = ""INSERT INTO users (name, email, password) VALUES ('"" + name + ""', '"" + email + ""', '"" + password + ""')""
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()

# Example usage:
# db_connection = sqlite3.connect(':memory:')
# user_service = UserService(db_connection)
# user_service.create_user('John Doe', 'john@example.com', 'password123')
",code_defect,insecure_sql_queries,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}
    void addTransaction(int amount) {
        // No validation of amount; negative values allowed
        std::lock_guard<std::mutex> lock(mtx_);
        amounts_.push_back(amount);
        total_ += amount;
    }
    int getTotal() const {
        return total_;
    }
    void processAll() {
        // Process each transaction in parallel, but shares the same total_ without proper synchronization
        std::vector<std::thread> workers;
        for (size_t i = 0; i < amounts_.size(); ++i) {
            workers.emplace_back([this, i]() {
                // Simulate work
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                // Bug: race condition updating total_ without lock
                total_ += amounts_[i];
            });
        }
        for (auto &t : workers) {
            if (t.joinable()) t.join();
        }
    }
private:
    std::vector<int> amounts_;
    int total_;
    mutable std::mutex mtx_;
};

int main() {
    TransactionProcessor tp;
    tp.addTransaction(100);
    tp.addTransaction(-50); // unintended negative transaction
    tp.processAll();
    std::cout << ""Total: "" << tp.getTotal() << std::endl;
    return 0;
}
",code_defect,race_condition,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserData(const std::vector<std::string>& users) {
    for (const auto& user : users) {
        if (user.empty()) {
            std::cout << ""Skipping empty user"" << std::endl;
            continue;
        }
        std::string processed = ""Processed: "" + user;
        std::cout << processed << std::endl;
    }
}

int main() {
    std::vector<std::string> userList = {""Alice"", ""Bob"", """", ""Charlie""};
    processUserData(userList);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserProcessor { private static final Logger logger = LoggerFactory.getLogger(UserProcessor.class); public void processUsers(List<User> users) { for (int i = 0; i < users.size(); i++) { User user = users.get(i); if (user.getRole().equals(""admin"")) { logger.info(""Processing admin user: {}"", user.getUsername()); } else { logger.info(""Processing non-admin user: {}"", user.getUsername()); } } } }",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() {}
    void addTransaction(int amount) {
        std::lock_guard<std::mutex> lock(mtx_);
        pending_.push_back(amount);
    }
    void processAll() {
        // Process each pending transaction sequentially
        for (size_t i = 0; i <= pending_.size(); ++i) { // BUG: off‑by‑one, may read past end
            int amt = pending_[i];
            if (amt < 0) {
                std::cerr << ""Invalid transaction amount"" << std::endl;
                continue;
            }
            total_ += amt;
        }
        pending_.clear();
    }
    int getTotal() const { return total_; }
private:
    std::vector<int> pending_;
    int total_ = 0;
    std::mutex mtx_;
};

int main() {
    TransactionProcessor tp;
    tp.addTransaction(100);
    tp.addTransaction(200);
    tp.addTransaction(-50); // invalid, should be ignored
    tp.processAll();
    std::cout << ""Total processed: "" << tp.getTotal() << std::endl;
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        List<OrderItem> items = order.getItems();
        for (OrderItem item : items) {
            if (item.getQuantity() > 0 && item.getProduct() != null) {
                processItem(item);
            }
        }

        sendNotification(order);
    }

    private void processItem(OrderItem item) {
        // Simulate processing by doing nothing
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    private void sendNotification(Order order) {
        // Simulate sending an email notification
        System.out.println(""Notification sent for order: "" + order.getId());
    }

    // TODO: Remove deprecated method
    @Deprecated
    public void oldProcessOrderMethod(Order order) {
        // Legacy code
    }

    // Unused method
    private void unusedHelperMethod() {
        // Not used anywhere
    }
}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor() {
         this.users = [];
      }

      async addUser(user) {
         this.users.push(user);
         await new Promise(resolve => setTimeout(resolve, 1000));
      }

      async getUsers() {
         return this.users;
      }
   }

   class UserController {
      constructor(userService) {
         this.userService = userService;
      }

      async handleGetUsersRequest() {
         const users = await this.userService.getUsers();
         return users;
      }

      async handleAddUserRequest(user) {
         await this.userService.addUser(user);
         return { message: 'User added' };
      }
   }

   const userService = new UserService();
   const userController = new UserController(userService);

   userController.handleAddUserRequest({ name: 'John Doe', email: 'john@example.com' });
   userController.handleGetUsersRequest().then(users => console.log(users));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String domain) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // insecure concatenation leads to SQL injection
            String sql = ""SELECT email FROM users WHERE email LIKE '"" + ""%@"" + domain + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            // Resources not closed properly if stmt is null
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_resource_leak,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users) {
    this.users = users;
  }

  authenticate(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username && this.users[i].password === password) {
        return true;
      }
    }
    return false;
  }

  // The following method is never used but is left in the codebase
  getAdminDetails() {
    const admin = this.users.find(user => user.role === 'admin');
    return admin ? admin : null;
  }
}

// Example usage:
const users = [
  { username: 'alice', password: '12345', role: 'user' },
  { username: 'bob', password: '67890', role: 'admin' }
];

const auth = new UserAuth(users);
console.log(auth.authenticate('alice', '12345'));",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class UserProcessor { private static final Logger logger = LoggerFactory.getLogger(UserProcessor.class); public void processUsers(List<User> users) { for (User user : users) { if (user.getName() != null && !user.getName().isEmpty()) { logger.info(""Processing user: "" + user.getName()); try { Thread.sleep(100); } catch (InterruptedException e) { logger.error(""Error processing user"", e); } } } } }",code_smell,unused_exception_handling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');
const path = require('path');

class ConfigLoader {
  constructor(configDir) {
    this.configDir = configDir;
    this.cache = {};
  }

  // Loads a JSON config file and caches it
  loadConfig(name) {
    const filePath = path.join(this.configDir, `${name}.json`);
    // Asynchronous read but not awaited, causing race conditions
    fs.readFile(filePath, 'utf8', (err, data) => {
      if (err) {
        console.error('Failed to read config:', err);
        return;
      }
      try {
        this.cache[name] = JSON.parse(data);
      } catch (e) {
        console.error('Invalid JSON in config:', e);
      }
    });
    // Returns cached value immediately, likely undefined
    return this.cache[name];
  }

  // Retrieves a config value, loading it if necessary
  get(key) {
    const [file, prop] = key.split('.');
    if (!this.cache[file]) {
      this.loadConfig(file);
    }
    return this.cache[file] ? this.cache[file][prop] : undefined;
  }
}

module.exports = ConfigLoader;",code_defect,race_condition_due_to_missing_await,,openai/gpt-oss-120b
Python,"import os
import json

class UserSettings:
    def __init__(self, user_id):
        self.user_id = user_id
        self.config_path = f""./user_{user_id}_config.json""
        self.default_config = {
            ""theme"": ""light"",
            ""language"": ""en"",
            ""notifications"": True
        }

    def load(self):
        if os.path.exists(self.config_path):
            with open(self.config_path, 'r') as f:
                self.config = json.load(f)
        else:
            self.config = self.default_config

    def save(self):
        with open(self.config_path, 'w') as f:
            json.dump(self.config, f)

    def update(self, new_settings):
        for key, value in new_settings.items():
            if key in self.config:
                self.config[key] = value

    def get(self, key):
        return self.config.get(key)

    def set(self, key, value):
        self.config[key] = value

    def clear(self):
        self.config = self.default_config

    def is_configured(self):
        return os.path.exists(self.config_path)

    def delete(self):
        if os.path.exists(self.config_path):
            os.remove(self.config_path)",code_smell,tight_coupling,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& message) {
        std::lock_guard<std::mutex> lock(mutex_);
        std::cout << message << std::endl;
    }

private:
    std::mutex mutex_;
};

class Database {
public:
    void query(const std::string& query) {
        // Simulating a long-running database query
        std::this_thread::sleep_for(std::chrono::seconds(2));
        Logger logger;
        logger.log(""Query executed: "" + query);
    }
};

int main() {
    Database db;
    db.query(""SELECT * FROM users"");
    return 0;
}
",code_smell,unused_imports_and_tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.logging.Logger;

public class PaymentProcessor {
    private static final Logger logger = Logger.getLogger(PaymentProcessor.class.getName());
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""P@ssw0rd!""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT balance FROM accounts WHERE account_id='"" + accountId + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    double newBalance = balance - amount;
                    String update = ""UPDATE accounts SET balance="" + newBalance + "" WHERE account_id='"" + accountId + ""'"";
                    stmt.executeUpdate(update);
                    logger.info(""Payment of "" + amount + "" processed for account "" + accountId);
                    return true;
                } else {
                    logger.warning(""Insufficient funds for account "" + accountId);
                    return false;
                }
            } else {
                logger.warning(""Account not found: "" + accountId);
                return false;
            }
        } catch (Exception e) {
            logger.severe(""Error processing payment: "" + e.getMessage());
            return false;
        } finally {
            try {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (Exception ignored) {}
        }
    }
}
",code_defect,sql_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Python,"import os
import json

def load_config(config_path='config.json'):
    try:
        with open(config_path, 'r') as f:
            config = json.load(f)
        return config
    except Exception as e:
        print(f""Error loading config: {e}"")
        return {}

class UserAuth:
    def __init__(self, config):
        self.db_username = config.get('db_user')
        self.db_password = config.get('db_pass')
        self.db_host = config.get('db_host')

    def authenticate(self, username, password):
        if username == self.db_username and password == self.db_password:
            return True
        return False

    def connect_to_db(self):
        import psycopg2
        conn = psycopg2.connect(
            host=self.db_host,
            user=self.db_username,
            password=self.db_password
        )
        return conn

def main():
    config = load_config()
    auth = UserAuth(config)
    user_input = input(""Enter username: "")
    pass_input = input(""Enter password: "")

    if auth.authenticate(user_input, pass_input):
        print(""Authentication successful."")
        conn = auth.connect_to_db()
        print(""Connected to database."")
    else:
        print(""Authentication failed."")

if __name__ == ""__main__"":
    main()",code_defect,missing_error_handling,,qwen/qwen3-32b
Python,"class UserManager:
    def __init__(self, db_connection):
        self.db_connection = db_connection
        self.users = {}

    def get_user(self, user_id):
        if user_id not in self.users:
            self.users[user_id] = self.db_connection.get_user(user_id)
        return self.users[user_id]

    def update_user(self, user_id, new_data):
        if user_id in self.users:
            self.users[user_id].update(new_data)
            self.db_connection.update_user(user_id, self.users[user_id])
        else:
            self.db_connection.insert_user(user_id, new_data)
            self.users[user_id] = new_data

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
            self.db_connection.delete_user(user_id)
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import os
import json
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data):
        cursor = self.conn.cursor()
        # Directly interpolating user input into SQL – SQL injection risk
        query = f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')""
        cursor.execute(query)
        self.conn.commit()

    def get_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            # Unsafe deserialization – may execute malicious code if data is crafted
            return json.loads(row[0])
        return None

    def delete_all(self):
        # Dangerous operation without confirmation
        self.conn.execute('DELETE FROM users')
        self.conn.commit()

# Example usage (would be removed in production)
if __name__ == ""__main__"":
    manager = UserManager('users.db')
    manager.add_user('admin', {'role': 'admin', 'token': os.getenv('SECRET_TOKEN')})
    print(manager.get_user('admin'))
    # manager.delete_all()
",code_defect,SQL_injection_and_unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(String userId, String productId, int quantity, String paymentMethod, String shippingAddress) {
        if (userId == null || productId == null || paymentMethod == null || shippingAddress == null) {
            throw new IllegalArgumentException(""Missing required parameters"");
        }

        if (quantity <= 0) {
            throw new IllegalArgumentException(""Quantity must be greater than zero"");
        }

        boolean paymentSuccess = chargePayment(userId, paymentMethod, calculateTotalPrice(productId, quantity));
        if (!paymentSuccess) {
            return;
        }

        boolean inventorySuccess = updateInventory(productId, quantity);
        if (!inventorySuccess) {
            refundPayment(userId, paymentMethod, calculateTotalPrice(productId, quantity));
            return;
        }

        confirmOrder(userId, productId, quantity, shippingAddress);
    }

    private double calculateTotalPrice(String productId, int quantity) {
        // Simulated product price lookup
        return 19.99 * quantity;
    }

    private boolean chargePayment(String userId, String paymentMethod, double amount) {
        // Simulated payment processing logic
        return true;
    }

    private boolean updateInventory(String productId, int quantity) {
        // Simulated inventory update logic
        return true;
    }

    private void refundPayment(String userId, String paymentMethod, double amount) {
        // Simulated refund logic
    }

    private void confirmOrder(String userId, String productId, int quantity, String shippingAddress) {
        // Simulated order confirmation logic
    }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

private:
    std::string name;
    int salary;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }

    int calculateTotalSalary() {
        int totalSalary = 0;
        for (const auto& employee : employees) {
            totalSalary += employee.getSalary();
        }
        return totalSalary;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 50000));
    manager.addEmployee(Employee(""Alice"", 60000));
    std::cout << ""Total salary: "" << manager.calculateTotalSalary() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off-by-one bug
            int value = data[i] * 2;
            results_.push_back(value);
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& results() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1, 2, 3, 4, 5};
    std::thread t([&]() { processor.process(input); });
    t.join();
    for (int v : processor.results()) {
        std::cout << v << "" "";
    }
    std::cout << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  processUsers(users) {
    let validUsers = [];
    for (let i = 0; i < users.length; i++) {
      if (users[i].age >= 18) {
        validUsers.push(users[i]);
      }
    }

    for (let i = 0; i < validUsers.length; i++) {
      if (validUsers[i].email) {
        this.sendEmail(validUsers[i].email);
      }
    }
  }

  sendEmail(email) {
    console.log(`Email sent to: ${email}`);
  }

  logValidUsers(validUsers) {
    console.log(`Valid users: ${validUsers.length}`);
  }
}

const processor = new UserProcessor();
const users = [
  { name: 'Alice', age: 25, email: 'alice@example.com' },
  { name: 'Bob', age: 17, email: 'bob@example.com' },
  { name: 'Charlie', age: 30, email: 'charlie@example.com' }
];

processor.processUsers(users);",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
      class UserDatabase {
         constructor() {
            this.users = {};
         }

         addUser(username, password) {
            if (!this.users[username]) {
               this.users[username] = password;
            }
         }

         authenticate(username, password) {
            if (this.users[username] === password) {
               return true;
            }
            return false;
         }
      }

      const db = new UserDatabase();
      db.addUser('admin', 'password123');
      console.log(db.authenticate('admin', 'password123'));
   ",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}
    void addTransaction(int amount) {
        // No validation of amount, negative values allowed
        std::lock_guard<std::mutex> lock(mtx_);
        transactions_.push_back(amount);
        total_ += amount;
    }
    int getTotal() const {
        return total_;
    }
    void processAll() {
        // Process each transaction in parallel, but shares the same vector without proper synchronization
        std::vector<std::thread> workers;
        for (size_t i = 0; i < transactions_.size(); ++i) {
            workers.emplace_back([this, i]() {
                // Simulate processing delay
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                // Incorrectly accesses transactions_ without locking -> data race
                int val = transactions_[i];
                if (val < 0) {
                    // Refund logic (buggy: subtracts instead of adding back)
                    total_ -= val;
                } else {
                    total_ += val;
                }
            });
        }
        for (auto &t : workers) {
            t.join();
        }
    }
private:
    std::vector<int> transactions_;
    int total_;
    mutable std::mutex mtx_;
};

int main() {
    TransactionProcessor tp;
    tp.addTransaction(100);
    tp.addTransaction(-50);
    tp.addTransaction(200);
    tp.processAll();
    std::cout << ""Final total: "" << tp.getTotal() << std::endl;
    return 0;
}",code_defect,data_race_and_logic_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.users = [];
  }

  registerUser(username, password) {
    if (!username || !password) return false;

    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        return false;
      }
    }

    this.users.push({ username, password });
    return true;
  }

  authenticateUser(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username && this.users[i].password === password) {
        return true;
      }
    }
    return false;
  }
}",code_defect,security_vulnerability,,qwen/qwen3-32b
Java,"public class UserDAO {
    private Connection connection;
    public UserDAO() {
        try {
            connection = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""root"", ""password"");
        } catch (SQLException e) {
            System.out.println(""Error connecting to database: "" + e.getMessage());
        }
    }
    public void saveUser(User user) {
        String query = ""INSERT INTO users (name, email) VALUES ('"" + user.getName() + ""', '"" + user.getEmail() + ""')"";
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate(query);
        } catch (SQLException e) {
            System.out.println(""Error saving user: "" + e.getMessage());
        }
    }
}",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserReportGenerator {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""p@ssw0rd""; // hardcoded credentials

    public List<String> generateReport(int days) {
        List<String> report = new ArrayList<>();
        String query = ""SELECT username, last_login FROM users WHERE last_login > NOW() - INTERVAL "" + days + "" DAY"";
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                String line = rs.getString(""username"") + "","" + rs.getTimestamp(""last_login"");
                report.add(line);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return report;
    }

    // Called from a servlet without authentication check
    public void handleRequest(int days) {
        List<String> data = generateReport(days);
        // Directly writes to HTTP response without encoding
        for (String line : data) {
            System.out.println(line);
        }
    }
}
",code_defect,hardcoded_credentials_and_unvalidated_input,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

void processData(const std::string& input) {
    std::string result = """";
    for (size_t i = 0; i < input.length(); ++i) {
        if (i % 2 == 0) {
            result += input[i];
        }
    }

    for (size_t i = 0; i < input.length(); ++i) {
        if (i % 2 != 0) {
            result += input[i];
        }
    }

    std::cout << ""Processed: "" << result << std::endl;
}

int main() {
    std::string input = ""abcdefgh"";
    processData(input);
    return 0;
}",code_smell,inefficient_code,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) { users.push_back(user); }
    std::vector<User> getUsers() { return users; }
private:
    std::vector<User> users;
};

int main() {
    UserService service;
    service.addUser(User(""John Doe"", 30));
    service.addUser(User(""Jane Doe"", 25));
    for (const auto& user : service.getUsers()) {
        std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
    }
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self._config = None
        self._lock = threading.Lock()
        self._load()

    def _load(self):
        # No error handling – if the file is missing or malformed, this will crash later
        with open(self.path, 'r') as f:
            data = f.read()
        # Unsafe deserialization: using eval on file content
        self._config = eval(data)

    def get(self, key, default=None):
        with self._lock:
            return self._config.get(key, default)

    def reload(self):
        # Reload config without acquiring lock – possible race condition
        self._load()

# Usage example
loader = ConfigLoader('/etc/app/config.cfg')
api_key = loader.get('API_KEY')
print('Loaded API key:', api_key)
",code_defect,unsafe_deserialization_and_race_condition,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

using namespace std;

struct User {
    string name;
    int age;
    string email;
};

void processUser(const User& user) {
    if (user.age < 18) {
        cout << user.name << "" is not eligible."" << endl;
        return;
    }

    if (user.email.empty()) {
        cout << user.name << "" has no email."" << endl;
        return;
    }

    cout << ""Processing user: "" << user.name << endl;
}

int main() {
    vector<User> users = {
        {""Alice"", 20, ""alice@example.com""},
        {""Bob"", 17, ""bob@example.com""},
        {""Charlie"", 25, """"},
        {""David"", 22, ""david@example.com""}
    };

    for (const auto& user : users) {
        processUser(user);
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) { users.push_back(user); }
    User getUser(int index) { return users[index]; }
private:
    std::vector<User> users;
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    std::cout << service.getUser(0).getName() << std::endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL,
            email TEXT NOT NULL
        )''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> None:
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        conn.commit()
        conn.close()

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cur.fetchall()
        conn.close()
        return [dict(id=row[0], username=row[1], email=row[2]) for row in rows]

    def get_total_pages(self, page_size: int = 10) -> int:
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('SELECT COUNT(*) FROM users')
        total = cur.fetchone()[0]
        conn.close()
        # BUG: off-by-one error, returns one extra page when total is a multiple of page_size
        return (total // page_size) + 1

# Example usage
repo = UserRepository('users.db')
repo.add_user('alice', 'alice@example.com')
repo.add_user('bob', 'bob@example.com')
print('Page 1:', repo.get_users_page(1))
print('Total pages:', repo.get_total_pages())",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

struct User {
    std::string name;
    int age;
    bool is_active;
};

void process_user(const User& user) {
    if (user.is_active) {
        std::cout << ""User "" << user.name << "" is active."" << std::endl;
    }
    else {
        std::cout << ""User "" << user.name << "" is inactive."" << std::endl;
    }
}

void process_users(const std::vector<User>& users) {
    for (const auto& user : users) {
        process_user(user);
    }
}

int main() {
    std::vector<User> users = {
        {""Alice"", 25, true},
        {""Bob"", 30, false},
        {""Charlie"", 22, true}
    };

    process_users(users);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public synchronized void addUser(User user) { users.put(user.getId(), user); } public synchronized User getUser(String id) { return users.get(id); } public synchronized void removeUser(String id) { users.remove(id); } public static class User { private String id; private String name; public User(String id, String name) { this.id = id; this.name = name; } public String getId() { return id; } public String getName() { return name; } } }",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addData(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        buffer.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            std::vector<int> localCopy;
            {
                std::lock_guard<std::mutex> lock(mtx);
                localCopy.swap(buffer); // move data out
            }
            for (int v : localCopy) {
                // Simulate processing
                std::cout << ""Processing: "" << v << std::endl;
            }
            // Missing sleep leads to busy-wait
        }
    }
    std::vector<int> buffer;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 0; i < 5; ++i) {
        dp.addData(i);
    }
    // Forget to stop processor, program hangs on exit
    return 0;
}
",code_defect,resource_leak_busy_wait,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  findUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  getUserRole(userId) {
    const user = this.findUserByEmail(userId);
    if (!user) {
      return 'unknown';
    }
    return user.role;
  }

  isUserAdmin(userId) {
    const role = this.getUserRole(userId);
    return role === 'admin';
  }
}

const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com', role: 'user' },
  { id: 2, name: 'Bob', email: 'bob@example.com', role: 'admin' }
];

const userManager = new UserManager(users);
console.log(userManager.isUserAdmin('alice@example.com'));",code_defect,incorrect_logic,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string name, int age) : name(name), age(age) {}
};

class UserRepository {
private:
    std::vector<User> users;

public:
    void addUser(User user) {
        users.push_back(user);
    }

    User* getUserByName(std::string name) {
        for (auto& user : users) {
            if (user.name == name) {
                return &user;
            }
        }
        return nullptr;
    }
};

int main() {
    UserRepository repository;
    repository.addUser(User(""John"", 30));
    User* user = repository.getUserByName(""John"");
    if (user != nullptr) {
        std::cout << user->name << std::endl;
    }
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserCache {
  constructor(filePath) {
    this.filePath = filePath;
    this.cache = {};
    this._load();
  }

  _load() {
    // Synchronously read the entire cache file on startup
    const data = fs.readFileSync(this.filePath, 'utf8');
    this.cache = JSON.parse(data);
  }

  getUser(id) {
    // Returns a reference to the cached user object
    return this.cache[id];
  }

  updateUser(id, updates) {
    if (!this.cache[id]) {
      this.cache[id] = {};
    }
    Object.assign(this.cache[id], updates);
    // Asynchronously write the whole cache back to disk
    fs.writeFile(this.filePath, JSON.stringify(this.cache), (err) => {
      if (err) console.error('Failed to persist cache');
    });
  }
}

// Usage example
const userCache = new UserCache('./userCache.json');

function handleRequest(req, res) {
  const userId = req.query.id;
  const user = userCache.getUser(userId);
  if (!user) {
    res.status(404).send('User not found');
    return;
  }
  // Simulate a race condition: update user profile while another request may read stale data
  userCache.updateUser(userId, { lastAccess: Date.now() });
  res.json(user);
}

module.exports = { UserCache, handleRequest };",code_defect,race_condition_due_to_async_write,,openai/gpt-oss-120b
Python,"import requests
import json
import time

class DataProcessor:
    def __init__(self):
        self.base_url = 'https://api.example.com/data'
        self.cache = {}

    def fetch_data(self, user_id):
        if user_id in self.cache:
            print('Returning cached data...')
            return self.cache[user_id]

        url = f'{self.base_url}/{user_id}'
        response = requests.get(url)
        if response.status_code == 200:
            data = json.loads(response.text)
            self.cache[user_id] = data
            return data
        return None

    def process_data(self, data):
        result = []
        for item in data:
            if 'value' in item:
                result.append(item['value'] * 2)
            else:
                result.append(0)
        return result

    def run(self, user_id):
        data = self.fetch_data(user_id)
        if data:
            processed = self.process_data(data)
            print(f'Processed values: {processed}')
        else:
            print('Failed to fetch data.')

if __name__ == '__main__':
    processor = DataProcessor()
    processor.run(123)",clean_code,well_structured,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount > self.balance:
            return False
        self.balance -= amount
    def get_balance(self):
        return self.balance

class Bank:
    def __init__(self):
        self.accounts = {}
    def create_account(self, account_id, initial_balance):
        self.accounts[account_id] = BankAccount(initial_balance)
    def get_account_balance(self, account_id):
        if account_id in self.accounts:
            return self.accounts[account_id].get_balance()
        else:
            return None

bank = Bank()
bank.create_account('123', 1000)
print(bank.get_account_balance('123'))",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    LogAggregator() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogAggregator::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        buffer.push_back(msg);
    }
private:
    void process() {
        while (!stopFlag) {
            std::vector<std::string> localCopy;
            {
                std::lock_guard<std::mutex> lock(mtx);
                localCopy.swap(buffer);
            }
            for (const auto& line : localCopy) {
                // Simulate I/O latency
                std::this_thread::sleep_for(std::chrono::milliseconds(1));
                std::cout << line << std::endl;
            }
        }
    }
    std::vector<std::string> buffer;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogAggregator logger;
    logger.start();
    for (int i = 0; i < 100; ++i) {
        logger.enqueue(""Message "" + std::to_string(i));
    }
    // Forgot to stop the logger, causing program to hang on exit
    return 0;
}",code_defect,resource_leak_hang_due_to_missing_stop,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class UserManager {
public:
    void processUsers(const vector<string>& users) {
        for (const auto& user : users) {
            if (user.empty()) {
                continue;
            }
            cout << ""Processing user: "" << user << endl;
            // Legacy code commented out for future use
            // updateUserStatus(user, ""active"");
        }
    }

    void updateUserStatus(const string& user, const string& status) {
        // Simulated logic to update user status
        cout << ""User "" << user << "" status set to "" << status << endl;
    }
};

int main() {
    UserManager manager;
    vector<string> users = { ""Alice"", """", ""Bob"", ""Charlie"", """", ""David"" };
    manager.processUsers(users);
    return 0;
}",code_smell,commented_out_code,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async getAllUsers() {
            const users = await this.userDao.findAll();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async getUserById(id) {
            const user = await this.userDao.findById(id);
            if (!user) {
               throw new Error(`User with id ${id} not found`);
            }
            return { id: user.id, name: user.name };
         }
      }

      class UserDao {
         async findAll() {
            // simulate database query
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' }
            ];
         }

         async findById(id) {
            // simulate database query
            const users = await this.findAll();
            return users.find(user => user.id === id);
         }
      }

      const userDao = new UserDao();
      const userService = new UserService(userDao);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import sqlite3
import logging

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path
        self.logger = logging.getLogger(__name__)

    def get_user_by_username(self, username):
        """"""Fetch a user record by username.

        NOTE: This method is vulnerable to SQL injection because it builds the query
        string using string concatenation.
        """"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        # Vulnerable line below
        query = ""SELECT id, username, email FROM users WHERE username = '"" + username + ""'""
        cursor.execute(query)
        row = cursor.fetchone()
        conn.close()
        if row:
            return {""id"": row[0], ""username"": row[1], ""email"": row[2]}
        return None

    def update_email(self, user_id, new_email):
        """"""Update the email address for a given user.

        This method incorrectly commits after closing the connection, causing a runtime error.
        """"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute(""UPDATE users SET email = ? WHERE id = ?"", (new_email, user_id))
        conn.close()
        conn.commit()  # This will raise an exception because the connection is closed

    def delete_user(self, user_id):
        """"""Delete a user record.

        The method catches all exceptions but silently ignores them, making debugging difficult.
        """"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(""DELETE FROM users WHERE id = ?"", (user_id,))
            conn.commit()
        except Exception:
            pass
        finally:
            conn.close()
",code_defect,SQL_injection_and_logic_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private String[] userRoles = {""ADMIN"", ""USER"", ""GUEST""};

    public boolean isUserAuthorized(String userRole) {
        for (int i = 0; i < userRoles.length; i++) {
            if (userRole.equals(userRoles[i])) {
                return true;
            }
        }
        return false;
    }

    public String processUserRequest(String userRole, String requestType) {
        if (isUserAuthorized(userRole)) {
            if (requestType.equals(""READ"")) {
                return ""Request processed with read access."";
            } else if (requestType.equals(""WRITE"")) {
                if (userRole.equals(""ADMIN"")) {
                    return ""Request processed with write access."";
                } else {
                    return ""Write access denied."";
                }
            } else {
                return ""Invalid request type."";
            }
        } else {
            return ""User is not authorized."";
        }
    }
}",code_smell,long_method,,qwen/qwen3-32b
Python,"
class PaymentProcessor:
    def __init__(self, payment_gateway):
        self.payment_gateway = payment_gateway

    def process_payment(self, amount, currency):
        if amount <= 0:
            return False
        try:
            self.payment_gateway.charge(amount, currency)
            return True
        except Exception as e:
            print(f'Error processing payment: {e}')
            return False

    def refund_payment(self, amount, currency):
        try:
            self.payment_gateway.refund(amount, currency)
            return True
        except Exception as e:
            print(f'Error refunding payment: {e}')
            return False

class PaymentGateway:
    def charge(self, amount, currency):
        # Simulate a payment gateway charge
        print(f'Charging {amount} {currency}')

    def refund(self, amount, currency):
        # Simulate a payment gateway refund
        print(f'Refunding {amount} {currency}')

payment_gateway = PaymentGateway()
processor = PaymentProcessor(payment_gateway)
processor.process_payment(100, 'USD')
processor.refund_payment(50, 'USD')
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : logFile(file) {}
    void process() {
        std::thread reader(&LogProcessor::readLogs, this);
        std::thread analyzer(&LogProcessor::analyzeLogs, this);
        reader.join();
        analyzer.join();
    }
private:
    std::string logFile;
    std::vector<std::string> entries;
    std::mutex mtx;
    void readLogs() {
        // Simulate reading lines
        for (int i = 0; i < 1000; ++i) {
            std::string line = ""log entry "" + std::to_string(i);
            std::lock_guard<std::mutex> lock(mtx);
            entries.push_back(line);
        }
    }
    void analyzeLogs() {
        // BUG: accesses entries without synchronization, may read empty vector or cause data race
        for (size_t i = 0; i < entries.size(); ++i) {
            if (entries[i].find(""error"") != std::string::npos) {
                std::cout << ""Error found: "" << entries[i] << std::endl;
            }
        }
    }
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.process();
    return 0;
}
",code_defect,data_race,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processUserInput(std::vector<int>& input, int threshold) {
    for (size_t i = 0; i < input.size(); ++i) {
        if (input[i] < threshold) {
            input[i] = 0;
        } else if (input[i] > threshold) {
            input[i] = 100;
        } else {
            input[i] = 50;
        }
    }
}

int main() {
    std::vector<int> data = {20, 40, 60, 80, 100};
    processUserInput(data, 50);
    for (int val : data) {
        std::cout << val << "" "";
    }
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.connection = None

    def connect(self):
        import sqlite3
        self.connection = sqlite3.connect(self.db_file)

    def get_user(self, user_id):
        if self.connection is None:
            self.connect()
        cursor = self.connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id=?', (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def close(self):
        if self.connection is not None:
            self.connection.close()
            self.connection = None

# Usage
db = UserDatabase('users.db')
user_data = db.get_user(1)
print(user_data)
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {}
    void addUser(const std::string& name) {
        users.push_back(name);
    }
    // Returns the user at the given index (0‑based)
    const std::string& getUser(size_t index) const {
        // BUG: off‑by‑one check allows out‑of‑bounds access
        if (index <= users.size()) {
            return users[index];
        }
        static const std::string empty = """";
        return empty;
    }
    size_t count() const { return users.size(); }
private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    // Intentional request for the last user
    std::cout << ""Last user: "" << um.getUser(um.count()) << std::endl; // out‑of‑bounds
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json
import requests

# API client for fetching weather data
class WeatherAPI:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = 'https://api.weatherapi.com/v1'

    def get_current_weather(self, city):
        url = f'{self.base_url}/current.json?key={self.api_key}&q={city}'
        response = requests.get(url)
        data = response.json()
        if response.status_code == 200:
            return data['current']['temp_c']
        else:
            return None

    def get_forecast(self, city, days=5):
        url = f'{self.base_url}/forecast.json?key={self.api_key}&q={city}&days={days}'
        response = requests.get(url)
        data = response.json()
        if response.status_code == 200:
            return [day['date'] for day in data['forecast']['forecastday']]
        else:
            return []

    def get_historical_data(self, city, date):
        url = f'{self.base_url}/history.json?key={self.api_key}&q={city}&dt={date}'
        response = requests.get(url)
        data = response.json()
        if response.status_code == 200:
            return data['forecastday'][0]['hourly']
        else:
            return []

# Example usage
if __name__ == '__main__':
    client = WeatherAPI('your_api_key_here')
    print('Current temp in London:', client.get_current_weather('London'))
    print('Forecast for next 5 days in New York:', client.get_forecast('New York'))",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    std::string name;
    int salary;

    Employee(std::string n, int s) : name(n), salary(s) {}

    bool operator<(const Employee& other) const {
        return salary < other.salary;
    }
};

class EmployeeDatabase {
private:
    std::vector<Employee> employees;

public:
    void addEmployee(const Employee& employee) {
        employees.push_back(employee);
    }

    void sortEmployees() {
        std::sort(employees.begin(), employees.end());
    }

    void printEmployees() {
        for (const auto& employee : employees) {
            std::cout << employee.name << "" "" << employee.salary << std::endl;
        }
    }
};

int main() {
    EmployeeDatabase db;
    db.addEmployee(Employee(""John"", 50000));
    db.addEmployee(Employee(""Alice"", 60000));
    db.addEmployee(Employee(""Bob"", 40000));
    db.sortEmployees();
    db.printEmployees();
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (Exception ignored) {}
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection,,openai/gpt-oss-120b
JavaScript,"class UserValidator {
  validateUser(user) {
    if (!user || typeof user !== 'object') {
      throw new Error('Invalid user input');
    }

    if (!user.id || !user.name || !user.email || !user.roles) {
      throw new Error('Missing required fields');
    }

    if (typeof user.id !== 'string') {
      throw new Error('User ID must be a string');
    }

    if (typeof user.name !== 'string' || user.name.length < 3) {
      throw new Error('Name must be a string of at least 3 characters');
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(user.email)) {
      throw new Error('Invalid email format');
    }

    if (!Array.isArray(user.roles)) {
      throw new Error('Roles must be an array');
    }

    user.roles.forEach(role => {
      if (typeof role !== 'string' || role.trim() === '') {
        throw new Error('Each role must be a non-empty string');
      }
    });

    return true;
  }
}

const validator = new UserValidator();
validator.validateUser({ id: 123, name: 'John', email: 'john@example.com', roles: ['admin'] });",code_defect,incorrect_type_checking,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userDao) {
         this.userDao = userDao;
      }

      async getUsers() {
         let users = [];
         for (let i = 0; i < 10; i++) {
            const user = await this.userDao.getUser(i);
            users.push(user);
         }
         return users;
      }
   }

   class UserDao {
      async getUser(id) {
         // simulate database query
         return { id, name: 'John Doe' };
      }
   }

   const userDao = new UserDao();
   const userService = new UserService(userDao);
   userService.getUsers().then(users => console.log(users));
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class LogProcessor {
    constructor(logFilePath) {
        this.logFilePath = logFilePath;
        this.buffer = [];
    }

    // Reads the entire log file synchronously and stores lines in a buffer
    loadLogs() {
        const data = fs.readFileSync(this.logFilePath, 'utf8');
        this.buffer = data.split('\n');
    }

    // Returns the last N log entries
    getRecentEntries(count) {
        // Off‑by‑one error: should be this.buffer.length - count
        const start = this.buffer.length - count - 1;
        return this.buffer.slice(start);
    }

    // Appends a new log entry and writes the whole buffer back to disk
    addEntry(entry) {
        this.buffer.push(entry);
        // Missing error handling; also writes synchronously, blocking event loop
        fs.writeFileSync(this.logFilePath, this.buffer.join('\n'));
    }
}

module.exports = LogProcessor;",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        // Temporarily disabled due to a bug in payment gateway
        // validatePayment(order);

        if (order.getItems().isEmpty()) {
            System.out.println(""Order has no items. Proceeding anyway..."");
        }

        String customerEmail = order.getCustomer().getEmail();
        if (customerEmail == null || customerEmail.isEmpty()) {
            System.out.println(""Warning: Customer email is missing. Using default email."");
            customerEmail = ""default@example.com"";
        }

        sendConfirmationEmail(customerEmail);

        if (order.getTotalAmount() > 1000) {
            applyDiscount(order);
        }

        // Legacy code, may not be needed anymore
        // processLegacy(order);

        System.out.println(""Order processed successfully."");
    }

    private void sendConfirmationEmail(String email) {
        // Dummy email sending logic
        System.out.println(""Sending confirmation to "" + email);
    }

    private void applyDiscount(Order order) {
        order.setTotalAmount(order.getTotalAmount() * 0.9);
        System.out.println(""Applied 10% discount."");
    }

    // Unused method
    private void validatePayment(Order order) {
        // Payment validation logic
    }

    // Unused method
    private void processLegacy(Order order) {
        // Legacy processing logic
    }
}",code_smell,"dead_code, commented_out_code, poor_error_handling",,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void printInfo() {
        std::cout << ""Name: "" << name << std::endl;
        std::cout << ""Age: "" << age << std::endl;
    }

private:
    std::string name;
    int age;
};

int main() {
    std::vector<User> users;
    users.push_back(User(""John"", 25));
    users.push_back(User(""Alice"", 30));

    for (int i = 0; i < users.size(); i++) {
        users[i].printInfo();
    }

    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class LogProcessor {
    constructor(logFilePath) {
        this.logFilePath = logFilePath;
        this.buffer = [];
    }

    // Reads the entire log file into memory and processes each line synchronously
    processLogs() {
        const data = fs.readFileSync(this.logFilePath, 'utf8');
        const lines = data.split('\n');
        for (let i = 0; i < lines.length; i++) {
            const entry = this.parseLine(lines[i]);
            if (entry) {
                this.buffer.push(entry);
            }
        }
        this.flushBuffer();
    }

    // Parses a log line; expects CSV format: timestamp,level,message
    parseLine(line) {
        const parts = line.split(',');
        if (parts.length !== 3) return null;
        const [timestamp, level, message] = parts;
        // Vulnerable: directly evals the message assuming it contains JSON
        const meta = eval('(' + message + ')'); // unsafe eval
        return { timestamp, level, meta };
    }

    // Writes buffered entries to a new file; uses async write but doesn't wait for completion
    flushBuffer() {
        const outPath = this.logFilePath + '.processed';
        fs.writeFile(outPath, JSON.stringify(this.buffer, null, 2), (err) => {
            if (err) console.error('Failed to write processed logs');
        });
        // Clears buffer before ensuring write finished
        this.buffer = [];
    }
}

// Usage example
const processor = new LogProcessor('/var/log/app.log');
processor.processLogs();",code_defect,unsafe_eval_and_race_condition,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  const result = [];
  for (let i = 0; i < input.length; i++) {
    for (let j = 0; j < input.length; j++) {
      if (i !== j && input[i] === input[j]) {
        result.push(input[i]);
      }
    }
  }
  return result;
}

function displayDuplicates(data) {
  const duplicates = processUserInput(data);
  console.log(`Duplicates found: ${duplicates.join(', ')}`);
}

// Example usage:
const userInput = [1, 2, 3, 2, 4, 5, 1];
displayDuplicates(userInput);",code_smell,inefficient_algorithm,,qwen/qwen3-32b
JavaScript,"class UserService { 
  constructor(userRepository) { 
    this.userRepository = userRepository; 
  } 
  async getAllUsers() { 
    const users = await this.userRepository.findAll(); 
    return users.map(user => ({ id: user.id, name: user.name })); 
  } 
  async getUserById(id) { 
    const user = await this.userRepository.findById(id); 
    if (!user) { 
      throw new Error('User not found'); 
    } 
    return { id: user.id, name: user.name }; 
  } 
}",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserManager {
    constructor(dbPath) {
        this.dbPath = dbPath;
        this.cache = {};
        this.loadCache();
    }

    loadCache() {
        // Synchronously read the entire user DB on startup
        const data = fs.readFileSync(this.dbPath, 'utf8');
        const users = JSON.parse(data);
        users.forEach(u => this.cache[u.id] = u);
    }

    getUser(id) {
        // Return user from cache; if missing, read file again (inefficient)
        if (!this.cache[id]) {
            const data = fs.readFileSync(this.dbPath, 'utf8');
            const users = JSON.parse(data);
            const user = users.find(u => u.id === id);
            if (user) this.cache[id] = user;
        }
        return this.cache[id];
    }

    updateUser(id, updates) {
        const user = this.getUser(id);
        if (!user) throw new Error('User not found');
        Object.assign(user, updates);
        // Write entire DB back to disk without locking – race condition possible
        const allUsers = Object.values(this.cache);
        fs.writeFileSync(this.dbPath, JSON.stringify(allUsers, null, 2), 'utf8');
    }
}

// Example usage
const manager = new UserManager('./users.json');
manager.updateUser(42, {email: 'new@example.com'});
",code_defect,race_condition_due_to_unsynchronized_file_writes,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << ""Processing: "" << data[i] << std::endl;
        if (data[i] % 2 == 0) {
            std::this_thread::sleep_for(std::chrono::milliseconds(100));
        }
    }
}

void workerThread(const std::vector<int>& data) {
    for (int i = 0; i < 10; ++i) {
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << ""Worker thread iteration: "" << i << std::endl;
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    std::thread t1(workerThread, data);
    std::thread t2(processData, data);

    t1.join();
    t2.join();

    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
JavaScript,"class PaymentProcessor { constructor(merchantId, apiKey) { this.merchantId = merchantId; this.apiKey = apiKey; } processPayment(amount, callback) { const xml = '<payment><amount>' + amount + '</amount><merchantId>' + this.merchantId + '</merchantId><apiKey>' + this.apiKey + '</apiKey></payment>'; const xhr = new XMLHttpRequest(); xhr.open('POST', 'https://example.com/payment', true); xhr.setRequestHeader('Content-Type', 'application/xml'); xhr.send(xml); xhr.onload = function() { if (xhr.status === 200) { callback(null, xhr.responseText); } else { callback(new Error('Payment failed'), null); } }; } }",code_defect,insecure_xml_construction,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""admin123""; // hardcoded credentials

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            conn.setAutoCommit(false);
            if (!debitAccount(conn, accountId, amount)) {
                conn.rollback();
                return false;
            }
            if (!creditMerchant(conn, amount)) {
                conn.rollback();
                return false;
            }
            conn.commit();
            return true;
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ignored) {}
            return false;
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }

    private boolean debitAccount(Connection conn, String accountId, double amount) throws SQLException {
        String sql = ""SELECT balance FROM accounts WHERE id = ? FOR UPDATE"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, accountId);
            ResultSet rs = stmt.executeQuery();
            if (!rs.next()) return false;
            double balance = rs.getDouble(""balance"");
            if (balance < amount) return false;
            double newBalance = balance - amount;
            String update = ""UPDATE accounts SET balance = "" + newBalance + "" WHERE id = ?""; // SQL injection risk
            try (PreparedStatement upd = conn.prepareStatement(update)) {
                upd.setString(1, accountId);
                upd.executeUpdate();
            }
            return true;
        }
    }

    private boolean creditMerchant(Connection conn, double amount) throws SQLException {
        String sql = ""INSERT INTO merchant_transactions (amount) VALUES (?)"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setDouble(1, amount);
            stmt.executeUpdate();
            return true;
        }
    }
}
",code_defect,SQL injection due to string concatenation in update query,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processUserInput(const std::vector<int>& input) {
    std::vector<int> processed;

    for (int i = 0; i < input.size(); ++i) {
        int value = input[i];
        if (value < 100) {
            processed.push_back(value);
        }
        else {
            for (int j = 0; j < processed.size(); ++j) {
                if (processed[j] == value) {
                    std::cout << ""Duplicate found!"" << std::endl;
                    break;
                }
            }
        }
    }

    std::cout << ""Processed values:"" << std::endl;
    for (int val : processed) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;
}

int main() {
    std::vector<int> user_data = {10, 20, 10, 150, 150};
    processUserInput(user_data);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string name, int age) : name(name), age(age) {}

    bool operator<(const User& other) const {
        return age < other.age;
    }
};

void sortUsers(std::vector<User>& users) {
    std::sort(users.begin(), users.end());
}

int main() {
    std::vector<User> users = {User(""John"", 25), User(""Alice"", 30), User(""Bob"", 20)};
    sortUsers(users);
    for (const auto& user : users) {
        std::cout << user.name << "" is "" << user.age << "" years old."" << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        with open(self.path, 'r') as f:
            # Directly eval the config file – insecure!
            self.config = eval(f.read())

    def get(self, key, default=None):
        return self.config.get(key, default)

def process_user_input(user_input):
    # Assume user_input is a JSON string
    data = json.loads(user_input)
    # Missing validation leads to KeyError later
    result = data['value'] * 2
    return result

if __name__ == ""__main__"":
    loader = ConfigLoader('config.cfg')
    secret = loader.get('API_KEY')
    print('Loaded secret:', secret)
    sample = '{""value"": 10}'
    print('Processed:', process_user_input(sample))
",code_defect,unsafe_deserialization_using_eval,,openai/gpt-oss-120b
Python,"import sqlite3

def fetch_user_data(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = f""SELECT * FROM users WHERE id = {user_id}""
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result

# Legacy function, not used anymore
# def process_user_data(data):
#     return data

def get_user_profile(user_id):
    user_data = fetch_user_data(user_id)
    if user_data:
        return {
            'id': user_data[0],
            'name': user_data[1],
            'email': user_data[2],
        }
    else:
        return None",code_smell,security_issue,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/users"";
    private static final String DB_USER = ""root"";
    private static final String DB_PASSWORD = ""password123"";

    public boolean authenticateUser(String username, String password) {
        try {
            Class.forName(""com.mysql.cj.jdbc.Driver"");
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            Statement stmt = conn.createStatement();
            ResultSet results = stmt.executeQuery(""SELECT * FROM users WHERE username = '"" + username + ""' AND password = '"" + password + ""'"");
            if (results.next()) {
                return true;
            }
        } catch (Exception e) {
            // handle exception
        }
        return false;
    }
}",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void process() {
        while (!stopFlag) {
            std::string msg;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    msg = queue.front();
                    queue.erase(queue.begin());
                }
            }
            // BUG: If queue was empty, msg is empty string, but we still process it
            std::cout << ""Processed: "" << msg << std::endl;
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    lp.enqueue(""Event A"");
    lp.enqueue(""Event B"");
    std::this_thread::sleep_for(std::chrono::seconds(1));
    lp.stop();
    return 0;
}",code_defect,logic_error_missing_queue_check,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

class DataProcessor {
public:
    DataProcessor(const std::string& input) : input_data_(input) {}

    std::string process() {
        std::string result = input_data_;
        for (size_t i = 0; i < result.length(); ++i) {
            if (result[i] >= 'A' && result[i] <= 'Z') {
                result[i] = result[i] - 'A' + 'a';
            }
        }
        return result;
    }

private:
    std::string input_data_;
};

int main() {
    std::string input = ""ExampleInput123"";
    DataProcessor processor(input);
    std::cout << processor.process() << std::endl;
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserProcessor { private List<User> users; public UserProcessor(List<User> users) { this.users = users; } public void processUsers() { for (int i = 0; i < users.size(); i++) { User user = users.get(i); if (user.getName() != null && !user.getName().isEmpty()) { System.out.println(user.getName()); } } } public static void main(String[] args) { List<User> users = new ArrayList<>(); users.add(new User(""John"")); users.add(new User(""Alice"")); UserProcessor processor = new UserProcessor(users); processor.processUsers(); } } class User { private String name; public User(String name) { this.name = name; } public String getName() { return name; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file synchronously
    getUserProfile(userId) {
        // Potential race condition: multiple calls share the same log file
        const user = this.db.query(`SELECT * FROM users WHERE id = ${userId}`);
        if (!user) {
            throw new Error('User not found');
        }
        const profile = {
            id: user.id,
            name: user.name,
            email: user.email,
            // Compute age from birthdate, but off‑by‑one error for birthdays after today
            age: new Date().getFullYear() - new Date(user.birthdate).getFullYear() - 1
        };
        // Synchronous file write blocks event loop and can cause deadlock under load
        fs.writeFileSync('/var/log/user_service.log', `Fetched profile for ${userId}\n`, { flag: 'a' });
        return profile;
    }
}

module.exports = UserService;",code_defect,off_by_one_error_and_blocking_io,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final int MAX_RETRIES = 3;

    public void processOrder(Order order) {
        boolean isProcessed = false;
        int retryCount = 0;

        while (!isProcessed && retryCount < MAX_RETRIES) {
            try {
                validateOrder(order);
                chargeCustomer(order);
                updateInventory(order);
                isProcessed = true;
            } catch (Exception e) {
                retryCount++;
                System.out.println(""Retrying... ("" + retryCount + "")"");
            }
        }

        if (!isProcessed) {
            sendErrorNotification(order);
        }
    }

    private void validateOrder(Order order) {
        if (order == null || order.getItems().isEmpty()) {
            throw new IllegalArgumentException(""Order cannot be null or empty"");
        }
    }

    private void chargeCustomer(Order order) {
        // Simulate a payment system call
        if (Math.random() < 0.3) {
            throw new RuntimeException(""Payment failed"");
        }
    }

    private void updateInventory(Order order) {
        for (OrderItem item : order.getItems()) {
            // Simulate inventory update logic
            if (item.getQuantity() > 100) {
                throw new RuntimeException(""Inventory cannot handle large quantity"");
            }
        }
    }

    private void sendErrorNotification(Order order) {
        System.out.println(""Failed to process order: "" + order.getId());
    }
}",code_defect,race_condition,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, String> users = new HashMap<>(); public synchronized void addUser(String username, String password) { users.put(username, password); } public synchronized String getPassword(String username) { return users.get(username); } public void changePassword(String username, String newPassword) { users.put(username, newPassword); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None
        self._lock = threading.Lock()
        self._load_config()

    def _load_config(self):
        with open(self.config_path, 'r') as f:
            # Unsafe: directly evals JSON content which may contain malicious code
            self._config = eval(f.read())

    def get(self, key, default=None):
        with self._lock:
            return self._config.get(key, default)

    def reload(self):
        # Missing lock acquisition leads to race condition if called concurrently
        self._load_config()

# Usage example (not part of library)
if __name__ == ""__main__"":
    loader = ConfigLoader('config.txt')
    print(loader.get('api_key'))
    # Simulate concurrent reloads
    threads = [threading.Thread(target=loader.reload) for _ in range(5)]
    for t in threads:
        t.start()
    for t in threads:
        t.join()
    print('Reload complete')",code_defect,unsafe_deserialization_and_race_condition,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null || order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                continue;
            }
            if (item.getPrice() <= 0) {
                continue;
            }
            deductInventory(item.getProduct(), item.getQuantity());
            addTransaction(order.getCustomer(), item.getProduct(), item.getQuantity());
        }

        sendConfirmationEmail(order.getEmail());
        updateOrderStatus(order, ""Processed"");
    }

    private void deductInventory(Product product, int quantity) {
        // Simulates inventory reduction
        product.setStock(product.getStock() - quantity);
    }

    private void addTransaction(Customer customer, Product product, int quantity) {
        // Simulates transaction logging
    }

    private void sendConfirmationEmail(String email) {
        // Simulates email sending
    }

    private void updateOrderStatus(Order order, String status) {
        order.setStatus(status);
    }
}",code_smell,long_function,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = []

    def add_user(self, user):
        self.users.append(user)

    def remove_user(self, user_id):
        for user in self.users:
            if user['id'] == user_id:
                self.users.remove(user)
                break

    def get_user(self, user_id):
        for user in self.users:
            if user['id'] == user_id:
                return user
        return None

    def update_user(self, user_id, new_data):
        user = self.get_user(user_id)
        if user:
            user.update(new_data)
        else:
            raise Exception('User not found')

# usage
manager = UserManager()
manager.add_user({'id': 1, 'name': 'John'})
manager.add_user({'id': 2, 'name': 'Jane'})
print(manager.get_user(1))  # prints: {'id': 1, 'name': 'John'}
manager.update_user(1, {'name': 'Johnny'})
print(manager.get_user(1))  # prints: {'id': 1, 'name': 'Johnny'}
   ",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(configPath) {
        this.configPath = configPath;
        this.cache = null;
    }

    load() {
        if (this.cache) return this.cache;
        const data = fs.readFileSync(this.configPath, 'utf8');
        // No validation of JSON structure
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

class UserService {
    constructor(db) {
        this.db = db;
    }

    async getUserProfile(userId) {
        const query = `SELECT * FROM users WHERE id = ${userId}`; // SQL injection risk
        const result = await this.db.query(query);
        return result[0];
    }
}

// Usage example (defect: unhandled promise rejection may crash the process)
(async () => {
    const loader = new ConfigLoader('/etc/app/config.json');
    const config = loader.load();
    const db = { query: async (q) => { throw new Error('DB down'); } }; // mock
    const service = new UserService(db);
    const profile = await service.getUserProfile(config.adminId);
    console.log('Admin profile:', profile);
})();",code_defect,sql_injection_and_unhandled_promise,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data) {
    int sum = 0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += data[i];
    }

    // Compute average
    double avg = sum / data.size();

    // Check for even numbers
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 0) {
            std::cout << ""Even number found: "" << data[i] << std::endl;
        }
    }

    std::cout << ""Average: "" << avg << std::endl;
}

int main() {
    std::vector<int> input = {2, 4, 6, 8, 10};
    processData(input);
    return 0;
}",code_smell,repeated_work,,qwen/qwen3-32b
Python,"
class BankAccount:
    def __init__(self, account_number, balance=0):
        self.account_number = account_number
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        return self.balance

    def withdraw(self, amount):
        if amount > self.balance:
            return 'Insufficient funds'
        self.balance -= amount
        return self.balance

    def get_balance(self):
        return self.balance

class Bank:
    def __init__(self):
        self.accounts = {}

    def create_account(self, account_number, initial_balance=0):
        if account_number in self.accounts:
            return 'Account already exists'
        self.accounts[account_number] = BankAccount(account_number, initial_balance)
        return 'Account created'

    def get_account(self, account_number):
        return self.accounts.get(account_number)

    def transfer(self, from_account, to_account, amount):
        from_acc = self.get_account(from_account)
        to_acc = self.get_account(to_account)
        if from_acc and to_acc:
            if from_acc.balance >= amount:
                from_acc.withdraw(amount)
                to_acc.deposit(amount)
                return 'Transfer successful'
            else:
                return 'Insufficient funds'
        else:
            return 'One or both accounts do not exist'

bank = Bank()
bank.create_account('12345', 1000)
bank.create_account('67890', 500)
print(bank.transfer('12345', '67890', 200))
",code_smell,Tight Coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            std::string msg;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    msg = queue.front();
                    queue.erase(queue.begin());
                }
            }
            // Process message without checking if msg is empty
            std::cout << ""Processed: "" << msg << std::endl;
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(""Log entry "" + std::to_string(i));
    }
    // Missing lp.stop(); leads to thread running forever
    return 0;
}
",code_defect,resource_leak_thread_not_stopped,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor() {
    this.orderQueue = [];
  }

  addOrder(order) {
    this.orderQueue.push(order);
  }

  processOrders() {
    for (let i = 0; i < this.orderQueue.length; i++) {
      const order = this.orderQueue[i];
      if (order.status === 'pending') {
        this.processOrder(order);
      }
    }
  }

  processOrder(order) {
    if (!order.items || order.items.length === 0) {
      return;
    }

    order.status = 'processing';

    for (let i = 0; i < order.items.length; i++) {
      const item = order.items[i];
      if (item.quantity <= 0) {
        continue;
      }

      if (item.price < 0) {
        item.price = 0; // Invalid price handled here
      }

      console.log(`Processing item: ${item.name}, quantity: ${item.quantity}, price: $${item.price}`);
    }

    order.status = 'processed';
  }

  finalizeOrders() {
    this.orderQueue.forEach(order => {
      order.status = 'completed';
    });
  }
}

// Example usage
const processor = new OrderProcessor();
processor.addOrder({ id: 1, status: 'pending', items: [ { name: 'Widget', quantity: 5, price: 10 }, { name: 'Gadget', quantity: 0, price: 5 } ] });
processor.addOrder({ id: 2, status: 'pending', items: [ { name: 'Doodad', quantity: 2, price: -1 } ] });
processor.processOrders();
processor.finalizeOrders();",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email

    def change_password(self, new_password):
        self.password = new_password

    def authenticate(self, input_password):
        if self.password == input_password:
            return True
        else:
            return False

class AuthenticationSystem:
    def __init__(self):
        self.accounts = {}

    def create_account(self, username, password, email):
        if username in self.accounts:
            return False
        self.accounts[username] = UserAccount(username, password, email)
        return True

    def login(self, username, password):
        if username in self.accounts:
            account = self.accounts[username]
            if account.authenticate(password):
                return True
        return False

auth_system = AuthenticationSystem()
auth_system.create_account('test_user', 'test_password', 'test@example.com')
print(auth_system.login('test_user', 'test_password'))",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails() {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { stmt.close(); } catch (Exception ignored) {}
            try { conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,hardcoded_credentials,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

class UserSettings:
    def __init__(self):
        self.settings_file = 'user_config.json'
        self.default_settings = {
            'theme': 'light',
            'language': 'en',
            'notifications': True
        }
        self.load_settings()

    def load_settings(self):
        if os.path.exists(self.settings_file):
            with open(self.settings_file, 'r') as f:
                self.settings = json.load(f)
        else:
            self.settings = self.default_settings
            self.save_settings()

    def save_settings(self):
        with open(self.settings_file, 'w') as f:
            json.dump(self.settings, f, indent=4)

    def update_setting(self, key, value):
        self.settings[key] = value
        self.save_settings()

    def get_setting(self, key):
        return self.settings.get(key)

    def get_all_settings(self):
        return self.settings

    def log_last_access(self):
        self.last_access = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        print(f""User settings accessed at {self.last_access}"")

# Example usage
if __name__ == ""__main__"":
    user_settings = UserSettings()
    user_settings.update_setting('theme', 'dark')
    user_settings.update_setting('language', 'es')
    user_settings.log_last_access()",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

    void setSalary(int newSalary) { salary = newSalary; }

private:
    std::string name;
    int salary;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }

    Employee getHighestPaidEmployee() {
        if (employees.empty()) {
            // Return a default employee if the list is empty
            return Employee(""Default"", 0);
        }

        Employee highestPaid = employees[0];
        for (int i = 1; i < employees.size(); i++) {
            if (employees[i].getSalary() > highestPaid.getSalary()) {
                highestPaid = employees[i];
            }
        }
        return highestPaid;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 50000));
    manager.addEmployee(Employee(""Alice"", 60000));
    Employee highestPaid = manager.getHighestPaidEmployee();
    std::cout << ""Highest paid employee: "" << highestPaid.getName() << std::endl;
    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""admin123""; // hardcoded credentials

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String sql = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk if limit derived from user input
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        // Missing rs.close(), stmt.close(), conn.close() leads to resource leak
        return payments;
    }

    public void processPayments(List<String> paymentIds) {
        for (String id : paymentIds) {
            try {
                // Simulate processing
                Thread.sleep(100);
                updatePaymentStatus(id, ""COMPLETED"");
            } catch (InterruptedException e) {
                // Swallowing interruption, should restore interrupt status
            }
        }
    }

    private void updatePaymentStatus(String paymentId, String status) {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(""UPDATE payments SET status=? WHERE payment_id=?"")) {
            stmt.setString(1, status);
            stmt.setString(2, paymentId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            // Logging omitted, exception ignored
        }
    }
}
",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private String apiKey = ""hardcoded_secret_1234"";

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        String databaseUrl = ""jdbc:mysql://localhost:3306/mydb"";
        String query = ""INSERT INTO orders (id, customer_id, total) VALUES ("" +
                order.getId() + "", "" + order.getCustomerId() + "", "" + order.getTotal() + "")"";

        try (Connection conn = DriverManager.getConnection(databaseUrl, ""root"", ""password"")) {
            Statement stmt = conn.createStatement();
            stmt.executeUpdate(query);
        } catch (SQLException e) {
            // Ignoring exceptions is a bad practice
        }
    }
}",code_defect,insecure_sql_query,,qwen/qwen3-32b
JavaScript,"
   class UserService {
     constructor(userRepository) {
       this.userRepository = userRepository;
     }

     async getUsers() {
       const users = await this.userRepository.findAll();
       return users.map(user => ({ id: user.id, name: user.name }));
     }

     async getUserById(id) {
       const user = await this.userRepository.findById(id);
       if (!user) {
         throw new Error(`User with id ${id} not found`);
       }
       return { id: user.id, name: user.name };
     }
   }

   class UserRepository {
     async findAll() {
       // Assume a database query
       return [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }];
     }

     async findById(id) {
       // Assume a database query
       return { id: 1, name: 'John' };
     }
   }

   const userService = new UserService(new UserRepository());
   userService.getUsers().then(users => console.log(users));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
  }

  async processOrder(orderId) {
    // Fetch order details
    const order = await this.db.query(`SELECT * FROM orders WHERE id = ${orderId}`);
    if (!order) throw new Error('Order not found');

    // Update inventory for each item
    for (let i = 0; i < order.items.length; i++) {
      const item = order.items[i];
      await this.db.query(`UPDATE inventory SET quantity = quantity - ${item.qty} WHERE product_id = ${item.productId}`);
    }

    // Mark order as processed
    await this.db.query(`UPDATE orders SET status = 'processed' WHERE id = ${orderId}`);
    return true;
  }
}

// Usage example (vulnerable to SQL injection)
const db = require('some-db-lib');
const processor = new OrderProcessor(db);
processor.processOrder(req.body.orderId); // orderId comes from untrusted user input",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

class DataProcessor {
public:
    DataProcessor() {}

    void process(std::vector<int>& data) {
        std::vector<int> processed;
        for (int i = 0; i < data.size(); ++i) {
            if (data[i] % 2 == 0) {
                processed.push_back(data[i] * 2);
            } else {
                processed.push_back(data[i] + 5);
            }
        }
        sorted_data = processed;
        std::sort(sorted_data.begin(), sorted_data.end());
    }

    void display() const {
        for (int val : sorted_data) {
            std::cout << val << ' ';
        }
        std::cout << std::endl;
    }

private:
    std::vector<int> sorted_data;
};

int main() {
    std::vector<int> input = {3, 8, 1, 6, 5};
    DataProcessor dp;
    dp.process(input);
    dp.display();
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private Map<String, User> users = new HashMap<>(); public void addUser(User user) { users.put(user.getUsername(), user); } public User getUser(String username) { return users.get(username); } public void removeUser(String username) { users.remove(username); } public List<User> getAllUsers() { return new ArrayList<>(users.values()); } }",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addData(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        buffer.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            // Process first element without checking if buffer is empty
            int val = buffer.front();
            // Simulate work
            std::cout << ""Processing: "" << val << std::endl;
            std::lock_guard<std::mutex> lock(mtx);
            buffer.erase(buffer.begin());
        }
    }
    std::vector<int> buffer;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    dp.addData(42);
    dp.stop();
    return 0;
}
",code_defect,use_before_check_empty_buffer,,openai/gpt-oss-120b
Python,"import os
import json

class UserAuth:
    def __init__(self, db_path='users.json'):
        self.db_path = db_path

    def load_users(self):
        if os.path.exists(self.db_path):
            with open(self.db_path, 'r') as f:
                return json.load(f)
        return []

    def verify_credentials(self, username, password):
        users = self.load_users()
        for user in users:
            if user['username'] == username:
                if user['password'] == password:
                    return True
                else:
                    return False
        return False

    def login(self, username, password):
        if self.verify_credentials(username, password):
            print(f""Welcome, {username}!"")
            return True
        else:
            print(""Invalid username or password."")
            return False

# Example usage
if __name__ == ""__main__"":
    auth = UserAuth()
    auth.login('admin', 'supersecurepassword')",code_defect,insecure_authentication,,qwen/qwen3-32b
Java,public class UserService { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUserByEmail(String email) { for (User user : users) { if (user.getEmail().equals(email)) { return user; } } return null; } public void removeUserByEmail(String email) { for (int i = 0; i < users.size(); i++) { if (users.get(i).getEmail().equals(email)) { users.remove(i); break; } } } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String nameFilter) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // INSECURE: concatenating user input directly into SQL
            String sql = ""SELECT email FROM users WHERE name LIKE '%"" + nameFilter + ""%'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallowing exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Python,"import requests
import time

def fetch_data_from_api(url):
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        return response.json()
    except requests.RequestException:
        return None


def process_data(data):
    results = []
    for item in data:
        processed = {
            'id': item.get('id'),
            'name': item.get('name', '').strip(),
            'value': item.get('value', 0) * 1.1
        }
        results.append(processed)
    return results


def main():
    url = 'https://api.example.com/data'
    raw_data = fetch_data_from_api(url)
    if not raw_data:
        print('Failed to fetch data.')
        return
    processed_data = process_data(raw_data)
    print(f'Processed {len(processed_data)} items.')

    time.sleep(2)  # Simulate delay before output

    for item in processed_data:
        print(f""ID: {item['id']}, Name: {item['name']}, Value: {item['value']}"")

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
      constructor(userDatabase) {
         this.userDatabase = userDatabase;
      }

      async getUsers() {
         try {
            const users = await this.userDatabase.getUsers();
            return users.map(user => ({ id: user.id, name: user.name }));
         } catch (error) {
            console.error(error);
            return [];
         }
      }

      async getUserById(id) {
         try {
            const user = await this.userDatabase.getUserById(id);
            if (user) {
               return { id: user.id, name: user.name };
            } else {
               throw new Error(`User with id ${id} not found`);
            }
         } catch (error) {
            console.error(error);
            throw error;
         }
      }
   }

   class UserDatabase {
      async getUsers() {
         // simulate a database query
         return [
            { id: 1, name: 'John Doe' },
            { id: 2, name: 'Jane Doe' },
            { id: 3, name: 'Bob Smith' }
         ];
      }

      async getUserById(id) {
         // simulate a database query
         const users = await this.getUsers();
         return users.find(user => user.id === id);
      }
   }

   const userDatabase = new UserDatabase();
   const userManager = new UserManager(userDatabase);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
  }

  // Process a batch of orders and update inventory
  async processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      // Update inventory synchronously (potential race condition)
      const product = await this.db.getProduct(order.productId);
      if (product.stock < order.quantity) {
        throw new Error('Insufficient stock');
      }
      product.stock -= order.quantity;
      await this.db.updateProduct(product);
      // Save order
      await this.db.saveOrder({
        userId: order.userId,
        productId: order.productId,
        quantity: order.quantity,
        timestamp: Date.now()
      });
    }
    return true;
  }
}

module.exports = OrderProcessor;",code_defect,race_condition_due_to_sequential_updates,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(std::string input, std::vector<int>& result) {
    std::string temp;
    for (char c : input) {
        if (isdigit(c)) {
            temp += c;
        }
    }

    if (!temp.empty()) {
        result.push_back(std::stoi(temp));
    }

    // Legacy code, might be removed later
    // std::cout << ""Debug: "" << temp << std::endl;
}

int main() {
    std::vector<int> numbers;
    std::string input = ""abc123def456"";

    processUserInput(input, numbers);

    for (int num : numbers) {
        std::cout << num << "" "";
    }

    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class UserService { private static Map<String, User> users = new HashMap<>(); public void addUser(User user) { users.put(user.getUsername(), user); } public User getUser(String username) { return users.get(username); } public void updateUser(User user) { users.put(user.getUsername(), user); } public void deleteUser(String username) { users.remove(username); } }",code_smell,God class,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<Transaction> fetchPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction t = new Transaction();
            t.setId(rs.getInt(""id""));
            t.setAmount(rs.getDouble(""amount""));
            t.setStatus(rs.getString(""status""));
            list.add(t);
        }
        // Missing close of ResultSet, Statement, and Connection
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = fetchPendingTransactions();
            for (Transaction t : pending) {
                // Simulate processing
                if (t.getAmount() < 0) {
                    t.setStatus(""FAILED"");
                } else {
                    t.setStatus(""COMPLETED"");
                }
                updateTransactionStatus(t);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateTransactionStatus(Transaction t) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""UPDATE transactions SET status='"" + t.getStatus() + ""' WHERE id="" + t.getId(); // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        // Missing resource cleanup
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}
",code_defect,SQL injection and resource leak,,openai/gpt-oss-120b
Java,"public class UserRegistrationService {

    private final UserRepository userRepository;

    public UserRegistrationService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public void registerUser(String email, String password, String confirmPassword) {
        if (userRepository.findByEmail(email) != null) {
            throw new IllegalArgumentException(""User with email already exists"");
        }

        if (!password.equals(confirmPassword)) {
            throw new IllegalArgumentException(""Passwords do not match"");
        }

        User user = new User();
        user.setEmail(email);
        user.setPassword(password);
        user.setRegistrationDate(new Date());

        userRepository.save(user);
    }

    public void sendWelcomeEmail(String email) {
        // Assume email service is implemented elsewhere
        System.out.println(""Welcome email sent to: "" + email);
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserProcessor {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async processUsers() {
            const users = await this.userDao.getAllUsers();
            for (let i = 0; i < users.length; i++) {
               const user = users[i];
               user.processed = true;
               await this.userDao.updateUser(user);
            }
         }

         async processUser(id) {
            const user = await this.userDao.getUserById(id);
            if (user) {
               user.processed = true;
               await this.userDao.updateUser(user);
            }
         }
      }

      class UserDao {
         async getAllUsers() {
            // simulate database call
            return [
               { id: 1, name: 'John' },
               { id: 2, name: 'Jane' },
               { id: 3, name: 'Bob' }
            ];
         }

         async getUserById(id) {
            // simulate database call
            const users = await this.getAllUsers();
            for (let i = 0; i < users.length; i++) {
               const user = users[i];
               if (user.id === id) {
                  return user;
               }
            }
            return null;
         }

         async updateUser(user) {
            // simulate database update
            console.log('Updated user:', user);
         }
      }

      const userDao = new UserDao();
      const userProcessor = new UserProcessor(userDao);
      userProcessor.processUsers();
   ",code_smell,inefficient loops,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_schema()

    def _ensure_schema(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, email):
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()

    def get_users_page(self, page_number, page_size=20):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page_number - 1) * page_size
        cursor = self.conn.cursor()
        # Defect: uses <= page_size, returning one extra row and causing index errors downstream
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size + 1, offset))
        rows = cursor.fetchall()
        return [dict(id=row[0], username=row[1], email=row[2]) for row in rows]

# Example usage (not part of the library)
if __name__ == '__main__':
    repo = UserRepository(':memory:')
    for i in range(1, 51):
        repo.add_user(f'user{i}', f'user{i}@example.com')
    # Expect 20 users on page 2, but will get 21 due to defect
    users_page_2 = repo.get_users_page(2)
    print(f'Fetched {len(users_page_2)} users on page 2')
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserService {

    public User getUserById(int userId) {
        if (userId < 0) {
            return null;
        }

        // Simulating a database call
        List<User> users = fetchAllUsers();

        for (User user : users) {
            if (user.getId() == userId) {
                return user;
            }
        }
        return null;
    }

    private List<User> fetchAllUsers() {
        // Simulated database
        List<User> users = new ArrayList<>();
        users.add(new User(1, ""Alice""));
        users.add(new User(2, ""Bob""));
        users.add(new User(3, ""Charlie""));
        return users;
    }

    public void updateUsername(int userId, String newUsername) {
        User user = getUserById(userId);
        if (user != null) {
            user.setName(newUsername);
        }
    }

    public static class User {
        private int id;
        private String name;

        public User(int id, String name) {
            this.id = id;
            this.name = name;
        }

        public int getId() {
            return id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public void addUser(User user) { users.put(user.getId(), user); } public User getUser(String id) { return users.get(id); } public void updateUser(User user) { users.put(user.getId(), user); } public void deleteUser(String id) { users.remove(id); } public List<User> getAllUsers() { return new ArrayList<>(users.values()); } }",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
  }

  // Process a batch of orders and update inventory
  async processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      // Update inventory synchronously (potential race condition)
      await this.updateInventory(order.items);
      // Save order
      await this.db.save('orders', order);
    }
  }

  // Decrements stock counts; assumes items is an array of {productId, qty}
  async updateInventory(items) {
    const promises = items.map(item => {
      return this.db.query(`SELECT stock FROM products WHERE id = ${item.productId}`)
        .then(result => {
          const newStock = result[0].stock - item.qty;
          // No validation for negative stock
          return this.db.execute(`UPDATE products SET stock = ${newStock} WHERE id = ${item.productId}`);
        });
    });
    // Missing await here leads to unhandled promise rejections
    Promise.all(promises);
  }
}

module.exports = OrderProcessor;",code_defect,missing_await_in_async_loop,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(String productId, int quantity, String customerEmail) {
        if (productId == null || productId.isEmpty()) {
            throw new IllegalArgumentException(""Product ID cannot be empty"");
        }

        if (quantity <= 0) {
            throw new IllegalArgumentException(""Quantity must be positive"");
        }

        if (customerEmail == null || !customerEmail.contains(""@"")) {
            throw new IllegalArgumentException(""Invalid email format"");
        }

        // Simulate fetching product from database
        Product product = fetchProductFromDatabase(productId);

        // Check if product exists
        if (product == null) {
            throw new IllegalStateException(""Product not found"");
        }

        // Simulate inventory check
        if (product.getStock() < quantity) {
            throw new IllegalStateException(""Not enough stock"");
        }

        // Apply discount if it's a premium customer
        if (isPremiumCustomer(customerEmail)) {
            quantity = applyDiscount(quantity);
        }

        // Simulate order processing
        System.out.println(""Order processed: "" + productId + "", Quantity: "" + quantity);
    }

    private Product fetchProductFromDatabase(String productId) {
        // Simulated database call
        if (""12345"".equals(productId)) {
            return new Product(""12345"", ""Laptop"", 10);
        }
        return null;
    }

    private boolean isPremiumCustomer(String email) {
        return email.endsWith(""@premium.com"");
    }

    private int applyDiscount(int quantity) {
        return quantity * 9 / 10; // 10% discount
    }

    private static class Product {
        private String id;
        private String name;
        private int stock;

        public Product(String id, String name, int stock) {
            this.id = id;
            this.name = name;
            this.stock = stock;
        }

        public int getStock() {
            return stock;
        }
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserManager:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, new_data):
        query = ""UPDATE users SET name = '"" + new_data['name'] + ""', email = '"" + new_data['email'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()
",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        try {
            conn = getConnection();
            conn.setAutoCommit(false);
            if (!hasSufficientBalance(conn, accountId, amount)) {
                return false;
            }
            deductBalance(conn, accountId, amount);
            recordTransaction(conn, accountId, amount);
            conn.commit();
            return true;
        } catch (SQLException e) {
            if (conn != null) {
                try { conn.rollback(); } catch (SQLException ignored) {}
            }
            return false;
        } finally {
            if (conn != null) {
                try { conn.close(); } catch (SQLException ignored) {}
            }
        }
    }

    private Connection getConnection() throws SQLException {
        Properties props = new Properties();
        props.setProperty(""user"", DB_USER);
        props.setProperty(""password"", DB_PASS);
        return DriverManager.getConnection(DB_URL, props);
    }

    private boolean hasSufficientBalance(Connection conn, String accountId, double amount) throws SQLException {
        String sql = ""SELECT balance FROM accounts WHERE id = '"" + accountId + ""'""; // SQL injection risk
        try (PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                return balance >= amount;
            }
            return false;
        }
    }

    private void deductBalance(Connection conn, String accountId, double amount) throws SQLException {
        String sql = ""UPDATE accounts SET balance = balance - ? WHERE id = ?"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setDouble(1, amount);
            stmt.setString(2, accountId);
            stmt.executeUpdate();
        }
    }

    private void recordTransaction(Connection conn, String accountId, double amount) throws SQLException {
        String sql = ""INSERT INTO transactions (account_id, amount, timestamp) VALUES (?, ?, NOW())"";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, accountId);
            stmt.setDouble(2, amount);
            stmt.executeUpdate();
        }
    }
}
",code_defect,sql_injection,,openai/gpt-oss-120b
Java,"public class ReportGenerator {
    public void generateReport(String data, String format, String destination, String template) {
        if (format.equals(""PDF"")) {
            if (destination.equals(""EMAIL"")) {
                sendEmailReport(data, template);
            } else if (destination.equals(""DISK"")) {
                saveReportToDisk(data, template);
            }
        } else if (format.equals(""CSV"")) {
            if (destination.equals(""EMAIL"")) {
                sendEmailReport(data, template);
            } else if (destination.equals(""DISK"")) {
                saveReportToDisk(data, template);
            }
        }
    }

    private void sendEmailReport(String data, String template) {
        // Code to send report via email
    }

    private void saveReportToDisk(String data, String template) {
        // Code to save report to disk
    }
}",code_smell,duplicate_code,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor() {
            this.users = [];
         }

         async loadUsers() {
            const response = await fetch('https://example.com/users');
            const data = await response.json();
            this.users = data;
         }

         getUser(id) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === id) {
                  return this.users[i];
               }
            }
            return null;
         }
      }

      const userService = new UserService();
      userService.loadUsers();
      const user = userService.getUser(1);
      console.log(user);
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.configPath = configPath;
    this.cache = null;
  }

  // Loads JSON config from file; caches result
  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.configPath, 'utf8');
    // BUG: JSON.parse can throw, but not caught – leads to crash on malformed config
    this.cache = JSON.parse(data);
    return this.cache;
  }

  // Returns a config value; falls back to default if missing
  get(key, defaultValue) {
    const cfg = this.load();
    return cfg[key] !== undefined ? cfg[key] : defaultValue;
  }
}

// Example usage in an HTTP server
const http = require('http');
const config = new ConfigLoader('./config.json');

const server = http.createServer((req, res) => {
  // SECURITY BUG: Directly uses query parameter in file path without validation
  const url = new URL(req.url, `http://${req.headers.host}`);
  const file = url.searchParams.get('file');
  const filePath = `./public/${file}`;
  fs.readFile(filePath, (err, data) => {
    if (err) {
      res.writeHead(404);
      res.end('Not found');
    } else {
      res.writeHead(200);
      res.end(data);
    }
  });
});

server.listen(config.get('port', 8080), () => {
  console.log(`Server listening on port ${config.get('port', 8080)}`);
});",code_defect,unhandled JSON parse error and path traversal vulnerability,,openai/gpt-oss-120b
Python,"import random

def generate_random_data(data_type, size):
    data = []
    for _ in range(size):
        if data_type == 'int':
            data.append(random.randint(0, 100))
        elif data_type == 'float':
            data.append(random.uniform(0, 100))
        elif data_type == 'str':
            data.append(''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=5)))
        else:
            data.append(None)
    return data


class DataProcessor:
    def __init__(self):
        self._cache = {}

    def process(self, data):
        result = []
        for item in data:
            if item in self._cache:
                result.append(self._cache[item])
            else:
                processed = self._process_item(item)
                self._cache[item] = processed
                result.append(processed)
        return result

    def _process_item(self, item):
        if isinstance(item, int):
            return item * 2
        elif isinstance(item, float):
            return item ** 0.5
        elif isinstance(item, str):
            return item.upper()
        else:
            return 'UNKNOWN'

processor = DataProcessor()
data = generate_random_data('int', 10)
processed = processor.process(data)
print(processed)",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"const fs = require('fs');
const path = require('path');

class ConfigLoader {
  constructor(configDir) {
    this.configDir = configDir;
    this.cache = {};
  }

  // Loads JSON config files lazily and caches them
  async getConfig(name) {
    if (this.cache[name]) return this.cache[name];
    const filePath = path.join(this.configDir, `${name}.json`);
    // BUG: No error handling; if file does not exist, promise rejects and caller hangs
    const data = await fs.promises.readFile(filePath, 'utf8');
    const parsed = JSON.parse(data);
    this.cache[name] = parsed;
    return parsed;
  }

  // Clears the cache; used during hot-reload
  invalidate(name) {
    delete this.cache[name];
  }
}

// Global singleton
const config = new ConfigLoader(path.resolve(__dirname, 'config'));

async function initializeApp() {
  // Parallel loading of multiple configs; race condition if one fails
  const [dbConfig, apiConfig] = await Promise.all([
    config.getConfig('database'),
    config.getConfig('api')
  ]);
  // BUG: If either config load fails, the whole initialization hangs without fallback
  console.log('Configs loaded', dbConfig, apiConfig);
}

initializeApp();",code_defect,unhandled_promise_rejection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrders(List<Order> orders) {
        for (Order order : orders) {
            if (order != null && order.getStatus() == OrderStatus.NEW) {
                processNewOrder(order);
            } else if (order != null && order.getStatus() == OrderStatus.PENDING) {
                processPendingOrder(order);
            } else {
                // Do nothing
            }
        }
    }

    private void processNewOrder(Order order) {
        order.setStatus(OrderStatus.PROCESSING);
        validateOrder(order);
        saveOrder(order);
        notifyCustomer(order);
    }

    private void processPendingOrder(Order order) {
        order.setStatus(OrderStatus.PROCESSING);
        validateOrder(order);
        saveOrder(order);
        notifyCustomer(order);
    }

    private void validateOrder(Order order) {
        // Validation logic
    }

    private void saveOrder(Order order) {
        // Saving logic
    }

    private void notifyCustomer(Order order) {
        // Notification logic
    }
}",code_smell,duplicated_code,,qwen/qwen3-32b
JavaScript,"class UserService { constructor(userDao) { this.userDao = userDao; } async getAllUsers() { let users = await this.userDao.getAll(); for (let i = 0; i < users.length; i++) { let user = users[i]; user.fullName = user.firstName + ' ' + user.lastName; } return users; } async getUserById(id) { return this.userDao.getById(id); } async saveUser(user) { if (user.id) { return this.userDao.update(user); } else { return this.userDao.create(user); } } } class UserDao { async getAll() { return [{ id: 1, firstName: 'John', lastName: 'Doe' }, { id: 2, firstName: 'Jane', lastName: 'Doe' }]; } async getById(id) { return { id: id, firstName: 'John', lastName: 'Doe' }; } async create(user) { return user; } async update(user) { return user; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : log_file(file) {}
    void process() {
        std::vector<std::string> lines = readLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off‑by‑one error
            if (lines[i].find(""ERROR"") != std::string::npos) {
                std::lock_guard<std::mutex> lock(mtx);
                error_count++;
            }
        }
    }
    int getErrorCount() const { return error_count; }
private:
    std::vector<std::string> readLines() {
        // Dummy implementation for illustration
        return {""INFO start"", ""ERROR something failed"", ""INFO end""};
    }
    std::string log_file;
    int error_count = 0;
    std::mutex mtx;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    std::thread t1([&lp](){ lp.process(); });
    std::thread t2([&lp](){ lp.process(); });
    t1.join();
    t2.join();
    std::cout << ""Total errors: "" << lp.getErrorCount() << std::endl;
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void processData(const std::vector<int>& data, int& result) {
    for (int i = 0; i < data.size(); ++i) {
        std::lock_guard<std::mutex> lock(mtx);
        result += data[i];
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5};
    int sum = 0;

    std::thread t1(processData, std::ref(input), std::ref(sum));
    std::thread t2(processData, std::ref(input), std::ref(sum));

    t1.join();
    t2.join();

    std::cout << ""Total sum: "" << sum << std::endl;
    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userRepository) {
         this.userRepository = userRepository;
      }

      async getUsers() {
         const users = await this.userRepository.findAll();
         return users.map(user => ({ id: user.id, name: user.name }));
      }

      async getUserById(id) {
         const user = await this.userRepository.findById(id);
         if (!user) {
            throw new Error('User not found');
         }
         return { id: user.id, name: user.name };
      }
   }

   class UserRepository {
      async findAll() {
         // simulate a database query
         return [
            { id: 1, name: 'John Doe' },
            { id: 2, name: 'Jane Doe' }
         ];
      }

      async findById(id) {
         // simulate a database query
         const users = await this.findAll();
         return users.find(user => user.id === id);
      }
   }

   const userRepository = new UserRepository();
   const userService = new UserService(userRepository);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        if (this.cache) return this.cache;
        // Synchronously read config file (blocking I/O)
        const data = fs.readFileSync(this.path, 'utf8');
        // Parse JSON without try/catch – malformed JSON will crash the process
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function processUserInput(input) {
    // Assume input is an object with a ""username"" field
    const username = input.username;
    // Directly embed user input into a shell command – command injection vulnerability
    const cmd = `ls -la ${username}`;
    const exec = require('child_process').execSync;
    const result = exec(cmd, { encoding: 'utf8' });
    return result;
}

module.exports = { ConfigLoader, processUserInput };",code_defect,command_injection,,openai/gpt-oss-120b
Python,"import requests
import json

class APIClient:
    def __init__(self, base_url='https://api.example.com', api_key=None):
        self.base_url = base_url
        self.api_key = api_key

    def get_resource(self, resource_id, params=None):
        headers = {}
        if self.api_key:
            headers['Authorization'] = f'Bearer {self.api_key}'

        url = f'{self.base_url}/resources/{resource_id}'
        response = requests.get(url, headers=headers, params=params)
        if response.status_code == 200:
            return json.loads(response.text)
        else:
            return None

    def update_resource(self, resource_id, data):
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.api_key}'
        }
        url = f'{self.base_url}/resources/{resource_id}'
        response = requests.put(url, data=json.dumps(data), headers=headers)
        return response.status_code

    def delete_resource(self, resource_id):
        headers = {
            'Authorization': f'Bearer {self.api_key}'
        }
        url = f'{self.base_url}/resources/{resource_id}'
        response = requests.delete(url, headers=headers)
        return response.status_code

    def create_resource(self, data):
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.api_key}'
        }
        url = f'{self.base_url}/resources'
        response = requests.post(url, data=json.dumps(data), headers=headers)
        return response.json()",code_smell,poor_error_handling,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger LOGGER = LoggerFactory.getLogger(UserService.class); public void saveUser(User user) { try { Thread.sleep(1000); user.setCreatedAt(new Date()); user.setUpdatedAt(new Date()); } catch (InterruptedException e) { LOGGER.error(""Error saving user"", e); } } public void saveUserDetails(User user) { saveUser(user); user.setActive(true); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        if (this.cache) return this.cache;
        const data = fs.readFileSync(this.path, 'utf8');
        // JSON.parse can throw, but not caught -> crashes on malformed config
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user by ID, but uses string concatenation leading to SQL injection
    getUserById(userId) {
        const query = ""SELECT * FROM users WHERE id = "" + userId;
        return this.db.query(query);
    }
}

// Example usage
const config = new ConfigLoader('./config.json').load();
const db = require('some-db-lib').connect(config.dbUrl);
const userService = new UserService(db);

// Potentially unsafe call if userId comes from request params
userService.getUserById(req.params.id).then(user => {
    console.log('User:', user);
});",code_defect,sql_injection_and_unhandled_json_parse,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (data[i] == data[j] && i != j) {
                std::cout << ""Duplicate found: "" << data[i] << std::endl;
                return;
            }
        }
    }

    std::cout << ""No duplicates found."" << std::endl;
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5, 3};
    processData(input);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        query = ""UPDATE users SET name = '"" + new_data['name'] + ""', email = '"" + new_data['email'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()
   ",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user data and writes a report to disk
  async generateUserReport(userId) {
    const user = await this.db.getUserById(userId);
    if (!user) throw new Error('User not found');

    const orders = await this.db.getOrdersByUserId(userId);
    const total = orders.reduce((sum, o) => sum + o.amount, 0);

    const report = {
      id: user.id,
      name: user.name,
      email: user.email,
      totalSpent: total,
      orderCount: orders.length,
    };

    // BUG: Asynchronously write the file but do not await, causing the function to resolve before the write completes
    fs.writeFile('reports/' + user.id + '.json', JSON.stringify(report), (err) => {
      if (err) console.error('Failed to write report:', err);
    });

    return report;
  }
}

module.exports = UserService;",code_defect,async_handling_bug,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void processData(const std::vector<int>& data) {
    for (int value : data) {
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
        if (value % 2 == 0) {
            std::lock_guard<std::mutex> lock(mtx);
            std::cout << ""Processing even value: "" << value << std::endl;
        }
        else {
            std::lock_guard<std::mutex> lock(mtx);
            std::cout << ""Processing odd value: "" << value << std::endl;
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    std::thread t1(processData, input);
    std::thread t2(processData, input);

    t1.join();
    t2.join();

    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUser(id) { let user = await this.userDao.getUser(id); if (!user) return null; user.roles = await this.userDao.getUserRoles(id); return user; } async getUserRoles(id) { return await this.userDao.getUserRoles(id); } } class UserDao { constructor(db) { this.db = db; } async getUser(id) { return await this.db.query(`SELECT * FROM users WHERE id = ${id}`); } async getUserRoles(id) { return await this.db.query(`SELECT role FROM user_roles WHERE user_id = ${id}`); } },code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        # Unsafe deserialization: using eval on file contents
        with open(self.path, 'r') as f:
            data = f.read()
            self.config = eval(data)  # potential code execution

    def get(self, key, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, config_path):
        self.cfg = ConfigLoader(config_path)
        self.batch_size = self.cfg.get('batch_size', 100)
        self.results = []

    def process(self, input_file):
        with open(input_file, 'r') as f:
            for line in f:
                record = json.loads(line)
                # Assume each record has 'value' field
                transformed = self._transform(record['value'])
                self.results.append(transformed)
                if len(self.results) >= self.batch_size:
                    self._flush()
        # Flush remaining results
        self._flush()

    def _transform(self, val):
        # Off-by-one error: should multiply by 2, but uses +1
        return val * 2 + 1

    def _flush(self):
        # Simulate sending results to an external service
        payload = json.dumps(self.results)
        # Missing error handling for network failures
        os.system(f""curl -X POST -d '{payload}' http://example.com/api"")
        self.results.clear()

if __name__ == '__main__':
    processor = DataProcessor('config.cfg')
    processor.process('data.jsonl')
",code_defect,unsafe_deserialization_and_logic_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        if (order.getItems().isEmpty()) {
            System.out.println(""Order has no items. Nothing to process."");
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                System.out.println(""Skipping item with non-positive quantity: "" + item.getName());
                continue;
            }

            if (item.getPrice() <= 0) {
                item.setPrice(1.0); // Assuming $1 as default
                System.out.println(""Price for item "" + item.getName() + "" reset to $1."");
            }

            if (inventoryService.hasStock(item)) {
                inventoryService.reserveStock(item);
                paymentService.charge(order);
                shippingService.shipItem(item);
            } else {
                System.out.println(""Insufficient stock for item: "" + item.getName());
            }
        }
    }

    // Static dependencies (code smell: tight coupling)
    private static InventoryService inventoryService = new InventoryService();
    private static PaymentService paymentService = new PaymentService();
    private static ShippingService shippingService = new ShippingService();
}",code_smell,tight_coupling,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   
   class User {
   public:
       std::string name;
       int age;
   
       User(std::string n, int a) : name(n), age(a) {}
   
       std::string toString() {
           return name + "" is "" + std::to_string(age) + "" years old"";
       }
   };
   
   class UserRepository {
   public:
       std::vector<User> users;
   
       void addUser(User u) {
           users.push_back(u);
       }
   
       std::string getAllUsers() {
           std::string result = """";
           for (int i = 0; i < users.size(); i++) {
               result += users[i].toString() + "", "";
           }
           return result;
       }
   };
   
   int main() {
       UserRepository repo;
       repo.addUser(User(""John"", 25));
       repo.addUser(User(""Alice"", 30));
       std::cout << repo.getAllUsers() << std::endl;
       return 0;
   }
   ",code_smell,inefficient_string_concatenation,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<Transaction> fetchPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction t = new Transaction();
            t.setId(rs.getInt(""id""));
            t.setAmount(rs.getDouble(""amount""));
            t.setStatus(rs.getString(""status""));
            list.add(t);
        }
        // Missing rs.close(), stmt.close(), conn.close() leads to resource leak
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = fetchPendingTransactions();
            for (Transaction t : pending) {
                // Simulate processing
                if (t.getAmount() < 0) {
                    // Incorrect logic: negative amounts should be flagged, but code proceeds
                    t.setStatus(""FAILED"");
                }
                updateTransactionStatus(t);
            }
        } catch (SQLException e) {
            // Swallowing exception, no logging
        }
    }

    private void updateTransactionStatus(Transaction t) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""UPDATE transactions SET status='"" + t.getStatus() + ""' WHERE id="" + t.getId(); // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        // Missing stmt.close(), conn.close()
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
Python,"import sqlite3

def get_user_by_id(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = 'SELECT * FROM users WHERE id = ' + str(user_id)
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result


def main():
    user = get_user_by_id(1)
    if user:
        print(f""User found: {user}"")
    else:
        print(""User not found"")

if __name__ == ""__main__"":
    main()",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
JavaScript,"
      class UserDatabase {
         constructor() {
            this.users = [];
         }

         addUser(user) {
            this.users.push(user);
         }

         removeUser(userId) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === userId) {
                  this.users.splice(i, 1);
                  break;
               }
            }
         }

         getUser(userId) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === userId) {
                  return this.users[i];
               }
            }
            return null;
         }
      }

      let db = new UserDatabase();
      db.addUser({ id: 1, name: 'John Doe' });
      db.addUser({ id: 2, name: 'Jane Doe' });
      db.removeUser(1);
      console.log(db.getUser(2));
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import os
import json
import threading

class ConfigManager:
    """"""Loads configuration from a JSON file and watches for changes.""""""
    def __init__(self, path: str):
        self.path = path
        self._config = {}
        self._lock = threading.Lock()
        self._load()
        self._start_watcher()

    def _load(self):
        with open(self.path, 'r') as f:
            data = json.load(f)
        # Directly assign without validation – potential defect if file is malformed
        self._config = data

    def _watcher(self):
        last_mtime = os.path.getmtime(self.path)
        while True:
            try:
                cur_mtime = os.path.getmtime(self.path)
                if cur_mtime != last_mtime:
                    with self._lock:
                        self._load()
                    last_mtime = cur_mtime
            except Exception:
                pass  # Swallow all errors, hides problems

    def _start_watcher(self):
        t = threading.Thread(target=self._watcher, daemon=True)
        t.start()

    def get(self, key: str, default=None):
        with self._lock:
            return self._config.get(key, default)

# Usage example (not part of the library)
if __name__ == ""__main__"":
    cfg = ConfigManager('config.json')
    print(cfg.get('database_url'))
",code_defect,unhandled exception in watcher thread leads to silent failure,,openai/gpt-oss-120b
Java,"public class UserValidator {
    public boolean validateUser(String username, String password) {
        if (username == null || username.isEmpty()) {
            return false;
        }

        if (password == null || password.isEmpty()) {
            return false;
        }

        if (username.length() < 3 || username.length() > 20) {
            return false;
        }

        if (password.length() < 8) {
            return false;
        }

        // Check if username contains invalid characters
        for (char c : username.toCharArray()) {
            if (!Character.isLetterOrDigit(c)) {
                return false;
            }
        }

        // Check if password contains at least one digit
        boolean hasDigit = false;
        for (char c : password.toCharArray()) {
            if (Character.isDigit(c)) {
                hasDigit = true;
                break;
            }
        }
        if (!hasDigit) {
            return false;
        }

        // Hardcoded credentials for testing (should be removed in production)
        if (!username.equals(""admin"") || !password.equals(""P@ssw0rd"")) {
            return false;
        }

        return true;
    }
}",code_defect,hardcoded_credentials,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public synchronized User getUser(String username) { if (!users.containsKey(username)) { User user = new User(username); users.put(username, user); return user; } return users.get(username); } public synchronized void updateUser(String username, String newPassword) { User user = users.get(username); if (user != null) { user.setPassword(newPassword); } } public class User { private String username; private String password; public User(String username) { this.username = username; } public void setPassword(String password) { this.password = password; } } }",code_smell,God class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public User getUserById(int userId) {
        User user = null;
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            Statement stmt = conn.createStatement();
            String query = ""SELECT * FROM users WHERE id = "" + userId; // SQL injection risk
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                user = new User();
                user.setId(rs.getInt(""id""));
                user.setName(rs.getString(""name""));
                user.setEmail(rs.getString(""email""));
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (Exception e) {
            // Swallow exception, no logging
        }
        return user;
    }
}

class User {
    private int id;
    private String name;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Python,"import os
import re


def process_log(log_line):
    
    pattern = r'\b(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\b' # IPv4 pattern
    match = re.search(pattern, log_line)
    
    if match:
        ip_address = match.group(1)
        print(f'Found IP: {ip_address}')
    
    # Legacy code for older log format (unused)
    # else:
    #     pattern_old = r'\b([a-zA-Z0-9.-]+)\b'
    #     match_old = re.search(pattern_old, log_line)
    #     if match_old:
    #         print(f'Legacy match: {match_old.group(1)}')


def main():
    log_dir = '/var/logs'
    for root, dirs, files in os.walk(log_dir):
        for file in files:
            if file.endswith('.log'):
                file_path = os.path.join(root, file)
                with open(file_path, 'r') as f:
                    for line in f:
                        process_log(line)

if __name__ == '__main__':
    main()",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger logger = LoggerFactory.getLogger(UserService.class); public User getUserById(int id) { try { User user = UserRepository.getInstance().getUserById(id); if (user == null) { throw new RuntimeException(""User not found""); } return user; } catch (Exception e) { logger.error(""Error getting user"", e); return null; } } }",code_smell,swallowing_exceptions,,llama-3.3-70b-versatile
Java,"package com.example.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user.role === 'admin') {
        this.grantAdminAccess(user);
      } else if (user.role === 'moderator') {
        this.grantModeratorAccess(user);
      } else {
        this.grantUserAccess(user);
      }
    });
  }

  grantAdminAccess(user) {
    // Complex admin logic
    console.log(`Granting admin access to ${user.name}`);
  }

  grantModeratorAccess(user) {
    // Complex moderator logic
    console.log(`Granting moderator access to ${user.name}`);
  }

  grantUserAccess(user) {
    // Complex user logic
    console.log(`Granting user access to ${user.name}`);
  }
}

// Usage
const users = [
  { name: 'Alice', role: 'admin' },
  { name: 'Bob', role: 'moderator' },
  { name: 'Charlie', role: 'user' }
];

const processor = new UserProcessor(users);
processor.processUsers();",code_smell,long_method,,qwen/qwen3-32b
Java,public class UserAuthenticator { private String passwordHash; public UserAuthenticator(String passwordHash) { this.passwordHash = passwordHash; } public boolean authenticate(String password) { String hashedPassword = password; for (int i = 0; i < 100000; i++) { hashedPassword = hashedPassword + passwordHash; } return hashedPassword.equals(passwordHash); } },code_smell,inefficient_algorithm,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        // Missing error handling – if file is missing or malformed, JSON.parse will throw and crash the process
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }

    get(key) {
        // If load() was never called, this.cache is null and accessing property throws
        return this.cache[key];
    }
}

// Global singleton used across the app
const config = new ConfigLoader('/etc/app/config.json');
config.load();

function processRequest(req, res) {
    // Assume userId is passed in query string; no validation
    const userId = req.query.userId;
    // Directly interpolate into file path – path traversal vulnerability
    const userFile = `/var/data/users/${userId}.json`;
    const userData = JSON.parse(fs.readFileSync(userFile, 'utf8'));
    res.send({status:'ok', data:userData});
}

module.exports = { config, processRequest };",code_defect,missing_error_handling_and_path_traversal,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users) {
    this.users = users;
  }

  authenticate(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        if (this.users[i].password === password) {
          console.log('Authentication successful');
          return true;
        } else {
          console.log('Invalid password');
          return false;
        }
      }
    }
    console.log('User not found');
    return false;
  }
}

const users = [
  { username: 'alice', password: '123456' },
  { username: 'bob', password: 'abcdef' }
];

const auth = new UserAuth(users);
auth.authenticate('alice', '123456');",code_defect,security_vulnerability,,qwen/qwen3-32b
Java,"public class UserManager { private Map<String, User> users = new HashMap<>(); public void addUser(User user) { users.put(user.getUsername(), user); } public User getUser(String username) { return users.get(username); } public void removeUser(String username) { users.remove(username); } public List<User> getAllUsers() { return new ArrayList<>(users.values()); } }",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded credentials

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk if limit derived from user input
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        // Missing close of ResultSet, Statement, and Connection -> resource leak
        return payments;
    }

    public boolean processPayment(String paymentId, double amount) {
        // Simulate processing logic
        if (amount <= 0) {
            throw new IllegalArgumentException(""Amount must be positive"");
        }
        // Critical bug: using == for string comparison
        if (paymentId == null || paymentId == """") {
            return false;
        }
        // Update payment status
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String updateSql = ""UPDATE payments SET status='COMPLETED', amount=? WHERE payment_id=?"";
            PreparedStatement updateStmt = conn.prepareStatement(updateSql);
            updateStmt.setDouble(1, amount);
            updateStmt.setString(2, paymentId);
            int rows = updateStmt.executeUpdate();
            // Missing transaction handling and resource cleanup
            return rows == 1;
        } catch (SQLException e) {
            // Swallowing exception, no logging
            return false;
        }
    }
}
",code_defect,string_comparison_bug_and_resource_leak,,openai/gpt-oss-120b
Python,"import requests
import time

def fetch_and_cache_data(url, cache, max_age_seconds=3600):
    if url in cache:
        cached_data, timestamp = cache[url]
        if time.time() - timestamp < max_age_seconds:
            return cached_data

    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            cache[url] = (data, time.time())
            return data
        else:
            print(f""Error fetching {url}: {response.status_code}"")
            return None
    except Exception as e:
        print(f""Failed to fetch {url}: {e}"")
        return None

# Example usage
cache = {}
data = fetch_and_cache_data(""https://api.example.com/data"", cache)
print(data)",code_smell,lack_of_error_recovery,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username == null || username.isEmpty()) {
            return false;
        }
        return password.equals(DEFAULT_PASSWORD);
    }
}",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path: str):
        self.config_path = config_path
        self._config = None

    def load(self) -> dict:
        """"""Load JSON configuration from file.
        Returns the parsed config dictionary.
        """"""
        with open(self.config_path, 'r') as f:
            # BUG: Using eval on file content can execute arbitrary code if the file is tampered with
            data = eval(f.read())
        if not isinstance(data, dict):
            raise ValueError(""Config must be a JSON object"")
        self._config = data
        return data

    def get(self, key: str, default=None):
        if self._config is None:
            self.load()
        return self._config.get(key, default)

def process_user_input(user_input: str) -> str:
    # Simulate processing that expects a JSON string
    try:
        payload = json.loads(user_input)
    except json.JSONDecodeError:
        logger.error(""Invalid JSON payload"")
        return ""error""
    # Directly embed user-provided value into a shell command (security risk)
    os.system(f""echo {payload.get('message', '')}"")
    return ""processed""

def main():
    cfg = ConfigLoader('config.cfg')
    settings = cfg.load()
    # Assume settings contain a command template
    cmd_template = settings.get('cmd_template', 'ls -l')
    # Unsafe string formatting with user input
    user_data = '{""message"": ""Hello; rm -rf /""}'
    process_user_input(user_data)
    # Execute command from config without validation
    os.system(cmd_template)

if __name__ == '__main__':
    main()",code_defect,unsafe_eval_and_command_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null || order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() > 0) {
                String itemCode = item.getItemCode();
                int price = getPriceForItem(itemCode);
                int total = item.getQuantity() * price;
                item.setTotalPrice(total);
            }
        }

        order.setStatus(""PROCESSED"");
    }

    private int getPriceForItem(String itemCode) {
        if (itemCode == null || itemCode.isEmpty()) {
            return 0;
        }
        switch (itemCode) {
            case ""ITEM001"":
                return 100;
            case ""ITEM002"":
                return 150;
            case ""ITEM003"":
                return 200;
            default:
                return 0;
        }
    }
}",code_smell,primitive_obsession,,qwen/qwen3-32b
Python,"
class PaymentProcessor:
    def __init__(self, payment_gateway):
        self.payment_gateway = payment_gateway

    def process_payment(self, amount, customer_id):
        try:
            payment_result = self.payment_gateway.charge_card(amount, customer_id)
            if payment_result['status'] == 'success':
                return True
            else:
                return False
        except Exception as e:
            print(f'Error processing payment: {e}')
            return False

    def refund_payment(self, amount, customer_id):
        try:
            refund_result = self.payment_gateway.refund_card(amount, customer_id)
            if refund_result['status'] == 'success':
                return True
            else:
                return False
        except Exception as e:
            print(f'Error refunding payment: {e}')
            return False

class PaymentGateway:
    def charge_card(self, amount, customer_id):
        # simulate a successful payment
        return {'status': 'success'}

    def refund_card(self, amount, customer_id):
        # simulate a successful refund
        return {'status': 'success'}

payment_gateway = PaymentGateway()
payment_processor = PaymentProcessor(payment_gateway)
print(payment_processor.process_payment(100, 'customer1'))
print(payment_processor.refund_payment(100, 'customer1'))",code_smell,god_class,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    UserManager() {
        // Load users from a mock database
        users_ = {""alice"", ""bob"", ""carol""};
    }

    // Returns true if the user exists
    bool hasUser(const std::string& name) const {
        return std::find(users_.begin(), users_.end(), name) != users_.end();
    }

    // Removes a user by name; returns true on success
    bool removeUser(const std::string& name) {
        auto it = std::find(users_.begin(), users_.end(), name);
        if (it != users_.end()) {
            users_.erase(it);
            return true;
        }
        return false;
    }

    // Returns the first N users; N is expected to be <= users_.size()
    std::vector<std::string> getFirstNUsers(size_t n) const {
        // BUG: off‑by‑one error – includes one extra element when n == users_.size()
        std::vector<std::string> result;
        for (size_t i = 0; i <= n; ++i) {
            result.push_back(users_[i]);
        }
        return result;
    }

private:
    std::vector<std::string> users_;
};

int main() {
    UserManager um;
    auto subset = um.getFirstNUsers(3);
    for (const auto& u : subset) {
        std::cout << u << ""\n"";
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processNumbers(std::vector<int>& nums) {
    for (size_t i = 0; i < nums.size(); ++i) {
        if (nums[i] < 0) {
            nums[i] = 0;
        }
    }

    for (size_t i = 0; i < nums.size(); ++i) {
        std::cout << nums[i] << ' ';
    }
    std::cout << std::endl;
}

int main() {
    std::vector<int> data = { -5, 3, -2, 0, 7 };
    processNumbers(data);
    return 0;
}",code_smell,duplicate_loop,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data
    
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data
    
    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
    
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
",code_smell,God class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String domain) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String sql = ""SELECT email FROM users WHERE email LIKE '%"" + domain + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,sql_injection,,openai/gpt-oss-120b
Python,"import sqlite3
import os

def get_user_data(username):
    db_path = 'user.db'
    if not os.path.exists(db_path):
        return None

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    query = f""SELECT * FROM users WHERE username = '{username}'""
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()

    return result

# Example usage:
# print(get_user_data('admin'))",code_defect,sql_injection,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   #include <algorithm>

   class Employee {
   public:
       Employee(std::string name, int salary) : name(name), salary(salary) {}
       std::string getName() { return name; }
       int getSalary() { return salary; }

   private:
       std::string name;
       int salary;
   };

   class EmployeeDatabase {
   public:
       void addEmployee(Employee employee) { employees.push_back(employee); }
       int getTotalSalary() {
           int totalSalary = 0;
           for (const auto& employee : employees) {
               totalSalary += employee.getSalary();
           }
           return totalSalary;
       }

   private:
       std::vector<Employee> employees;
   };

   int main() {
       EmployeeDatabase database;
       database.addEmployee(Employee(""John"", 50000));
       database.addEmployee(Employee(""Alice"", 60000));
       std::cout << ""Total salary: "" << database.getTotalSalary() << std::endl;
       return 0;
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json, os, logging

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        # Insecurely load configuration using eval on file content
        with open(self.path, 'r') as f:
            data = f.read()
        self.config = eval(data)  # BUG: unsafe deserialization

    def get(self, key, default=None):
        return self.config.get(key, default)

class UserService:
    def __init__(self, config_path):
        self.cfg = ConfigLoader(config_path)
        self.logger = logging.getLogger('UserService')

    def create_user(self, username, password):
        # Password stored in plain text
        user = {'username': username, 'password': password}
        self._save_user(user)
        self.logger.info(f""Created user {username}"")
        return True

    def _save_user(self, user):
        # Simulate saving to a JSON file without proper locking
        with open('users.json', 'a') as f:
            f.write(json.dumps(user) + '\n')

    def load_all_users(self):
        users = []
        with open('users.json', 'r') as f:
            for line in f:
                users.append(json.loads(line))
        return users

# Usage example (would be called elsewhere)
service = UserService('config.cfg')
service.create_user('alice', 'secret123')
",code_defect,unsafe_deserialization_and_plaintext_password_storage,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor(user, orders) {
    this.user = user;
    this.orders = orders;
    this.shippingCost = 0;
    this.discount = 0;
  }

  calculateTotal() {
    let total = 0;
    for (const order of this.orders) {
      total += order.price * order.quantity;
    }

    this.applyDiscount();
    this.calculateShipping();

    return total - this.discount + this.shippingCost;
  }

  applyDiscount() {
    if (this.user.isVIP) {
      this.discount = 10; // 10% off for VIPs
    } else {
      this.discount = 0;
    }
  }

  calculateShipping() {
    this.shippingCost = this.orders.length > 3 ? 5 : 0;
  }

  processOrder() {
    console.log(`Processing order for ${this.user.name}...`);
    console.log(`Total amount: $${this.calculateTotal()}`);
    console.log(`Order details:`, this.orders);
    console.log(`Discount applied: $${this.discount}`);
    console.log(`Shipping cost: $${this.shippingCost}`);
  }
}

// Example usage
const user = { name: 'Alice', isVIP: true };
const orders = [
  { product: 'Laptop', price: 1000, quantity: 1 },
  { product: 'Mouse', price: 50, quantity: 2 },
  { product: 'Keyboard', price: 30, quantity: 1 }
];

const processor = new OrderProcessor(user, orders);
processor.processOrder();",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }
        return username.equals(""admin"") && password.equals(DEFAULT_PASSWORD);
    }
}",code_defect,hardcoded_secret,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public User getUserById(int userId) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // vulnerable to SQL injection if userId is derived from untrusted input elsewhere
            String query = ""SELECT id, username, email FROM users WHERE id = "" + userId;
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            // resources not closed properly, potential leak
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection_and_resource_leak,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

class User {
public:
    User(int id, const std::string& name) : id(id), name(name) {}

    int getId() const { return id; }
    std::string getName() const { return name; }

    void updateName(const std::string& newName) {
        name = newName;
    }

private:
    int id;
    std::string name;
};

class UserManager {
public:
    void addUser(int id, const std::string& name) {
        users.push_back(User(id, name));
    }

    void printAllUsers() {
        for (const User& user : users) {
            std::cout << ""ID: "" << user.getId() << "", Name: "" << user.getName() << std::endl;
        }
    }

    void updateUserName(int id, const std::string& newName) {
        for (User& user : users) {
            if (user.getId() == id) {
                user.updateName(newName);
                break;
            }
        }
    }

private:
    std::vector<User> users;
};

int main() {
    UserManager manager;
    manager.addUser(1, ""Alice"");
    manager.addUser(2, ""Bob"");

    manager.printAllUsers();
    manager.updateUserName(2, ""Robert"");
    manager.printAllUsers();

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class UserService {
public:
    UserService(std::vector<std::string> users) : users(users) {}

    void addUser(const std::string& user) {
        users.push_back(user);
    }

    std::vector<std::string> getUsers() {
        return users;
    }

private:
    std::vector<std::string> users;
};

class UserController {
public:
    UserController(UserService& userService) : userService(userService) {}

    void displayUsers() {
        std::vector<std::string> users = userService.getUsers();
        for (const auto& user : users) {
            std::cout << user << std::endl;
        }
    }

private:
    UserService& userService;
};

int main() {
    std::vector<std::string> users = {""John"", ""Alice"", ""Bob""};
    UserService userService(users);
    UserController userController(userService);
    userController.displayUsers();
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public User findUserById(int userId) {
        User user = null;
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            Statement stmt = conn.createStatement();
            // Vulnerable to SQL injection if userId is manipulated elsewhere
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return user;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"class DataProcessor {
  constructor(data) {
    this.data = data;
    this.cache = {};
  }

  processData() {
    const processed = [];
    for (let i = 0; i < this.data.length; i++) {
      const item = this.data[i];
      if (this.cache[item.id]) {
        processed.push(this.cache[item.id]);
        continue;
      }
      const result = this._processItem(item);
      this.cache[item.id] = result;
      processed.push(result);
    }
    return processed;
  }

  _processItem(item) {
    let value = item.value;
    if (item.type === 'percentage') {
      value = value / 100;
    } else if (item.type === 'logarithm') {
      value = Math.log(value);
    } else if (item.type === 'square') {
      value = value * value;
    }

    return {
      id: item.id,
      value: value,
      type: item.type
    };
  }
}

export default DataProcessor;",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final String DB_URL = ""jdbc:mysql://localhost:3306/users""; private static final String DB_USER = ""root""; private static final String DB_PASSWORD = ""password123""; public void saveUser(User user) { try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) { PreparedStatement stmt = conn.prepareStatement(""INSERT INTO users (name, email) VALUES (?, ?)""); stmt.setString(1, user.getName()); stmt.setString(2, user.getEmail()); stmt.executeUpdate(); } catch (SQLException e) { System.out.println(""Error saving user: "" + e.getMessage()); } } }",code_smell,hardcoded_sensitive_data,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable())
            worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Bug: processing zero when no task was retrieved
            if (task != 0) {
                // Simulate heavy computation
                for (int i = 0; i < 1000000; ++i) {
                    task += i % 3;
                }
                std::cout << ""Processed: "" << task << std::endl;
            }
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 1; i <= 5; ++i) {
        dp.addTask(i * 10);
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}",code_defect,logic_error_missing_task_check,,openai/gpt-oss-120b
Python,"import requests
import json

def fetch_user_data(user_id):
    url = 'https://api.example.com/users/' + str(user_id)
    headers = {'Authorization': 'Bearer 12345'}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        return None


def process_user_data(user_data):
    processed = {
        'name': user_data.get('full_name'),
        'email': user_data.get('email'),
        'active': user_data.get('is_active')
    }
    return processed


def main():
    user_id = 123
    data = fetch_user_data(user_id)
    if data:
        processed = process_user_data(data)
        print(json.dumps(processed, indent=2))

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public static void addUser(String id, String name) { users.put(id, new User(name)); } public static User getUser(String id) { return users.get(id); } public static class User { private String name; public User(String name) { this.name = name; } public String getName() { return name; } } }",code_smell,static_state,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
    constructor(db) {
        this.db = db; // Expecting a DB client with query method
    }

    // Process a batch of orders and update inventory
    async processOrders(orders) {
        for (let i = 0; i < orders.length; i++) {
            const order = orders[i];
            // Update inventory synchronously (bug: not awaiting async call)
            this.updateInventory(order.items);
            // Save order status
            await this.db.query('INSERT INTO orders SET ?', order);
        }
    }

    // Decrease stock for each item (async but not awaited by caller)
    async updateInventory(items) {
        for (const item of items) {
            await this.db.query('UPDATE products SET stock = stock - ? WHERE id = ?', [item.qty, item.productId]);
        }
    }
}

module.exports = OrderProcessor;",code_defect,missing_await_on_async_call,,openai/gpt-oss-120b
Python,"import os
import requests

API_KEY = '1234567890'


def fetch_weather_data(city, units='metric'):
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units={units}'
    response = requests.get(url)
    if response.status_code != 200:
        print('Failed to fetch weather data')
        return None
    return response.json()


def display_weather(data):
    if not data:
        return
    print(f'City: {data.get(""name"")}')
    print(f'Temperature: {data.get(""main"", {}).get(""temp"")}°{""C"" if data.get(""main"", {}).get(""units"") == ""metric"" else ""F""}')
    print(f'Condition: {data.get(""weather"", [{}])[0].get(""description"")}')


def main():
    city = input('Enter city name: ')
    weather_data = fetch_weather_data(city)
    display_weather(weather_data)

if __name__ == '__main__':
    main()",code_defect,hardcoded_secret,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    std::string name;
    int salary;

    Employee(std::string n, int s) : name(n), salary(s) {}

    bool operator<(const Employee& other) const {
        return salary < other.salary;
    }
};

void sortEmployees(std::vector<Employee>& employees) {
    std::sort(employees.begin(), employees.end());
}

void printEmployees(const std::vector<Employee>& employees) {
    for (const auto& employee : employees) {
        std::cout << employee.name << "" : "" << employee.salary << std::endl;
    }
}

int main() {
    std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
    sortEmployees(employees);
    printEmployees(employees);
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}

    void addTransaction(int amount) {
        std::lock_guard<std::mutex> lock(mtx_);
        pending_.push_back(amount);
    }

    void processAll() {
        // Process pending transactions in parallel without proper synchronization
        std::vector<std::thread> workers;
        for (size_t i = 0; i < pending_.size(); ++i) {
            workers.emplace_back([this, i]() {
                // Simulate work
                int value = pending_[i];
                // Intentional race: updating total_ without lock
                total_ += value;
            });
        }
        for (auto &t : workers) {
            if (t.joinable()) t.join();
        }
        pending_.clear();
    }

    int getTotal() const { return total_; }

private:
    std::vector<int> pending_;
    int total_;
    mutable std::mutex mtx_;
};

int main() {
    TransactionProcessor tp;
    for (int i = 0; i < 1000; ++i) {
        tp.addTransaction(1);
    }
    tp.processAll();
    std::cout << ""Total processed: "" << tp.getTotal() << std::endl;
    return 0;
}
",code_defect,race_condition,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users) {
    this.users = users;
  }

  authenticate(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username && this.users[i].password === password) {
        return this.users[i];
      }
    }
    return null;
  }

  isAdmin(user) {
    return user && user.roles && user.roles.includes('admin');
  }

  login(username, password) {
    const user = this.authenticate(username, password);
    if (user) {
      console.log('User', username, 'authenticated successfully');
      if (this.isAdmin(user)) {
        console.log('Welcome, Admin!');
      } else {
        console.log('Welcome, User!');
      }
    } else {
      console.log('Authentication failed');
    }
  }
}

const users = [
  { username: 'admin', password: '123456', roles: ['admin'] },
  { username: 'user', password: 'password', roles: ['user'] }
];

const auth = new UserAuth(users);
auth.login('admin', '123456');",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        if user_data:
            return {'id': user_data[0], 'name': user_data[1], 'email': user_data[2]}
        else:
            return None
    def update_user(self, user_id, name, email):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (name, email, user_id))
        self.db_connection.commit()
        return True",code_smell,Tight Coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        // Synchronous read, caches result but never updates cache on subsequent calls
        if (this.cache) return this.cache;
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function processUserInput(input) {
    // Assume input is a JSON string from an external source
    const obj = JSON.parse(input); // No validation!
    if (obj.action === 'delete') {
        // Dangerous: directly using user-provided filename
        fs.unlinkSync('/var/data/' + obj.file);
    }
    return obj;
}

function start() {
    const loader = new ConfigLoader('./config.json');
    const config = loader.load();
    // Missing error handling if config is malformed
    console.log('Loaded config version:', config.version);
    // Simulate handling a request
    const fakeRequest = '{""action"":""delete"",""file"":""../../etc/passwd""}';
    processUserInput(fakeRequest);
}

start();",code_defect,unsafe_file_deletion,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }
        String customerName = order.getCustomerName();
        double total = calculateTotal(order);
        if (total <= 0) {
            return;
        }
        System.out.println(""Processing order for "" + customerName);
        sendOrderToWarehouse(order);
        sendConfirmationEmail(customerName, total);
    }

    private double calculateTotal(Order order) {
        List<Item> items = order.getItems();
        double total = 0;
        for (Item item : items) {
            total += item.getPrice() * item.getQuantity();
        }
        return total;
    }

    private void sendOrderToWarehouse(Order order) {
        // Mocked warehouse communication
        System.out.println(""Order sent to warehouse: "" + order.getId());
    }

    private void sendConfirmationEmail(String customerName, double total) {
        // Mocked email sending
        System.out.println(""Email sent to "" + customerName + "": Total $"" + total);
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUsers() { let users = await this.userDao.getUsers(); for (let i = 0; i < users.length; i++) { users[i].fullName = users[i].firstName + ' ' + users[i].lastName; } return users; } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a report file
    async generateUserReport(userId) {
        const user = await this.db.getUserById(userId);
        if (!user) throw new Error('User not found');
        const activities = await this.db.getUserActivities(userId);
        const report = this._buildReport(user, activities);
        // BUG: Asynchronous write without awaiting, may cause race condition with caller
        fs.writeFile('report_' + userId + '.txt', report, (err) => {
            if (err) console.error('Failed to write report', err);
        });
        return report;
    }

    _buildReport(user, activities) {
        let lines = [];
        lines.push('User Report');
        lines.push('Name: ' + user.name);
        lines.push('Email: ' + user.email);
        lines.push('Activities:');
        activities.forEach((act, idx) => {
            lines.push(`${idx + 1}. ${act.type} at ${act.timestamp}`);
        });
        return lines.join('\n');
    }
}

module.exports = UserService;",code_defect,async_file_write_without_await,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string process_data(const std::vector<int>& data, const std::string& mode) {
    std::string result = """";
    if (mode == ""even"") {
        for (int i = 0; i < data.size(); ++i) {
            if (data[i] % 2 == 0) {
                result += std::to_string(data[i]) + "" "";
            }
        }
    } else if (mode == ""odd"") {
        for (int i = 0; i < data.size(); ++i) {
            if (data[i] % 2 != 0) {
                result += std::to_string(data[i]) + "" "";
            }
        }
    } else {
        for (int i = 0; i < data.size(); ++i) {
            result += std::to_string(data[i]) + "" "";
        }
    }
    return result;
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5, 6};
    std::string output = process_data(input, ""even"");
    std::cout << ""Processed data: "" << output << std::endl;
    return 0;
}",code_smell,duplicate_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

private:
    std::string name;
    int salary;
};

class Company {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    int getTotalSalary() {
        int total = 0;
        for (const auto& employee : employees) {
            total += employee.getSalary();
        }
        return total;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));
    std::cout << company.getTotalSalary() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) throws SQLException {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            conn.setAutoCommit(false);
            // Update account balance
            String updateSql = ""UPDATE accounts SET balance = balance - ? WHERE id = ?"";
            try (PreparedStatement stmt = conn.prepareStatement(updateSql)) {
                stmt.setDouble(1, amount);
                stmt.setString(2, accountId);
                stmt.executeUpdate();
            }
            // Insert transaction record
            String insertSql = ""INSERT INTO transactions (account_id, amount) VALUES ('"" + accountId + ""', "" + amount + "")""; // SQL injection risk
            try (PreparedStatement stmt = conn.prepareStatement(insertSql)) {
                stmt.executeUpdate();
            }
            conn.commit();
            return true;
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (conn != null) conn.close();
        }
    }

    public double getBalance(String accountId) throws SQLException {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement stmt = conn.prepareStatement(""SELECT balance FROM accounts WHERE id = ?"")) {
            stmt.setString(1, accountId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getDouble(""balance"");
                }
            }
        }
        return 0.0;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input, std::vector<int>& result) {
    if (input.empty()) {
        return;
    }

    std::string temp;
    for (char ch : input) {
        if (ch == ',') {
            int value = std::stoi(temp);
            result.push_back(value);
            temp.clear();
        } else {
            temp += ch;
        }
    }

    if (!temp.empty()) {
        int value = std::stoi(temp);
        result.push_back(value);
    }
}

int main() {
    std::string input;
    std::cout << ""Enter comma-separated numbers: "";
    std::getline(std::cin, input);

    std::vector<int> numbers;
    processUserInput(input, numbers);

    std::cout << ""Processed numbers: "";
    for (int num : numbers) {
        std::cout << num << ' ';
    }
    std::cout << std::endl;

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password
            with open(self.db_file, 'a') as f:
                f.write(f'{username}:{password}\n')

    def authenticate(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        with open(self.db_file, 'r') as f:
            for line in f.readlines():
                stored_username, stored_password = line.strip().split(':')
                if stored_username == username and stored_password == password:
                    return True
        return False",code_smell,inefficient_data_access,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigManager:
    """"""Loads configuration from a JSON file and provides access to settings.""""""
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, config_path='config.json'):
        # Singleton pattern with lazy initialization
        if not cls._instance:
            with cls._lock:
                if not cls._instance:
                    cls._instance = super(ConfigManager, cls).__new__(cls)
                    cls._instance._load(config_path)
        return cls._instance

    def _load(self, path):
        with open(path, 'r') as f:
            # BUG: Using eval on file content can execute arbitrary code if the config file is compromised
            self.settings = eval(f.read())

    def get(self, key, default=None):
        return self.settings.get(key, default)

# Usage example (not part of the library)
if __name__ == '__main__':
    cfg = ConfigManager()
    db_host = cfg.get('db_host', 'localhost')
    print(f""Database host: {db_host}"")
",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    void process(const std::vector<std::string>& inputs) {
        for (const auto& input : inputs) {
            std::string processed = input;
            if (processed.size() > 0) {
                if (processed[0] == '#') {
                    processed.erase(0, 1);
                    std::cout << ""Processed: "" << processed << std::endl;
                }
            }
        }
    }
};

int main() {
    DataProcessor processor;
    std::vector<std::string> data = { ""#comment"", ""normal"", ""#tag"" };
    processor.process(data);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) { users.push_back(user); }
    std::vector<User> getAllUsers() { return users; }

private:
    std::vector<User> users;
};

int main() {
    UserService userService;
    userService.addUser(User(""John"", 30));
    userService.addUser(User(""Alice"", 25));

    std::vector<User> allUsers = userService.getAllUsers();
    for (const auto& user : allUsers) {
        std::cout << user.getName() << "" is "" << user.getAge() << "" years old"" << std::endl;
    }

    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class RefundProcessor {
    private static final Logger logger = Logger.getLogger(RefundProcessor.class.getName());
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""P@ssw0rd!""; // hardcoded credentials

    public boolean processRefund(int orderId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""SELECT balance FROM accounts WHERE order_id = ?"";
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, orderId);
            rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                // BUG: missing check that amount <= balance, can cause negative balance
                double newBalance = balance - amount;
                String updateSql = ""UPDATE accounts SET balance = ? WHERE order_id = ?"";
                PreparedStatement updateStmt = conn.prepareStatement(updateSql);
                updateStmt.setDouble(1, newBalance);
                updateStmt.setInt(2, orderId);
                updateStmt.executeUpdate();
                logger.info(""Refund processed for order "" + orderId);
                return true;
            } else {
                logger.warning(""Order not found: "" + orderId);
                return false;
            }
        } catch (SQLException e) {
            logger.log(Level.SEVERE, ""Database error"", e);
            return false;
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }
}
",code_defect,missing_balance_check,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
    this.processedUsers = [];
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      if (user) {
        const processedUser = {
          id: user.id,
          name: user.name ? user.name.trim() : 'N/A',
          email: user.email && user.email.includes('@') ? user.email : 'invalid@example.com',
          role: user.role || 'guest'
        };
        this.processedUsers.push(processedUser);
      }
    }
  }

  getResults() {
    return this.processedUsers;
  }
}

const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com', role: 'admin' },
  { id: 2, name: 'Bob', email: 'bob@domain.com' },
  { id: 3, email: 'carol@site.org' },
  null
];

const processor = new UserProcessor(users);
processor.processUsers();
console.log(processor.getResults());",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAccountManager { private Map<String, User> users = new HashMap<>(); public void addUser(String username, String password) { users.put(username, new User(username, password)); } public boolean isValidUser(String username, String password) { User user = users.get(username); if (user != null && user.getPassword().equals(password)) { return true; } return false; } public static class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class UserService {
    private Connection getConnection() throws SQLException {
        // Insecure: hardcoded credentials
        return DriverManager.getConnection(""jdbc:mysql://localhost:3306/app"", ""admin"", ""password123"");
    }

    public List<User> getActiveUsers() {
        List<User> users = new ArrayList<>();
        String sql = ""SELECT id, name, email FROM users WHERE active = 1"";
        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                User u = new User();
                u.setId(rs.getInt(""id""));
                u.setName(rs.getString(""name""));
                u.setEmail(rs.getString(""email""));
                users.add(u);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return users;
    }

    public boolean deleteUser(int userId) {
        String sql = ""DELETE FROM users WHERE id = "" + userId; // SQL injection risk
        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement()) {
            int rows = stmt.executeUpdate(sql);
            return rows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
}

class User {
    private int id;
    private String name;
    private String email;
    // getters and setters omitted for brevity
    public void setId(int id) { this.id = id; }
    public void setName(String name) { this.name = name; }
    public void setEmail(String email) { this.email = email; }
}
",code_defect,sql_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(String customerId, String productId, int quantity) {
        if (customerId == null || productId == null || quantity <= 0) {
            return;
        }

        if (quantity > 1000) {
            System.out.println(""Quantity exceeds maximum allowed limit."");
            return;
        }

        String[] productDetails = getDatabaseProductDetails(productId);
        if (productDetails == null || productDetails.length < 3) {
            return;
        }

        double price = Double.parseDouble(productDetails[2]);
        double totalPrice = price * quantity;

        if (totalPrice > 10000) {
            System.out.println(""Order total exceeds limit for standard processing."");
            return;
        }

        // Simulate database update
        System.out.println(""Order processed for customer "" + customerId + "", product "" + productId + "", quantity "" + quantity);
    }

    private String[] getDatabaseProductDetails(String productId) {
        // Simulated database lookup
        if (productId.equals(""P123"")) {
            return new String[] {""Product 123"", ""Electronics"", ""100.50""};
        } else if (productId.equals(""P456"")) {
            return new String[] {""Product 456"", ""Clothing"", ""50.00""};
        }
        return null;
    }
}",code_smell,poor_error_handling,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };
   class UserService {
   public:
       static std::vector<User> users;
       static void addUser(User user) {
           users.push_back(user);
       }
       static User getUserByName(std::string name) {
           for (User user : users) {
               if (user.getName() == name) {
                   return user;
               }
           }
           // Return empty user if not found
           return User("""", 0);
       }
   };
   std::vector<User> UserService::users;
   int main() {
       UserService::addUser(User(""John"", 30));
       User user = UserService::getUserByName(""John"");
       std::cout << user.getName() << std::endl;
       return 0;
   }
   ",code_smell,unused_import,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() {}
    void addEntry(const std::string& entry) {
        std::lock_guard<std::mutex> lock(mtx_);
        buffer_.push_back(entry);
    }
    std::string flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        std::string result;
        for (size_t i = 0; i <= buffer_.size(); ++i) { // off‑by‑one error
            result += buffer_[i];
            if (i != buffer_.size()) result += ""\n"";
        }
        buffer_.clear();
        return result;
    }
private:
    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

int main() {
    LogProcessor lp;
    lp.addEntry(""Start"");
    lp.addEntry(""Processing"");
    lp.addEntry(""End"");
    std::cout << lp.flush();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.users = [];
  }

  registerUser(username, password) {
    const existingUser = this.users.find(user => user.username === username);
    if (existingUser) {
      return false;
    }

    this.users.push({
      username: username,
      passwordHash: this.hashPassword(password),
    });

    return true;
  }

  hashPassword(password) {
    // Simulating a basic hash (NOT SECURE in real applications)
    return password.split('').reverse().join('');
  }

  authenticateUser(username, password) {
    const user = this.users.find(user => user.username === username);
    if (!user) {
      return false;
    }

    // Reversing the hash in the same way to compare (again, not secure)
    const reversedHash = this.hashPassword(password);

    return user.passwordHash === reversedHash;
  }
}

// Usage example
const auth = new UserAuth();
auth.registerUser('alice', 'password123');
console.log(auth.authenticateUser('alice', 'password123')); // Should return true",code_defect,insecure_authentication,,qwen/qwen3-32b
Java,public class UserManager { private static final int MAX_USERS = 100; private User[] users; private int userCount; public UserManager() { users = new User[MAX_USERS]; userCount = 0; } public void addUser(User user) { if (userCount < MAX_USERS) { users[userCount] = user; userCount++; } } public User getUser(int index) { return users[index]; } public static void main(String[] args) { UserManager userManager = new UserManager(); for (int i = 0; i < 100; i++) { User user = new User(); userManager.addUser(user); } System.out.println(userManager.getUser(50)); } } class User { },code_smell,magic_number,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<User> findUsersByRole(String role) throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, username, email FROM users WHERE role = '"" + role + ""'""; // insecure concatenation
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            User u = new User();
            u.setId(rs.getInt(""id""));
            u.setUsername(rs.getString(""username""));
            u.setEmail(rs.getString(""email""));
            users.add(u);
        }
        rs.close();
        stmt.close();
        conn.close();
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection vulnerability,,openai/gpt-oss-120b
Python,"import requests

def fetch_user_data(user_id):
    url = 'https://api.example.com/users/123'
    headers = {'Authorization': 'Bearer mysecrettoken'}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        return None

def update_user_profile(user_id, new_data):
    url = 'https://api.example.com/users/123'
    headers = {'Authorization': 'Bearer mysecrettoken'}
    response = requests.put(url, headers=headers, json=new_data)
    if response.status_code != 200:
        raise Exception('Failed to update user profile')
    return True

# Example usage:
if __name__ == '__main__':
    user_data = fetch_user_data(123)
    if user_data:
        user_data['email'] = 'newemail@example.com'
        update_user_profile(123, user_data)",code_defect,hardcoded_credentials,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class DatabaseConnection {
public:
    DatabaseConnection(const std::string& username, const std::string& password) 
        : username_(username), password_(password) {}

    void executeQuery(const std::string& query) {
        // simulate a database query
        std::cout << ""Executing query: "" << query << std::endl;
    }

private:
    std::string username_;
    std::string password_;
};

class QueryExecutor {
public:
    QueryExecutor(DatabaseConnection& connection) : connection_(connection) {}

    void executeQueries(const std::vector<std::string>& queries) {
        for (const auto& query : queries) {
            connection_.executeQuery(query);
        }
    }

private:
    DatabaseConnection& connection_;
};

int main() {
    DatabaseConnection connection(""username"", ""password"");
    QueryExecutor executor(connection);
    std::vector<std::string> queries = {""SELECT * FROM table1"", ""SELECT * FROM table2""};
    executor.executeQueries(queries);
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
        this.cache = {};
    }

    // Loads user data and caches it, but never invalidates cache
    async getUser(id) {
        if (this.cache[id]) {
            return this.cache[id];
        }
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [id]);
        this.cache[id] = user;
        return user;
    }

    // Updates user and forgets to update cache, leading to stale data
    async updateUser(id, data) {
        await this.db.execute('UPDATE users SET name = ?, email = ? WHERE id = ?', [data.name, data.email, id]);
        // missing cache invalidation
    }

    // Deletes user but leaves stale entry in cache
    async deleteUser(id) {
        await this.db.execute('DELETE FROM users WHERE id = ?', [id]);
        // cache entry still present
    }
}

// Usage example (not part of the service)
(async () => {
    const db = {
        query: async (sql, params) => ({ id: params[0], name: 'Alice', email: 'alice@example.com' }),
        execute: async (sql, params) => {}
    };
    const service = new UserService(db);
    const user1 = await service.getUser(1);
    await service.updateUser(1, { name: 'Bob', email: 'bob@example.com' });
    const user2 = await service.getUser(1); // returns stale data
    console.log(user1, user2);
})();",code_smell,stale_cache_due_to_missing_invalidation,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders = new ArrayList<>();

    public void addOrder(Order order) {
        orders.add(order);
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                System.out.println(""Processing order: "" + order.getId());
                for (OrderItem item : order.getItems()) {
                    item.calculatePrice();
                }
                order.save();
            }
        }
    }

    public void sendOrderEmails() {
        for (Order order : orders) {
            if (order.getEmailSent() == false) {
                System.out.println(""Sending email for order: "" + order.getId());
                order.setEmailSent(true);
            }
        }
    }
}",code_smell,large_class,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getUser(id) { let user = await this.userRepository.findById(id); if (user) { return user; } else { return await this.getUserFromExternalSource(id); } } async getUserFromExternalSource(id) { // implementation to get user from external source } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserCache {
    constructor(filePath) {
        this.filePath = filePath;
        this.cache = {};
        this._load();
    }

    _load() {
        // Synchronously read the cache file; if it fails, ignore errors (bug: hides I/O errors)
        try {
            const data = fs.readFileSync(this.filePath, 'utf8');
            this.cache = JSON.parse(data);
        } catch (e) {
            // Swallow error, leaving cache empty
        }
    }

    getUser(id) {
        if (this.cache[id]) {
            return this.cache[id];
        }
        // Simulate fetching from DB (blocking call) and then cache it
        const user = this._fetchFromDb(id);
        this.cache[id] = user;
        this._save(); // writes entire cache every time (performance defect)
        return user;
    }

    _fetchFromDb(id) {
        // Placeholder for DB call; returns a dummy user
        return { id, name: `User${id}` };
    }

    _save() {
        // Asynchronously write cache, but ignore callback errors (defect: race condition)
        fs.writeFile(this.filePath, JSON.stringify(this.cache), () => {});
    }
}

module.exports = UserCache;",code_defect,race_condition_and_error_swallowing,,openai/gpt-oss-120b
Java,"public class UserService {

    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public User getUserById(String userId) {
        User user = userRepository.findById(userId);
        if (user == null) {
            return null;
        }
        if (user.isActive()) {
            return user;
        } else {
            return null;
        }
    }

    public List<User> getAllUsers() {
        List<User> users = userRepository.findAll();
        List<User> activeUsers = new ArrayList<>();
        for (User user : users) {
            if (user.isActive()) {
                activeUsers.add(user);
            }
        }
        return activeUsers;
    }

    public void deactivateUser(String userId) {
        User user = userRepository.findById(userId);
        if (user != null) {
            user.setActive(false);
            userRepository.save(user);
        }
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password

    def authenticate(self, username, password):
        return self.users.get(username) == password

    def get_all_users(self):
        return list(self.users.keys())

    def delete_user(self, username):
        if username in self.users:
            del self.users[username]

    def update_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
        else:
            self.add_user(username, new_password)
",code_smell,God class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception, return partial list
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
Python,"import os
import subprocess

def execute_shell_command(command):
    try:
        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return result.stdout.decode('utf-8')
    except subprocess.CalledProcessError as e:
        print(f'Command failed: {e}')
        return ''


def main():
    user_input = input('Enter a filename to read: ')
    command = f'cat {user_input}'
    content = execute_shell_command(command)
    print(f'File content: {content}')

if __name__ == '__main__':
    main()",code_defect,command_injection_vulnerability,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class UserRepository {
public:
    void addUser(User user) { users.push_back(user); }
    User getUser(int index) { return users[index]; }
private:
    std::vector<User> users;
};

int main() {
    UserRepository repo;
    repo.addUser(User(""John"", 30));
    std::cout << repo.getUser(0).getName() << std::endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        // Reads config file synchronously every time, ignoring cache
        const data = fs.readFileSync(this.path, 'utf8');
        try {
            this.cache = JSON.parse(data);
        } catch (e) {
            // Swallow error, leaving cache as null
        }
        return this.cache;
    }
}

async function processData(userInput) {
    const loader = new ConfigLoader('./config.json');
    const config = loader.load(); // May return null on parse error
    // Use config without checking for null
    const limit = config.maxItems; // Throws TypeError if config is null
    const items = [];
    for (let i = 0; i <= limit; i++) { // Off‑by‑one error, iterates one extra time
        items.push({ id: i, value: userInput[i] || null });
    }
    return items;
}

module.exports = { processData };",code_defect,null_pointer_and_off_by_one,,openai/gpt-oss-120b
JavaScript,"class UserAuthManager {
  constructor(users) {
    this.users = users;
  }

  authenticateUser(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        if (this.users[i].password === password) {
          console.log('Authentication successful');
          return true;
        } else {
          console.log('Invalid password');
          return false;
        }
      }
    }
    console.log('User not found');
    return false;
  }
}

const users = [
  { username: 'alice', password: 'password123' },
  { username: 'bob', password: 'pass456' }
];

const authManager = new UserAuthManager(users);
authManager.authenticateUser('alice', 'password123');",code_defect,security_vulnerability,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userDao) {
         this.userDao = userDao;
      }

      async getUser(id) {
         const user = await this.userDao.findById(id);
         if (!user) {
            throw new Error(`User not found with id ${id}`);
         }
         return user;
      }

      async getUsers() {
         const users = await this.userDao.findAll();
         return users.map(user => ({ id: user.id, name: user.name }));
      }
   }

   class UserDao {
      async findById(id) {
         // simulate database query
         return new Promise(resolve => {
            setTimeout(() => {
               resolve({ id: 1, name: 'John Doe' });
            }, 100);
         });
      }

      async findAll() {
         // simulate database query
         return new Promise(resolve => {
            setTimeout(() => {
               resolve([{ id: 1, name: 'John Doe' }, { id: 2, name: 'Jane Doe' }]);
            }, 100);
         });
      }
   }

   const userDao = new UserDao();
   const userService = new UserService(userDao);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASS = ""password123""; // hardcoded credentials

    public User findUserById(int userId) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
        return null;
    }
}

class User {
    private int id;
    private String username;
    private String email;
    public void setId(int id) { this.id = id; }
    public void setUsername(String username) { this.username = username; }
    public void setEmail(String email) { this.email = email; }
    // getters omitted for brevity
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
JavaScript,"class UserValidator {
  constructor() {
    this.validationRules = [];
  }

  addRule(rule) {
    this.validationRules.push(rule);
  }

  validateUser(user) {
    for (let i = 0; i < this.validationRules.length; i++) {
      const rule = this.validationRules[i];
      const result = rule(user);
      if (result) {
        return result;
      }
    }
    return null;
  }
}

const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

const validateEmail = (user) => {
  if (!user.email || !emailRegex.test(user.email)) {
    return 'Invalid email format';
  }
  return null;
};

const validatePassword = (user) => {
  if (!user.password || user.password.length < 8) {
    return 'Password must be at least 8 characters';
  }
  return null;
};

const validateUsername = (user) => {
  if (!user.username || user.username.trim().length === 0) {
    return 'Username cannot be empty';
  }
  return null;
};

const validator = new UserValidator();
validator.addRule(validateEmail);
validator.addRule(validatePassword);
validator.addRule(validateUsername);",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger logger = LoggerFactory.getLogger(UserService.class); public void updateUserProfile(String userId, String newName, String newEmail) { User user = UserRepository.getUser(userId); if (user != null) { user.setName(newName); user.setEmail(newEmail); UserRepository.saveUser(user); } else { logger.error(""User not found""); } } }",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogManager {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        buffer_.push_back(msg);
        if (buffer_.size() > 10) {
            flush();
        }
    }

    ~LogManager() {
        flush();
    }

private:
    void flush() {
        for (const auto& line : buffer_) {
            std::cout << line << std::endl;
        }
        buffer_.clear();
    }

    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

void processData(LogManager& logger) {
    for (int i = 0; i <= 100; ++i) { // off‑by‑one: should be <100
        logger.log(""Processing item "" + std::to_string(i));
    }
}

int main() {
    LogManager logger;
    std::thread t1(processData, std::ref(logger));
    std::thread t2(processData, std::ref(logger));
    t1.join();
    t2.join();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users, tokenSecret) {
    this.users = users;
    this.tokenSecret = tokenSecret;
  }

  authenticateUser(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username && this.users[i].password === password) {
        const token = this.generateToken(username);
        this.users[i].token = token;
        return token;
      }
    }
    return null;
  }

  generateToken(username) {
    const timestamp = Date.now();
    const token = `${username}:${timestamp}:${this.tokenSecret}`;
    return Buffer.from(token).toString('base64');
  }

  validateToken(token) {
    try {
      const decoded = Buffer.from(token, 'base64').toString('utf-8');
      const [username, timestamp] = decoded.split(':');
      return {
        username,
        timestamp
      };
    } catch (e) {
      return null;
    }
  }
}

const users = [
  { username: 'admin', password: '123456', token: '' },
  { username: 'user', password: 'password', token: '' }
];

const auth = new UserAuth(users, 'mySecretKey');",code_defect,security_vulnerability,,qwen/qwen3-32b
Java,"public class UserService { private static final String DB_URL = ""jdbc:mysql://localhost:3306/userdb""; private static final String DB_USER = ""root""; private static final String DB_PASSWORD = ""password123""; public void saveUser(String username, String email) { try { java.sql.Connection conn = java.sql.DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD); java.sql.PreparedStatement stmt = conn.prepareStatement(""INSERT INTO users (username, email) VALUES (?, ?)""); stmt.setString(1, username); stmt.setString(2, email); stmt.executeUpdate(); } catch (java.sql.SQLException e) { System.out.println(""Error saving user: "" + e.getMessage()); } } }",code_smell,hardcoded_secrets,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it.""""""
    _cache = {}
    _lock = threading.Lock()

    @classmethod
    def get_config(cls, path: str) -> dict:
        # Missing validation of path leads to path traversal
        with cls._lock:
            if path in cls._cache:
                return cls._cache[path]
            with open(path, 'r') as f:
                data = json.load(f)
                cls._cache[path] = data
                return data

class UserService:
    def __init__(self, config_path: str):
        self.config = ConfigLoader.get_config(config_path)
        self.db_path = self.config.get('db_path')

    def get_user(self, user_id: int) -> dict:
        # Insecure SQL query construction (SQL injection risk)
        query = f""SELECT * FROM users WHERE id = {user_id}""
        conn = self._connect_db()
        cursor = conn.cursor()
        cursor.execute(query)
        row = cursor.fetchone()
        conn.close()
        if row:
            return {'id': row[0], 'name': row[1]}
        return {}

    def _connect_db(self):
        # Uses os.getenv without default, may return None and cause crash
        db_file = os.getenv('DB_FILE')
        import sqlite3
        return sqlite3.connect(db_file)

# Example usage
service = UserService('/etc/app/config.json')
print(service.get_user(42))",code_defect,insecure_sql_and_missing_env_handling,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

using namespace std;

class DataProcessor {
public:
    void process(const vector<int>& input) {
        if (input.empty()) {
            return;
        }

        for (size_t i = 0; i < input.size(); ++i) {
            if (input[i] % 2 == 0) {
                cout << ""Even number found: "" << input[i] << endl;
            } else {
                cout << ""Odd number found: "" << input[i] << endl;
            }
        }

        for (size_t i = 0; i < input.size(); ++i) {
            if (input[i] % 2 == 0) {
                cout << ""Even number again: "" << input[i] << endl;
            } else {
                cout << ""Odd number again: "" << input[i] << endl;
            }
        }
    }
};

int main() {
    DataProcessor processor;
    vector<int> data = {1, 2, 3, 4, 5};
    processor.process(data);
    return 0;
}",code_smell,duplicate_code,,qwen/qwen3-32b
JavaScript,"
   class ShoppingCart {
      constructor() {
         this.items = {};
      }

      addItem(itemName, quantity) {
         if (this.items[itemName]) {
            this.items[itemName] += quantity;
         } else {
            this.items[itemName] = quantity;
         }
      }

      removeItem(itemName, quantity) {
         if (this.items[itemName]) {
            this.items[itemName] -= quantity;
            if (this.items[itemName] <= 0) {
               delete this.items[itemName];
            }
         }
      }

      calculateTotal() {
         let total = 0;
         for (let item in this.items) {
            total += this.items[item] * 10; // assuming all items cost $10
         }
         return total;
      }
   }

   let cart = new ShoppingCart();
   cart.addItem('apple', 2);
   cart.addItem('banana', 3);
   console.log(cart.calculateTotal());
   ",code_smell,magic_number,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class UserService {
    private Connection getConnection() throws SQLException {
        // In real code, use a connection pool
        return DriverManager.getConnection(""jdbc:mysql://localhost:3306/app"", ""user"", ""password"");
    }

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        String query = ""SELECT role FROM user_roles WHERE username = '"" + username + ""'""; // vulnerable concatenation
        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                roles.add(rs.getString(""role""));
            }
        } catch (SQLException e) {
            // Swallowing exception, losing stack trace
        }
        return roles;
    }
}
",code_defect,SQL_injection_and_suppressed_exception,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user.status === 'active') {
        this.sendEmail(user.email);
        this.logUserActivity(user.id);
      } else {
        console.log(`Skipping inactive user: ${user.id}`);
      }
    });
  }

  sendEmail(email) {
    console.log(`Sending email to ${email}`);
    // Simulating email sending
  }

  logUserActivity(userId) {
    console.log(`User ${userId} processed`);
    // Simulating logging
  }
}

const users = [
  { id: 1, email: 'user1@example.com', status: 'active' },
  { id: 2, email: 'user2@example.com', status: 'inactive' },
  { id: 3, email: 'user3@example.com', status: 'active' }
];

const processor = new UserProcessor(users);
processor.processUsers();",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getAllUsers() { let users = await this.userDao.findAll(); users.forEach(user => { if (user.role === 'admin') { user.role = 'superuser'; } }); return users; } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn should return a promise resolving to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off‑by‑one error – pageNumber is 1‑based but calculations treat it as 0‑based
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    const next = this.currentPage + 1;
    const page = this.getPage(next);
    if (page.length > 0) {
      this.currentPage = next;
    }
    return page;
  }
}

// Example usage
const paginator = new Paginator(10);
await paginator.loadItems(() => Promise.resolve(Array.from({ length: 95 }, (_, i) => i + 1)));
console.log('First page:', paginator.getPage(1)); // Expected items 1‑10, but returns 11‑20 due to bug
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = {};
    }

    // Loads JSON config, but caches result incorrectly
    loadConfig(env) {
        if (this.cache[env]) {
            return this.cache[env];
        }
        const filePath = `${this.path}/${env}.json`;
        const data = fs.readFileSync(filePath, 'utf8');
        const parsed = JSON.parse(data);
        // BUG: cache is stored under wrong key, causing repeated reads
        this.cache[env] = parsed;
        return parsed;
    }
}

function initializeApp() {
    const loader = new ConfigLoader('/etc/app/config');
    const devConfig = loader.loadConfig('development');
    const prodConfig = loader.loadConfig('production');
    // Missing error handling if file missing leads to crash
    console.log('App initialized with configs');
}

initializeApp();",code_defect,logic_error_missing_error_handling,,openai/gpt-oss-120b
Python,"import os
import sqlite3

class UserManager:
    def __init__(self, db_path='users.db'):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._create_table()

    def _create_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO users (username, password)
            VALUES (?, ?)
        ''', (username, password))
        self.conn.commit()

    def authenticate_user(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT * FROM users
            WHERE username = ? AND password = ?
        ''', (username, password))
        return cursor.fetchone() is not None

# Example usage:
if __name__ == '__main__':
    manager = UserManager()
    manager.add_user('alice', 'securepassword123')
    print(manager.authenticate_user('alice', 'securepassword123'))",code_defect,security_issue,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, account_number, balance=0.0):
        self.account_number = account_number
        self.balance = balance
    
    def deposit(self, amount):
        self.balance += amount
    
    def withdraw(self, amount):
        if amount > self.balance:
            self.balance -= amount
        else:
            self.balance -= amount
    
    def get_balance(self):
        return self.balance

account = BankAccount('123456789', 1000.0)
account.withdraw(500.0)
print(account.get_balance())",code_defect,incorrect_conditional_logic,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3
from typing import List, Dict

class UserCache:
    """"""Simple in‑memory cache for user records loaded from the database.""""""
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._cache: Dict[int, Dict] = {}
        self._load_all()

    def _load_all(self) -> None:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT id, username, email FROM users')
        for row in cursor.fetchall():
            user_id, username, email = row
            self._cache[user_id] = {'username': username, 'email': email}
        conn.close()

    def get_user(self, user_id: int) -> Dict:
        return self._cache.get(user_id, {})

    def refresh_user(self, user_id: int) -> None:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT id, username, email FROM users WHERE id=?', (user_id,))
        row = cursor.fetchone()
        if row:
            _, username, email = row
            self._cache[user_id] = {'username': username, 'email': email}
        conn.close()

def export_user_data(cache: UserCache, output_dir: str) -> None:
    """"""Export all cached users to JSON files in the specified directory.""""""
    if not os.path.isdir(output_dir):
        os.makedirs(output_dir)
    for user_id, data in cache._cache.items():
        file_path = os.path.join(output_dir, f'user_{user_id}.json')
        with open(file_path, 'w') as f:
            json.dump(data, f)

# Usage example (would be called from elsewhere)
cache = UserCache('/path/to/users.db')
export_user_data(cache, '/tmp/user_exports')
",code_defect,missing_error_handling_on_file_write,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserData(const std::vector<std::string>& data) {
    for (const auto& entry : data) {
        std::string::size_type pos = 0;
        while ((pos = entry.find(""@"", pos)) != std::string::npos) {
            std::string user = entry.substr(0, pos);
            std::string domain = entry.substr(pos + 1);
            std::cout << ""User: "" << user << "", Domain: "" << domain << std::endl;
            pos += 1; // increment to move past the found '@' symbol
        }
    }
}

int main() {
    std::vector<std::string> users = {""alice@example.com"", ""bob@test.net@invalid.com""};
    processUserData(users);
    return 0;
}",code_defect,incorrect_loop_handling,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger logger = LoggerFactory.getLogger(UserService.class); public List<User> getUsers(String role) { List<User> users = new ArrayList<>(); try (Connection conn = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""root"", ""password"")) { PreparedStatement stmt = conn.prepareStatement(""SELECT * FROM users WHERE role = ?""); stmt.setString(1, role); ResultSet results = stmt.executeQuery(); while (results.next()) { User user = new User(); user.setId(results.getInt(""id"")); user.setName(results.getString(""name"")); users.add(user); } } catch (SQLException e) { logger.error(""Error fetching users"", e); } return users; } }",code_smell,hardcoded_secrets,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.config = {}
        self._load()

    def _load(self):
        with open(self.config_path, 'r') as f:
            # Directly eval the config file – insecure if file is tampered
            self.config = eval(f.read())

    def get(self, key, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, db_conn_str):
        self.db_conn_str = db_conn_str
        self.connection = None

    def connect(self):
        # Simulate a DB connection (placeholder)
        self.connection = True

    def process(self, input_data):
        # Assume input_data is a dict with 'payload' key
        payload = input_data.get('payload')
        # Missing validation – may raise TypeError if payload is None
        result = payload.upper()
        self._store_result(result)
        return result

    def _store_result(self, result):
        if not self.connection:
            self.connect()
        # Placeholder for storing result in DB
        print(f""Storing result: {result}"")

def main():
    loader = ConfigLoader('config.cfg')
    db_str = loader.get('db_connection')
    processor = DataProcessor(db_str)
    # Simulate reading JSON input from an environment variable
    raw_input = os.getenv('RAW_INPUT', '{""payload"": ""test""}')
    data = json.loads(raw_input)
    processor.process(data)

if __name__ == '__main__':
    main()
",code_defect,unsafe_eval_and_missing_input_validation,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private static final String ADMIN_ROLE = ""admin"";

    public boolean isUserAuthorized(String username, String role) {
        if (username == null || role == null) {
            return false;
        }

        if (role.equals(ADMIN_ROLE)) {
            return true;
        }

        if (role.equals(""moderator"") && !username.isEmpty()) {
            return true;
        }

        return false;
    }

    public void processUserAccess(String username, String role) {
        if (isUserAuthorized(username, role)) {
            System.out.println(""User "" + username + "" granted access."");
        } else {
            System.out.println(""User denied access."");
        }
    }
}",code_smell,poor_error_handling,,qwen/qwen3-32b
Python,"
class PaymentProcessor:
    def __init__(self):
        self.payments = []

    def process_payment(self, amount, payment_method):
        if payment_method == 'credit_card':
            # Simulate payment processing delay
            import time
            time.sleep(1)
            self.payments.append(amount)
        elif payment_method == 'paypal':
            # Simulate payment processing delay
            import time
            time.sleep(2)
            self.payments.append(amount)
        else:
            raise ValueError('Invalid payment method')

    def get_total_payments(self):
        return sum(self.payments)

    def get_payment_details(self, index):
        try:
            return self.payments[index]
        except IndexError:
            return None

processor = PaymentProcessor()
processor.process_payment(100, 'credit_card')
processor.process_payment(200, 'paypal')
print(processor.get_total_payments())
print(processor.get_payment_details(1))
   ",code_smell,god_class,,llama-3.3-70b-versatile
Python,"import csv
import logging

logging.basicConfig(level=logging.INFO)

class UserStatsProcessor:
    def __init__(self, csv_path):
        self.csv_path = csv_path
        self.user_counts = {}

    def load_data(self):
        with open(self.csv_path, newline='') as f:
            reader = csv.DictReader(f)
            for row in reader:
                user_id = row.get('user_id')
                if user_id:
                    self.user_counts[user_id] = self.user_counts.get(user_id, 0) + 1
        logging.info(""Data loaded: %d users"", len(self.user_counts))

    def get_top_n_users(self, n):
        # Intended to return the top n users by activity count
        sorted_users = sorted(self.user_counts.items(), key=lambda kv: kv[1], reverse=True)
        # Off‑by‑one error: slices up to n+1 instead of n
        return sorted_users[:n+1]

    def export_summary(self, output_path, top_n=10):
        top_users = self.get_top_n_users(top_n)
        with open(output_path, 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(['user_id', 'activity_count'])
            for user_id, count in top_users:
                writer.writerow([user_id, count])
        logging.info(""Summary exported to %s"", output_path)

if __name__ == '__main__':
    processor = UserStatsProcessor('user_activity.csv')
    processor.load_data()
    processor.export_summary('top_users.csv', top_n=5)",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

struct User {
    string username;
    string password;
    string email;
};

bool authenticateUser(const string& user, const string& pass, const vector<User>& users) {
    for (const auto& u : users) {
        if (u.username == user && u.password == pass) {
            return true;
        }
    }
    return false;
}

int main() {
    vector<User> users = {
        {""alice"", ""password123"", ""alice@example.com""},
        {""bob"", ""abc123"", ""bob@example.com""}
    };

    string inputUser, inputPass;
    cout << ""Enter username: "";
    cin >> inputUser;
    cout << ""Enter password: \"";
    cin >> inputPass;

    if (authenticateUser(inputUser, inputPass, users)) {
        cout << ""Authentication successful!"" << endl;
    } else {
        cout << ""Authentication failed."" << endl;
    }

    return 0;
}",code_defect,security_issue,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, balance=0.0):
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount > self.balance:
            self.balance -= amount
        else:
            self.balance = 0
",code_defect,incorrect_conditional_logic,,llama-3.3-70b-versatile
Python,"import os
import json
import threading

class ConfigManager:
    """"""Loads configuration from a JSON file and watches for changes.""""""
    def __init__(self, path):
        self.path = path
        self._config = {}
        self._load()
        self._stop_event = threading.Event()
        self._watch_thread = threading.Thread(target=self._watch_file)
        self._watch_thread.daemon = True
        self._watch_thread.start()

    def _load(self):
        with open(self.path, 'r') as f:
            # Potential defect: using json.load without validating content
            self._config = json.load(f)

    def _watch_file(self):
        last_mtime = os.path.getmtime(self.path)
        while not self._stop_event.is_set():
            try:
                cur_mtime = os.path.getmtime(self.path)
                if cur_mtime != last_mtime:
                    self._load()
                    last_mtime = cur_mtime
            except Exception:
                # Swallow all errors, may hide file access problems
                pass
            # Defect: missing sleep leads to busy-wait, CPU hog

    def get(self, key, default=None):
        return self._config.get(key, default)

    def stop(self):
        self._stop_event.set()
        self._watch_thread.join()

# Usage example (not part of the library)
if __name__ == ""__main__"":
    cfg = ConfigManager('config.json')
    print(cfg.get('database_url'))
    # The program will never exit cleanly because the watch thread busy‑waits
    # without a sleep, consuming 100% CPU.
",code_defect,busy_wait_cpu_hog,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    void process(const std::vector<int>& data) {
        if (data.empty()) return;
        for (int i = 0; i < data.size(); ++i) {
            int sum = 0;
            for (int j = 0; j < data.size(); ++j) {
                sum += data[j];
            }
            std::cout << ""Sum for element "" << i << "" is "" << sum << std::endl;
        }
    }
};

int main() {
    std::vector<int> input = {10, 20, 30};
    DataProcessor processor;
    processor.process(input);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    void removeEmployee(std::string name) {
        for (auto it = employees.begin(); it != employees.end(); ++it) {
            if (it->getName() == name) {
                employees.erase(it);
                break;
            }
        }
    }
    std::vector<Employee> getEmployees() { return employees; }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 30));
    manager.addEmployee(Employee(""Alice"", 25));
    manager.removeEmployee(""John"");
    for (const auto& employee : manager.getEmployees()) {
        std::cout << employee.getName() << "" is "" << employee.getAge() << "" years old."" << std::endl;
    }
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<User> getUsersPage(int pageNumber, int pageSize) throws SQLException {
        // pageNumber is 1-based, but the query uses 0-based offset calculation incorrectly
        int offset = (pageNumber - 1) * pageSize;
        String sql = ""SELECT id, username, email FROM users LIMIT ? OFFSET ?"";
        List<User> users = new ArrayList<>();
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, pageSize);
            stmt.setInt(2, offset);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    User u = new User();
                    u.setId(rs.getInt(""id""));
                    u.setUsername(rs.getString(""username""));
                    u.setEmail(rs.getString(""email""));
                    users.add(u);
                }
            }
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,off_by_one_error_in_pagination,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

using namespace std;

void processData(vector<int>& data) {
    for (size_t i = 0; i <= data.size(); ++i) {
        if (i % 2 == 0) {
            data[i] *= 2;
        } else {
            data[i] -= 1;
        }
    }
}

int main() {
    vector<int> input = {3, 5, 7, 9, 11};
    processData(input);

    for (int val : input) {
        cout << val << "" "";
    }
    cout << endl;

    return 0;
}",code_defect,off_by_one_error,,qwen/qwen3-32b
JavaScript,"
      class UserManager {
         constructor() {
            this.users = [];
         }

         async loadUsers() {
            const response = await fetch('https://api.example.com/users');
            const data = await response.json();
            this.users = data;
         }

         async getUser(id) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === id) {
                  return this.users[i];
               }
            }
            return null;
         }

         async addUser(user) {
            this.users.push(user);
         }
      }

      const userManager = new UserManager();
      userManager.loadUsers();
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            std::string msg;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    msg = queue.front();
                    queue.erase(queue.begin());
                }
            }
            if (!msg.empty()) {
                // Simulate processing
                std::cout << ""Processed: "" << msg << std::endl;
            }
            // Missing sleep leads to busy-wait
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(""Message "" + std::to_string(i));
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    lp.stop();
    return 0;
}
",code_defect,busy_wait_without_sleep,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    void process(const std::vector<std::string>& input) {
        for (const auto& str : input) {
            std::string trimmed = trim(str);
            if (!trimmed.empty()) {
                cache_.push_back(trimmed);
            }
        }
        
        for (size_t i = 0; i < cache_.size(); ++i) {
            if (cache_[i].find(""skip"") != std::string::npos) {
                cache_.erase(cache_.begin() + i);
                --i;
            }
        }
    }

    void printResults() const {
        for (const auto& str : cache_) {
            std::cout << str << std::endl;
        }
    }

private:
    std::string trim(const std::string& str) {
        size_t first = str.find_first_not_of("" "");
        if (first == std::string::npos) {
            return """";
        }
        size_t last = str.find_last_not_of("" "");
        return str.substr(first, last - first + 1);
        
        // Dead code below, but kept for historical reasons
        // return str;
    }

    std::vector<std::string> cache_;
};

int main() {
    DataProcessor processor;
    std::vector<std::string> input = {""  example  "", ""skip me"", ""  test   "", ""data""};
    processor.process(input);
    processor.printResults();
    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
      class UserManager {
         constructor() {
            this.users = [];
         }

         addUser(user) {
            this.users.push(user);
         }

         removeUser(userId) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === userId) {
                  this.users.splice(i, 1);
                  break;
               }
            }
         }

         getUser(userId) {
            for (let user of this.users) {
               if (user.id === userId) {
                  return user;
               }
            }
            return null;
         }
      }

      let userManager = new UserManager();
      userManager.addUser({ id: 1, name: 'John Doe' });
      console.log(userManager.getUser(1));
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigManager:
    """"""Loads configuration from a JSON file and provides access to settings.""""""
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, config_path='config.json'):
        # Singleton pattern, but flawed: race condition can create multiple instances
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super(ConfigManager, cls).__new__(cls)
                    cls._instance._load(config_path)
        return cls._instance

    def _load(self, path):
        with open(path, 'r') as f:
            self._data = json.load(f)
        # Hardcoded secret key from config (security risk)
        self.secret_key = self._data.get('secret_key')

    def get(self, key, default=None):
        return self._data.get(key, default)

    def refresh(self):
        # Reload config without acquiring lock – can cause inconsistent state
        self._load('config.json')

# Usage example (in production code this would be elsewhere)
config = ConfigManager()
api_key = config.get('api_key')
print('API Key:', api_key)
",code_defect,race_condition_and_insecure_secret_handling,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor() {
        this.orders = new ArrayList<>();
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order != null && !order.isProcessed()) {
                if (order.getTotalAmount() > 0) {
                    order.markAsProcessed();
                }
            }
        }
    }

    public void addOrder(Order order) {
        orders.add(order);
    }

    public List<Order> getOrders() {
        return orders;
    }

    private void validateOrders() {
        // Intentionally commented out validation
        // for (Order order : orders) {
        //     if (order == null) {
        //         throw new IllegalArgumentException(""Order cannot be null"");
        //     }
        // }
    }
}",code_smell,dead_code,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount > self.balance:
            self.balance -= amount
        else:
            self.balance -= amount
    def get_balance(self):
        return self.balance

account = BankAccount(100)
print(account.get_balance())
account.withdraw(50)
print(account.get_balance())",code_defect,incorrect_conditional_logic,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public User getUserById(int userId) {
        User user = null;
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            Statement stmt = conn.createStatement();
            // Vulnerable to SQL injection if userId is manipulated elsewhere
            String query = ""SELECT id, username, email FROM users WHERE id = "" + userId;
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return user;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, roles, logger) {
    this.users = users;
    this.roles = roles;
    this.logger = logger;
  }

  processUsers() {
    this.users.forEach(user => {
      if (!user.id || !user.name || !user.email) {
        return;
      }

      const role = this.roles.find(r => r.id === user.roleId);
      if (!role) {
        return;
      }

      user.roleName = role.name;
      this.logger.log(`User ${user.name} processed with role ${role.name}`);
    });

    return this.users;
  }

  logUserDetails(user) {
    console.log(`User ID: ${user.id}`);
    console.log(`Name: ${user.name}`);
    console.log(`Email: ${user.email}`);
    console.log(`Role Name: ${user.roleName}`);
  }
}

const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com', roleId: 1 },
  { id: 2, name: 'Bob', email: 'bob@example.com', roleId: 2 },
];

const roles = [
  { id: 1, name: 'Admin' },
  { id: 2, name: 'User' },
];

const logger = {
  log: message => console.log(`[LOG] ${message}`)
};

const processor = new UserProcessor(users, roles, logger);
const processedUsers = processor.processUsers();

processedUsers.forEach(processor.logUserDetails.bind(processor));",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userRepository) {
         this.userRepository = userRepository;
      }

      async getAllUsers() {
         const users = await this.userRepository.findAll();
         return users.map(user => ({ id: user.id, name: user.name }));
      }

      async getUserById(id) {
         const user = await this.userRepository.findById(id);
         if (!user) {
            throw new Error('User not found');
         }
         return { id: user.id, name: user.name };
      }
   }

   class UserRepository {
      constructor(db) {
         this.db = db;
      }

      async findAll() {
         return this.db.query('SELECT * FROM users');
      }

      async findById(id) {
         return this.db.query('SELECT * FROM users WHERE id = $1', [id]);
      }
   }

   const db = {
      query: (sql, params) => {
         // simulate a database query
         return new Promise(resolve => {
            setTimeout(() => {
               resolve([
                  { id: 1, name: 'John Doe' },
                  { id: 2, name: 'Jane Doe' }
               ]);
            }, 100);
         });
      }
   };

   const userRepository = new UserRepository(db);
   const userService = new UserService(userRepository);

   (async () => {
      const users = await userService.getAllUsers();
      console.log(users);
   })();
   ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        // No error handling – if the file is missing or malformed, the process crashes
        const raw = fs.readFileSync(this.path, 'utf8');
        // Parses JSON without try/catch – potential exception on invalid JSON
        this.cache = JSON.parse(raw);
        return this.cache;
    }

    get(key) {
        // Returns undefined if key missing, but callers assume a value
        return this.cache[key];
    }
}

function processUserData(userId) {
    const loader = new ConfigLoader('./config.json');
    const config = loader.load();
    // Assume config contains a mapping of userId to permissions
    const permissions = config[userId];
    // Off‑by‑one error: should check permissions.length > 0, but uses >=
    if (permissions && permissions.length >= 0) {
        // Unsafe eval of user-provided data – security defect
        const result = eval(permissions[0]);
        console.log('Result:', result);
    } else {
        console.log('No permissions for user', userId);
    }
}

processUserData('admin');",code_defect,security_and_logic_errors,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    private final String DB_PASSWORD = ""superSecret123"";

    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }
        if (username.equals(""admin"") && password.equals(DB_PASSWORD)) {
            return true;
        }
        return false;
    }

    public String getDatabasePassword() {
        return DB_PASSWORD;
    }
}",code_defect,hardcoded_credentials,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private double totalAmount; public PaymentProcessor() { totalAmount = 0.0; } public void addPayment(double amount) { totalAmount += amount; } public double getTotalAmount() { return totalAmount; } public void processPayment() { if (totalAmount > 1000.0) { System.out.println(""Processing large payment...""); } else { System.out.println(""Processing small payment...""); } } }",code_smell,Magic Number,,llama-3.3-70b-versatile
Python,"import csv

class UserStatsProcessor:
    def __init__(self, csv_path):
        self.csv_path = csv_path
        self.user_scores = {}

    def load_data(self):
        with open(self.csv_path, newline='') as f:
            reader = csv.DictReader(f)
            for row in reader:
                user_id = row['user_id']
                score = int(row['score'])
                self.user_scores[user_id] = self.user_scores.get(user_id, []) + [score]

    def average_score(self, user_id):
        scores = self.user_scores.get(user_id, [])
        if not scores:
            return 0
        # Off‑by‑one error: uses len(scores) - 1 causing division by zero for single entry
        return sum(scores) / (len(scores) - 1)

    def top_n_users(self, n):
        # Returns top n users by average score
        averages = [(uid, self.average_score(uid)) for uid in self.user_scores]
        averages.sort(key=lambda x: x[1], reverse=True)
        return averages[:n]

# Example usage
processor = UserStatsProcessor('data/users.csv')
processor.load_data()
print(processor.top_n_users(5))
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.users = [];
    this.salt = '123456';
  }

  registerUser(username, password) {
    const user = {
      username,
      password: this.hashPassword(password),
      createdAt: new Date()
    };

    this.users.push(user);
  }

  hashPassword(password) {
    return password + this.salt;
  }

  validateUser(username, password) {
    const user = this.users.find(u => u.username === username);

    if (!user) {
      return false;
    }

    return user.password === this.hashPassword(password);
  }
}

const auth = new UserAuth();
auth.registerUser('alice', 'password123');
console.log(auth.validateUser('alice', 'password123'));",code_defect,insecure_authentication,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger logger = LoggerFactory.getLogger(UserService.class); public void updateUser(User user) { try { if (user != null) { if (user.getId() != 0) { User existingUser = UserRepository.getUser(user.getId()); if (existingUser != null) { existingUser.setName(user.getName()); existingUser.setEmail(user.getEmail()); UserRepository.updateUser(existingUser); } } } } catch (Exception e) { logger.error(""Error updating user"", e); } } }",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json, os, logging

class ConfigLoader:
    def __init__(self, config_path):
        self.path = config_path
        self.cache = {}
        self._load()

    def _load(self):
        # Reads config file every time; no error handling
        with open(self.path, 'r') as f:
            data = json.load(f)
        self.cache.update(data)

    def get(self, key, default=None):
        return self.cache.get(key, default)

class UserService:
    def __init__(self, db):
        self.db = db
        self.logger = logging.getLogger('UserService')

    def get_user_profile(self, user_id):
        # SQL injection vulnerability
        query = f""SELECT * FROM users WHERE id = {user_id}""
        result = self.db.execute(query)
        return result.fetchone()

    def update_user_email(self, user_id, new_email):
        # Missing validation, could set empty email
        query = ""UPDATE users SET email = ? WHERE id = ?""
        self.db.execute(query, (new_email, user_id))
        self.db.commit()
        self.logger.info(f""Updated email for user {user_id}"")

# Example usage
if __name__ == '__main__':
    from sqlite3 import connect
    cfg = ConfigLoader('config.json')
    db = connect(cfg.get('database_path'))
    service = UserService(db)
    user = service.get_user_profile('1 OR 1=1')  # malicious input triggers injection
    print(user)
",code_defect,SQL_injection,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUserInput(String input) {
        if (input == null) return;

        String trimmed = input.trim();
        if (trimmed.isEmpty()) {
            System.out.println(""Empty input"");
            return;
        }

        String[] parts = trimmed.split("" "");
        if (parts.length < 2) {
            System.out.println(""Invalid format"");
            return;
        }

        String username = parts[0];
        String action = parts[1];

        if (action.equals(""add"")) {
            System.out.println(""Adding user: "" + username);
        } else if (action.equals(""remove"")) {
            System.out.println(""Removing user: "" + username);
        } else {
            System.out.println(""Unknown action"");
        }
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"const fs = require('fs');

class LogProcessor {
    constructor(logPath) {
        this.logPath = logPath;
        this.buffer = [];
    }

    loadLogs() {
        // Synchronously read the entire log file into memory
        const data = fs.readFileSync(this.logPath, 'utf8');
        this.buffer = data.split('\n');
    }

    // Returns the Nth most recent error entry
    getRecentError(n) {
        let count = 0;
        for (let i = this.buffer.length - 1; i >= 0; i--) {
            const line = this.buffer[i];
            if (line.includes('ERROR')) {
                if (count === n) {
                    return line;
                }
                count++;
            }
        }
        return null;
    }

    // Asynchronously writes a new log entry
    async appendLog(entry) {
        // Missing await; fire-and-forget may cause race conditions
        fs.appendFile(this.logPath, entry + '\n', (err) => {
            if (err) console.error('Failed to write log');
        });
    }
}

module.exports = LogProcessor;",code_defect,race_condition_due_to_missing_await,,openai/gpt-oss-120b
Python,"import requests
import time

def fetch_and_cache_user_data(user_id, cache, max_age_seconds=300):
    cached_entry = cache.get(user_id)
    if cached_entry:
        cached_time, data = cached_entry
        if time.time() - cached_time < max_age_seconds:
            return data

    try:
        response = requests.get(f'https://api.example.com/users/{user_id}')
        response.raise_for_status()
        data = response.json()
        cache[user_id] = (time.time(), data)
        return data
    except requests.RequestException:
        return cached_entry[1] if cached_entry else None


def process_users(user_ids, cache):
    results = []
    for user_id in user_ids:
        user_data = fetch_and_cache_user_data(user_id, cache)
        if user_data:
            results.append(user_data.get('name', 'Unknown'))
        else:
            results.append('Error fetching user')
    return results


def main():
    user_ids = [101, 102, 103, 104, 105]
    cache = {}
    names = process_users(user_ids, cache)
    for name in names:
        print(name)

if __name__ == '__main__':
    main()",code_defect,missing_error_handling,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, String> users = new HashMap<>(); public void addUser(String username, String password) { users.put(username, password); } public boolean authenticate(String username, String password) { return users.containsKey(username) && users.get(username).equals(password); } public static void main(String[] args) { UserService service = new UserService(); service.addUser(""admin"", ""password123""); System.out.println(service.authenticate(""admin"", ""password123"")); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        if (this.cache) return this.cache;
        // Synchronously read config file (blocking I/O)
        const data = fs.readFileSync(this.path, 'utf8');
        // Parse JSON without try/catch – malformed JSON will crash the process
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function processUserInput(input) {
    // Directly concatenate user input into a shell command – command injection vulnerability
    const cmd = `ls ${input}`;
    const exec = require('child_process').execSync;
    return exec(cmd, { encoding: 'utf8' });
}

function main() {
    const config = new ConfigLoader('./config.json').load();
    const result = processUserInput(config.userPath);
    console.log('Directory listing:', result);
}

main();",code_defect,command_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    DataProcessor(const std::string& dataFile) : dataFile_(dataFile) {}

    void process() {
        std::vector<int> data = loadFromFile();
        for (size_t i = 0; i < data.size(); ++i) {
            if (data[i] % 2 == 0) {
                evenData_.push_back(data[i]);
            } else {
                oddData_.push_back(data[i]);
            }
        }
        generateReports();
    }

    void generateReports() {
        std::cout << ""Even numbers: "";
        for (int num : evenData_) {
            std::cout << num << "" "";
        }
        std::cout << std::endl;

        std::cout << ""Odd numbers: "";
        for (int num : oddData_) {
            std::cout << num << "" "";
        }
        std::cout << std::endl;
    }

private:
    std::vector<int> loadFromFile() {
        // Simulate loading data from a file
        return {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    }

    std::string dataFile_;
    std::vector<int> evenData_;
    std::vector<int> oddData_;
};

int main() {
    DataProcessor processor(""data.txt"");
    processor.process();
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        if user_data:
            return {'id': user_data[0], 'name': user_data[1], 'email': user_data[2]}
        else:
            return None
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users')
        users_data = cursor.fetchall()
        users = []
        for user_data in users_data:
            users.append({'id': user_data[0], 'name': user_data[1], 'email': user_data[2]})
        return users",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk if limit derived from user
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return payments;
    }

    public void processPayments(List<String> paymentIds) {
        for (String id : paymentIds) {
            try {
                // Simulate processing
                Thread.sleep(100);
                // Update status without transaction handling
                updatePaymentStatus(id, ""COMPLETED"");
            } catch (InterruptedException e) {
                // Swallow interruption
            }
        }
    }

    private void updatePaymentStatus(String paymentId, String status) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""UPDATE payments SET status=? WHERE id='"" + paymentId + ""'""; // SQL injection vulnerability
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, status);
            stmt.executeUpdate();
            stmt.close();
            conn.close();
        } catch (SQLException e) {
            // Log silently
        }
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUser(String username, String password, String email) {
        if (username == null || password == null || email == null) {
            throw new IllegalArgumentException(""All fields are required"");
        }

        if (username.length() > 20 || username.contains("" "")) {
            throw new IllegalArgumentException(""Username cannot exceed 20 characters and must not contain spaces"");
        }

        if (password.length() < 8 || !password.matches("".*[A-Z].*"")) {
            throw new IllegalArgumentException(""Password must be at least 8 characters and contain an uppercase letter"");
        }

        if (!email.contains(""@"") || email.indexOf(""@"") < 1 || email.lastIndexOf(""."") < email.indexOf(""@"")) {
            throw new IllegalArgumentException(""Invalid email format"");
        }

        System.out.println(""User processed: "" + username);
    }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <algorithm>

      class Person {
      public:
         std::string name;
         int age;

         Person(std::string n, int a) : name(n), age(a) {}

         bool operator<(const Person& other) const {
            return age < other.age;
         }
      };

      void sortPeople(std::vector<Person>& people) {
         std::sort(people.begin(), people.end());
      }

      int main() {
         std::vector<Person> people = {Person(""John"", 25), Person(""Alice"", 30), Person(""Bob"", 20)};
         sortPeople(people);

         for (const auto& person : people) {
            std::cout << person.name << "" is "" << person.age << "" years old."" << std::endl;
         }

         return 0;
      }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}
    void addTransaction(int amount) {
        std::lock_guard<std::mutex> lock(mtx_);
        pending_.push_back(amount);
    }
    void processAll() {
        // Process each pending transaction and update total
        for (size_t i = 0; i <= pending_.size(); ++i) { // BUG: off‑by‑one, may read past end
            total_ += pending_[i];
        }
        pending_.clear();
    }
    int getTotal() const { return total_; }
private:
    std::vector<int> pending_;
    int total_;
    mutable std::mutex mtx_;
};

int main() {
    TransactionProcessor tp;
    tp.addTransaction(100);
    tp.addTransaction(200);
    std::thread t([&tp]() { tp.processAll(); });
    t.join();
    std::cout << ""Total: "" << tp.getTotal() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private String dbUrl = ""jdbc:mysql://localhost:3306/orders_db"";
    private String dbUser = ""admin"";
    private String dbPassword = ""password123!"";

    public void processOrder(String customerId, String productId, int quantity) {
        try {
            Class.forName(""com.mysql.cj.jdbc.Driver"");
            Connection connection = DriverManager.getConnection(dbUrl, dbUser, dbPassword);
            String query = ""INSERT INTO orders (customer_id, product_id, quantity) VALUES ('"" + customerId + ""', '"" + productId + ""', "" + quantity + "")"";
            Statement statement = connection.createStatement();
            statement.executeUpdate(query);
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",code_defect,sql_injection,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
       constructor() {
           this.payments = [];
       }

       addPayment(amount, description) {
           this.payments.push({ amount, description });
       }

       calculateTotal() {
           return this.payments.reduce((total, payment) => total + payment.amount, 0);
       }

       getPaymentDetails() {
           return this.payments.map(payment => ({ amount: payment.amount, description: payment.description }));
       }
   }

   const paymentProcessor = new PaymentProcessor();
   paymentProcessor.addPayment(100, 'Test Payment');
   console.log(paymentProcessor.calculateTotal());
   console.log(paymentProcessor.getPaymentDetails());
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and watches for changes.""""""
    def __init__(self, path):
        self.path = path
        self._config = {}
        self._lock = threading.Lock()
        self._load()
        self._start_watcher()

    def _load(self):
        with open(self.path, 'r') as f:
            data = json.load(f)
        with self._lock:
            self._config.update(data)

    def _watcher(self):
        last_mtime = os.path.getmtime(self.path)
        while True:
            try:
                cur_mtime = os.path.getmtime(self.path)
                if cur_mtime != last_mtime:
                    self._load()
                    last_mtime = cur_mtime
            except Exception:
                pass
            # No sleep -> busy-wait loop

    def _start_watcher(self):
        t = threading.Thread(target=self._watcher, daemon=True)
        t.start()

    def get(self, key, default=None):
        with self._lock:
            return self._config.get(key, default)

# Usage example (not part of the library)
loader = ConfigLoader('config.json')
print(loader.get('api_key'))",code_defect,busy_wait_cpu_hog,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor(database) {
    this.db = database;
    this.totalProcessed = 0;
  }

  processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      if (order.status === 'pending') {
        const user = this.db.getUserById(order.userId);
        if (user && user.creditScore > 500) {
          this._validatePayment(order);
          this._updateOrderStatus(order.id, 'processed');
          this.totalProcessed++;
        } else {
          this._updateOrderStatus(order.id, 'rejected');
        }
      }
    }
  }

  _validatePayment(order) {
    // Simulated payment validation logic
    if (order.amount <= 0) {
      throw new Error('Invalid order amount');
    }
  }

  _updateOrderStatus(orderId, status) {
    // Simulated DB update
    console.log(`Order ${orderId} status updated to ${status}`);
  }
}

// Usage
const db = {
  getUserById: (id) => ({ id, creditScore: 600 })
};

const orders = [
  { id: 1, userId: 1, status: 'pending', amount: 100 },
  { id: 2, userId: 2, status: 'pending', amount: 0 },
  { id: 3, userId: 1, status: 'completed', amount: 200 }
];

const processor = new OrderProcessor(db);
processor.processOrders(orders);",code_defect,error_handling,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : logFile(file) {}
    void process() {
        std::thread reader(&LogProcessor::readLoop, this);
        std::thread writer(&LogProcessor::writeLoop, this);
        reader.join();
        writer.join();
    }
private:
    std::string logFile;
    std::vector<std::string> buffer;
    std::mutex mtx;
    bool done = false;
    void readLoop() {
        // Simulated reading lines
        for (int i = 0; i < 100; ++i) {
            std::lock_guard<std::mutex> lock(mtx);
            buffer.push_back(""log line "" + std::to_string(i));
        }
        done = true; // missing lock -> data race
    }
    void writeLoop() {
        while (!done) {
            std::this_thread::sleep_for(std::chrono::milliseconds(10));
        }
        std::lock_guard<std::mutex> lock(mtx);
        for (const auto& line : buffer) {
            std::cout << line << std::endl;
        }
    }
};

int main() {
    LogProcessor lp(""app.log"");
    lp.process();
    return 0;
}
",code_defect,data_race,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUsers(List<User> users) {
        for (User user : users) {
            if (user.getEmail() != null && !user.getEmail().isEmpty()) {
                String email = user.getEmail().toLowerCase();
                if (!isValidEmail(email)) {
                    System.out.println(""Invalid email for user: "" + user.getName());
                }
            } else {
                System.out.println(""User email is missing: "" + user.getName());
            }
            if (user.getRole() != null) {
                switch (user.getRole()) {
                    case ""ADMIN"":
                        grantAdminAccess(user);
                        break;
                    case ""USER"":
                        grantUserAccess(user);
                        break;
                    default:
                        System.out.println(""Unknown role for user: "" + user.getName());
                }
            } else {
                System.out.println(""User role is missing: "" + user.getName());
            }
        }
    }

    private boolean isValidEmail(String email) {
        return email.matches(""^[a-zA-Z0-9_+&-]+(?:\.[a-zA-Z0-9_+&-]+)*@"" +
                ""(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,7}$"");
    }

    private void grantAdminAccess(User user) {
        // Implementation for admin access
    }

    private void grantUserAccess(User user) {
        // Implementation for user access
    }
}",code_smell,large_function,,qwen/qwen3-32b
Java,"public class UserDatabase { private static Map<String, String> users = new HashMap<>(); public static void addUser(String username, String password) { users.put(username, password); } public static String getPassword(String username) { return users.get(username); } public static void main(String[] args) { UserDatabase.addUser(""admin"", ""password123""); System.out.println(UserDatabase.getPassword(""admin"")); } }",code_smell,"God class, tight coupling",,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }

    void flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        for (const auto& line : logs_) {
            std::cout << line << std::endl;
        }
        // Intentionally forget to clear logs_ -> memory leak over time
    }

private:
    std::vector<std::string> logs_;
    std::mutex mtx_;
};

void worker(LogAggregator& agg, int id) {
    for (int i = 0; i < 1000; ++i) {
        agg.addLog(""Worker "" + std::to_string(id) + "" entry "" + std::to_string(i));
    }
    // Missing agg.flush() here leads to lost logs
}

int main() {
    LogAggregator aggregator;
    std::vector<std::thread> threads;
    for (int i = 0; i < 8; ++i) {
        threads.emplace_back(worker, std::ref(aggregator), i);
    }
    for (auto& t : threads) t.join();
    aggregator.flush();
    return 0;
}
",code_defect,memory_leak_due_to_uncleared_buffer,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users) {
    this.users = users;
  }

  authenticate(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        if (this.users[i].password === password) {
          return true;
        } else {
          return false;
        }
      }
    }
    return false;
  }

  resetPassword(username, newPassword) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        this.users[i].password = newPassword;
        return true;
      }
    }
    return false;
  }
}

const usersData = [
  { username: 'admin', password: '123456' },
  { username: 'user1', password: 'qwerty' }
];

const auth = new UserAuth(usersData);",code_defect,security_issue,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(paymentGateway) {
         this.paymentGateway = paymentGateway;
      }

      async processPayment(amount, currency) {
         try {
            const paymentResult = await this.paymentGateway.chargeCard(amount, currency);
            if (paymentResult.status === 'success') {
               return paymentResult.transactionId;
            } else {
               throw new Error('Payment failed');
            }
         } catch (error) {
            console.error(error);
            return null;
         }
      }
   }

   class PaymentGateway {
      async chargeCard(amount, currency) {
         // Simulate a payment gateway API call
         return { status: 'success', transactionId: '123456' };
      }
   }

   const paymentGateway = new PaymentGateway();
   const paymentProcessor = new PaymentProcessor(paymentGateway);
   paymentProcessor.processPayment(100, 'USD').then((transactionId) => {
      console.log(`Payment processed successfully: ${transactionId}`);
   });
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : logfile(file) {}
    void start() {
        for (int i = 0; i < 5; ++i) {
            workers.emplace_back(&LogProcessor::process, this);
        }
        for (auto& t : workers) t.join();
    }
private:
    void process() {
        std::lock_guard<std::mutex> lock(mtx);
        // Simulate reading a line
        std::string line = readLine();
        if (line.empty()) return;
        // Very naive parsing: split on ':' expecting ""key:value""
        auto pos = line.find("":"");
        std::string key = line.substr(0, pos);
        std::string value = line.substr(pos+1);
        // Store in map without synchronization (bug)
        data[key] = std::stoi(value);
    }
    std::string readLine() {
        static int count = 0;
        if (count++ < 10) return ""count:"" + std::to_string(count);
        return """";
    }
    std::string logfile;
    std::vector<std::thread> workers;
    std::mutex mtx;
    std::unordered_map<std::string,int> data; // data race here
};

int main(){
    LogProcessor lp(""/var/log/app.log"");
    lp.start();
    return 0;
}
",code_defect,data_race,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data, int threshold) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] > threshold) {
            std::cout << data[i] << "" is above threshold\n"";
        } else {
            std::cout << data[i] << "" is below threshold\n"";
        }
    }
}

int main() {
    std::vector<int> numbers = {10, 20, 30, 40, 50};
    int threshold = 25;
    processData(numbers, threshold);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class ShoppingCart {
  constructor() {
    this.items = [];
  }

  addItem(item) {
    this.items.push(item);
  }

  calculateTotal() {
    let total = 0;
    for (let i = 0; i < this.items.length; i++) {
      total += this.items[i].price;
    }
    return total;
  }

  applyDiscount(discountPercentage) {
    let total = this.calculateTotal();
    let discountAmount = total * (discountPercentage / 100);
    return total - discountAmount;
  }
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {}
    void addUser(const std::string& name) {
        users.push_back(name);
    }
    // Returns the user at the given index, but uses 1-based indexing unintentionally
    std::string getUser(int index) const {
        if (index <= 0 || index > static_cast<int>(users.size())) {
            return """";
        }
        return users[index]; // off-by-one: should be index-1
    }
    // Prints all users
    void printAll() const {
        for (size_t i = 0; i < users.size(); ++i) {
            std::cout << i+1 << "": "" << users[i] << std::endl;
        }
    }
private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""Alice"");
    um.addUser(""Bob"");
    um.addUser(""Charlie"");
    std::cout << ""Second user: "" << um.getUser(2) << std::endl; // Expected ""Bob"" but gets out-of-bounds
    um.printAll();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& input, std::vector<int>& output) {
    output.clear();
    for (size_t i = 0; i < input.size(); ++i) {
        for (size_t j = 0; j < input.size(); ++j) {
            if (i != j && input[i] == input[j]) {
                output.push_back(input[i]);
            }
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 2, 4, 1, 5};
    std::vector<int> result;

    processData(data, result);

    for (int val : result) {
        std::cout << val << "" "";
    }

    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Python,"
class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email

    def verify_password(self, input_password):
        return self.password == input_password

    def update_email(self, new_email):
        self.email = new_email

class AuthenticationManager:
    def __init__(self):
        self.accounts = {}

    def register_account(self, username, password, email):
        if username in self.accounts:
            return False
        self.accounts[username] = UserAccount(username, password, email)
        return True

    def login(self, username, password):
        if username not in self.accounts:
            return False
        return self.accounts[username].verify_password(password)

auth_manager = AuthenticationManager()
auth_manager.register_account('test_user', 'test_password', 'test@example.com')
print(auth_manager.login('test_user', 'test_password'))
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT payment_id FROM payments WHERE status = 'PENDING' LIMIT "" + limit; // SQL injection risk if limit derived from user
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        // Missing rs.close(), stmt.close(), conn.close() leads to resource leak
        return payments;
    }

    public boolean processPayment(String paymentId, double amount) {
        // Simulate processing logic
        if (amount <= 0) {
            throw new IllegalArgumentException(""Amount must be positive"");
        }
        // Critical bug: using == for string comparison
        if (paymentId == null || paymentId == """") {
            return false;
        }
        // Assume payment succeeds
        return true;
    }
}
",code_defect,string_comparison_bug_and_resource_leak,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user && user.isActive) {
        user.status = 'active';
      } else {
        user.status = 'inactive';
      }

      if (user.email && user.email.length > 5) {
        user.isValid = true;
      } else {
        user.isValid = false;
      }

      this.logUserStatus(user);
    });
  }

  logUserStatus(user) {
    console.log(`User ${user.id} is ${user.status}, validity: ${user.isValid}`);
  }
}

const users = [
  { id: 1, isActive: true, email: 'john@example.com' },
  { id: 2, isActive: false, email: '' },
  { id: 3, isActive: true, email: 'anna' }
];

const processor = new UserProcessor(users);
processor.processUsers();",code_smell,long_method,,qwen/qwen3-32b
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}

    def load(self):
        # Insecurely deserialize JSON without validation
        with open(self.config_path, 'r') as f:
            data = f.read()
        self.settings = json.loads(data)  # Potential unsafe deserialization
        return self.settings

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)

    def process(self, data_items):
        results = []
        for i in range(0, len(data_items), self.batch_size):
            batch = data_items[i:i+self.batch_size]
            # Simulate processing each batch
            for item in batch:
                results.append(self._process_item(item))
        return results

    def _process_item(self, item):
        # Assume item is a dict with a 'value' field
        return item['value'] * 2

# Usage example (would be in production code)
config = ConfigLoader('/etc/app/config.json')
config.load()
processor = DataProcessor(config)
sample_data = [{'value': i} for i in range(1000)]
output = processor.process(sample_data)
print('Processed', len(output), 'items')",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    void process(const std::vector<int>& data) {
        if (data.empty()) {
            return;
        }

        for (size_t i = 0; i < data.size(); ++i) {
            if (data[i] % 2 == 0) {
                std::cout << ""Even: "" << data[i] << std::endl;
            }
            else {
                std::cout << ""Odd: "" << data[i] << std::endl;
            }
        }

        // Legacy code - TODO: remove later
        // int unused_value = 0;
        // for (size_t i = 0; i < data.size(); ++i) {
        //     unused_value += data[i];
        // }
    }
};

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5};
    DataProcessor processor;
    processor.process(input);
    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
      class ShoppingCart {
         constructor() {
            this.items = [];
         }

         addItem(item) {
            this.items.push(item);
         }

         removeItem(item) {
            const index = this.items.indexOf(item);
            if (index !== -1) {
               this.items.splice(index, 1);
            }
         }

         calculateTotal() {
            let total = 0;
            for (let i = 0; i < this.items.length; i++) {
               total += this.items[i].price;
            }
            return total;
         }
      }

      class Item {
         constructor(name, price) {
            this.name = name;
            this.price = price;
         }
      }

      const cart = new ShoppingCart();
      const item1 = new Item('Product A', 10.99);
      const item2 = new Item('Product B', 9.99);
      cart.addItem(item1);
      cart.addItem(item2);
      console.log(cart.calculateTotal());
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class LogProcessor {
public:
    LogProcessor(const std::string& filePath) : path(filePath) {}

    // Reads the last N lines from the log file
    std::vector<std::string> tail(size_t n) {
        std::vector<std::string> lines;
        std::string line;
        std::ifstream file(path);
        if (!file.is_open()) {
            std::cerr << ""Failed to open log file: "" << path << std::endl;
            return lines;
        }
        while (std::getline(file, line)) {
            lines.push_back(line);
        }
        // BUG: off‑by‑one error – when n equals lines.size() we drop one line
        if (n >= lines.size()) {
            return {}; // returns empty instead of all lines
        }
        return std::vector<std::string>(lines.end() - n, lines.end());
    }

private:
    std::string path;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    auto recent = lp.tail(100);
    std::cout << ""Last "" << recent.size() << "" entries:"" << std::endl;
    for (const auto& entry : recent) {
        std::cout << entry << std::endl;
    }
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserValidator {
    public boolean validateUser(User user) {
        if (user == null) {
            return false;
        }
        if (user.getName() == null || user.getName().trim().isEmpty()) {
            return false;
        }
        if (user.getEmail() == null || !user.getEmail().contains(""@"")) {
            return false;
        }
        if (user.getAge() < 18) {
            return false;
        }
        if (user.getPassword() == null || user.getPassword().length() < 8) {
            return false;
        }
        return true;
    }
}

class User {
    private String name;
    private String email;
    private int age;
    private String password;

    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }

    public int getAge() {
        return age;
    }

    public String getPassword() {
        return password;
    }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"#include <iostream>
#include <cstring>

class FileProcessor {
public:
    FileProcessor(const char* path) {
        strncpy(filePath, path, sizeof(filePath)-1);
        filePath[sizeof(filePath)-1] = '\0';
    }
    void load() {
        char buffer[256];
        FILE* f = fopen(filePath, ""r"");
        if (!f) return;
        // BUG: reads without checking length, can overflow buffer
        while (fgets(buffer, 1024, f)) {
            processLine(buffer);
        }
        fclose(f);
    }
private:
    void processLine(const char* line) {
        // simplistic parsing
        if (strncmp(line, ""KEY="", 4) == 0) {
            std::cout << ""Found key: "" << line+4 << std::endl;
        }
    }
    char filePath[128];
};

int main(int argc, char* argv[]) {
    if (argc < 2) return 1;
    FileProcessor fp(argv[1]);
    fp.load();
    return 0;
}",code_defect,buffer_overflow,,openai/gpt-oss-120b
Python,"import os
import requests

API_KEY = '1234567890abcdef'  # Hardcoded API key

def get_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    headers = {'Authorization': f'Bearer {API_KEY}'}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        return None

def update_user_profile(user_id, new_data):
    url = f'https://api.example.com/users/{user_id}'
    headers = {'Authorization': f'Bearer {API_KEY}'}
    response = requests.put(url, headers=headers, json=new_data)
    return response.status_code

# Legacy code - to be removed
# def legacy_get_user_info(user_id):
#     url = f'http://old-api.example.com/user/{user_id}'
#     response = requests.get(url)
#     return response.text",code_defect,hardcoded_credentials,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class Company {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    void sortEmployeesByAge() { std::sort(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) { return a.getAge() < b.getAge(); }); }
    void printEmployees() {
        for (const auto& employee : employees) {
            std::cout << employee.getName() << "" is "" << employee.getAge() << "" years old."" << std::endl;
        }
    }

private:
    std::vector<Employee> employees;
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 30));
    company.addEmployee(Employee(""Alice"", 25));
    company.addEmployee(Employee(""Bob"", 40));
    company.sortEmployeesByAge();
    company.printEmployees();
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import os
import json
import sqlite3

class UserDataProcessor:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                profile TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def load_user_profile(self, username):
        cursor = self.conn.cursor()
        cursor.execute('SELECT profile FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            # Unsafe deserialization of user-controlled data
            return json.loads(row[0])
        return None

    def save_user_profile(self, username, profile_dict):
        cursor = self.conn.cursor()
        # Directly storing JSON string without validation
        profile_json = json.dumps(profile_dict)
        cursor.execute('INSERT INTO users (username, profile) VALUES (?, ?)', (username, profile_json))
        self.conn.commit()

    def update_user_profile(self, username, updates):
        profile = self.load_user_profile(username)
        if profile is None:
            profile = {}
        # Merges updates, but overwrites existing keys without checking types
        profile.update(updates)
        self.save_user_profile(username, profile)

    def close(self):
        self.conn.close()

# Example usage (would be called elsewhere in the application)
processor = UserDataProcessor('/tmp/users.db')
processor.save_user_profile('alice', {'age': 30, 'role': 'admin'})
processor.update_user_profile('alice', {'age': 'thirty-one'})  # Type inconsistency bug
processor.close()",code_defect,type_inconsistency_and_unsafe_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (i % 2 == 0) {
            std::cout << data[i] << std::endl;
        } else {
            // do nothing for odd indices
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5};
    processData(input);
    return 0;
}",code_smell,inefficient_loop,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}
    std::string getName() { return name; }
    int getSalary() { return salary; }
private:
    std::string name;
    int salary;
};

class EmployeeDatabase {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    int calculateTotalSalary() {
        int total = 0;
        for (const auto& employee : employees) {
            total += employee.getSalary();
        }
        return total;
    }
private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeDatabase database;
    database.addEmployee(Employee(""John Doe"", 50000));
    database.addEmployee(Employee(""Jane Doe"", 60000));
    std::cout << ""Total salary: "" << database.calculateTotalSalary() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username, profile):
        # profile is a dict that will be stored as JSON
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, data) VALUES (?, ?)',
                       (username, json.dumps(profile)))
        self.conn.commit()

    def get_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT username, data FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            username, data = row
            # BUG: Directly eval the stored JSON string, leading to code execution if tampered
            profile = eval(data)
            return {'id': user_id, 'username': username, 'profile': profile}
        return None

    def update_profile(self, user_id, new_profile):
        cursor = self.conn.cursor()
        cursor.execute('UPDATE users SET data = ? WHERE id = ?',
                       (json.dumps(new_profile), user_id))
        self.conn.commit()

    def delete_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE id = ?', (user_id,))
        self.conn.commit()

# Example usage (would be removed in production)
if __name__ == '__main__':
    manager = UserManager('users.db')
    manager.add_user('alice', {'role': 'admin', 'active': True})
    user = manager.get_user(1)
    print(user)",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order != null) {
            if (order.getItems() != null && !order.getItems().isEmpty()) {
                for (OrderItem item : order.getItems()) {
                    if (item.getQuantity() > 0 && item.getPrice() > 0) {
                        double total = item.getQuantity() * item.getPrice();
                        item.setTotal(total);
                    }
                }
            }
        }
        sendOrderToInventory(order);
    }

    private void sendOrderToInventory(Order order) {
        // Simulated integration with inventory system
        if (order.getItems() != null) {
            for (OrderItem item : order.getItems()) {
                if (item.getTotal() > 0) {
                    // Update inventory (simulated)
                }
            }
        }
    }
}",code_smell,primitive_obsession,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUser(id) { const user = await this.userDao.getUser(id); if (!user) { throw new Error('User not found'); } return user; } async getUsers() { let users = []; for (let i = 0; i < 100; i++) { users.push(await this.getUser(i)); } return users; } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data):
        cursor = self.conn.cursor()
        # Directly embedding user data into SQL – SQL injection risk
        cursor.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')"")
        self.conn.commit()

    def get_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute(f""SELECT data FROM users WHERE username = '{username}'"")
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def close(self):
        self.conn.close()

# Usage example (would be in production code)
if __name__ == ""__main__"":
    manager = UserManager(os.getenv('USER_DB', ':memory:'))
    manager.add_user('alice', {'role': 'admin', 'active': True})
    user_data = manager.get_user('alice')
    print('Loaded user:', user_data)
    manager.close()",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class DataProcessor {
  constructor(data) {
    this.data = data;
    this.cache = {};
  }

  process() {
    const result = [];
    for (let i = 0; i < this.data.length; i++) {
      const item = this.data[i];
      if (!this.cache[item.id]) {
        this.cache[item.id] = this._compute(item);
      }
      result.push(this.cache[item.id]);
    }
    return result;
  }

  _compute(item) {
    let value = 0;
    for (let j = 0; j < item.values.length; j++) {
      value += item.values[j];
    }
    return { id: item.id, sum: value };
  }
}

module.exports = DataProcessor;",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>

class DatabaseConnection {
public:
    static DatabaseConnection& getInstance() {
        static DatabaseConnection instance;
        return instance;
    }
    void query(const std::string& sql) {
        // simulate a query
        std::cout << ""Query: "" << sql << std::endl;
    }
private:
    DatabaseConnection() {}
    DatabaseConnection(const DatabaseConnection&);
    DatabaseConnection& operator=(const DatabaseConnection&);
};

class UserService {
public:
    void getUsers() {
        DatabaseConnection& db = DatabaseConnection::getInstance();
        db.query(""SELECT * FROM users"");
    }
};

int main() {
    UserService service;
    service.getUsers();
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {}
    void addUser(const std::string& name) {
        users.push_back(name);
    }
    // Returns the user at the given index (0‑based)
    std::string getUser(int index) const {
        // BUG: off‑by‑one error, should be index < users.size()
        if (index <= users.size()) {
            return users[index];
        }
        return """";
    }
private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    // This will cause undefined behavior when index == 2
    std::cout << um.getUser(2) << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order, boolean isPriority, int discountCode) {
        if (order == null) {
            return;
        }

        if (isPriority) {
            order.setPriority(true);
            order.applyDiscount(10);
        } else if (discountCode > 0) {
            order.applyDiscount(discountCode);
        }

        for (int i = 0; i < order.getItems().size(); i++) {
            Item item = order.getItems().get(i);
            if (item.getQuantity() < 1) {
                continue;
            }
            if (item.getPrice() > 100) {
                order.removeItem(item);
                i--;
            }
        }

        // TODO: Need to log the order after processing
        // System.out.println(""Order processed: "" + order);
    }
}",code_smell,long_function,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};
class UserService {
public:
    static std::vector<User> users;
    static void addUser(User user) { users.push_back(user); }
    static User getUser(int index) { return users[index]; }
};
std::vector<User> UserService::users;
int main() {
    UserService::addUser(User(""John"", 30));
    std::cout << UserService::getUser(0).getName() << std::endl;
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {
        // Load users from a data source (simulated)
        users_ = {""alice"", ""bob"", ""carol""};
    }

    // Returns the username at the given index, or empty string if out of range
    std::string getUserAt(int index) const {
        // BUG: off‑by‑one error – should be index >= users_.size()
        if (index < 0 || index > users_.size()) {
            return """";
        }
        return users_[index];
    }

    // Adds a new user
    void addUser(const std::string& name) {
        users_.push_back(name);
    }

private:
    std::vector<std::string> users_;
};

int main() {
    UserManager um;
    // Attempt to retrieve the last user
    std::cout << ""Last user: "" << um.getUserAt(2) << std::endl; // works
    // Out‑of‑bounds access due to bug
    std::cout << ""Out of bounds: '"" << um.getUserAt(3) << ""'"" << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import requests

API_KEY = 'supersecretkey123'

class DataProcessor:
    def __init__(self, file_path):
        self.file_path = file_path
        self.data = None

    def load_data(self):
        if os.path.exists(self.file_path):
            with open(self.file_path, 'r') as f:
                self.data = f.read().splitlines()

    def process_data(self):
        processed = []
        for item in self.data:
            res = requests.get(f'https://api.example.com/data?query={item}', headers={'Authorization': f'Bearer {API_KEY}'}).
            if res.status_code == 200:
                processed.append(res.json())
        return processed

    def save_results(self, results):
        with open('output.txt', 'w') as f:
            for item in results:
                f.write(str(item) + '\n')

if __name__ == '__main__':
    dp = DataProcessor('input.txt')
    dp.load_data()
    results = dp.process_data()
    dp.save_results(results)",code_defect,hardcoded_secrets,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticateUser(String username, String password) {
        if (username == null || password == null) {
            return false;
        }
        if (username.equals(""admin"") && password.equals(DEFAULT_PASSWORD)) {
            return true;
        }
        // legacy code for old users
        if (username.equals(password)) {
            return true;
        }
        return false;
    }
}",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <fstream>

class LogProcessor {
public:
    LogProcessor(const std::string& filePath) : filePath_(filePath) {}
    void loadLogs() {
        std::ifstream in(filePath_);
        std::string line;
        while (std::getline(in, line)) {
            logs_.push_back(line);
        }
    }
    // Returns the last N log entries
    std::vector<std::string> getRecent(int count) const {
        std::vector<std::string> result;
        // Off‑by‑one error: should start at logs_.size() - count
        for (size_t i = logs_.size() - count; i < logs_.size(); ++i) {
            result.push_back(logs_[i]);
        }
        return result;
    }
private:
    std::string filePath_;
    std::vector<std::string> logs_;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.loadLogs();
    auto recent = lp.getRecent(5);
    for (const auto& entry : recent) {
        std::cout << entry << std::endl;
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users) {
    this.users = users;
  }

  authenticateUser(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        if (this.users[i].password === password) {
          console.log('Authentication successful');
          return true;
        } else {
          console.log('Invalid password');
          return false;
        }
      }
    }
    console.log('User not found');
    return false;
  }
}

const users = [
  { username: 'admin', password: 'admin123' },
  { username: 'user', password: 'userpass' }
];

const auth = new UserAuth(users);
auth.authenticateUser('admin', 'admin123');",code_smell,poor_error_handling,,qwen/qwen3-32b
Python,"
class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email

    def authenticate(self, input_password):
        return self.password == input_password

    def change_password(self, old_password, new_password):
        if self.authenticate(old_password):
            self.password = new_password
        else:
            print('Incorrect old password')

    def send_verification_email(self):
        import smtplib
        from email.mime.multipart import MIMEMultipart
        from email.mime.text import MIMEText
        msg = MIMEMultipart()
        msg['From'] = 'your-email@gmail.com'
        msg['To'] = self.email
        msg['Subject'] = 'Verification Email'
        body = 'Please verify your account'
        msg.attach(MIMEText(body, 'plain'))
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(msg['From'], 'your-password')
        text = msg.as_string()
        server.sendmail(msg['From'], msg['To'], text)
        server.quit()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class OrderProcessor {
    private Connection conn;
    private static final String INSERT_ORDER = ""INSERT INTO orders (id, amount, customer) VALUES (?, ?, ?)"";

    public OrderProcessor(Connection conn) {
        this.conn = conn;
    }

    public void processOrders(List<Order> orders) {
        for (Order order : orders) {
            try {
                saveOrder(order);
            } catch (SQLException e) {
                // swallow exception, continue processing
            }
        }
    }

    private void saveOrder(Order order) throws SQLException {
        PreparedStatement stmt = conn.prepareStatement(INSERT_ORDER);
        stmt.setInt(1, order.getId());
        stmt.setDouble(2, order.getAmount());
        stmt.setString(3, order.getCustomerName());
        stmt.executeUpdate();
        stmt.close();
    }
}

class Order {
    private int id;
    private double amount;
    private String customerName;

    public Order(int id, double amount, String customerName) {
        this.id = id;
        this.amount = amount;
        this.customerName = customerName;
    }

    public int getId() { return id; }
    public double getAmount() { return amount; }
    public String getCustomerName() { return customerName; }
}
",code_defect,swallowed_exception_leading_to_data_loss,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

class DataProcessor {
public:
    DataProcessor() {
        // Initialize with default values
        initialized = true;
    }

    void process(const std::string& input) {
        if (input.empty()) {
            return;
        }

        // Process input
        std::vector<std::string> tokens;
        std::string token;
        for (char c : input) {
            if (c == ' ') {
                if (!token.empty()) {
                    tokens.push_back(token);
                    token.clear();
                }
            } else {
                token.push_back(c);
            }
        }

        if (!token.empty()) {
            tokens.push_back(token);
        }

        for (const std::string& t : tokens) {
            std::cout << ""Token: "" << t << std::endl;
        }
    }

    void printStats() {
        std::cout << ""DataProcessor is initialized."" << std::endl;
    }

private:
    bool initialized;
};

int main() {
    DataProcessor dp;
    dp.process(""Hello world this is a test"");
    dp.printStats();
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserProcessor {
         constructor(userDatabase) {
            this.userDatabase = userDatabase;
         }

         async processUsers() {
            const users = await this.userDatabase.getAllUsers();
            const processedUsers = [];

            for (let i = 0; i < users.length; i++) {
               const user = users[i];
               user.processed = true;
               processedUsers.push(user);
            }

            return processedUsers;
         }

         async saveUsers() {
            const users = await this.processUsers();
            await this.userDatabase.saveAllUsers(users);
         }
      }

      class UserDatabase {
         async getAllUsers() {
            // Simulating a database call
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' }
            ];
         }

         async saveAllUsers(users) {
            // Simulating a database call
            console.log('Users saved:', users);
         }
      }

      const userDatabase = new UserDatabase();
      const userProcessor = new UserProcessor(userDatabase);
      userProcessor.saveUsers();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserProfileManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def save_user(self, username, profile_dict):
        # Serialize profile to JSON and store as TEXT
        profile_json = json.dumps(profile_dict)
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, data) VALUES (?, ?)', (username, profile_json))
        self.conn.commit()

    def load_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            # BUG: Using eval on stored JSON string can execute arbitrary code
            return eval(row[0])
        return None

    def close(self):
        self.conn.close()

# Example usage (not part of production code)
if __name__ == '__main__':
    manager = UserProfileManager('users.db')
    manager.save_user('alice', {'age': 30, 'email': 'alice@example.com'})
    profile = manager.load_user('alice')
    print('Loaded profile:', profile)
    manager.close()",code_defect,unsafe_deserialization_using_eval,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

void processUserInput(std::vector<int>& input) {
    std::vector<int> processedData;

    for (size_t i = 0; i < input.size(); ++i) {
        int value = input[i];
        if (value % 2 == 0) {
            processedData.push_back(value);
        }
    }

    std::sort(processedData.begin(), processedData.end());

    for (const auto& item : processedData) {
        std::cout << item << ""\n"";
    }
}

int main() {
    std::vector<int> input = {4, 7, 2, 9, 10, 8};
    processUserInput(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"import json, os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = {}
        self.load()

    def load(self):
        # NOTE: Using eval on file content – insecure!
        with open(self.config_path, 'r') as f:
            data = f.read()
        self._config = eval(data)  # unsafe deserialization

    def get(self, key, default=None):
        return self._config.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)
        self.output_dir = self.config.get('output_dir', '/tmp')

    def process(self, records):
        # Process records in batches but off‑by‑one error in slicing
        for i in range(0, len(records), self.batch_size):
            batch = records[i:i+self.batch_size-1]
            self._save_batch(batch)

    def _save_batch(self, batch):
        os.makedirs(self.output_dir, exist_ok=True)
        out_path = os.path.join(self.output_dir, f'batch_{batch[0][""id""]}.json')
        with open(out_path, 'w') as f:
            json.dump(batch, f)

# Example usage (would be called elsewhere)
loader = ConfigLoader('config.cfg')
processor = DataProcessor(loader)
processor.process([{'id': i, 'value': i*2} for i in range(250)])",code_defect,unsafe_deserialization_and_off_by_one_error,,openai/gpt-oss-120b
Python,"import random

class DataProcessor:
    def __init__(self):
        self._cache = {}

    def process_data(self, data):
        processed = []
        for item in data:
            processed_item = self._process_item(item)
            processed.append(processed_item)
        return processed

    def _process_item(self, item):
        if item in self._cache:
            return self._cache[item]
        result = self._do_heavy_computation(item)
        self._cache[item] = result
        return result

    def _do_heavy_computation(self, item):
        # Simulate heavy computation
        return random.choice([item.upper(), item.lower()])

    def cleanup_cache(self):
        self._cache.clear()

    def get_cache(self):
        return self._cache

# Example usage
data = ['Apple', 'Banana', 'Cherry']
processor = DataProcessor()
processed = processor.process_data(data)
print(processed)",code_smell,large_class,,qwen/qwen3-32b
C++,"#include <vector>
#include <string>
#include <iostream>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : filename(file) {}
    void load() {
        // Simulate reading lines from a file into entries
        for (int i = 0; i < 100; ++i) {
            entries.push_back(""Entry "" + std::to_string(i));
        }
    }
    std::string getEntry(int index) const {
        // BUG: off‑by‑one, should be index < entries.size()
        if (index >= 0 && index <= entries.size()) {
            return entries[index];
        }
        return """";
    }
    void printRange(int start, int count) const {
        for (int i = start; i < start + count; ++i) {
            std::cout << getEntry(i) << std::endl;
        }
    }
private:
    std::string filename;
    std::vector<std::string> entries;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.load();
    lp.printRange(95, 10); // Triggers out‑of‑bounds access
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    DataProcessor() {}
    void process(std::vector<std::string>& data) {
        for (auto& item : data) {
            if (!item.empty()) {
                item = preprocess(item);
                if (validate(item)) {
                    transform(item);
                }
            }
        }
    }

private:
    std::string preprocess(std::string& input) {
        std::string result;
        for (char c : input) {
            if (c != ' ') {
                result += c;
            }
        }
        return result;
    }

    bool validate(std::string& input) {
        return input.length() > 0;
    }

    void transform(std::string& input) {
        std::cout << ""Processed: "" << input << std::endl;
    }
};",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   
   class UserService {
   public:
       std::vector<std::string> getAllUsers() {
           std::vector<std::string> users;
           for (int i = 0; i < 1000000; i++) {
               users.push_back(""User"" + std::to_string(i));
           }
           return users;
       }
   };
   
   int main() {
       UserService userService;
       std::vector<std::string> users = userService.getAllUsers();
       for (const auto& user : users) {
           std::cout << user << std::endl;
       }
       return 0;
   }
   ",code_smell,inefficient_memory_usage,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserCache {
  constructor(filePath) {
    this.filePath = filePath;
    this.cache = {};
    this.load();
  }

  load() {
    // Synchronously read the JSON file; if the file is large this blocks the event loop
    const data = fs.readFileSync(this.filePath, 'utf8');
    this.cache = JSON.parse(data);
  }

  getUser(id) {
    // Returns a reference to the cached object; callers can mutate it inadvertently
    return this.cache[id];
  }

  save() {
    // Writes the entire cache back to disk; no error handling
    const data = JSON.stringify(this.cache);
    fs.writeFileSync(this.filePath, data);
  }
}

// Usage example
const userCache = new UserCache('./users.json');
const user = userCache.getUser('123');
user.lastLogin = new Date(); // Mutates cached data without calling save()
// Missing call to userCache.save(); leads to data loss on restart
",code_defect,missing_persistence_due_to_mutable_cache,,openai/gpt-oss-120b
Python,"import json
import requests

def fetch_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return None

def process_user_data(user_data):
    if not user_data:
        return

    user_name = user_data.get('name', 'Unknown')
    email = user_data.get('email', 'No email provided')
    created_at = user_data.get('created_at')

    # Legacy code that may be removed in the future
    # if user_data.get('is_deleted'):
    #     return 'Deleted user'

    # Complex nested condition logic
    if created_at:
        if len(created_at) > 10:
            formatted_date = created_at[:10]
        else:
            formatted_date = created_at
    else:
        formatted_date = 'N/A'

    return {
        'name': user_name,
        'email': email,
        'created_at': formatted_date
    }

# Unused function
# def unused_function():
#     pass

if __name__ == '__main__':
    user_id = '12345'
    user_info = fetch_user_data(user_id)
    processed_data = process_user_data(user_info)
    print(json.dumps(processed_data, indent=2))",code_smell,"large_function, commented_out_code, dead_code",,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, username, password):
        if username in self.users:
            return False
        self.users[username] = password
        with open(self.db_file, 'a') as f:
            f.write(f'{username}:{password}\n')
        return True

    def check_password(self, username, password):
        if username not in self.users:
            return False
        stored_password = self.users[username]
        return stored_password == password

    def get_all_users(self):
        return list(self.users.keys())

# Usage
user_db = UserDatabase('users.txt')
user_db.add_user('john', 'hello123')
print(user_db.check_password('john', 'hello123'))  # True
print(user_db.get_all_users())  # ['john']",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> fetchPendingTransactions() throws SQLException {
        List<String> ids = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT transaction_id FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            ids.add(rs.getString(""transaction_id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return ids;
    }

    public void processAll() {
        try {
            List<String> pending = fetchPendingTransactions();
            for (String txId : pending) {
                processTransaction(txId);
            }
        } catch (SQLException e) {
            // Swallow exception, lose error info
        }
    }

    private void processTransaction(String transactionId) {
        // Simulate processing logic
        if (transactionId == null) {
            return; // silently ignore
        }
        // Update status without transaction management
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String updateSql = ""UPDATE transactions SET status='COMPLETED' WHERE transaction_id='"" + transactionId + ""'""; // SQL injection risk
            PreparedStatement stmt = conn.prepareStatement(updateSql);
            stmt.executeUpdate();
            stmt.close();
            conn.close();
        } catch (SQLException e) {
            // ignore failures
        }
    }
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
JavaScript,"class UserSession {
  constructor(userId, token) {
    this.userId = userId;
    this.token = token;
    this.expiresAt = Date.now() + 3600000;
  }

  isValid() {
    return this.userId && this.token && this.expiresAt > Date.now();
  }

  refreshSession(newToken) {
    this.token = newToken;
    this.expiresAt = Date.now() + 3600000;
    console.log('Session refreshed for user:', this.userId);
  }

  getUserId() {
    return this.userId;
  }

  clearSession() {
    this.userId = null;
    this.token = null;
    this.expiresAt = null;
  }
}

// Example usage
const session = new UserSession('user123', 'abcxyz123');
if (session.isValid()) {
  console.log('User session is valid');
} else {
  console.log('User session is invalid');
}

session.refreshSession('newtokenxyz');
console.log('User ID:', session.getUserId());

session.clearSession();
console.log('Session cleared');",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async getUsers() {
            const users = await this.userDao.findAll();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async getUserById(id) {
            const user = await this.userDao.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return { id: user.id, name: user.name };
         }
      }

      class UserDao {
         async findAll() {
            // Assume a database query
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' }
            ];
         }

         async findById(id) {
            // Assume a database query
            const users = await this.findAll();
            return users.find(user => user.id === id);
         }
      }

      const userDao = new UserDao();
      const userService = new UserService(userDao);
      (async () => {
         const users = await userService.getUsers();
         console.log(users);
      })();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path='users.db'):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data_dict):
        # Directly serialize user-provided dict into JSON and store
        data_json = json.dumps(data_dict)
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, data) VALUES (?, ?)', (username, data_json))
        self.conn.commit()

    def get_user_data(self, username):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            # Unsafe deserialization using eval
            return eval(row[0])
        return None

    def delete_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage (would be in production code)
manager = UserManager()
manager.add_user('alice', {'role': 'admin', 'active': True})
user_data = manager.get_user_data('alice')
print('Loaded user data:', user_data)
manager.delete_user('alice')",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor() {
        this.orders = new ArrayList<>();
    }

    public void addOrder(Order order) {
        this.orders.add(order);
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.getTotalPrice() > 1000) {
                applyDiscount(order);
                sendEmail(order);
            }
        }
    }

    private void applyDiscount(Order order) {
        double discountedPrice = order.getTotalPrice() * 0.9;
        order.setTotalPrice(discountedPrice);
    }

    private void sendEmail(Order order) {
        String emailContent = ""Order processed: "" + order.getId() + "" with total price: "" + order.getTotalPrice();
        EmailService.send(emailContent);
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class PaymentProcessor { constructor(paymentGateway) { this.paymentGateway = paymentGateway; } processPayment(amount, callback) { let paymentResult; if (amount > 0) { paymentResult = this.paymentGateway.chargeCard(amount); } else { paymentResult = 'Invalid amount'; } callback(paymentResult); } } class PaymentGateway { chargeCard(amount) { return 'Payment of ' + amount + ' processed'; } } const paymentGateway = new PaymentGateway(); const paymentProcessor = new PaymentProcessor(paymentGateway); paymentProcessor.processPayment(100, (result) => { console.log(result); });",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> None:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        conn.commit()
        conn.close()

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cursor.fetchall()
        conn.close()
        # Off‑by‑one bug: should return rows[:page_size] but slicing is omitted, leading to extra rows when LIMIT is ignored
        return [dict(id=row[0], username=row[1], email=row[2]) for row in rows]

# Example usage
repo = UserRepository('example.db')
for i in range(25):
    repo.add_user(f'user{i}', f'user{i}@example.com')

# Intended to fetch the third page (users 21‑30), but due to off‑by‑one logic it may return unexpected results
page3 = repo.get_users_page(3, page_size=10)
print('Page 3 users:', page3)
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import requests

class UserAuth:
    def __init__(self):
        self.token = None
        self.base_url = 'https://api.example.com'

    def login(self, username, password):
        login_url = f'{self.base_url}/login'
        payload = {'username': username, 'password': password}
        response = requests.post(login_url, data=payload)
        if response.status_code == 200:
            self.token = response.json().get('token')
        return self.token

    def get_user_profile(self):
        if not self.token:
            return None
        headers = {'Authorization': f'Bearer {self.token}'}
        profile_url = f'{self.base_url}/user/profile'
        response = requests.get(profile_url, headers=headers)
        if response.status_code == 200:
            return response.json()
        return None

    def get_user_profile_v2(self):
        if not self.token:
            return None
        headers = {'Authorization': f'Bearer {self.token}'}
        profile_url = f'{self.base_url}/user/profile'
        response = requests.get(profile_url, headers=headers)
        if response.status_code == 200:
            return response.json()
        return None

    def get_user_profile_v3(self):
        if not self.token:
            return None
        headers = {'Authorization': f'Bearer {self.token}'}
        profile_url = f'{self.base_url}/user/profile'
        response = requests.get(profile_url, headers=headers)
        if response.status_code == 200:
            return response.json()
        return None",code_smell,duplicate_code,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   #include <algorithm>

   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };

   class UserService {
   public:
       void addUser(User user) { users.push_back(user); }
       User getUserByName(std::string name) {
           for (User user : users) {
               if (user.getName() == name) {
                   return user;
               }
           }
           // if user is not found, return the first user in the list
           return users[0];
       }
   private:
       std::vector<User> users;
   };

   int main() {
       UserService service;
       service.addUser(User(""John"", 30));
       service.addUser(User(""Alice"", 25));
       User user = service.getUserByName(""John"");
       std::cout << user.getName() << std::endl;
       return 0;
   }
   ",code_defect,incorrect conditional logic,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file for each call
    getUserProfile(userId) {
        // Bad practice: synchronous file write inside request path
        const user = this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        const profile = {
            id: user.id,
            name: user.name,
            email: user.email,
            // ... many more fields
        };
        // Inefficient: writing entire profile to a log on every request
        fs.writeFileSync('/var/log/user_profiles.log', JSON.stringify(profile) + '\n', { flag: 'a' });
        return profile;
    }

    // Large method doing multiple responsibilities
    updateUser(userId, data) {
        // Validate input (very shallow)
        if (!data.name || !data.email) {
            throw new Error('Invalid data');
        }
        // Update DB
        this.db.execute('UPDATE users SET name = ?, email = ? WHERE id = ?', [data.name, data.email, userId]);
        // Send notification (synchronous, blocks thread)
        const notification = `User ${userId} updated`;
        fs.writeFileSync('/var/log/notifications.log', notification + '\n', { flag: 'a' });
        // Return updated profile (re-fetch whole record)
        return this.getUserProfile(userId);
    }
}

module.exports = UserService;",code_smell,inefficient_io_and_large_method,,openai/gpt-oss-120b
Python,"import sqlite3

class UserAuth:
    def __init__(self):
        self.conn = sqlite3.connect('users.db')
        self.cursor = self.conn.cursor()

    def authenticate(self, username, password):
        query = f""SELECT * FROM users WHERE username = '{username}' AND password = '{password}'""
        self.cursor.execute(query)
        result = self.cursor.fetchone()
        return result is not None

    def add_user(self, username, password):
        query = f""INSERT INTO users (username, password) VALUES ('{username}', '{password}')""
        self.cursor.execute(query)
        self.conn.commit()

    def close(self):
        self.conn.close()

# Example usage:
if __name__ == ""__main__"":
    auth = UserAuth()
    auth.add_user('admin', 'supersecretpassword')
    print(auth.authenticate('admin', 'supersecretpassword'))
    auth.close()",code_defect,security_vulnerability,,qwen/qwen3-32b
Java,"public class OrderProcessor { private static final int MAX_ORDERS = 100; private List<Order> orders = new ArrayList<>(); public void addOrder(Order order) { if (orders.size() < MAX_ORDERS) { orders.add(order); } } public List<Order> getOrders() { return orders; } public void processOrders() { for (Order order : orders) { System.out.println(""Processing order: "" + order.getId()); try { Thread.sleep(1000); } catch (InterruptedException e) { } } } }",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data):
        cursor = self.conn.cursor()
        # Directly interpolating user input into SQL – SQL injection risk
        cursor.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')"")
        self.conn.commit()

    def get_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute(f""SELECT data FROM users WHERE username = '{username}'"")
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def close(self):
        self.conn.close()

# Example usage
if __name__ == '__main__':
    manager = UserManager(os.getenv('DB_PATH', ':memory:'))
    manager.add_user('admin', {'role': 'superuser', 'token': 'SECRET_TOKEN'})
    user_data = manager.get_user('admin')
    print('Loaded user data:', user_data)
    manager.close()",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import requests
import json

class DataProcessor:
    def __init__(self, url):
        self.url = url
        self.data = None

    def fetch_data(self):
        response = requests.get(self.url)
        if response.status_code == 200:
            self.data = response.json()
        
    def process_data(self):
        results = []
        for item in self.data:
            processed = {
                'id': item['id'],
                'name': item['name'].upper(),
                'value': item['value'] * 2
            }
            results.append(processed)
        return results

    def save_results(self, filename='output.json'):
        with open(filename, 'w') as f:
            json.dump(self.process_data(), f)

if __name__ == '__main__':
    processor = DataProcessor('https://api.example.com/data')
    processor.fetch_data()
    processor.save_results()",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAccountManager {
    private static Map<String, String> userAccounts = new HashMap<>();
    public synchronized void addUser(String username, String password) {
        if (!userAccounts.containsKey(username)) {
            userAccounts.put(username, password);
        }
    }
    public synchronized boolean authenticateUser(String username, String password) {
        return userAccounts.containsKey(username) && userAccounts.get(username).equals(password);
    }
    public static void main(String[] args) {
        UserAccountManager manager = new UserAccountManager();
        manager.addUser(""admin"", ""password123"");
        System.out.println(manager.authenticateUser(""admin"", ""password123""));
    }
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(int id) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(id);
    }
private:
    void process() {
        while (!stopFlag) {
            int id = -1;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    id = queue.front();
                    queue.erase(queue.begin());
                }
            }
            if (id != -1) {
                // Simulate processing
                std::cout << ""Processing log "" << id << std::endl;
            }
        }
    }
    std::vector<int> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(i);
    }
    // Missing lp.stop(); leads to thread running forever
    return 0;
}
",code_defect,resource_leak_thread_not_joined,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUser(String name, String email, String address, String phone, String dob) {
        if (name == null || email == null || address == null || phone == null || dob == null) {
            throw new IllegalArgumentException(""All fields must be provided"");
        }

        // Hardcoded database URL and credentials
        String dbUrl = ""jdbc:mysql://localhost:3306/users_db"";
        String dbUser = ""admin"";
        String dbPass = ""password123!"";

        // Simulated user creation logic
        if (isValidEmail(email)) {
            System.out.println(""Creating user: "" + name);
            System.out.println(""Email validated and ready for registration."");
        } else {
            System.out.println(""Invalid email provided. User not created."");
        }

        // Unused imports and variables
        String unusedVariable = ""This is not used anywhere"";
    }

    private boolean isValidEmail(String email) {
        return email.matches(""[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"");
    }
}",code_smell,hardcoded_configuration,,qwen/qwen3-32b
Java,public class UserService { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUserById(int id) { for (User user : users) { if (user.getId() == id) { return user; } } return null; } public void removeUserById(int id) { for (User user : users) { if (user.getId() == id) { users.remove(user); break; } } } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>

class LogManager {
public:
    void log(const std::string& level, const std::string& message) {
        std::lock_guard<std::mutex> lock(mutex_);
        // Simple file logging (omitted actual file I/O for brevity)
        std::cout << ""["" << level << ""] "" << message << std::endl;
    }
private:
    std::mutex mutex_;
};

class UserService {
public:
    UserService(LogManager& logger) : logger_(logger) {}

    // Returns true if the user is authorized for the given action
    bool isAuthorized(int userId, const std::string& action) {
        // Simulated permission check (placeholder logic)
        return (userId % 2) == 0; // BUG: grants access to all even IDs regardless of action
    }

    void performAction(int userId, const std::string& action) {
        if (!isAuthorized(userId, action)) {
            logger_.log(""WARN"", ""Unauthorized access attempt by user "" + std::to_string(userId));
            return;
        }
        // Critical section that modifies shared state without proper synchronization
        data_.push_back(action);
        logger_.log(""INFO"", ""User "" + std::to_string(userId) + "" performed "" + action);
    }

private:
    LogManager& logger_;
    std::vector<std::string> data_; // not thread‑safe
};

int main() {
    LogManager logger;
    UserService service(logger);
    // Simulate concurrent requests (simplified, no actual threads here)
    service.performAction(2, ""delete_all_records""); // Should be denied but passes due to bug
    service.performAction(3, ""view_report"");
    return 0;
}",code_defect,logic_error_authorization_bypass_and_thread_unsafe_state,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    DataProcessor() {}

    void process(const std::string& input) {
        std::vector<std::string> tokens = tokenize(input);
        if (tokens.empty()) {
            return;
        }
        std::string result = """";
        for (const auto& token : tokens) {
            result += processToken(token);
        }
        std::cout << result << std::endl;
    }

private:
    std::vector<std::string> tokenize(const std::string& input) {
        std::vector<std::string> tokens;
        std::string token;
        for (const auto& ch : input) {
            if (ch == ' ') {
                if (!token.empty()) {
                    tokens.push_back(token);
                    token.clear();
                }
            } else {
                token += ch;
            }
        }
        if (!token.empty()) {
            tokens.push_back(token);
        }
        return tokens;
    }

    std::string processToken(const std::string& token) {
        std::string processed = token;
        for (auto& ch : processed) {
            if (ch >= 'a' && ch <= 'z') {
                ch = ch - 32;
            }
        }
        return processed;
    }
};

int main() {
    DataProcessor dp;
    dp.process(""hello world"");
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
        self.verified = False
    def verify_account(self, verification_code):
        if verification_code == '12345':
            self.verified = True
        return self.verified",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data):
        cursor = self.conn.cursor()
        # Directly interpolating user input into SQL – SQL injection risk
        cursor.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')"")
        self.conn.commit()

    def get_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT username, data FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            username, data_json = row
            # Unsafe deserialization using eval – code execution risk
            data = eval(data_json)
            return {'id': user_id, 'username': username, 'data': data}
        return None

    def close(self):
        self.conn.close()

# Example usage (would be removed in production)
if __name__ == '__main__':
    manager = UserManager('users.db')
    manager.add_user('alice', {'role': 'admin', 'prefs': {'theme': 'dark'}})
    user = manager.get_user(1)
    print(user)
    manager.close()",code_defect,SQL_injection_and_unsafe_deserialization,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor() {
    this.cache = {};
  }

  async processUser(userId) {
    if (this.cache[userId]) {
      return this.cache[userId];
    }

    const user = await this.fetchUserFromDatabase(userId);
    const enrichedUser = this.enrichUser(user);

    // Cache the enriched user
    this.cache[userId] = enrichedUser;

    return enrichedUser;
  }

  async fetchUserFromDatabase(userId) {
    // Simulating a DB call
    return new Promise(resolve => {
      setTimeout(() => resolve({ id: userId, name: 'John Doe' }), 100);
    });
  }

  enrichUser(user) {
    // Enriching user data
    user.role = 'customer';
    user.status = 'active';
    return user;
  }

  clearCache() {
    this.cache = {};
  }
}

// Example usage
const processor = new UserProcessor();
processor.processUser(123).then(user => {
  console.log(user);
});",code_smell,lack_of_error_handling,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getUserById(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               return null;
            }
            const roles = [];
            for (const role of user.roles) {
               roles.push(role.name);
            }
            user.roles = roles;
            return user;
         }
      }

      class UserRepository {
         async findById(id) {
            // simulate a database query
            return {
               id: 1,
               name: 'John Doe',
               roles: [
                  { name: 'admin' },
                  { name: 'moderator' }
               ]
            };
         }
      }

      const userRepository = new UserRepository();
      const userService = new UserService(userRepository);
      userService.getUserById(1).then(user => console.log(user));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            std::string msg;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    msg = queue.front();
                    queue.erase(queue.begin());
                }
            }
            // Process message without checking if msg is empty
            std::cout << ""Processing: "" << msg << std::endl;
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(""Message "" + std::to_string(i));
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    lp.stop();
    return 0;
}
",code_defect,logic_error_due_to_unchecked_empty_queue,,openai/gpt-oss-120b
Python,"import requests
import json
import time

def fetch_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    headers = {'Authorization': 'Bearer my_hardcoded_token'}
    
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        user_data = json.loads(response.text)
        
        # Legacy code commented out
        # user_data = parse_user_data(user_data)
        
        print(f'User {user_id} fetched successfully')
        return user_data
    else:
        print(f'Failed to fetch user {user_id} (Status Code: {response.status_code})')
        return None

# Unused function
def parse_user_data(data):
    processed = {
        'name': data.get('name', 'N/A'),
        'email': data.get('email', 'N/A')
    }
    return processed

# Unused variable
MAX_RETRIES = 3

if __name__ == '__main__':
    user_id = 123
    user_data = fetch_user_data(user_id)
    
    # Dead code
    # print(f'Processed user: {parse_user_data(user_data)}')
    
    time.sleep(1)",code_smell,"hardcoded_token, dead_code, unused_function, commented_out_code",,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final int MAX_RETRIES = 5; public void processPayment(String paymentId, double amount) { for (int i = 0; i < MAX_RETRIES; i++) { try { if (chargeCard(paymentId, amount)) { System.out.println(""Payment successful""); return; } } catch (Exception e) { System.out.println(""Retry "" + (i + 1) + "": "" + e.getMessage()); } } System.out.println(""Payment failed after "" + MAX_RETRIES + "" retries""); } private boolean chargeCard(String paymentId, double amount) { // simulate a 50% chance of failure return Math.random() < 0.5; }}",code_smell,magic_number,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            std::string msg;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    msg = queue.back(); // BUG: should pop from front
                    queue.pop_back();
                }
            }
            if (!msg.empty()) {
                // Simulate processing
                std::cout << ""Processed: "" << msg << std::endl;
            }
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(""msg"" + std::to_string(i));
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    lp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
Python,"import os
import sqlite3

class UserManager:
    def __init__(self):
        self.conn = sqlite3.connect('users.db')
        self.cursor = self.conn.cursor()
        self._create_table()

    def _create_table(self):
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                email TEXT NOT NULL,
                role TEXT NOT NULL
            )''')
        self.conn.commit()

    def add_user(self, name, email, role):
        self.cursor.execute('''
            INSERT INTO users (name, email, role)
            VALUES (?, ?, ?)''', (name, email, role))
        self.conn.commit()

    def get_users_by_role(self, role):
        self.cursor.execute('''
            SELECT * FROM users WHERE role = ?''', (role,))
        return self.cursor.fetchall()

    def __del__(self):
        self.conn.close()

# Example usage
if __name__ == '__main__':
    manager = UserManager()
    manager.add_user('Alice', 'alice@example.com', 'admin')
    manager.add_user('Bob', 'bob@example.com', 'user')
    print(manager.get_users_by_role('admin'))",code_defect,resource_leak,,qwen/qwen3-32b
JavaScript,"
   class UserService {
     constructor() {
       this.users = [];
     }

     async addUser(user) {
       this.users.push(user);
       await this.persistUsers();
     }

     async persistUsers() {
       const fs = require('fs').promises;
       await fs.writeFile('users.json', JSON.stringify(this.users));
     }

     async getUsers() {
       if (this.users.length === 0) {
         const fs = require('fs').promises;
         const data = await fs.readFile('users.json', 'utf8');
         this.users = JSON.parse(data);
       }
       return this.users;
     }
   }

   const userService = new UserService();
   (async () => {
     await userService.addUser({ id: 1, name: 'John Doe' });
     const users = await userService.getUsers();
     console.log(users);
   })();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.config = {}
        self._load()

    def _load(self):
        # Insecure: directly eval the config file content
        with open(self.config_path, 'r') as f:
            data = f.read()
            self.config = eval(data)  # unsafe deserialization

    def get(self, key, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.db_conn_str = config_loader.get('DB_CONN')
        self.batch_size = config_loader.get('BATCH_SIZE', 100)
        self._connect()

    def _connect(self):
        # Placeholder for DB connection using insecure string
        self.conn = self.db_conn_str  # mock connection

    def process_items(self, items):
        results = []
        for i in range(0, len(items), self.batch_size):
            batch = items[i:i+self.batch_size]
            # Simulate processing each batch
            for item in batch:
                results.append(self._process_item(item))
        return results

    def _process_item(self, item):
        # Potential division by zero error if item['value'] is 0
        return item['id'] * 100 / item['value']

if __name__ == '__main__':
    loader = ConfigLoader('config.cfg')
    processor = DataProcessor(loader)
    sample_data = [{'id': i, 'value': i-5} for i in range(10)]
    print(processor.process_items(sample_data))
",code_defect,unsafe_deserialization_and_division_by_zero,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private String config = ""dev"";

    public void processUser(String userId) {
        if (userId == null || userId.isEmpty()) {
            System.out.println(""Invalid user ID"");
            return;
        }

        if (config.equals(""prod"")) {
            System.out.println(""Processing in production mode"");
        } else {
            System.out.println(""Processing in development mode"");
        }

        String userRole = getUserRoleFromDB(userId);
        if (userRole != null && userRole.equalsIgnoreCase(""admin"")) {
            grantAdminAccess();
        } else {
            grantUserAccess();
        }
    }

    private String getUserRoleFromDB(String userId) {
        // Simulating a database call
        return ""admin"";
    }

    private void grantAdminAccess() {
        System.out.println(""Admin access granted"");
    }

    private void grantUserAccess() {
        System.out.println(""User access granted"");
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"const fs = require('fs');

class ReportGenerator {
    constructor(templatePath, dataSource) {
        this.templatePath = templatePath;
        this.dataSource = dataSource;
        this.cache = {};
    }

    // Loads template from disk each time, ignoring cache
    loadTemplate() {
        const content = fs.readFileSync(this.templatePath, 'utf8');
        return content;
    }

    // Generates report for a list of user IDs
    generate(userIds) {
        let reports = [];
        for (let i = 0; i < userIds.length; i++) {
            const userId = userIds[i];
            const userData = this.dataSource.getUserData(userId);
            const template = this.loadTemplate(); // inefficiency: reads file on every iteration
            let report = template.replace(/{{name}}/g, userData.name)
                                 .replace(/{{email}}/g, userData.email);
            // Append extra info, but forget to sanitize input
            report += `\nNotes: ${userData.notes}`;
            reports.push(report);
        }
        return reports;
    }
}

module.exports = ReportGenerator;",code_smell,inefficient_file_io_and_missing_input_sanitization,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrders(List<Order> orders) {
        for (Order order : orders) {
            if (order != null) {
                if (order.getStatus() == OrderStatus.PENDING) {
                    if (order.getItems() != null && !order.getItems().isEmpty()) {
                        for (Item item : order.getItems()) {
                            if (item != null) {
                                if (item.getPrice() > 0 && item.getQuantity() > 0) {
                                    double total = item.getPrice() * item.getQuantity();
                                    System.out.println(""Processing item "" + item.getId() + "" with total: "" + total);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public static void main(String[] args) {
        OrderProcessor processor = new OrderProcessor();
        List<Order> orders = new ArrayList<>();
        // Assume orders are populated here
        processor.processOrders(orders);
    }
}",code_smell,long_method,,qwen/qwen3-32b
Java,public class UserAuthenticator { private String passwordHash; public UserAuthenticator(String passwordHash) { this.passwordHash = passwordHash; } public boolean authenticate(String inputPassword) { String hashedInput = hashPassword(inputPassword); for (int i = 0; i < 100000; i++) { if (hashedInput.equals(passwordHash)) { return true; } } return false; } private String hashPassword(String password) { return password; } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""root"";
    private static final String DB_PASS = ""password"";

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT payment_id FROM payments WHERE status = 'PENDING' LIMIT "" + limit;
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        // Missing close of ResultSet, Statement, and Connection leads to resource leak
        return payments;
    }

    public boolean processPayment(String paymentId, double amount) {
        // Assume some complex logic here
        if (amount <= 0) {
            throw new IllegalArgumentException(""Amount must be positive"");
        }
        // Vulnerable to SQL injection if paymentId is not sanitized elsewhere
        String sql = ""UPDATE payments SET status='COMPLETED', amount="" + amount + "" WHERE payment_id='"" + paymentId + ""'"";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            int rows = stmt.executeUpdate();
            return rows == 1;
        } catch (SQLException e) {
            // Swallowing exception, no logging
            return false;
        }
    }

    public static void main(String[] args) throws Exception {
        PaymentProcessor processor = new PaymentProcessor();
        List<String> pending = processor.getPendingPayments(10);
        for (String pid : pending) {
            // Simulate processing with a fixed amount
            boolean success = processor.processPayment(pid, 100.0);
            System.out.println(""Processed "" + pid + "": "" + success);
        }
    }
}
",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

void processData(vector<string>& data, int mode) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (mode == 1) {
            cout << data[i] << endl;
        } else if (mode == 2) {
            for (size_t j = 0; j < data[i].length(); ++j) {
                cout << data[i][j] << endl;
            }
        } else {
            cout << ""Invalid mode"" << endl;
        }
    }
}

int main() {
    vector<string> input = {""example1"", ""example2""};
    int configMode = 3;
    
    processData(input, configMode);

    return 0;
}",code_defect,incorrect conditional logic,,qwen/qwen3-32b
Java,"public class UserProcessor { private static final Map<String, User> users = new HashMap<>(); public synchronized void addUser(String id, User user) { users.put(id, user); } public synchronized User getUser(String id) { return users.get(id); } public void processUsers() { for (User user : users.values()) { System.out.println(user.getName()); } } } class User { private String name; public User(String name) { this.name = name; } public String getName() { return name; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String role) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // vulnerable to SQL injection
            String sql = ""SELECT email FROM users WHERE role = '"" + role + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order != null) {
                if (order.getStatus().equals(""PENDING"")) {
                    if (order.getTotal() > 0) {
                        String paymentStatus = processPayment(order);
                        if (paymentStatus.equals(""SUCCESS"")) {
                            order.setStatus(""PROCESSED"");
                        } else {
                            order.setStatus(""FAILED"");
                        }
                    }
                }
            }
        }
    }

    private String processPayment(Order order) {
        // Simulated payment processing logic
        if (order.getTotal() <= 0) {
            return ""FAILURE"";
        }
        return ""SUCCESS"";
    }
}",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
   class UserService {
       constructor(userDao) {
           this.userDao = userDao;
       }

       async getUser(id) {
           return this.userDao.findById(id);
       }

       async getUsers() {
           const users = await this.userDao.findAll();
           return users.map(user => ({ id: user.id, name: user.name }));
       }
   }

   class UserDao {
       async findById(id) {
           // assume db connection
           return { id: 1, name: 'John Doe' };
       }

       async findAll() {
           // assume db connection
           return [{ id: 1, name: 'John Doe' }, { id: 2, name: 'Jane Doe' }];
       }
   }

   const userDao = new UserDao();
   const userService = new UserService(userDao);
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""P@ssw0rd!""; // hardcoded secret

    public List<Transaction> fetchPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction tx = new Transaction();
            tx.setId(rs.getInt(""id""));
            tx.setAmount(rs.getDouble(""amount""));
            tx.setStatus(rs.getString(""status""));
            list.add(tx);
        }
        // Missing rs.close(), stmt.close(), conn.close()
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = fetchPendingTransactions();
            for (Transaction tx : pending) {
                // Simulate processing delay
                Thread.sleep(100);
                updateTransactionStatus(tx.getId(), ""COMPLETED"");
            }
        } catch (Exception e) {
            // Swallow exception, no logging
        }
    }

    private void updateTransactionStatus(int id, String newStatus) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String sql = ""UPDATE transactions SET status = ? WHERE id = "" + id; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, newStatus);
        stmt.executeUpdate();
        // Missing stmt.close(), conn.close()
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
Python,"import os
import json
import requests

API_KEY = '1234567890'


def fetch_weather_data(city, unit='metric'):
    url = f'https://api.weatherapi.com/v1/current.json?key={API_KEY}&q={city}&units={unit}'
    response = requests.get(url)
    
    if response.status_code == 200:
        return json.loads(response.text)
    else:
        return None


def display_weather(data):
    if data:
        city = data['location']['name']
        temp = data['current']['temp_c']
        print(f'Current temperature in {city} is {temp}°C.')
    else:
        print('Failed to fetch weather data.')


def main():
    city = input('Enter city name: ')
    weather_data = fetch_weather_data(city)
    display_weather(weather_data)

if __name__ == '__main__':
    main()",code_defect,hardcoded_secrets,,qwen/qwen3-32b
Python,"
class PaymentProcessor:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def process_payment(self, payment_data):
        payment_id = payment_data['payment_id']
        amount = payment_data['amount']
        for _ in range(10):
            try:
                self.db_connection.execute('INSERT INTO payments (payment_id, amount) VALUES (%s, %s)', (payment_id, amount))
                break
            except Exception as e:
                if _ == 9:
                    raise e
        return payment_id

    def get_payment_status(self, payment_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT status FROM payments WHERE payment_id = %s', (payment_id,))
        status = cursor.fetchone()
        if status is None:
            return 'NOT_FOUND'
        return status[0]
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_schema()

    def _ensure_schema(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, email):
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()
        return cursor.lastrowid

    def get_users_page(self, page_number, page_size=20):
        """"""Return a list of users for the given page number.
        Page numbers start at 1.
        """"""
        offset = (page_number - 1) * page_size
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cursor.fetchall()
        # BUG: Off‑by‑one error – returns one extra record when page_number is 1
        if page_number == 1:
            rows = rows[:-1]
        return [dict(id=r[0], username=r[1], email=r[2]) for r in rows]

# Example usage (not part of production code)
if __name__ == '__main__':
    repo = UserRepository(':memory:')
    for i in range(1, 51):
        repo.add_user(f'user{i}', f'user{i}@example.com')
    first_page = repo.get_users_page(1)
    print('First page user count:', len(first_page))",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

void processUserInput(const string& input) {
    vector<string> tokens;
    size_t pos = 0;
    string token;

    while ((pos = input.find("" "")) != string::npos) {
        token = input.substr(0, pos);
        tokens.push_back(token);
        input.erase(0, pos + 1);
    }
    tokens.push_back(input);

    for (const auto& t : tokens) {
        cout << t << endl;
    }
}

int main() {
    string user_input;
    getline(cin, user_input);
    processUserInput(user_input);
    return 0;
}",code_defect,unintended_behavior,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, account_number, balance=0.0):
        self.account_number = account_number
        self.balance = balance
        self.transaction_history = []

    def deposit(self, amount):
        self.balance += amount
        self.transaction_history.append(f'Deposited ${amount:.2f}')

    def withdraw(self, amount):
        if amount > self.balance:
            self.transaction_history.append(f'Withdrawal of ${amount:.2f} failed: Insufficient funds')
        else:
            self.balance -= amount
            self.transaction_history.append(f'Withdrew ${amount:.2f}')

    def get_balance(self):
        return self.balance

    def get_transaction_history(self):
        return self.transaction_history

account = BankAccount('1234567890', 1000.0)
account.deposit(500.0)
account.withdraw(200.0)
print(account.get_balance())
print(account.get_transaction_history())",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self) -> None:
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> int:
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        conn.commit()
        user_id = cur.lastrowid
        conn.close()
        return user_id

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cur.fetchall()
        conn.close()
        return [
            {'id': row[0], 'username': row[1], 'email': row[2]}
            for row in rows
        ]

# Usage example (buggy when page is 0)
repo = UserRepository('app.db')
repo.add_user('alice', 'alice@example.com')
repo.add_user('bob', 'bob@example.com')
print(repo.get_users_page(0))  # Off-by-one: should raise or handle invalid page
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserService {

    public void processUserRequest(String userId, String action) {
        if (action.equals(""login"")) {
            validateUser(userId);
            authenticateUser(userId);
        } else if (action.equals(""logout"")) {
            deauthenticateUser(userId);
        } else if (action.equals(""delete"")) {
            validateUser(userId);
            deleteUser(userId);
            deauthenticateUser(userId);
        }

        if (userId == null || userId.isEmpty()) {
            log.warn(""Empty userId provided"");
            return;
        }

        if (action.equals(""login"")) {
            System.out.println(""User "" + userId + "" logged in"");
        } else if (action.equals(""logout"")) {
            System.out.println(""User "" + userId + "" logged out"");
        } else if (action.equals(""delete"")) {
            System.out.println(""User "" + userId + "" deleted"");
        }
    }

    private void validateUser(String userId) {
        if (userId == null || userId.length() < 3) {
            throw new IllegalArgumentException(""Invalid userId"");
        }
    }

    private void authenticateUser(String userId) {
        System.out.println(""Authenticating user..."");
    }

    private void deauthenticateUser(String userId) {
        System.out.println(""Deauthenticating user..."");
    }

    private void deleteUser(String userId) {
        System.out.println(""Deleting user..."");
    }
}",code_smell,duplicated_code,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    std::string name;
    int salary;
    Employee(std::string n, int s) : name(n), salary(s) {}
};

class Company {
private:
    std::vector<Employee> employees;
public:
    void addEmployee(Employee e) { employees.push_back(e); }
    void sortEmployees() {
        std::sort(employees.begin(), employees.end(), [](Employee a, Employee b) { return a.salary < b.salary; });
    }
    void printEmployees() {
        for (auto& e : employees) {
            std::cout << e.name << "" - "" << e.salary << std::endl;
        }
    }
};

int main() {
    Company c;
    c.addEmployee(Employee(""John"", 50000));
    c.addEmployee(Employee(""Alice"", 60000));
    c.addEmployee(Employee(""Bob"", 40000));
    c.sortEmployees();
    c.printEmployees();
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
    this.maxRetries = 3;
  }

  async process(orderId) {
    const order = await this.db.getOrder(orderId);
    if (!order) throw new Error('Order not found');

    // Update inventory synchronously (bug: not awaiting async call)
    this.updateInventory(order.items);

    // Save order status
    await this.db.updateOrderStatus(orderId, 'processed');
    return true;
  }

  async updateInventory(items) {
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      // Asynchronously decrement stock but forget to await
      this.db.decrementStock(item.productId, item.quantity);
    }
  }
}

module.exports = OrderProcessor;",code_defect,missing_await_on_async_calls,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users || [];
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  deleteUserByEmail(email) {
    const index = this.users.findIndex(user => user.email === email);
    if (index !== -1) {
      this.users.splice(index, 1);
    }
  }

  updateUserRole(email, newRole) {
    const user = this.getUserByEmail(email);
    if (user) {
      user.role = newRole;
    }
  }

  getAllUsers() {
    return this.users;
  }
}

const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com', role: 'user' },
  { id: 2, name: 'Bob', email: 'bob@example.com', role: 'admin' }
];

const userManager = new UserManager(users);
userManager.updateUserRole('alice@example.com', 'admin');",clean_code,well_structured,,qwen/qwen3-32b
