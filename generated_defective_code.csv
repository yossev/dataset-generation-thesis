language,code_snippet,smell_or_defect,type_of_defect_or_smell,static_analysis,model
Python,"import sqlite3

def get_user_page(db_path, page, page_size=20):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    offset = page * page_size  # Bug: should be (page-1)*page_size for 1-indexed pages
    cursor.execute('SELECT id, name FROM users LIMIT ? OFFSET ?', (page_size, offset))
    rows = cursor.fetchall()
    conn.close()
    return [{'id': r[0], 'name': r[1]} for r in rows]

# Example usage
if __name__ == '__main__':
    users = get_user_page('app.db', 1)
    for u in users:
        print(u)",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json

CONFIG = None

def load_config():
    global CONFIG
    config_path = 'config.json'
    with open(config_path, 'r') as f:
        CONFIG = json.load(f)


def process_data(data):
    if not data:
        return
    processed = []
    for item in data:
        item['id'] = item['id'].strip()
        processed.append(item)
    return processed


def save_to_file(output, filename='output.txt'):
    with open(filename, 'w') as f:
        for line in output:
            f.write(str(line) + '\n')


def main():
    load_config()
    data = [{'id': ' 123 ', 'name': 'Alice'}, {'id': ' 456 ', 'name': 'Bob'}]
    processed_data = process_data(data)
    save_to_file(processed_data)

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   const userService = {
     users: [],
     addUser: function(username, password) {
       this.users.push({ username, password });
     },
     authenticate: function(username, password) {
       for (let i = 0; i < this.users.length; i++) {
         if (this.users[i].username === username) {
           if (this.users[i].password === password) {
             return true;
           }
         }
       }
       return false;
     }
   };

   userService.addUser('admin', 'password123');
   console.log(userService.authenticate('admin', 'password123'));",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    bool removeUser(const std::string& name) {
        for (size_t i = 0; i <= users.size(); ++i) { // off‑by‑one error
            if (users[i] == name) {
                users.erase(users.begin() + i);
                return true;
            }
        }
        return false;
    }

    void printAll() const {
        for (const auto& u : users) {
            std::cout << u << std::endl;
        }
    }
private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.removeUser(""charlie""); // attempts to remove non‑existent user
    um.printAll();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::vector<std::string> processInputs(const std::vector<std::string>& inputs) {
    std::vector<std::string> results;
    for (const auto& input : inputs) {
        std::string processed = input;
        if (input.size() > 100) {
            processed.resize(100);
        }
        
        for (int i = 0; i < 100; ++i) {
            for (int j = 0; j < 100; ++j) {
                processed += 'a';
            }
        }

        results.push_back(processed);
    }
    return results;
}

int main() {
    std::vector<std::string> inputs = { ""example1"", ""example2"" };
    auto output = processInputs(inputs);
    for (const auto& item : output) {
        std::cout << item << std::endl;
    }
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Person {
public:
    string name;
    int age;
    Person(string n, int a) : name(n), age(a) {}
};

class PersonDatabase {
private:
    vector<Person> people;
public:
    void addPerson(Person p) { people.push_back(p); }
    void sortByName() { sort(people.begin(), people.end(), [](Person a, Person b) { return a.name < b.name; }); }
    void printPeople() {
        for (Person p : people) {
            cout << p.name << "" is "" << p.age << "" years old."" << endl;
        }
    }
};

int main() {
    PersonDatabase db;
    db.addPerson(Person(""John"", 30));
    db.addPerson(Person(""Alice"", 25));
    db.sortByName();
    db.printPeople();
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.*;

public class UserService {
    private Connection getConnection() throws SQLException {
        // In real code, use a connection pool
        return DriverManager.getConnection(""jdbc:mysql://localhost:3306/app"", ""user"", ""password"");
    }

    public boolean authenticate(String username, String password) {
        String query = ""SELECT count(*) FROM users WHERE username='"" + username + ""' AND password='"" + password + ""'"";
        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
}
",code_defect,SQL_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processData(const std::vector<std::string>& data) {
    for (const auto& item : data) {
        std::string temp = item;
        for (size_t i = 0; i < temp.length(); ++i) {
            temp[i] = toupper(temp[i]);
        }
        std::cout << temp << std::endl;
    }
}

int main() {
    std::vector<std::string> input = {""example"", ""input"", ""data""};
    processData(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username.equals(""admin"")) {
            return password.equals(DEFAULT_PASSWORD);
        } else {
            // simulate a delay for other users
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            return password.equals(DEFAULT_PASSWORD);
        }
    }
}",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"public class DiscountCalculator {
    public double calculateTotal(double[] prices, double discountRate) {
        double sum = 0.0;
        for (int i = 0; i <= prices.length; i++) { // off‑by‑one error
            sum += prices[i];
        }
        return sum * (1 - discountRate);
    }
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # Unsafe deserialization: using eval on file content
        with open(self.config_path, 'r') as f:
            data = f.read()
            self.settings = eval(data)  # code_defect: unsafe eval

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)

    def process(self, items):
        results = []
        for i in range(0, len(items), self.batch_size):
            batch = items[i:i + self.batch_size]
            results.extend(self._process_batch(batch))
        return results

    def _process_batch(self, batch):
        # Simulate processing
        return [self._transform(item) for item in batch]

    def _transform(self, item):
        # Potential off-by-one error: using len-1 instead of proper index
        if isinstance(item, dict) and 'value' in item:
            return item['value'] * 2
        return None

# Usage example (would be in separate module)
config = ConfigLoader(os.getenv('APP_CONFIG', 'config.txt'))
processor = DataProcessor(config)
input_data = [{'value': i} for i in range(250)]
output = processor.process(input_data)
print(json.dumps(output))",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    void process(const std::vector<int>& input) {
        for (size_t i = 0; i < input.size(); ++i) {
            if (input[i] % 2 == 0) {
                std::cout << input[i] << "" is even\n"";
            }
            else {
                std::cout << input[i] << "" is odd\n"";
            }
        }
    }
};

int main() {
    DataProcessor dp;
    std::vector<int> data = { 1, 2, 3, 4, 5 };
    dp.process(data);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger LOGGER = LoggerFactory.getLogger(UserService.class); public void saveUser(String username, String password, String email) { try { User user = new User(); user.setUsername(username); user.setPassword(password); user.setEmail(email); if (username.length() > 10) { LOGGER.info(""Username is longer than 10 characters""); } else { LOGGER.info(""Username is 10 characters or less""); } UserRepository userRepository = new UserRepository(); userRepository.save(user); } catch (Exception e) { LOGGER.error(""Error saving user"", e); } } }",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <fstream>
#include <iostream>

class ConfigLoader {
public:
    ConfigLoader(const std::string& path) : filePath(path) {}
    std::vector<std::string> loadLines() {
        std::ifstream file(filePath);
        std::vector<std::string> lines;
        std::string line;
        while (std::getline(file, line)) {
            lines.push_back(line);
        }
        return lines;
    }
private:
    std::string filePath;
};

class DataProcessor {
public:
    void process(const std::vector<std::string>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            if (data[i].empty()) continue;
            // pretend processing
            std::cout << ""Processing: "" << data[i] << std::endl;
        }
    }
};

int main() {
    ConfigLoader loader(""config.txt"");
    auto lines = loader.loadLines();
    DataProcessor processor;
    processor.process(lines);
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, logger) {
    this.users = users;
    this.logger = logger;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user && user.isActive) {
        this.logger.log(`Processing user: ${user.id}`);
        this._updateUserStatus(user);
        this._sendWelcomeEmail(user);
        this._logUserMetrics(user);
      }
    });
  }

  _updateUserStatus(user) {
    user.status = 'processed';
  }

  _sendWelcomeEmail(user) {
    // Simulate email sending
    console.log(`Email sent to ${user.email}`);
  }

  _logUserMetrics(user) {
    // Simulate metrics logging
    console.log(`User ${user.id} metrics logged`);
  }
}

// Unused method
doSomethingElse = () => {
  console.log('This is never used');
};",code_smell,dead_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

private:
    std::string name;
    int salary;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }

    Employee getHighestPaidEmployee() {
        if (employees.empty()) {
            return Employee("""", 0);
        }
        return *std::max_element(employees.begin(), employees.end(),
            [](const Employee& a, const Employee& b) { return a.getSalary() < b.getSalary(); });
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 50000));
    manager.addEmployee(Employee(""Alice"", 60000));
    Employee highestPaid = manager.getHighestPaidEmployee();
    std::cout << ""Highest paid employee: "" << highestPaid.getName() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public User findUserById(int userId) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
        return null;
    }
}

class User {
    private int id;
    private String username;
    private String email;
    public void setId(int id) { this.id = id; }
    public void setUsername(String username) { this.username = username; }
    public void setEmail(String email) { this.email = email; }
    // getters omitted for brevity
}
",code_defect,SQL injection due to string concatenation and hardcoded credentials,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.userRoles = ['admin', 'editor', 'viewer'];
  }

  authenticateUser(username, password, role) {
    if (username === 'admin' && password === 'securepassword123' && this.userRoles.includes(role)) {
      return true;
    } else {
      return false;
    }
  }

  checkAccessLevel(userRole, requiredRole) {
    const rolePriority = {
      admin: 3,
      editor: 2,
      viewer: 1
    };

    return rolePriority[userRole] >= rolePriority[requiredRole];
  }

  grantAccess(user, requiredRole) {
    if (this.authenticateUser(user.username, user.password, user.role)) {
      if (this.checkAccessLevel(user.role, requiredRole)) {
        console.log('Access granted');
        return true;
      } else {
        console.log('Access denied due to insufficient role');
        return false;
      }
    } else {
      console.log('Authentication failed');
      return false;
    }
  }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <string>
using namespace std;

class User {
public:
    User(string name, string password) {
        this->name = name;
        this->password = password;
    }

    string getName() { return name; }
    string getPassword() { return password; }

private:
    string name;
    string password;
};

class UserService {
public:
    UserService() {
        users.push_back(User(""admin"", ""password123""));
    }

    void addUser(string name, string password) {
        users.push_back(User(name, password));
    }

    User* getUserByName(string name) {
        for (int i = 0; i < users.size(); i++) {
            if (users[i].getName() == name) {
                return &users[i];
            }
        }
        return nullptr;
    }

private:
    vector<User> users;
};

int main() {
    UserService userService;
    userService.addUser(""user1"", ""pass123"");
    User* user = userService.getUserByName(""admin"");
    if (user != nullptr) {
        cout << user->getName() << endl;
        cout << user->getPassword() << endl;
    }
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class UserManager {
public:
    void addUser(const std::string& name, int age) {
        users_.push_back({name, age});
    }

    // Returns the average age of all users
    double averageAge() const {
        if (users_.empty()) return 0.0;
        int total = 0;
        for (size_t i = 0; i <= users_.size(); ++i) { // off‑by‑one error
            total += users_[i].age;
        }
        return static_cast<double>(total) / users_.size();
    }

private:
    struct User { std::string name; int age; };
    std::vector<User> users_;
};

int main() {
    UserManager um;
    um.addUser(""Alice"", 30);
    um.addUser(""Bob"", 25);
    std::cout << ""Average age: "" << um.averageAge() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUserData(String username, String role, String... permissions) {
        if (username == null || role == null || permissions.length == 0) {
            return;
        }

        System.out.println(""Processing user: "" + username);
        System.out.println(""Role: "" + role);

        for (String permission : permissions) {
            if (permission.contains(""admin"")) {
                System.out.println(""Granting admin access... "");
                // Simulate some processing
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } else {
                System.out.println(""Granting basic access for: "" + permission);
            }
        }

        // Legacy code, not used anymore
        // assignDefaultPermissions(username);
    }

    // Unused method
    private void assignDefaultPermissions(String username) {
        System.out.println(""Assigning default permissions to "" + username);
    }
}",code_smell,dead_code,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password
        else:
            print('User already exists')

    def authenticate(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def get_all_users(self):
        return list(self.users.keys())

    def save_to_file(self):
        with open(self.db_file, 'w') as f:
            for username, password in self.users.items():
                f.write(f'{username}:{password}\n')

    def load_from_file(self):
        try:
            with open(self.db_file, 'r') as f:
                for line in f.readlines():
                    username, password = line.strip().split(':')
                    self.users[username] = password
        except FileNotFoundError:
            pass

    def __del__(self):
        self.save_to_file()
",code_smell,Tight Coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Returns user profile data
  async getUserProfile(userId) {
    // Missing validation: userId could be undefined or malicious
    const query = `SELECT * FROM users WHERE id = ${userId}`; // SQL injection risk
    const result = await this.db.query(query);
    if (!result || result.length === 0) {
      return null;
    }
    const user = result[0];
    // Improper handling of async file read, forgetting await
    const avatarPath = `/avatars/${user.avatar}`;
    const avatarData = fs.readFileSync(avatarPath, 'utf8'); // blocks event loop
    user.avatarData = avatarData;
    return user;
  }
}

module.exports = UserService;",code_defect,SQL_injection_and_blocking_io,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

void processData(vector<string> data) {
    for (size_t i = 0; i < data.size(); ++i) {
        string processed = data[i];
        for (size_t j = 0; j < processed.length(); ++j) {
            processed[j] = toupper(processed[j]);
        }
        cout << processed << endl;
    }
}

int main() {
    vector<string> input = {""example"", ""data"", ""to"", ""process""};
    processData(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class UserProcessor { constructor(users) { this.users = users; } processUsers() { for (let i = 0; i < this.users.length; i++) { const user = this.users[i]; if (user.isActive) { console.log(user.name); } } } } const users = [{ name: 'John', isActive: true }, { name: 'Alice', isActive: false }]; const processor = new UserProcessor(users); processor.processUsers();",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class UserManager {
public:
    void addUser(const std::string& name, int age) {
        users_.push_back({name, age});
    }

    // Returns the average age of all users
    double averageAge() const {
        if (users_.empty()) return 0.0;
        int total = 0;
        for (size_t i = 0; i <= users_.size(); ++i) { // BUG: off‑by‑one, may read past end
            total += users_[i].age;
        }
        return static_cast<double>(total) / users_.size();
    }

    void printAll() const {
        for (const auto& u : users_) {
            std::cout << u.name << "": "" << u.age << ""\n"";
        }
    }

private:
    struct User {
        std::string name;
        int age;
    };
    std::vector<User> users_;
};

int main() {
    UserManager mgr;
    mgr.addUser(""Alice"", 30);
    mgr.addUser(""Bob"", 25);
    mgr.addUser(""Charlie"", 35);
    std::cout << ""Average age: "" << mgr.averageAge() << std::endl;
    mgr.printAll();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (i != j && data[i] == data[j]) {
                std::cout << ""Duplicate found: "" << data[i] << std::endl;
            }
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 2, 4, 5, 1};
    processData(input);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUser(id) { let user = await this.userDao.getUser(id); if (user) { let roles = await this.userDao.getUserRoles(id); user.roles = roles; } return user; } async getUsers() { return await this.userDao.getUsers(); } },code_smell,Tight Coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<User> findUsersByRole(String role) {
        List<User> users = new ArrayList<>();
        String sql = ""SELECT id, username, email FROM users WHERE role = '"" + role + ""'""; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                User u = new User();
                u.setId(rs.getInt(""id""));
                u.setUsername(rs.getString(""username""));
                u.setEmail(rs.getString(""email""));
                users.add(u);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection vulnerability and hardcoded credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

struct User {
    std::string name;
    int age;
    std::string email;
};

bool validateEmail(const std::string& email) {
    if (email.find('@') != std::string::npos) {
        return true;
    }
    return false;
}

void processUser(const User& user) {
    if (user.age < 0) {
        std::cout << ""Invalid age for user "" << user.name << std::endl;
        return;
    }

    if (!validateEmail(user.email)) {
        std::cout << ""Invalid email for user "" << user.name << std::endl;
        return;
    }

    std::cout << ""Valid user: "" << user.name << std::endl;
}

int main() {
    std::vector<User> users = {
        {""Alice"", 30, ""alice@example.com""},
        {""Bob"", -5, ""bob@example.com""},
        {""Charlie"", 25, ""charlieexample.com""}
    };

    for (const auto& user : users) {
        processUser(user);
    }

    return 0;
}",code_defect,incorrect conditional logic,,qwen/qwen3-32b
Java,"public class UserValidator {
    public boolean validateUser(String username, String password) {
        if (username.length() > 5 && password.length() > 8) {
            return true;
        }
        return false;
    }
}",code_smell,magic_numbers,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Reads JSON config file synchronously each call
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) {
      this.load();
    }
    return this.cache[key];
  }
}

// Usage in a web server
const http = require('http');
const config = new ConfigLoader('./config.json');

http.createServer((req, res) => {
  // Vulnerable: directly uses query param in file path
  const file = req.url.split('?')[1];
  const content = fs.readFileSync(`./public/${file}`);
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end(content);
}).listen(8080);",code_defect,path_traversal_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

std::string formatData(std::string input, int id, bool flag) {
    std::string result = input;
    if (id > 0) {
        result += ""_"" + std::to_string(id);
    }
    if (flag) {
        result += ""_FLAG"";
    }
    return result;
}

int main() {
    std::string user_input = ""DATA123"";
    int user_id = 42;
    bool is_active = true;

    std::string formatted = formatData(user_input, user_id, is_active);
    std::cout << formatted << std::endl;
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private String apiKey; public UserAuthenticator(String apiKey) { this.apiKey = apiKey; } public boolean authenticateUser(String username, String password) { if (username.equals(""admin"") && password.equals(""password123"")) { return true; } else { return false; } } public void saveApiKeyToFile() { try { java.io.FileWriter writer = new java.io.FileWriter(""api_key.txt""); writer.write(apiKey); writer.close(); } catch (java.io.IOException e) { System.out.println(""Error saving API key""); } } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
  }

  // Process a batch of orders and update inventory
  async processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      const product = await this.db.getProduct(order.productId);
      // BUG: Missing check for sufficient stock leads to negative inventory
      product.stock -= order.quantity;
      await this.db.updateProduct(product);
      await this.db.saveOrder(order);
    }
    // Return success without verifying all updates succeeded
    return true;
  }
}

module.exports = OrderProcessor;",code_defect,logic_error,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

def process_user_data(data):
    user_info = {}
    for key, value in data.items():
        if key == 'name':
            user_info['username'] = value
        elif key == 'email':
            user_info['email'] = value
        elif key == 'created_at':
            user_info['registration_date'] = datetime.strptime(value, '%Y-%m-%d')
        elif key == 'is_active':
            user_info['status'] = 'active' if value else 'inactive'
    return user_info

def save_user_info(user_info, filename='user_data.json'):
    try:
        if os.path.exists(filename):
            with open(filename, 'r') as f:
                existing_users = json.load(f)
        else:
            existing_users = []n
        existing_users.append(user_info)

        with open(filename, 'w') as f:
            json.dump(existing_users, f, indent=2)
    except Exception as e:
        print(f""Error saving user info: {e}"")


def main():
    raw_data = {
        'name': 'John Doe',
        'email': 'johndoe@example.com',
        'created_at': '2024-01-15',
        'is_active': True
    }

    processed = process_user_data(raw_data)
    save_user_info(processed)

if __name__ == '__main__':
    main()",code_smell,poor_error_handling,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None
        self._load()

    def _load(self):
        # NOTE: using eval on file content is unsafe
        with open(self.config_path, 'r') as f:
            data = f.read()
        self._config = eval(data)  # code defect: unsafe deserialization

    def get(self, key, default=None):
        return self._config.get(key, default)

class UserService:
    def __init__(self, db):
        self.db = db

    def create_user(self, username, password):
        # Simple password storage without hashing
        query = f""INSERT INTO users (username, password) VALUES ('{username}', '{password}')""
        self.db.execute(query)
        logger.info(""User %s created"", username)

    def get_user(self, user_id):
        rows = self.db.query(f""SELECT * FROM users WHERE id = {user_id}"")
        if rows:
            return rows[0]
        return None

class Database:
    def __init__(self, conn_str):
        self.conn_str = conn_str
        self._connect()

    def _connect(self):
        # Placeholder for actual DB connection
        self.connected = True

    def execute(self, sql):
        if not self.connected:
            raise RuntimeError(""Not connected"")
        # Simulate execution
        logger.debug(""Executing SQL: %s"", sql)

    def query(self, sql):
        if not self.connected:
            raise RuntimeError(""Not connected"")
        logger.debug(""Querying SQL: %s"", sql)
        return []

if __name__ == ""__main__"":
    cfg = ConfigLoader(os.getenv('APP_CONFIG', 'config.cfg'))
    db = Database(cfg.get('db_connection'))
    service = UserService(db)
    service.create_user('alice', 'password123')
    user = service.get_user(1)
    print(user)",code_defect,unsafe_deserialization_and_sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <cmath>

// Function to calculate the average of a vector of numbers
double calculateAverage(const std::vector<double>& data) {
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += data[i];
    }
    return sum / data.size();
}

// Function to calculate standard deviation
// This function is poorly structured and inefficient
// It recalculates the average twice
// It also has a nested loop for variance calculation that can be optimized
void calculateStandardDeviation(const std::vector<double>& data) {
    double average = calculateAverage(data);
    double variance = 0.0;

    // First loop to calculate average again
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += data[i];
    }
    double avg = sum / data.size();

    // Second loop to calculate variance
    for (size_t i = 0; i < data.size(); ++i) {
        variance += (data[i] - avg) * (data[i] - avg);
    }

    double stdDev = sqrt(variance / data.size());
    std::cout << ""Standard Deviation: "" << stdDev << std::endl;
}

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    calculateStandardDeviation(data);
    return 0;
}",code_smell,inefficient_code,,qwen/qwen3-32b
JavaScript,"
      class UserValidator {
         validateUser(user) {
            if (user.username && user.password) {
               if (user.username.length > 5 && user.password.length > 8) {
                  return true;
               } else {
                  return false;
               }
            } else {
               return false;
            }
         }
      }

      function authenticateUser(username, password) {
         const validator = new UserValidator();
         const user = { username, password };
         if (validator.validateUser(user)) {
            // simulate authentication delay
            const startTime = new Date().getTime();
            while (new Date().getTime() < startTime + 1000) {}
            return true;
         } else {
            return false;
         }
      }

      const username = 'testuser';
      const password = 'testpassword123';
      const isValid = authenticateUser(username, password);
      console.log(isValid);
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user info and writes a log file for each call
    getUserData(userId) {
        // Bad practice: synchronous file write inside request handling
        const user = this.db.query(`SELECT * FROM users WHERE id = ${userId}`);
        if (!user) {
            throw new Error('User not found');
        }
        const logEntry = `${new Date().toISOString()} - Fetched user ${userId}\n`;
        fs.appendFileSync('user_fetch.log', logEntry);
        return user;
    }

    // Updates user email without validation and builds SQL via string concatenation
    updateUserEmail(userId, newEmail) {
        const sql = ""UPDATE users SET email='"" + newEmail + ""' WHERE id="" + userId;
        this.db.execute(sql);
    }
}

// Usage example (tight coupling with concrete DB implementation)
const db = {
    query: (q) => {
        // mock result
        return { id: 1, name: 'Alice', email: 'alice@example.com' };
    },
    execute: (sql) => {
        console.log('Executing SQL:', sql);
    }
};

const service = new UserService(db);
service.getUserData(1);
service.updateUserEmail(1, 'new.email@example.com');",code_smell,tight_coupling_and_sql_injection_risk,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, logger) {
    this.users = users;
    this.logger = logger;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user.status === 'active') {
        this.logger.log(`User ${user.id} is active`);
        this.sendWelcomeEmail(user);
      } else {
        this.logger.log(`User ${user.id} is not active`);
      }
    });
  }

  sendWelcomeEmail(user) {
    this.logger.log(`Sending email to user ${user.email}`);
    // Simulate email sending logic
  }

  validateUser(user) {
    return user && user.email && user.status;
  }

  getUserDetails(user) {
    return {
      name: user.name,
      email: user.email,
      status: user.status
    };
  }
}

module.exports = UserProcessor;",code_smell,god_class,,qwen/qwen3-32b
Python,"class PaymentProcessor:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def process_payment(self, payment_amount, user_id):
        query = ""SELECT balance FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_balance = cursor.fetchone()[0]
        if user_balance >= payment_amount:
            new_balance = user_balance - payment_amount
            query = ""UPDATE users SET balance = "" + str(new_balance) + "" WHERE id = "" + str(user_id)
            cursor.execute(query)
            self.db_connection.commit()
            return True
        else:
            return False",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path

    def _connect(self):
        return sqlite3.connect(self.db_path)

    def get_users_page(self, page: int, page_size: int = 20):
        """"""Return a list of users for the given page number.
        Page numbers start at 1.
        """"""
        offset = (page - 1) * page_size
        # BUG: off‑by‑one error – should be LIMIT page_size OFFSET offset
        query = f""SELECT id, name, email FROM users LIMIT {offset}, {page_size}""
        conn = self._connect()
        try:
            cursor = conn.cursor()
            cursor.execute(query)
            rows = cursor.fetchall()
            return [{""id"": r[0], ""name"": r[1], ""email"": r[2]} for r in rows]
        finally:
            conn.close()

    def add_user(self, name: str, email: str):
        conn = self._connect()
        try:
            cursor = conn.cursor()
            cursor.execute(
                ""INSERT INTO users (name, email) VALUES (?, ?)"",
                (name, email)
            )
            conn.commit()
        finally:
            conn.close()
",code_defect,off_by_one_error_in_sql_limit_offset,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    void process(const std::string& input, std::vector<int>& output) {
        if (input.empty()) {
            return;
        }

        for (size_t i = 0; i < input.length(); ++i) {
            if (input[i] >= '0' && input[i] <= '9') {
                int num = input[i] - '0';
                output.push_back(num);
            }
        }
    }
};

int main() {
    DataProcessor dp;
    std::string input = ""a1b2c3d"";
    std::vector<int> result;

    dp.process(input, result);

    for (int val : result) {
        std::cout << val << "" "";
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Employee {
public:
    string name;
    int salary;
    Employee(string n, int s) : name(n), salary(s) {}
};

bool compareEmployees(Employee e1, Employee e2) {
    return e1.salary < e2.salary;
}

void sortEmployees(vector<Employee>& employees) {
    sort(employees.begin(), employees.end(), compareEmployees);
}

int main() {
    vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
    sortEmployees(employees);
    for (Employee e : employees) {
        cout << e.name << "" "" << e.salary << endl;
    }
    return 0;
}",code_smell,long_parameter_list,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
    constructor(db) {
        this.db = db;
    }

    // Process a batch of orders, returns number of successful inserts
    async processOrders(orders) {
        let successCount = 0;
        for (let i = 0; i < orders.length; i++) {
            const order = orders[i];
            // Missing validation: assume order.amount is a number
            const total = order.amount * order.price; // defect: price may be undefined, resulting in NaN
            try {
                await this.db.insert('orders', {
                    userId: order.userId,
                    amount: order.amount,
                    price: order.price,
                    total: total,
                    createdAt: new Date()
                });
                successCount++;
            } catch (e) {
                console.error('Failed to insert order', e);
            }
        }
        return successCount;
    }
}

module.exports = OrderProcessor;",code_defect,incorrect_calculation_due_to_missing_validation,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private static final int MAX_RETRIES = 3;

    public void processUser(User user) {
        int retryCount = 0;
        boolean success = false;
        while (retryCount <= MAX_RETRIES) {
            try {
                validateUser(user);
                persistUser(user);
                sendEmailNotification(user.getEmail());
                success = true;
                break;
            } catch (Exception e) {
                retryCount++;
                System.out.println(""Error processing user. Retrying... "");
            }
        }
        if (!success) {
            System.out.println(""Failed to process user after "" + MAX_RETRIES + "" attempts."");
        }
    }

    private void validateUser(User user) {
        if (user.getName() == null || user.getName().isEmpty()) {
            throw new IllegalArgumentException(""Name is required"");
        }
        if (user.getEmail() == null || !user.getEmail().contains(""@"")) {
            throw new IllegalArgumentException(""Invalid email format"");
        }
    }

    private void persistUser(User user) {
        // Simulated database call
        if (Math.random() < 0.3) {
            throw new RuntimeException(""Database error"");
        }
    }

    private void sendEmailNotification(String email) {
        // Simulated email sending
        if (Math.random() < 0.2) {
            throw new RuntimeException(""Email could not be sent"");
        }
    }
}",code_smell,error_handling_and_logging,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private String passwordHash; public boolean authenticateUser(String username, String password) { String storedHash = getPasswordHashFromDatabase(username); if (storedHash != null && storedHash.equals(password)) { return true; } return false; } private String getPasswordHashFromDatabase(String username) { // simulate database query return ""hashed_password""; } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None

    def load(self):
        # Missing error handling for file not found or invalid JSON
        with open(self.config_path, 'r') as f:
            self._config = json.load(f)
        return self._config

    def get(self, key, default=None):
        return self._config.get(key, default)

class UserService:
    def __init__(self, db_connection_string):
        self.db_connection_string = db_connection_string
        self._connect()

    def _connect(self):
        # Simulated DB connection (placeholder)
        self.conn = self.db_connection_string

    def get_user(self, user_id):
        # Vulnerable to SQL injection because user_id is concatenated directly
        query = f""SELECT * FROM users WHERE id = {user_id}""
        # Placeholder for actual DB execution
        return self._execute_query(query)

    def _execute_query(self, query):
        # Mocked response
        return {""id"": 1, ""name"": ""Alice""}

def main():
    cfg = ConfigLoader('config.json')
    config = cfg.load()
    service = UserService(config.get('db_conn'))
    # Off-by-one error: loop runs one extra iteration
    for i in range(1, config.get('max_users', 10) + 1):
        user = service.get_user(i)
        print(f""User {i}: {user['name']}"")

if __name__ == '__main__':
    main()",code_defect,sql_injection_and_off_by_one,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, logger) {
    this.users = users;
    this.logger = logger;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user.status === 'active') {
        this.logger.log(`User ${user.id} is active`);
        this.sendEmail(user);
      } else {
        this.logger.log(`User ${user.id} is inactive`);
      }
    });
  }

  sendEmail(user) {
    // Simulate email sending logic
    this.logger.log(`Email sent to ${user.email}`);
  }

  validateUser(user) {
    if (!user.email) {
      this.logger.warn(`User ${user.id} has no email`);
      return false;
    }
    return true;
  }

  sendWelcomeEmail(user) {
    if (this.validateUser(user)) {
      this.sendEmail(user);
    }
  }
}

// Usage example
const users = [
  { id: 1, email: 'user1@example.com', status: 'active' },
  { id: 2, email: '', status: 'inactive' }
];

const logger = {
  log: (msg) => console.log(`[LOG] ${msg}`),
  warn: (msg) => console.warn(`[WARN] ${msg}`)
};

const processor = new UserProcessor(users, logger);
processor.processUsers();",code_smell,god_class,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email

    def save_to_database(self):
        import sqlite3
        conn = sqlite3.connect('user_database.db')
        c = conn.cursor()
        c.execute(""INSERT INTO users (username, password, email) VALUES (?, ?, ?)"", (self.username, self.password, self.email))
        conn.commit()
        conn.close()

    def verify_password(self, input_password):
        return self.password == input_password",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path='users.db'):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY,
                            username TEXT,
                            password TEXT)''')
        self.conn.commit()

    def add_user(self, username, password):
        # NOTE: password stored in plain text (security issue)
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, password))
        self.conn.commit()

    def authenticate(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute('SELECT password FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            stored_pw = row[0]
            # Bug: using 'is' instead of '==' for string comparison
            if stored_pw is password:
                return True
        return False

    def export_user_data(self, export_path):
        cursor = self.conn.cursor()
        cursor.execute('SELECT username, password FROM users')
        users = cursor.fetchall()
        # Insecure: writing raw passwords to JSON file
        with open(export_path, 'w') as f:
            json.dump([{'username': u, 'password': p} for u, p in users], f)

# Example usage
if __name__ == '__main__':
    manager = UserManager()
    manager.add_user('alice', 'secret123')
    print('Auth success:', manager.authenticate('alice', 'secret123'))
    manager.export_user_data('users_export.json')
",code_defect,incorrect_string_comparison_using_is,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    if (data[i].status === 'active') {
      let processedItem = {};
      processedItem.id = data[i].id;
      processedItem.name = data[i].name.toUpperCase();
      processedItem.value = data[i].value * 2;
      result.push(processedItem);
    }
  }
  return result;
}

function main() {
  const rawInput = [{ id: 1, name: 'alpha', value: 10, status: 'active' },
                   { id: 2, name: 'beta', value: 20, status: 'inactive' },
                   { id: 3, name: 'gamma', value: 30, status: 'active' }];
  const output = processData(rawInput);
  console.log(output);
}

main();",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class OrderProcessor:
    def __init__(self):
        self.orders = []

    def add_order(self, order_id, customer_id, total):
        order = {'id': order_id, 'customer_id': customer_id, 'total': total}
        self.orders.append(order)

    def get_total_orders_value(self):
        total = 0
        for order in self.orders:
            total += order['total']
        return total

    def get_average_order_value(self):
        if len(self.orders) == 0:
            return 0
        return self.get_total_orders_value() / len(self.orders)

processor = OrderProcessor()
processor.add_order(1, 1, 100)
processor.add_order(2, 1, 200)
processor.add_order(3, 2, 50)
print(processor.get_total_orders_value())
print(processor.get_average_order_value())
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <fstream>
#include <iostream>

class LogProcessor {
public:
    LogProcessor(const std::string& filePath) : path(filePath) {}
    void process() {
        std::ifstream in(path);
        if (!in) {
            std::cerr << ""Failed to open log file"" << std::endl;
            return;
        }
        std::string line;
        while (std::getline(in, line)) {
            if (line.empty()) continue;
            // Expect format: <timestamp> <level> <message>
            size_t firstSpace = line.find(' ');
            size_t secondSpace = line.find(' ', firstSpace + 1);
            if (firstSpace == std::string::npos || secondSpace == std::string::npos) continue;
            std::string level = line.substr(firstSpace + 1, secondSpace - firstSpace - 1);
            if (level == ""ERROR"") {
                errors.push_back(line);
            }
        }
        // BUG: off-by-one error, should be errors.size()
        for (size_t i = 0; i <= errors.size(); ++i) {
            std::cout << errors[i] << std::endl;
        }
    }
private:
    std::string path;
    std::vector<std::string> errors;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.process();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data) {
    int i = 0;
    while (i < data.size()) {
        if (data[i] % 2 == 0) {
            std::cout << data[i] << "" is even"" << std::endl;
        } else {
            std::cout << data[i] << "" is odd"" << std::endl;
        }
        i++;
    }
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6};
    processData(numbers);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, username, password):
        if user_id not in self.users:
            self.users[user_id] = {'username': username, 'password': password}
            return True
        return False

    def authenticate(self, user_id, password):
        if user_id in self.users and self.users[user_id]['password'] == password:
            return True
        return False

    def get_all_users(self):
        return list(self.users.keys())

    def remove_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
            return True
        return False

def main():
    manager = UserManager()
    manager.add_user('1', 'admin', 'password123')
    print(manager.authenticate('1', 'password123'))  # prints: True
    print(manager.get_all_users())  # prints: ['1']
    manager.remove_user('1')
    print(manager.get_all_users())  # prints: []

if __name__ == '__main__':
    main()
",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <algorithm>
#include <iostream>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    // Returns true if user exists
    bool hasUser(const std::string& name) const {
        return std::find(users.begin(), users.end(), name) != users.end();
    }

    // Returns the user at the given index (0‑based)
    std::string getUserAt(int index) const {
        // BUG: off‑by‑one error – should check index < users.size()
        if (index <= 0 || index > static_cast<int>(users.size())) {
            throw std::out_of_range(""Index out of range"");
        }
        return users[index];
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.addUser(""carol"");

    try {
        std::cout << um.getUserAt(0) << std::endl; // Unexpected exception due to bug
    } catch (const std::exception& e) {
        std::cerr << ""Error: "" << e.what() << std::endl;
    }
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  const data = input.split(',');
  let result = [];

  for (let i = 0; i < data.length; i++) {
    let item = data[i].trim();
    if (item.length > 0) {
      result.push(item);
    }
  }

  result = result.sort();

  const unique = [];
  for (let i = 0; i < result.length; i++) {
    if (unique.indexOf(result[i]) === -1) {
      unique.push(result[i]);
    }
  }

  return unique;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Java,"public class UserAccountManager { private Map<String, String> userAccounts = new HashMap<>(); public void addUser(String username, String password) { if (userAccounts.containsKey(username)) { System.out.println(""User already exists""); } else { userAccounts.put(username, password); } } public boolean authenticateUser(String username, String password) { return userAccounts.containsKey(username) && userAccounts.get(username).equals(password); } public void changePassword(String username, String newPassword) { if (userAccounts.containsKey(username)) { userAccounts.put(username, newPassword); } } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() = default;
    void addTransaction(const std::string& user, double amount) {
        std::lock_guard<std::mutex> lock(mtx_);
        balances_[user] += amount; // BUG: does not check for overflow or negative balance
    }
    double getBalance(const std::string& user) {
        std::lock_guard<std::mutex> lock(mtx_);
        return balances_[user];
    }
    void transfer(const std::string& from, const std::string& to, double amount) {
        // Incorrect order of locking leads to potential deadlock
        std::lock_guard<std::mutex> lockFrom(mtx_);
        std::lock_guard<std::mutex> lockTo(mtx_);
        if (balances_[from] >= amount) {
            balances_[from] -= amount;
            balances_[to] += amount;
        }
    }
private:
    std::mutex mtx_;
    std::unordered_map<std::string, double> balances_;
};

int main(){
    TransactionProcessor tp;
    tp.addTransaction(""alice"", 1000);
    tp.addTransaction(""bob"", 500);
    tp.transfer(""alice"", ""bob"", 200);
    std::cout << ""Alice balance: "" << tp.getBalance(""alice"") << std::endl;
    std::cout << ""Bob balance: "" << tp.getBalance(""bob"") << std::endl;
    return 0;
}",code_defect,deadlock_and_missing_validation,,openai/gpt-oss-120b
Python,"import os
import json

def process_user_data(user_id, data):
    user_data = json.loads(data)
    if 'name' not in user_data:
        user_data['name'] = 'Unknown'
    if 'age' not in user_data:
        user_data['age'] = 0
    if 'email' not in user_data:
        user_data['email'] = ''

    processed_data = {
        'user_id': user_id,
        'name': user_data['name'],
        'age': user_data['age'],
        'email': user_data['email'],
        'status': 'active'
    }

    return processed_data


def save_user_to_file(user_data):
    filename = f'{user_data['user_id']}.json'
    with open(filename, 'w') as f:
        json.dump(user_data, f)


def main():
    user_data_json = '{""name"": ""Alice"", ""age"": 30}'
    user_id = 123

    user_data = process_user_data(user_id, user_data_json)
    save_user_to_file(user_data)

if __name__ == '__main__':
    main()",code_smell,incomplete_data_handling,,qwen/qwen3-32b
C++,"#include <iostream>
#include <string>
#include <vector>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserService {
public:
    vector<User> users;
    void addUser(User u) { users.push_back(u); }
    User* getUserByName(string name) {
        for (User& u : users) {
            if (u.name == name) {
                return &u;
            }
        }
        return nullptr;
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User* user = service.getUserByName(""John"");
    if (user != nullptr) {
        cout << user->name << endl;
    }
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // JSON.parse can throw, but we ignore it
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function getUserSetting(userId) {
  const loader = new ConfigLoader('/etc/app/settings.json');
  const config = loader.load();
  // Assume settings are stored as {users: [{id:..., setting:...}, ...]}
  for (let i = 0; i <= config.users.length; i++) { // off‑by‑one error
    if (config.users[i].id === userId) {
      return config.users[i].setting;
    }
  }
  return null;
}

module.exports = { getUserSetting };",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import sqlite3

def get_user_data(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = f""SELECT * FROM users WHERE id = {user_id}""
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result

# Old version of function, kept for reference
def get_user_data_old(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = f""SELECT * FROM users WHERE id = {user_id}""
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result

if __name__ == ""__main__"":
    user = get_user_data(1)
    print(user)",code_smell,code_duplication,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class BankAccount {
public:
    BankAccount(double balance) : balance(balance) {}
    void deposit(double amount) { balance += amount; }
    void withdraw(double amount) { if (balance >= amount) balance -= amount; }
    double getBalance() { return balance; }
private:
    double balance;
};

int main() {
    BankAccount account(1000.0);
    account.deposit(500.0);
    account.withdraw(200.0);
    cout << ""Final balance: "" << account.getBalance() << endl;
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import logging
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

class UserRepository:
    def __init__(self, db_client):
        self.db = db_client

    def get_users(self, page: int = 1, page_size: int = 20) -> List[Dict[str, Any]]:
        """"""Fetch a page of users from the database.
        Note: page is 1-indexed.
        """"""
        offset = (page - 1) * page_size
        query = f""SELECT id, name, email FROM users LIMIT {page_size} OFFSET {offset}""
        rows = self.db.execute(query)
        return [dict(row) for row in rows]

    def get_user_by_id(self, user_id: int) -> Dict[str, Any]:
        query = f""SELECT id, name, email FROM users WHERE id = {user_id}""
        row = self.db.execute_one(query)
        return dict(row) if row else None

class UserService:
    def __init__(self, repository: UserRepository):
        self.repo = repository

    def list_active_users(self, page: int = 1, page_size: int = 20) -> str:
        users = self.repo.get_users(page, page_size)
        # BUG: Off‑by‑one error – should filter out inactive users before pagination
        active = [u for u in users if u.get('status') == 'active']
        return json.dumps(active)

    def get_user_profile(self, user_id: int) -> str:
        user = self.repo.get_user_by_id(user_id)
        if not user:
            logger.error(f""User {user_id} not found"")
            return json.dumps({""error"": ""User not found""})
        # Potential security issue: exposing email directly
        return json.dumps({""id"": user['id'], ""name"": user['name'], ""email"": user['email']})

# Example usage (would be in a different module)
# db_client = DatabaseClient(...)
# repo = UserRepository(db_client)
# service = UserService(repo)
# print(service.list_active_users(page=2, page_size=10))",code_defect,off_by_one_error_in_filtering,,openai/gpt-oss-120b
Python,"import os
import json

def process_user_data(file_path):
    with open(file_path, 'r') as f:
        data = json.load(f)

    for user in data['users']:
        if user['status'] == 'active':
            process_user_profile(user)

        if user['preferences']:
            update_user_settings(user)

    save_processed_data(data)

    return True

def process_user_profile(user):
    user['last_processed'] = 'now'

    if 'tags' in user:
        for tag in user['tags']:
            tag['processed'] = True

    return user

def update_user_settings(user):
    if 'theme' in user['preferences']:
        user['preferences']['theme'] = 'default' if user['preferences']['theme'] == 'dark' else 'dark'

    return user

def save_processed_data(data):
    output_path = os.path.join(os.getcwd(), 'processed_data.json')
    with open(output_path, 'w') as f:
        json.dump(data, f)

    return output_path",code_smell,long_function,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount > self.balance:
            self.balance -= amount
        else:
            self.balance -= amount
    def get_balance(self):
        return self.balance
account = BankAccount(100)
account.withdraw(50)
print(account.get_balance())",code_defect,incorrect conditional logic,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password):
        cursor = self.conn.cursor()
        # Direct string formatting leads to SQL injection vulnerability
        query = f""INSERT INTO users (username, password) VALUES ('{username}', '{password}')""
        cursor.execute(query)
        self.conn.commit()
        return cursor.lastrowid

    def find_user(self, username):
        cursor = self.conn.cursor()
        # Using parameterized query correctly here
        cursor.execute(""SELECT id, username FROM users WHERE username = ?"", (username,))
        return cursor.fetchone()

    def delete_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute(""DELETE FROM users WHERE id = ?"", (user_id,))
        self.conn.commit()

# Example usage
repo = UserRepository('app.db')
repo.add_user('admin', ""password123"")
print(repo.find_user('admin'))",code_defect,sql_injection,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  getUsersByRole(role) {
    const result = [];
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].role === role) {
        result.push(this.users[i]);
      }
    }
    return result;
  }

  deleteUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        this.users.splice(i, 1);
        break;
      }
    }
  }

  updateUsernameByEmail(email, newUsername) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        this.users[i].username = newUsername;
        break;
      }
    }
  }
}

const userManager = new UserManager();
userManager.addUser({ email: 'alice@example.com', username: 'alice', role: 'admin' });
userManager.addUser({ email: 'bob@example.com', username: 'bob', role: 'user' });",code_smell,large_class,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };
   class UserService {
   public:
       std::vector<User> getUsers() {
           std::vector<User> users;
           // simulate database query
           users.push_back(User(""John"", 30));
           users.push_back(User(""Alice"", 25));
           return users;
       }
   };
   int main() {
       UserService service;
       std::vector<User> users = service.getUsers();
       for (const auto& user : users) {
           std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
       }
       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.pagination;

import java.util.ArrayList;
import java.util.List;

public class Paginator {
    private final List<String> items;
    private final int pageSize;

    public Paginator(List<String> items, int pageSize) {
        this.items = items;
        this.pageSize = pageSize;
    }

    /**
     * Returns the items for the requested page number (1‑based).
     * If the page number is out of range, returns an empty list.
     */
    public List<String> getPage(int pageNumber) {
        if (pageNumber < 1) {
            return new ArrayList<>();
        }
        int startIndex = (pageNumber - 1) * pageSize;
        // BUG: off‑by‑one error – endIndex should be exclusive, but we add pageSize - 1
        int endIndex = Math.min(startIndex + pageSize - 1, items.size() - 1);
        if (startIndex >= items.size()) {
            return new ArrayList<>();
        }
        return new ArrayList<>(items.subList(startIndex, endIndex + 1));
    }

    public static void main(String[] args) {
        List<String> data = new ArrayList<>();
        for (int i = 1; i <= 25; i++) {
            data.add(""Item"" + i);
        }
        Paginator paginator = new Paginator(data, 10);
        System.out.println(paginator.getPage(1)); // expects 10 items
        System.out.println(paginator.getPage(3)); // expects 5 items, but gets 4 due to bug
    }
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processOrders(orders) {
  for (let i = 0; i < orders.length; i++) {
    const order = orders[i];
    if (order.status === 'pending') {
      const user = fetchUser(order.userId);
      if (user) {
        const totalPrice = calculateTotalPrice(order.items);
        if (totalPrice > 0) {
          sendConfirmationEmail(user.email, order.id);
          updateOrderStatus(order.id, 'confirmed');
        }
      }
    }
  }
}

function fetchUser(userId) {
  // Simulated user fetching logic
  return {
    id: userId,
    name: 'John Doe',
    email: 'john.doe@example.com'
  };
}

function calculateTotalPrice(items) {
  let total = 0;
  for (let i = 0; i < items.length; i++) {
    total += items[i].price * items[i].quantity;
  }
  return total;
}

function sendConfirmationEmail(email, orderId) {
  console.log(`Sending confirmation email to ${email} for order ${orderId}`);
}

function updateOrderStatus(orderId, status) {
  console.log(`Updating order ${orderId} to status: ${status}`);
}",code_smell,large_function,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final double TAX_RATE = 0.08; public double calculateTotal(double subtotal) { return subtotal + (subtotal * TAX_RATE); } public double calculateTotalWithDiscount(double subtotal, double discountPercentage) { return calculateTotal(subtotal) - (calculateTotal(subtotal) * discountPercentage / 100); } }",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file for each call
    async getUserProfile(userId) {
        // Bad practice: synchronous file write inside async function
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            throw new Error('User not found');
        }
        // Inefficient: writing entire profile to log every time
        const logEntry = `User accessed: ${JSON.stringify(user)}\n`;
        fs.appendFileSync('access.log', logEntry);
        return user;
    }

    // Large function with many responsibilities
    async updateUser(userId, data) {
        const existing = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        if (!existing) {
            throw new Error('User not found');
        }
        // Validate fields (poor validation, missing many checks)
        if (data.email && !data.email.includes('@')) {
            throw new Error('Invalid email');
        }
        // Directly embed values into query – potential SQL injection
        const updateQuery = `UPDATE users SET name='${data.name}', email='${data.email}' WHERE id=${userId}`;
        await this.db.execute(updateQuery);
        // Send notification (side effect mixed with DB logic)
        this._sendNotification(userId, 'Profile updated');
        return true;
    }

    _sendNotification(userId, message) {
        // Placeholder for notification logic
        console.log(`Notify ${userId}: ${message}`);
    }
}

module.exports = UserService;",code_smell,tight_coupling_and_sql_injection_risk,,openai/gpt-oss-120b
Python,"import requests
import json

def fetch_and_process_data(url, auth_token, format='json', timeout=10):
    headers = {'Authorization': f'Bearer {auth_token}'}
    response = requests.get(url, headers=headers, timeout=timeout)
    data = response.content

    if format == 'json':
        parsed_data = json.loads(data)
        processed_data = []
        for item in parsed_data:
            processed_item = {
                'id': item.get('id'),
                'name': item.get('name'),
                'email': item.get('email')
            }
            processed_data.append(processed_item)
        return processed_data
    elif format == 'xml':
        # XML processing logic
        pass
    else:
        raise ValueError('Unsupported format')

# Example usage:
# fetch_and_process_data('https://api.example.com/data', 'my_token')",code_smell,long_function,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    std::string name;
    int salary;

    Employee(std::string name, int salary) : name(name), salary(salary) {}

    bool operator<(const Employee& other) const {
        return salary < other.salary;
    }
};

class Company {
public:
    std::vector<Employee> employees;

    void addEmployee(Employee employee) {
        employees.push_back(employee);
    }

    Employee getHighestPaidEmployee() {
        if (employees.empty()) {
            return Employee("""", 0);
        }
        return *std::max_element(employees.begin(), employees.end());
    }
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));
    Employee highestPaid = company.getHighestPaidEmployee();
    std::cout << highestPaid.name << std::endl;
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserManager {
    constructor(db) {
        this.db = db; // expects a DB client with query method
        this.cache = {};
    }

    // Loads user data, but caches all users regardless of need
    loadAllUsers() {
        const rows = this.db.query('SELECT * FROM users'); // synchronous mock
        rows.forEach(row => {
            this.cache[row.id] = row;
        });
    }

    // Retrieves a user, but re-reads the entire table each call
    getUserById(id) {
        this.loadAllUsers(); // heavy operation on every request
        return this.cache[id] || null;
    }

    // Updates user email without validation
    updateEmail(id, newEmail) {
        const user = this.getUserById(id);
        if (!user) return false;
        user.email = newEmail;
        this.db.query(`UPDATE users SET email = '${newEmail}' WHERE id = ${id}`);
        return true;
    }
}

module.exports = UserManager;",code_smell,inefficient_data_loading_and_missing_input_validation,,openai/gpt-oss-120b
JavaScript,"class UserAuthentication {
  constructor(usersDB) {
    this.usersDB = usersDB;
  }

  authenticateUser(username, password) {
    const user = this.usersDB.find(u => u.username === username);

    if (!user) {
      return false;
    }

    if (user.password === password) {
      return true;
    }

    return false;
  }

  validatePasswordStrength(password) {
    if (password.length < 8) {
      return false;
    }

    const hasUppercase = /[A-Z]/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasDigit = /\d/.test(password);

    return hasUppercase && hasLowercase && hasDigit;
  }

  registerUser(username, password) {
    if (!this.validatePasswordStrength(password)) {
      throw new Error('Password must be at least 8 characters and contain uppercase, lowercase, and digit characters.);
    }

    const existingUser = this.usersDB.find(u => u.username === username);
    if (existingUser) {
      throw new Error('Username already exists.);
    }

    this.usersDB.push({ username, password });
  }
}",code_defect,security_issue,,qwen/qwen3-32b
Java,"public class UserManager { private Map<String, User> users = new HashMap<>(); public void addUser(String username, String password) { users.put(username, new User(username, password)); } public User getUser(String username) { return users.get(username); } public void changePassword(String username, String newPassword) { User user = users.get(username); if (user != null) { user.setPassword(newPassword); } } } class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<User> findUsersByRole(String role) throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""SELECT id, username, email FROM users WHERE role = '"" + role + ""'""; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            while (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                users.add(user);
            }
        } finally {
            // Resources are not closed properly, potential resource leak
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection and resource leak,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

struct User {
    std::string username;
    std::string email;
    int age;
};

void processUsers(std::vector<User>& users) {
    for (size_t i = 0; i < users.size(); ++i) {
        if (users[i].age < 18) {
            std::cout << ""User "" << users[i].username << "" is underage."" << std::endl;
        } else {
            std::cout << ""User "" << users[i].username << "" is an adult."" << std::endl;
        }

        // Legacy code from v1.0, kept for compatibility
        // if (users[i].age == 0) {
        //     std::cout << ""Invalid age for user "" << users[i].username << std::endl;
        // }
    }
}

int main() {
    std::vector<User> users = {
        {""alice"", ""alice@example.com"", 25},
        {""bob"", ""bob@example.com"", 16},
        {""charlie"", ""charlie@example.com"", 0}  // This is invalid data
    };

    processUsers(users);
    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string n, int a) : name(n), age(a) {}

    bool operator<(const User& other) const {
        return age < other.age;
    }
};

void sortUsers(std::vector<User>& users) {
    std::sort(users.begin(), users.end());
}

int main() {
    std::vector<User> users = {User(""John"", 25), User(""Alice"", 30), User(""Bob"", 20)};
    sortUsers(users);
    for (const auto& user : users) {
        std::cout << user.name << "" is "" << user.age << "" years old."" << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        if (this.cache) return this.cache;
        const data = fs.readFileSync(this.path, 'utf8');
        // Assume JSON but no error handling
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function processUserInput(input) {
    // Vulnerable: directly concatenates input into SQL query
    const query = `SELECT * FROM users WHERE username = '${input}'`;
    return db.query(query);
}

function batchProcess(items) {
    // Off‑by‑one error: loop goes one past the end
    for (let i = 0; i <= items.length; i++) {
        console.log('Processing', items[i]);
    }
}

module.exports = { ConfigLoader, processUserInput, batchProcess };",code_defect,sql_injection_and_off_by_one,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    public void processUser(User user, List<String> permissions, Map<String, String> settings) {
        if (user == null) {
            return;
        }

        if (permissions.contains(""ADMIN"") || permissions.contains(""SUPERUSER"")) {
            user.setActive(true);
        } else {
            user.setActive(false);
        }

        if (settings.containsKey(""theme"")) {
            user.setTheme(settings.get(""theme""));
        }

        // TODO: Remove hardcoded setting
        user.setLanguage(""en"");

        // Legacy code - not used anymore
        // user.setLocale(""US"");

        for (String permission : permissions) {
            if (permission.equals(""READ"")) {
                user.addPermission(Permission.READ);
            } else if (permission.equals(""WRITE"")) {
                user.addPermission(Permission.WRITE);
            }
        }
    }
}",code_smell,hardcoded_values,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
        else:
            self.users[user_id].update(user_data)

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            raise Exception('User not found')

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
        else:
            raise Exception('User not found')

    def get_all_users(self):
        return list(self.users.values())
",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
    this.maxRetries = 3;
  }

  async process(order) {
    // Save order
    await this.db.save('orders', order);
    // Charge payment
    const paymentResult = await this._chargePayment(order.paymentInfo);
    if (!paymentResult.success) {
      await this._handleFailure(order);
      return false;
    }
    // Notify user
    this._sendConfirmation(order.userEmail);
    return true;
  }

  async _chargePayment(info) {
    // Simulate external payment call
    const response = await fetch('https://payment-gateway.example.com/charge', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(info)
    });
    const data = await response.json();
    // BUG: returns undefined when response is not ok
    if (response.ok) {
      return { success: data.status === 'OK', transactionId: data.id };
    }
    // Missing else branch leads to undefined return
  }

  async _handleFailure(order) {
    for (let i = 0; i < this.maxRetries; i++) {
      const result = await this._chargePayment(order.paymentInfo);
      if (result && result.success) {
        await this._sendConfirmation(order.userEmail);
        return;
      }
    }
    // Give up after retries
    console.error('Payment failed after retries for order', order.id);
  }

  _sendConfirmation(email) {
    // Fire-and-forget email send (no await, errors ignored)
    fetch('https://email-service.example.com/send', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ to: email, subject: 'Order Confirmation' })
    }).catch(() => {});
  }
}
module.exports = OrderProcessor;",code_defect,missing_return_on_error_path,,openai/gpt-oss-120b
Python,"import os
import json

CONFIG = None


def load_config(config_path='config.json'):
    global CONFIG
    if CONFIG is not None:
        return CONFIG

    if not os.path.exists(config_path):
        print('Configuration file not found. Using defaults.')
        CONFIG = {'host': 'localhost', 'port': 8080}
        return CONFIG

    with open(config_path, 'r') as f:
        CONFIG = json.load(f)
    return CONFIG


def setup_server():
    config = load_config()
    host = config['host']
    port = config['port']
    print(f'Server starting on {host}:{port}...')
    # Simulate server setup
    return True


def main():
    setup_server()


if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user = cursor.fetchone()
        return user

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users = cursor.fetchall()
        return users

    def create_user(self, name, email):
        cursor = self.db_connection.cursor()
        cursor.execute(""INSERT INTO users (name, email) VALUES (%s, %s)"", (name, email))
        self.db_connection.commit()
        return True
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<Transaction> getPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction t = new Transaction();
            t.setId(rs.getInt(""id""));
            t.setAmount(rs.getDouble(""amount""));
            t.setStatus(rs.getString(""status""));
            list.add(t);
        }
        // Missing rs.close(), stmt.close(), conn.close()
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = getPendingTransactions();
            for (Transaction tx : pending) {
                // Simulate processing
                if (tx.getAmount() > 1000) {
                    // Incorrect logic: should flag for manual review, but proceeds anyway
                    approveTransaction(tx);
                } else {
                    approveTransaction(tx);
                }
            }
        } catch (SQLException e) {
            // Swallowing exception, no logging
        }
    }

    private void approveTransaction(Transaction tx) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""UPDATE transactions SET status='APPROVED' WHERE id="" + tx.getId(); // SQL injection risk
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.executeUpdate();
            // Missing resource cleanup
        } catch (SQLException e) {
            // Ignored
        }
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
JavaScript,"function processUserData(userData) {
  const processedData = [];
  for (let i = 0; i < userData.length; i++) {
    const user = userData[i];
    if (user && user.name && user.email) {
      let formattedEmail = user.email;
      if (user.email.includes(' ')) {
        formattedEmail = user.email.replace(/\s+/g, '');
      }
      const newUser = {
        id: user.id || i + 1,
        name: user.name.charAt(0).toUpperCase() + user.name.slice(1).toLowerCase(),
        email: formattedEmail.toLowerCase(),
        role: user.role || 'user'
      };
      processedData.push(newUser);
    }
  }
  return processedData;
}

// Example usage:
const users = [
  { name: 'alice', email: 'alice@example.com', role: 'admin' },
  { name: 'bob', email: ' bob@example.com ', role: 'user' },
  { name: 'carol', email: 'carol@example.com', role: 'moderator' }
];

const result = processUserData(users);
console.log(result);",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
      class ShoppingCart {
         constructor() {
            this.items = [];
         }

         addItem(item) {
            this.items.push(item);
         }

         calculateTotal() {
            let total = 0;
            for (let i = 0; i < this.items.length; i++) {
               total += this.items[i].price * this.items[i].quantity;
            }
            return total;
         }

         applyDiscount(discountPercentage) {
            let total = this.calculateTotal();
            return total - (total * discountPercentage / 100);
         }
      }

      let cart = new ShoppingCart();
      cart.addItem({ price: 10.99, quantity: 2 });
      cart.addItem({ price: 5.99, quantity: 1 });
      console.log(cart.applyDiscount(10));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
    constructor(db) {
        this.db = db;
    }

    // Processes an order and updates inventory
    async processOrder(order) {
        // Assume order.items is an array of {productId, quantity}
        for (let i = 0; i < order.items.length; i++) {
            const item = order.items[i];
            const product = await this.db.getProductById(item.productId);
            // BUG: Missing check for product existence leads to runtime error
            product.stock -= item.quantity;
            await this.db.updateProduct(product);
        }
        await this.db.saveOrder(order);
        return { status: 'success' };
    }
}

// Usage example (not part of the defect)
const db = {
    async getProductById(id) { /* ... */ },
    async updateProduct(p) { /* ... */ },
    async saveOrder(o) { /* ... */ }
};
const processor = new OrderProcessor(db);
processor.processOrder({ items: [{ productId: 1, quantity: 2 }] });",code_defect,null_reference_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.tokens = [];
    this.maxTokens = 100;
  }

  generateToken(userId) {
    const token = this._createToken();
    this.tokens.push({ userId, token });
    if (this.tokens.length > this.maxTokens) {
      this.tokens.shift();
    }
    return token;
  }

  validateToken(userId, token) {
    const userTokens = this.tokens.filter(t => t.userId === userId);
    if (userTokens.length === 0) return false;

    for (let i = 0; i < userTokens.length; i++) {
      if (userTokens[i].token === token) {
        return true;
      }
    }
    return false;
  }

  _createToken() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let token = '';
    for (let i = 0; i < 16; i++) {
      token += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return token;
  }
}",code_smell,inefficient_loops,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, user_data):
        query = ""UPDATE users SET name = '"" + user_data['name'] + ""', email = '"" + user_data['email'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()
        return True
",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def get_user_by_username(self, username):
        # Vulnerable to SQL injection because username is interpolated directly
        query = f""SELECT id, username, password_hash FROM users WHERE username = '{username}'""
        cursor = self.conn.cursor()
        cursor.execute(query)
        return cursor.fetchone()

    def add_user(self, username, password_hash):
        cursor = self.conn.cursor()
        cursor.execute(
            ""INSERT INTO users (username, password_hash) VALUES (?, ?)"",
            (username, password_hash)
        )
        self.conn.commit()

# Example usage (would be called from elsewhere in the application)
repo = UserRepository('app.db')
repo.add_user('alice', 'hashed_pwd')
user = repo.get_user_by_username(""alice' OR '1'='1"")
print(user)",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import requests
import json

def get_user_data(user_id, token=None, timeout=10):
    headers = {'Authorization': f'Bearer {token}'} if token else {}
    url = f'https://api.example.com/users/{user_id}'
    response = requests.get(url, headers=headers, timeout=timeout)
    
    if response.status_code == 200:
        return response.json()
    elif response.status_code == 401:
        # Token might be expired, but we don't retry
        return None
    else:
        response.raise_for_status()


def process_user_info(user_id, token=None):
    user_data = get_user_data(user_id, token)
    if user_data:
        print(f""User Name: {user_data['name']}"")
        print(f""Email: {user_data['email']}"")
    else:
        print(""User data could not be retrieved."")


def main():
    user_id = input(""Enter user ID: "")
    process_user_info(user_id)

if __name__ == '__main__':
    main()",code_defect,missing_input_validation,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, String> users = new HashMap<>(); public synchronized void addUser(String username, String password) { if (!users.containsKey(username)) { users.put(username, password); } } public synchronized String getPassword(String username) { return users.get(username); } }",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <fstream>
#include <iostream>

class ConfigLoader {
public:
    ConfigLoader(const std::string& path) : filePath(path) {}
    std::vector<std::string> loadLines() {
        std::ifstream file(filePath);
        std::vector<std::string> lines;
        std::string line;
        while (std::getline(file, line)) {
            lines.push_back(line);
        }
        return lines;
    }
private:
    std::string filePath;
};

class UserProcessor {
public:
    UserProcessor(const std::string& configPath) : loader(configPath) {}
    void process() {
        auto lines = loader.loadLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off-by-one error
            std::cout << ""Processing: "" << lines[i] << std::endl;
        }
    }
private:
    ConfigLoader loader;
};

int main() {
    UserProcessor proc(""config.txt"");
    proc.process();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

std::string processUserInput(const std::string& input) {
    std::string cleaned = input;
    for (char& c : cleaned) {
        if (!std::isalpha(c)) {
            c = ' ';
        }
    }
    return cleaned;
}

int main() {
    std::string user_input = ""Hello, World! 123"";
    std::string processed = processUserInput(user_input);
    std::cout << ""Processed input: '"" << processed << ""'"" << std::endl;
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = '"" + str(user_id) + ""'""
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        query = ""UPDATE users SET name = '"" + new_data['name'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()
   ",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <algorithm>
#include <iostream>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    // Returns the index of the user, or -1 if not found
    int findUser(const std::string& name) const {
        for (size_t i = 0; i < users.size(); ++i) {
            if (users[i] == name) {
                return static_cast<int>(i);
            }
        }
        return -1;
    }

    // Returns the nth user (1‑based index). BUG: off‑by‑one error.
    std::string getUserAt(int n) const {
        if (n <= 0 || static_cast<size_t>(n) > users.size()) {
            throw std::out_of_range(""Invalid user index"");
        }
        return users[n]; // should be users[n-1]
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""Alice"");
    um.addUser(""Bob"");
    um.addUser(""Charlie"");
    try {
        std::cout << um.getUserAt(1) << std::endl; // Expected Alice, prints Bob due to bug
    } catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import time

class DataProcessor:
    def __init__(self, file_path):
        self.file_path = file_path
        self.data = []

    def load_data(self):
        if not os.path.exists(self.file_path):
            return
        with open(self.file_path, 'r') as f:
            for line in f:
                self.data.append(line.strip())

    def process_data(self):
        processed = []
        for item in self.data:
            if not item:
                continue
            processed.append(item.upper())
        return processed

    def save_processed_data(self, output_path):
        processed = self.process_data()
        with open(output_path, 'w') as f:
            for item in processed:
                f.write(item + '\n')

if __name__ == '__main__':
    processor = DataProcessor('input.txt')
    processor.load_data()
    processor.save_processed_data('output.txt')
    time.sleep(5)  # Simulate long-running task",code_smell,long_methods,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
        else:
            self.users[user_id].update(user_data)

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            raise ValueError(""User not found"")
        
        # Added a small 'optimization'
        if len(self.users) > 1000:
            self.users = {k: v for k, v in self.users.items() if k != user_id}

    def remove_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
        else:
            raise ValueError(""User not found"")

# Usage example
user_manager = UserManager()
user_manager.add_user('1', {'name': 'John', 'age': 30})
print(user_manager.get_user('1'))
user_manager.update_user('1', {'age': 31})
print(user_manager.get_user('1'))
user_manager.remove_user('1')
print(user_manager.get_user('1'))
",code_smell,inefficient_data_structure,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a log file
    async getUserProfile(userId) {
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        // Missing check for empty result leads to undefined access
        const profile = {
            id: user[0].id,
            name: user[0].name,
            email: user[0].email,
            // Assume address may be null
            address: user[0].address.street + ', ' + user[0].address.city
        };
        // Asynchronously write log but not awaiting, possible race condition
        fs.writeFile('profile.log', JSON.stringify(profile), err => {
            if (err) console.error('Log write failed');
        });
        return profile;
    }
}

module.exports = UserService;",code_defect,null_reference_and_race_condition,,openai/gpt-oss-120b
Python,"import os
import time

def process_user_data(user):
    start_time = time.time()
    
    # Do some processing
    processed_data = []
    for entry in user['entries']:
        if entry['type'] == 'A':
            processed_data.append(entry['value'] * 2)
        elif entry['type'] == 'B':
            processed_data.append(entry['value'] + 10)
        elif entry['type'] == 'C':
            processed_data.append(entry['value'] ** 0.5)
        else:
            processed_data.append(0)

    # Additional processing based on environment
    if os.getenv('DEBUG') == '1':
        time.sleep(2)  # Simulate delay for debugging

    total = sum(processed_data)

    # Legacy code commented out for future reference
    # if user['id'] % 2 == 0:
    #    total = total * 0.5

    print(f""Processing time: {time.time() - start_time:.2f}s"")
    return total

# Example usage
user = {
    'id': 123,
    'entries': [
        {'type': 'A', 'value': 5},
        {'type': 'B', 'value': 3},
        {'type': 'C', 'value': 16},
        {'type': 'D', 'value': 2}
    ]
}

result = process_user_data(user)
print(f""Result: {result}"")",code_smell,large_function,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class Order {
public:
    int id;
    vector<int> items;
    Order(int id) : id(id) {}
    void addItem(int item) {
        items.push_back(item);
    }
    void removeItem(int item) {
        for (int i = 0; i < items.size(); ++i) {
            if (items[i] == item) {
                items.erase(items.begin() + i);
                break;
            }
        }
    }
};

int main() {
    Order order(1);
    order.addItem(10);
    order.addItem(20);
    order.removeItem(10);
    for (int item : order.items) {
        cout << item << endl;
    }
    return 0;
}",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class OrderProcessor {
public:
    OrderProcessor(const std::vector<int>& inventory) : stock_(inventory) {}

    // Returns true if the order can be fulfilled, false otherwise
    bool processOrder(const std::vector<int>& itemIds) {
        // Check availability
        for (size_t i = 0; i <= itemIds.size(); ++i) { // BUG: off‑by‑one, accesses out of bounds
            int id = itemIds[i];
            if (id < 0 || id >= static_cast<int>(stock_.size())) {
                std::cerr << ""Invalid item ID: "" << id << std::endl;
                return false;
            }
            if (stock_[id] <= 0) {
                std::cerr << ""Out of stock for item ID: "" << id << std::endl;
                return false;
            }
        }
        // Reserve items
        for (int id : itemIds) {
            --stock_[id];
        }
        return true;
    }

    void printStock() const {
        for (size_t i = 0; i < stock_.size(); ++i) {
            std::cout << ""Item "" << i << "": "" << stock_[i] << "" left\n"";
        }
    }

private:
    std::vector<int> stock_; // stock_[itemId] = quantity
};

int main() {
    std::vector<int> initialStock = {5, 3, 10, 0, 2};
    OrderProcessor processor(initialStock);

    std::vector<int> order1 = {0, 2, 4};
    if (processor.processOrder(order1)) {
        std::cout << ""Order 1 processed successfully.\n"";
    }

    std::vector<int> order2 = {1, 3}; // item 3 is out of stock
    if (!processor.processOrder(order2)) {
        std::cout << ""Order 2 failed as expected.\n"";
    }

    processor.printStock();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserRegistrationService {

    public void registerUser(String username, String email, String password) {
        if (username == null || username.trim().isEmpty()) {
            throw new IllegalArgumentException(""Username is required"");
        }

        if (email == null || email.trim().isEmpty()) {
            throw new IllegalArgumentException(""Email is required"");
        }

        if (password == null || password.length() < 8) {
            throw new IllegalArgumentException(""Password must be at least 8 characters"");
        }

        // Simulated database save
        boolean isSaved = saveUserToDatabase(username, email, password);
        if (!isSaved) {
            throw new RuntimeException(""Failed to save user"");
        }

        // Simulated email notification
        sendWelcomeEmail(email);
    }

    private boolean saveUserToDatabase(String username, String email, String password) {
        // Simulate a database operation
        return Math.random() > 0.1; // 10% failure rate
    }

    private void sendWelcomeEmail(String email) {
        // Simulate email sending logic
    }

    public static void main(String[] args) {
        UserRegistrationService service = new UserRegistrationService();
        service.registerUser(""john_doe"", ""john.doe@example.com"", ""12345678"");
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,class UserService { constructor() { this.users = []; } async loadUsers() { for (let i = 0; i < 100; i++) { const response = await fetch('https://api.example.com/users'); const data = await response.json(); this.users.push(...data); } } async getUser(id) { for (const user of this.users) { if (user.id === id) return user; } return null; } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <algorithm>
#include <iostream>

class UserManager {
public:
    UserManager() {}
    void addUser(const std::string& username, int age) {
        users_.push_back({username, age});
    }
    // Returns true if a user with the given name exists
    bool hasUser(const std::string& username) const {
        for (const auto& u : users_) {
            if (u.name == username) return true;
        }
        return false;
    }
    // Returns the age of the first matching user, or -1 if not found
    int getUserAge(const std::string& username) const {
        for (const auto& u : users_) {
            if (u.name == username) return u.age;
        }
        return -1;
    }
    // Removes a user by name – BUG: off‑by‑one error may skip the last element
    void removeUser(const std::string& username) {
        for (size_t i = 0; i < users_.size(); ++i) {
            if (users_[i].name == username) {
                users_.erase(users_.begin() + i);
                break;
            }
        }
    }
private:
    struct User { std::string name; int age; };
    std::vector<User> users_;
};

int main() {
    UserManager um;
    um.addUser(""alice"", 30);
    um.addUser(""bob"", 25);
    um.removeUser(""bob"");
    std::cout << ""Has bob? "" << um.hasUser(""bob"") << ""\n"";
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processData(data, options) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    const item = data[i];
    if (options.includeProcessed && item.status === 'processed') {
      result.push(item);
    }
    if (options.includePending && item.status === 'pending') {
      result.push(item);
    }
    if (options.includeFailed && item.status === 'failed') {
      result.push(item);
    }
  }
  return result;
}

function filterData(data) {
  const filtered = [];
  for (let i = 0; i < data.length; i++) {
    const item = data[i];
    if (item.status === 'processed') {
      filtered.push(item);
    }
  }
  return filtered;
}

function processAndExport(data, options) {
  const processed = processData(data, options);
  console.log('Processed:', processed);
  return processed;
}",code_smell,duplicated_code,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserService {
public:
    vector<User> users;
    void addUser(User u) { users.push_back(u); }
    User* getUser(string name) {
        for (User& u : users) {
            if (u.name == name) return &u;
        }
        return nullptr;
    }
};

typedef UserService* UserServicePtr;

int main() {
    UserServicePtr service = new UserService();
    service->addUser(User(""John"", 30));
    User* user = service->getUser(""John"");
    if (user != nullptr) cout << user->name << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""p@ssw0rd""; // hardcoded secret

    public List<User> getActiveUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT id, username, email FROM users WHERE status = 'active'"";
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            while (rs.next()) {
                User u = new User();
                u.setId(rs.getInt(""id""));
                u.setUsername(rs.getString(""username""));
                u.setEmail(rs.getString(""email""));
                users.add(u);
            }
        } finally {
            // Missing null checks can cause NullPointerException if any step fails
            rs.close();
            stmt.close();
            conn.close();
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,resource_leak_null_pointer,,openai/gpt-oss-120b
Python,"import os
import sqlite3
from datetime import datetime

def process_user_data(user_id, db_path='app.db'):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute(f""SELECT * FROM users WHERE id = {user_id}"")
    user = cursor.fetchone()
    
    if user:
        cursor.execute(f""SELECT * FROM logs WHERE user_id = {user_id} ORDER BY timestamp DESC"")
        logs = cursor.fetchall()
        
        for log in logs:
            print(f""{log[0]}: {log[1]} @ {log[2]}"")
            
        cursor.execute(f""UPDATE users SET last_accessed = '{datetime.now()}' WHERE id = {user_id}"")
        conn.commit()
    
    conn.close()
    
    return user

# process_user_data(1)",code_defect,SQL injection vulnerability,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserService {
public:
    vector<User> users;
    void addUser(User u) {
        users.push_back(u);
    }
    User* getUserByName(string name) {
        for (User& u : users) {
            if (u.name == name) {
                return &u;
            }
        }
        return nullptr;
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User* user = service.getUserByName(""John"");
    if (user) {
        cout << user->name << endl;
    }
    return 0;
}",code_defect,dangling_pointer,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.configPath = configPath;
    this.cache = null;
  }

  // Loads configuration from file; caches result
  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.configPath, 'utf8');
    // BUG: JSON.parse may throw, but not caught, causing crash
    this.cache = JSON.parse(data);
    return this.cache;
  }

  // Returns a config value; defaults to undefined if missing
  get(key) {
    const cfg = this.load();
    // DEFECT: uses == instead of ===, leading to type coercion bugs
    if (cfg[key] == null) {
      return undefined;
    }
    return cfg[key];
  }
}

// Usage example
const loader = new ConfigLoader('./config.json');
const port = loader.get('serverPort') || 3000;
console.log(`Server will start on port ${port}`);
",code_defect,unhandled_exception_and_type_coercion_bug,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class UserProcessor {
public:
    void processUsers(vector<string>& users) {
        for (auto& user : users) {
            if (user.empty()) {
                continue;
            }
            if (user == ""admin"") {
                cout << ""Skipping admin user."" << endl;
                continue;
            }
            cout << ""Processing user: "" << user << endl;
            if (user.length() > 10) {
                cout << ""User name too long: "" << user << endl;
            }
        }
    }
};

int main() {
    vector<string> users = {""alice"", ""bob"", ""admin"", """", ""john_doe_1234567890""};
    UserProcessor processor;
    processor.processUsers(users);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email

    def authenticate(self, input_password):
        if input_password == self.password:
            return True
        else:
            return False

    def change_password(self, old_password, new_password):
        if self.authenticate(old_password):
            self.password = new_password
        else:
            print('Authentication failed')

    def send_email(self):
        # assuming an email service is available
        print(f'Sending email to {self.email}')

def main():
    user = UserAccount('test_user', 'password123', 'test@example.com')
    user.change_password('password123', 'new_password')
    user.send_email()

if __name__ == '__main__':
    main()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<User> findActiveUsers() {
        List<User> users = new ArrayList<>();
        String sql = ""SELECT id, username, email FROM users WHERE status = 'active'"";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                User u = new User();
                u.setId(rs.getInt(""id""));
                u.setUsername(rs.getString(""username""));
                u.setEmail(rs.getString(""email""));
                users.add(u);
            }
        } catch (SQLException e) {
            e.printStackTrace(); // swallowing exception details
        }
        return users;
    }

    public void deleteUserById(int userId) {
        String sql = ""DELETE FROM users WHERE id = "" + userId; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.executeUpdate();
        } catch (SQLException e) {
            // ignored
        }
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        List<Product> products = order.getProducts();
        for (Product product : products) {
            if (product.getPrice() > 0 && product.getQuantity() > 0) {
                double totalPrice = product.getPrice() * product.getQuantity();
                System.out.println(""Product "" + product.getName() + "" total price: "" + totalPrice);
            }
        }

        // TODO: Add payment processing logic
        // TODO: Add email notification logic
    }
}",code_smell,incomplete_functionality,,qwen/qwen3-32b
Python,"class UserAuthenticator:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def authenticate(self, username, password):
        query = ""SELECT * FROM users WHERE username = '{}' AND password = '{}'"".format(username, password)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        if user_data:
            return True
        else:
            return False",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class LogProcessor {
public:
    LogProcessor(const std::vector<std::string>& logs) : logs_(logs) {}

    // Returns the number of log entries that contain the given keyword.
    int countKeyword(const std::string& keyword) {
        int count = 0;
        for (size_t i = 0; i <= logs_.size(); ++i) { // BUG: off‑by‑one, should be i < logs_.size()
            if (logs_[i].find(keyword) != std::string::npos) {
                ++count;
            }
        }
        return count;
    }

private:
    std::vector<std::string> logs_;
};

int main() {
    std::vector<std::string> logs = {
        ""Error: failed to connect"",
        ""Info: connection established"",
        ""Warning: low memory"",
        ""Error: timeout occurred""
    };
    LogProcessor processor(logs);
    std::cout << ""Error count: "" << processor.countKeyword(""Error"") << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.getStatus() == OrderStatus.PENDING) {
                if (order.getTotalAmount() > 0) {
                    if (order.getCustomer() != null) {
                        String customerName = order.getCustomer().getName();
                        String customerEmail = order.getCustomer().getEmail();
                        sendEmail(customerEmail, ""Your order is ready"", ""Dear "" + customerName + "", your order has been processed."");
                        order.setStatus(OrderStatus.PROCESSED);
                    }
                }
            }
        }
    }

    private void sendEmail(String email, String subject, String body) {
        // Simulate email sending
        System.out.println(""Sending email to "" + email + "" with subject: "" + subject);
    }
}",code_smell,large_function,,qwen/qwen3-32b
Python,"class UserAuthenticator:
    def __init__(self, username, password):
        self.username = username
        self.password = password
    def authenticate(self):
        users = {'admin': 'password123', 'user': 'password'}
        if self.username in users and users[self.username] == self.password:
            return True
        return False
    def get_user_data(self):
        # assume this is a very complex and slow operation
        import time
        time.sleep(2)
        return {'username': self.username, 'email': 'user@example.com'}

def main):
    authenticator = UserAuthenticator('admin', 'password123')
    if authenticator.authenticate():
        print(authenticator.get_user_data())
",code_smell,inefficient design,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path

    def get_users_page(self, page_number, page_size=20):
        """"""Return a list of users for the given page number.
        page_number is 1-indexed.
        """"""
        offset = (page_number - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        # BUG: Off-by-one error in LIMIT clause, returns one extra row
        cursor.execute(""SELECT id, name FROM users LIMIT ? OFFSET ?"", (page_size + 1, offset))
        rows = cursor.fetchall()
        conn.close()
        return [{""id"": r[0], ""name"": r[1]} for r in rows]

# Example usage (would be called elsewhere in the application)
repo = UserRepository('app.db')
users = repo.get_users_page(2)
print(users)",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json

class ConfigManager:
    def __init__(self, config_path='config.json'):
        self.config_path = config_path
        self.config = self._load_config()

    def _load_config(self):
        try:
            with open(self.config_path, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f""Error loading config: {e}"")
            return {}  # Default empty config

    def get_value(self, key):
        return self.config.get(key)

    def update_value(self, key, value):
        self.config[key] = value
        self._write_config()

    def _write_config(self):
        with open(self.config_path, 'w') as f:
            json.dump(self.config, f)

    def reset_config(self):
        os.remove(self.config_path)
        self.config = self._load_config()",code_smell,lack_of_error_handling,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        all_users = cursor.fetchall()
        return all_users

class UserController:
    def __init__(self, user_service):
        self.user_service = user_service

    def handle_get_user_request(self, user_id):
        return self.user_service.get_user(user_id)

    def handle_update_user_request(self, user_id, new_data):
        self.user_service.update_user(user_id, new_data)
        return {""message"": ""User updated successfully""}

    def handle_delete_user_request(self, user_id):
        self.user_service.delete_user(user_id)
        return {""message"": ""User deleted successfully""}

    def handle_get_all_users_request(self):
        return self.user_service.get_all_users()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {
        // Load users from a data source (simulated)
        users_ = {""alice"", ""bob"", ""carol""};
    }

    // Returns the user name at the given index, or empty string if out of range
    std::string getUserAt(int index) const {
        if (index < 0 || index > users_.size()) {
            return """"; // BUG: should be >= users_.size()
        }
        return users_[index];
    }

    // Adds a new user
    void addUser(const std::string& name) {
        users_.push_back(name);
    }

    // Prints all users
    void printAll() const {
        for (size_t i = 0; i < users_.size(); ++i) {
            std::cout << i << "": "" << users_[i] << std::endl;
        }
    }

private:
    std::vector<std::string> users_;
};

int main() {
    UserManager um;
    um.addUser(""dave"");
    std::cout << ""User at index 3: "" << um.getUserAt(3) << std::endl; // Expected ""dave""
    std::cout << ""User at index 4: "" << um.getUserAt(4) << std::endl; // Out of range, should be empty
    um.printAll();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input, std::vector<int>& results) {
    for (size_t i = 0; i < input.length(); ++i) {
        if (input[i] >= '0' && input[i] <= '9') {
            int digit = input[i] - '0';
            results.push_back(digit);
        } else {
            // ignore non-digit characters
        }
    }
}

int main() {
    std::string input = ""abc123xyz456"";
    std::vector<int> results;

    processUserInput(input, results);

    std::cout << ""Extracted digits: "";
    for (int digit : results) {
        std::cout << digit;
    }
    std::cout << std::endl;

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getUser(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return user;
         }

         async getUsers() {
            const users = await this.userRepository.findAll();
            return users;
         }
      }

      class UserRepository {
         constructor(db) {
            this.db = db;
         }

         async findById(id) {
            const query = `SELECT * FROM users WHERE id = ${id}`;
            const result = await this.db.query(query);
            return result[0];
         }

         async findAll() {
            const query = 'SELECT * FROM users';
            const result = await this.db.query(query);
            return result;
         }
      }
   ",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Logger;

public class PaymentProcessor {
    private static final Logger logger = Logger.getLogger(PaymentProcessor.class.getName());
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""P@ssw0rd""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT balance FROM accounts WHERE account_id = '"" + accountId + ""'""; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    double newBalance = balance - amount;
                    String updateSql = ""UPDATE accounts SET balance = "" + newBalance + "" WHERE account_id = '"" + accountId + ""'"";
                    stmt.executeUpdate(updateSql);
                    logger.info(""Payment of $"" + amount + "" processed for account "" + accountId);
                    return true;
                } else {
                    logger.warning(""Insufficient funds for account "" + accountId);
                    return false;
                }
            } else {
                logger.warning(""Account not found: "" + accountId);
                return false;
            }
        } catch (SQLException e) {
            logger.severe(""Database error: "" + e.getMessage());
            return false;
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processUserInput(std::vector<int>& data, int threshold) {
    for (int i = 0; i < data.size(); ++i) {
        if (data[i] > threshold) {
            data[i] = 0; // Intended to reset over-threshold values
        }
    }
}

int main() {
    std::vector<int> userValues = {15, 20, 30, 5, 40};
    processUserInput(userValues, 25);

    std::cout << ""Processed values: "";
    for (int val : userValues) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}",code_defect,incorrect conditional logic,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class UserService {
public:
    UserService() {}

    void saveUser(User user) {
        users.push_back(user);
    }

    User getUserByName(std::string name) {
        for (User user : users) {
            if (user.getName() == name) {
                return user;
            }
        }
        // Return default user if not found
        return User(""Default"", 0);
    }

private:
    std::vector<User> users;
};

int main() {
    UserService userService;
    User user(""John"", 30);
    userService.saveUser(user);

    User retrievedUser = userService.getUserByName(""John"");
    std::cout << retrievedUser.getName() << std::endl;
    std::cout << retrievedUser.getAge() << std::endl;

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password_hash):
        # Direct string interpolation leads to SQL injection vulnerability
        query = f""INSERT INTO users (username, password_hash) VALUES ('{username}', '{password_hash}')""
        self.conn.execute(query)
        self.conn.commit()

    def get_user(self, username):
        # Also vulnerable when fetching user data
        cursor = self.conn.execute(f""SELECT * FROM users WHERE username = '{username}'"")
        return cursor.fetchone()

    def delete_user(self, user_id):
        # Correctly uses parameterized query here (inconsistent handling)
        self.conn.execute('DELETE FROM users WHERE id = ?', (user_id,))
        self.conn.commit()

# Example usage (would be in a different module)
repo = UserRepository('app.db')
repo.add_user('alice', 'hash123')
user = repo.get_user('alice')
print(user)
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import datetime
import random

class OrderProcessor:
    def __init__(self):
        self.orders = []
        self.status_map = {
            1: 'Pending',
            2: 'Shipped',
            3: 'Delivered',
            4: 'Cancelled'
        }

    def add_order(self, order_id, customer, items):
        order = {
            'order_id': order_id,
            'customer': customer,
            'items': items,
            'status': 1,
            'created_at': datetime.datetime.now()
        }
        self.orders.append(order)

    def update_status(self, order_id, new_status):
        for order in self.orders:
            if order['order_id'] == order_id:
                if 1 <= new_status <= 4:
                    order['status'] = new_status
                break

    def get_order_status_label(self, status_code):
        return self.status_map.get(status_code, 'Unknown')

    def get_total_items(self):
        total = 0
        for order in self.orders:
            for item in order['items']:
                total += 1
        return total

    def get_pending_orders(self):
        result = []
        for order in self.orders:
            if order['status'] == 1:
                result.append(order['order_id'])
        return result

processor = OrderProcessor()
processor.add_order(101, 'Alice', ['Item A', 'Item B'])
processor.add_order(102, 'Bob', ['Item C'])
processor.update_status(101, 2)
print('Pending orders:', processor.get_pending_orders())",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>

   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };

   class UserService {
   public:
       void addUser(User user) {
           users.push_back(user);
       }

       std::vector<User> getUsers() {
           return users;
       }

       User getUserByName(std::string name) {
           for (auto& user : users) {
               if (user.getName() == name) {
                   return user;
               }
           }
           // Return empty user if not found
           return User("""", 0);
       }

   private:
       std::vector<User> users;
   };

   int main() {
       UserService userService;
       userService.addUser(User(""John"", 30));
       userService.addUser(User(""Alice"", 25));

       User user = userService.getUserByName(""John"");
       std::cout << user.getName() << std::endl;
       std::cout << user.getAge() << std::endl;

       return 0;
   }
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self.conn.row_factory = sqlite3.Row
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, email: str) -> int:
        cur = self.conn.execute(
            ""INSERT INTO users (username, email) VALUES (?, ?)"",
            (username, email)
        )
        self.conn.commit()
        return cur.lastrowid

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page (1-indexed).""""""
        offset = (page - 1) * page_size
        # BUG: off‑by‑one error – should be offset + page_size, but uses offset + page_size - 1
        limit = page_size - 1
        cur = self.conn.execute(
            ""SELECT id, username, email FROM users ORDER BY id LIMIT ? OFFSET ?"",
            (limit, offset)
        )
        return [dict(row) for row in cur.fetchall()]

# Example usage (would be removed in production)
if __name__ == ""__main__"":
    repo = UserRepository(':memory:')
    for i in range(1, 26):
        repo.add_user(f'user{i}', f'user{i}@example.com')
    print('Page 1:', repo.get_users_page(1))
    print('Page 2:', repo.get_users_page(2))
    print('Page 3:', repo.get_users_page(3))
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

void processUserInput(const string& input, vector<string>& results) {
    if (input.empty()) {
        return;
    }

    string temp;
    for (size_t i = 0; i < input.length(); ++i) {
        if (input[i] == ' ') {
            if (!temp.empty()) {
                results.push_back(temp);
                temp.clear();
            }
        } else {
            temp += input[i];
        }
    }

    if (!temp.empty()) {
        results.push_back(temp);
    }

    // Legacy code, not needed anymore
    // string unused = ""old_value"";
}

int main() {
    string input;
    vector<string> output;

    cout << ""Enter a sentence: "";
    getline(cin, input);

    processUserInput(input, output);

    cout << ""Processed tokens: "" << endl;
    for (const auto& token : output) {
        cout << token << endl;
    }

    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserService {
     constructor(userRepository) {
       this.userRepository = userRepository;
     }

     async getAllUsers() {
       const users = await this.userRepository.findAll();
       return users.map(user => ({ id: user.id, name: user.name }));
     }

     async getUserById(id) {
       const user = await this.userRepository.findById(id);
       if (!user) {
         throw new Error(`User with id ${id} not found`);
       }
       return { id: user.id, name: user.name };
     }
   }

   class UserRepository {
     async findAll() {
       // simulate database query
       return [
         { id: 1, name: 'John Doe' },
         { id: 2, name: 'Jane Doe' },
       ];
     }

     async findById(id) {
       // simulate database query
       const users = await this.findAll();
       return users.find(user => user.id === id);
     }
   }

   const userRepository = new UserRepository();
   const userService = new UserService(userRepository);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""admin123""; // hardcoded credentials

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            // Check user balance
            stmt = conn.prepareStatement(""SELECT balance FROM accounts WHERE user_id = ?"");
            stmt.setString(1, userId);
            rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    // Deduct amount
                    stmt = conn.prepareStatement(""UPDATE accounts SET balance = balance - ? WHERE user_id = ?"");
                    stmt.setDouble(1, amount);
                    stmt.setString(2, userId);
                    stmt.executeUpdate();
                    // Log transaction
                    logTransaction(conn, userId, amount);
                    return true;
                }
            }
            return false;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            // Missing close of ResultSet and PreparedStatement for second query
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }

    private void logTransaction(Connection conn, String userId, double amount) throws SQLException {
        PreparedStatement stmt = conn.prepareStatement(""INSERT INTO transactions (user_id, amount, ts) VALUES (?, ?, ?)"");
        stmt.setString(1, userId);
        stmt.setDouble(2, amount);
        stmt.setTimestamp(3, new java.sql.Timestamp(new Date().getTime()));
        stmt.executeUpdate();
        // stmt not closed, leading to resource leak
    }
}
",code_defect,resource_leak_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  let result = '';
  for (let i = 0; i < input.length; i++) {
    if (input[i] === 'a') {
      result += '1';
    } else if (input[i] === 'b') {
      result += '2';
    } else if (input[i] === 'c') {
      result += '3';
    } else {
      result += input[i];
    }
  }
  return result;
}

function handleRequest(req, res) {
  const userInput = req.body.input;
  const processed = processUserInput(userInput);
  res.send({ output: processed });
}",code_smell,poor_conditionals,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async getUserById(id) {
            const user = await this.userDao.getUserById(id);
            if (user) {
               user.roles = await this.userDao.getUserRoles(id);
            }
            return user;
         }

         async getUserRoles(id) {
            return await this.userDao.getUserRoles(id);
         }
      }

      class UserDao {
         async getUserById(id) {
            // simulate database query
            return { id: id, name: 'John Doe' };
         }

         async getUserRoles(id) {
            // simulate database query
            return ['admin', 'moderator'];
         }
      }

      const userDao = new UserDao();
      const userService = new UserService(userDao);
      userService.getUserById(1).then(user => console.log(user));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserManager {
    constructor(db) {
        this.db = db;
        this.cache = {};
    }

    // Loads all users into memory every time it's called
    loadAllUsers() {
        const rows = this.db.query('SELECT * FROM users');
        rows.forEach(row => {
            this.cache[row.id] = row;
        });
    }

    // Gets a user, but reloads the whole cache each call
    getUser(id) {
        this.loadAllUsers(); // heavy operation on every request
        return this.cache[id] || null;
    }

    // Updates user without validating input
    updateUser(id, data) {
        const user = this.getUser(id);
        if (!user) return false;
        // Directly merges without sanitization
        Object.assign(user, data);
        this.db.execute(`UPDATE users SET name='${user.name}', email='${user.email}' WHERE id=${id}`);
        return true;
    }
}

// Usage example (not part of production code)
const db = {
    query: sql => [{ id: 1, name: 'Alice', email: 'alice@example.com' }],
    execute: sql => console.log('Executed:', sql)
};
const manager = new UserManager(db);
manager.updateUser(1, { name: ""Bob"", email: ""bob@example.com"" });",code_smell,inefficient_caching_and_sql_injection_risk,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  getUserByEmail(email) {
    return this.users.find(user => user.email === email);
  }

  addUser(newUser) {
    this.users.push(newUser);
  }

  getUsersByRole(role) {
    return this.users.filter(user => user.role === role);
  }

  deleteUserByEmail(email) {
    const index = this.users.findIndex(user => user.email === email);
    if (index !== -1) {
      this.users.splice(index, 1);
    }
  }
}

const users = [
  { email: 'alice@example.com', role: 'admin' },
  { email: 'bob@example.com', role: 'user' }
];

const userManager = new UserManager(users);
userManager.addUser({ email: 'charlie@example.com', role: 'user' });
console.log(userManager.getUsersByRole('user'));
userManager.deleteUserByEmail('bob@example.com');
console.log(userManager.getUserByEmail('bob@example.com'));
",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class PaymentProcessor:
    def __init__(self, payment_gateway):
        self.payment_gateway = payment_gateway

    def process_payment(self, amount, user_id):
        try:
            self.payment_gateway.charge_card(amount)
            return True
        except Exception as e:
            print(f'Error processing payment: {e}')
            return False

    def get_user_payment_history(self, user_id):
        payments = []
        for i in range(1, 13):
            payment = self.payment_gateway.get_payment_for_month(i, user_id)
            if payment:
                payments.append(payment)
        return payments

    def get_total_user_spend(self, user_id):
        total_spend = 0
        payments = self.get_user_payment_history(user_id)
        for payment in payments:
            total_spend += payment.amount
        return total_spend
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <iostream>
#include <numeric>

class Statistics {
public:
    // Returns the average of the first 'count' elements in data
    double average(const std::vector<int>& data, size_t count) {
        if (data.empty() || count == 0) return 0.0;
        // BUG: off‑by‑one error, should sum first 'count' elements but sums count+1
        int sum = std::accumulate(data.begin(), data.begin() + count + 1, 0);
        return static_cast<double>(sum) / static_cast<double>(count);
    }
};

int main() {
    Statistics stats;
    std::vector<int> values = {10, 20, 30, 40, 50};
    std::cout << ""Average of first 3: "" << stats.average(values, 3) << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import time
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)

class DataProcessor:
    def __init__(self):
        self.config = {'retry_attempts': 3, 'timeout': 5}
        self._cache = {}

    def fetch_data(self, identifier):
        if identifier in self._cache:
            logging.info(f""Using cached data for {identifier}"")
            return self._cache[identifier]

        raw_data = None
        for i in range(self.config['retry_attempts']):
            try:
                raw_data = self._download_from_source(identifier)
                if raw_data:
                    break
                time.sleep(2 ** i)  # Exponential backoff
            except Exception as e:
                logging.error(f""Failed to download data for {identifier}, attempt {i + 1}: {e}"")

        if not raw_data:
            return None

        processed_data = self._process_raw_data(raw_data)
        self._cache[identifier] = processed_data
        return processed_data

    def _download_from_source(self, identifier):
        # Simulated download logic
        time.sleep(1)  # Simulate network delay
        if identifier == 'error':
            raise ValueError('Simulated network error')
        return {identifier: 'raw_data'}

    def _process_raw_data(self, raw_data):
        # Simulated data processing
        logging.debug(f""Processing raw data: {raw_data}"")
        result = {k: v.upper() for k, v in raw_data.items()}
        return result

# Usage example
data_proc = DataProcessor()
data = data_proc.fetch_data('test_id')
print(f""Fetched and processed data: {data}"")

# Old unused code
# def deprecated_function():
#     pass
# 
# print('Unused function left for reference')",code_smell,dead_code,,qwen/qwen3-32b
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<Transaction> getPendingTransactions() throws SQLException {
        List<Transaction> pending = new ArrayList<>();
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                Transaction tx = new Transaction();
                tx.setId(rs.getInt(""id""));
                tx.setAmount(rs.getDouble(""amount""));
                tx.setStatus(rs.getString(""status""));
                pending.add(tx);
            }
        }
        return pending;
    }

    public void processTransactions() {
        try {
            List<Transaction> txs = getPendingTransactions();
            for (Transaction tx : txs) {
                // Simulate processing
                if (tx.getAmount() > 10000) {
                    // Flag large transactions but still mark as completed
                    tx.setStatus(""COMPLETED"");
                } else {
                    tx.setStatus(""COMPLETED"");
                }
                updateTransactionStatus(tx);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateTransactionStatus(Transaction tx) {
        String sql = ""UPDATE transactions SET status = ? WHERE id = ?"";
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, tx.getStatus());
            stmt.setInt(2, tx.getId());
            stmt.executeUpdate();
        } catch (SQLException e) {
            // Swallow exception silently
        }
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,silent exception swallowing leads to lost errors,,openai/gpt-oss-120b
Python,"import sqlite3

def get_user_data(username):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = 'SELECT * FROM users WHERE username = '' + username + '''
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result

# Legacy code, not used anymore
def get_user_data_old(username):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = 'SELECT * FROM users WHERE username = '' + username + '''
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    return result",code_smell,security_issue,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username in self.users:
            return False
        self.users[username] = password
        return True

    def verify_user(self, username, password):
        if username not in self.users:
            return False
        stored_password = self.users[username]
        return stored_password == password

    def get_all_users(self):
        return list(self.users.keys())

    def remove_user(self, username):
        if username in self.users:
            del self.users[username]
            return True
        return False

    def update_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
            return True
        return False

user_manager = UserManager()
user_manager.add_user('admin', 'password123')
print(user_manager.verify_user('admin', 'password123'))  # Should print: True
print(user_manager.get_all_users())  # Should print: ['admin']
user_manager.update_password('admin', 'new_password')
print(user_manager.verify_user('admin', 'new_password'))  # Should print: True
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it in memory.""""""
    _cache = {}

    @staticmethod
    def load(path: str) -> dict:
        # Missing validation: path may be absolute or relative, no check for existence
        if path in ConfigLoader._cache:
            return ConfigLoader._cache[path]
        with open(path, 'r') as f:
            data = json.load(f)
        ConfigLoader._cache[path] = data
        return data

class UserService:
    def __init__(self, config_path: str):
        self.config = ConfigLoader.load(config_path)
        self.db_url = self.config.get('database_url')
        # Assume db_url is a connection string; no validation performed
        self._connect_to_db()

    def _connect_to_db(self):
        # Placeholder for DB connection; in real code this would create a connection object
        self.connection = self.db_url

    def get_user(self, user_id: int) -> dict:
        # Vulnerable to SQL injection because query is built via string formatting
        query = f""SELECT * FROM users WHERE id = {user_id}""
        result = self._execute_query(query)
        return result

    def _execute_query(self, query: str) -> dict:
        # Simulated DB response; in reality this would execute the query
        # Here we just return a dummy dict for demonstration
        return {""id"": 1, ""name"": ""Alice""}

# Usage example (would be removed in production)
service = UserService('config.json')
print(service.get_user(42))",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].status === 'active') {
        this.users[i].processed = true;
        this.users[i].lastProcessed = new Date();
      }
      if (this.users[i].role === 'admin') {
        this.users[i].notificationsEnabled = true;
      }
    }
  }

  getProcessedUsers() {
    return this.users.filter(user => user.processed === true);
  }

  // TODO: Implement this later
  // sendNotifications(users) {
  //   users.forEach(user => {
  //     console.log(`Notification sent to ${user.email}`);
  //   });
  // }
}",code_smell,large_class,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <string>
#include <vector>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void addFriend(User* friendUser) {
        friends.push_back(friendUser);
    }

    std::vector<User*> getFriends() {
        return friends;
    }

private:
    std::string name;
    int age;
    std::vector<User*> friends;
};

int main() {
    User user1(""John"", 30);
    User user2(""Alice"", 25);

    user1.addFriend(&user2);

    for (User* friendUser : user1.getFriends()) {
        std::cout << friendUser->getName() << std::endl;
    }

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <fstream>
#include <iostream>

class ConfigLoader {
public:
    ConfigLoader(const std::string& path) : filePath(path) {}
    std::vector<std::string> loadKeys() {
        std::ifstream in(filePath);
        std::vector<std::string> keys;
        std::string line;
        while (std::getline(in, line)) {
            if (line.empty()) continue;
            size_t pos = line.find('=');
            if (pos != std::string::npos) {
                keys.push_back(line.substr(0, pos));
            }
        }
        return keys;
    }
private:
    std::string filePath;
};

int main() {
    ConfigLoader loader(""/etc/app/config.cfg"");
    auto keys = loader.loadKeys();
    for (size_t i = 0; i <= keys.size(); ++i) { // off‑by‑one error
        std::cout << keys[i] << std::endl;
    }
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                continue;
            }

            Product product = item.getProduct();
            if (product.isAvailable()) {
                double price = product.getPrice();
                double total = price * item.getQuantity();
                order.addItemTotal(item, total);
            }
        }

        double shipping = calculateShipping(order);
        order.setTotal(order.getTotal() + shipping);
    }

    private double calculateShipping(Order order) {
        double shippingCost = 0.0;
        if (order.getTotal() > 100.0) {
            shippingCost = 0.0;
        } else {
            shippingCost = 10.0;
        }
        return shippingCost;
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class ShoppingCart {
         constructor() {
            this.items = [];
         }

         addItem(item) {
            this.items.push(item);
         }

         removeItem(itemName) {
            for (let i = 0; i < this.items.length; i++) {
               if (this.items[i].name === itemName) {
                  this.items.splice(i, 1);
                  break;
               }
            }
         }

         calculateTotal() {
            let total = 0;
            for (let item of this.items) {
               total += item.price;
            }
            return total;
         }
      }

      class Product {
         constructor(name, price) {
            this.name = name;
            this.price = price;
         }
      }

      let cart = new ShoppingCart();
      cart.addItem(new Product('Laptop', 1000));
      cart.addItem(new Product('Phone', 500));
      console.log(cart.calculateTotal());
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>

class UserManager {
public:
    void addUser(const std::string& username) {
        std::lock_guard<std::mutex> lock(mutex_);
        users_.push_back(username);
    }

    bool isUser(const std::string& username) {
        std::lock_guard<std::mutex> lock(mutex_);
        for (const auto& u : users_) {
            if (u == username) return true;
        }
        return false;
    }

    // Returns the number of users with a given prefix.
    int countUsersWithPrefix(const std::string& prefix) {
        std::lock_guard<std::mutex> lock(mutex_);
        int count = 0;
        for (size_t i = 0; i <= users_.size(); ++i) { // off‑by‑one error
            if (users_[i].rfind(prefix, 0) == 0) {
                ++count;
            }
        }
        return count;
    }

private:
    std::vector<std::string> users_;
    std::mutex mutex_;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.addUser(""alex"");
    std::cout << ""Count: "" << um.countUsersWithPrefix(""al"") << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        if (order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item == null || item.getQuantity() <= 0) {
                continue;
            }

            double itemPrice = item.getPrice();
            double totalItemPrice = itemPrice * item.getQuantity();
            double discountedPrice = totalItemPrice * 0.9;

            if (discountedPrice > 100) {
                order.applyDiscount(discountedPrice - 100);
            }
        }

        order.setStatus(""Processed"");
        System.out.println(""Order processed: "" + order.getOrderId());
    }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserRepository {
public:
    vector<User> users;
    void addUser(User u) { users.push_back(u); }
    User* getUserByName(string name) {
        for (auto& user : users) {
            if (user.name == name) return &user;
        }
        return nullptr;
    }
};

int main() {
    UserRepository repo;
    repo.addUser(User(""John"", 30));
    User* user = repo.getUserByName(""John"");
    if (user) cout << user->name << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""admin123""; // hardcoded credentials

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> pending = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk if limit derived from user input
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            pending.add(rs.getString(""id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return pending;
    }

    public void processPayments(List<String> paymentIds) {
        for (String id : paymentIds) {
            try {
                // Missing transaction handling, partial failures leave DB inconsistent
                markAsProcessed(id);
                // Simulate external call that may throw unchecked exception
                externalCharge(id);
            } catch (Exception e) {
                // Swallowing exception, no logging or rollback
            }
        }
    }

    private void markAsProcessed(String paymentId) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""UPDATE payments SET status='PROCESSED' WHERE id='"" + paymentId + ""'""; // SQL injection
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        stmt.close();
        conn.close();
    }

    private void externalCharge(String paymentId) {
        // Placeholder for external payment gateway call
        if (paymentId.hashCode() % 2 == 0) {
            throw new RuntimeException(""Charge failed for id: "" + paymentId);
        }
    }
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (i != j) {
                std::cout << data[i] + data[j] << std::endl;
            }
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    processData(data);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   #include <algorithm>

   class Employee {
   public:
       Employee(std::string name, int salary) : name(name), salary(salary) {}

       std::string getName() const { return name; }
       int getSalary() const { return salary; }

       void setSalary(int newSalary) { salary = newSalary; }

   private:
       std::string name;
       int salary;
   };

   void sortEmployees(std::vector<Employee>& employees) {
       std::sort(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
           return a.getSalary() < b.getSalary();
       });
   }

   int main() {
       std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
       sortEmployees(employees);

       for (const auto& employee : employees) {
           std::cout << employee.getName() << ""'s salary is "" << employee.getSalary() << std::endl;
       }

       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> int:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        user_id = cursor.lastrowid
        conn.commit()
        conn.close()
        return user_id

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cursor.fetchall()
        conn.close()
        # BUG: off‑by‑one error – returns one extra record when page is 0
        if page == 0:
            return rows[1:]
        return rows
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import time

def process_user_data(user):
    
    if not user:
        return

    data = {
        'username': user.get('username'),
        'email': user.get('email'),
        'created_at': time.time(),
        'preferences': user.get('preferences', {}),
    }

    if 'notifications' in user:
        data['notifications'] = user['notifications']

    if 'avatar' in user:
        avatar_path = os.path.join('/app/static/avatars', user['avatar'])
        if os.path.exists(avatar_path):
            data['avatar_url'] = f'/static/avatars/{user['avatar']}'

    return data

# Legacy function, might be removed in future
# def old_user_processing(user):
#     return {'username': user['name'], 'email': user['mail']}

# This function is no longer in use
# def deprecated_function():
#     return None",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
       constructor(username, password) {
           this.username = username;
           this.password = password;
       }

       authenticate(username, password) {
           if (username === this.username && password === this.password) {
               return true;
           } else {
               return false;
           }
       }
   }

   class Authenticator {
       constructor() {
           this.accounts = [];
       }

       addAccount(account) {
           this.accounts.push(account);
       }

       authenticate(username, password) {
           for (let account of this.accounts) {
               if (account.authenticate(username, password)) {
                   return true;
               }
           }
           return false;
       }
   }

   let authenticator = new Authenticator();
   let account = new UserAccount('user', 'password');
   authenticator.addAccount(account);
   console.log(authenticator.authenticate('user', 'password'));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123"";

    public List<String> findUsernamesByDomain(String domain) {
        List<String> usernames = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if domain contains malicious characters
            String query = ""SELECT username FROM users WHERE email LIKE '%@"" + domain + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                usernames.add(rs.getString(""username""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return usernames;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"function processUserData(data) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    let item = data[i];
    if (item.status === 'active') {
      let temp = {};
      temp.id = item.id;
      temp.name = item.name;
      temp.email = item.email;
      result.push(temp);
    }
  }
  return result;
}

function sendEmail(email, subject, body) {
  console.log(`Sending email to ${email} with subject: ${subject}`);
  console.log(`Body: ${body}`);
  return true;
}

function generateNotificationEmail(user) {
  return {
    subject: 'Welcome to our platform!',
    body: `Dear ${user.name}, thank you for registering.`
  };
}

function main() {
  const users = [
    { id: 1, name: 'Alice', email: 'alice@example.com', status: 'active' },
    { id: 2, name: 'Bob', email: 'bob@example.com', status: 'inactive' },
    { id: 3, name: 'Charlie', email: 'charlie@example.com', status: 'active' }
  ];

  const activeUsers = processUserData(users);
  for (let i = 0; i < activeUsers.length; i++) {
    const emailData = generateNotificationEmail(activeUsers[i]);
    sendEmail(activeUsers[i].email, emailData.subject, emailData.body);
  }
}

main();",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
   ",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json
import logging
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

class UserRepository:
    def __init__(self, db_connection):
        self.db = db_connection

    def fetch_users(self, offset: int, limit: int) -> List[Dict[str, Any]]:
        """"""Fetch a slice of users from the database.

        Args:
            offset: The starting index (0‑based).
            limit: Number of records to retrieve.
        """"""
        query = f""SELECT id, name, email FROM users ORDER BY id LIMIT {limit} OFFSET {offset}""
        cursor = self.db.cursor()
        cursor.execute(query)
        rows = cursor.fetchall()
        return [{""id"": r[0], ""name"": r[1], ""email"": r[2]} for r in rows]

class UserService:
    def __init__(self, repo: UserRepository):
        self.repo = repo
        self.page_size = 20

    def get_user_page(self, page_number: int) -> str:
        """"""Return a JSON string with users for the requested page.

        The first page is page_number=1.
        """"""
        # BUG: off‑by‑one error – offset should be (page_number - 1) * page_size
        offset = page_number * self.page_size
        users = self.repo.fetch_users(offset, self.page_size)
        return json.dumps({""page"": page_number, ""users"": users})

# Example usage (would be called from a web handler)
if __name__ == ""__main__"":
    import sqlite3
    conn = sqlite3.connect('example.db')
    service = UserService(UserRepository(conn))
    print(service.get_user_page(1))",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processData(const std::vector<std::string>& data) {
    for (const auto& item : data) {
        if (item.length() > 10) {
            std::cout << item << std::endl;
        }
    }
}

int main() {
    std::vector<std::string> inputs = {""example"", ""longerexample"", ""tiny"", ""anotherlongexample""};
    processData(inputs);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }
        return username.equals(""admin"") && password.equals(DEFAULT_PASSWORD);
    }
}",code_defect,hardcoded_secret,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public User findUserById(int userId) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
        return null;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}
",code_defect,SQL injection due to concatenated query and hardcoded credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

class DataProcessor {
public:
    DataProcessor() : max_retries(3) {}

    void process(const std::string& input) {
        for (int i = 0; i < max_retries; ++i) {
            std::string output = do_processing(input);
            if (output != ""ERROR"") {
                std::cout << ""Processed: "" << output << std::endl;
                break;
            }
            std::cout << ""Retrying..."" << std::endl;
        }
    }

private:
    std::string do_processing(const std::string& input) {
        if (input.empty()) {
            return ""ERROR"";
        }

        // Simulate processing logic
        std::string result;
        for (char c : input) {
            if (c == 'a') {
                result += 'z';
            } else {
                result += c;
            }
        }

        return result;
    }

    int max_retries;
};

int main() {
    DataProcessor dp;
    dp.process(""example"");
    dp.process(""a"");
    dp.process("""");
    return 0;
}",code_defect,incorrect conditional logic,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class UserRepository {
public:
    void addUser(User user) { users.push_back(user); }
    std::vector<User> getUsers() { return users; }

private:
    std::vector<User> users;
};

int main() {
    UserRepository repository;
    repository.addUser(User(""John"", 30));
    repository.addUser(User(""Alice"", 25));

    std::vector<User> users = repository.getUsers();
    for (User user : users) {
        std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
    }

    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
  }

  // Process a batch of orders and update inventory
  async processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      const product = await this.db.getProduct(order.productId);
      // BUG: inventory check uses > instead of >=, allowing negative stock
      if (product.stock > order.quantity) {
        await this.db.updateStock(product.id, product.stock - order.quantity);
        await this.db.recordSale(order);
      } else {
        console.warn(`Insufficient stock for product ${product.id}`);
      }
    }
  }
}

module.exports = OrderProcessor;",code_defect,off_by_one_inventory_check,,openai/gpt-oss-120b
Python,"import requests
import time

def fetch_user_data(user_ids):
    all_data = []
    for user_id in user_ids:
        url = f'https://api.example.com/users/{user_id}'
        response = requests.get(url)
        data = response.json()
        all_data.append(data)
        time.sleep(1)  # Rate limiting
    return all_data


def process_user_data(data):
    processed = []
    for item in data:
        if 'email' in item:
            processed.append(item['email'])
    return processed


def main():
    ids = [1, 2, 3, 4, 5]
    user_data = fetch_user_data(ids)
    emails = process_user_data(user_data)
    print(emails)

if __name__ == '__main__':
    main()",code_smell,inefficient_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
using namespace std;

class User {
public:
   string name;
   int age;
   User(string n, int a) : name(n), age(a) {}
};

class UserRepository {
public:
   vector<User> users;
   void addUser(User user) {
      users.push_back(user);
   }
   User getUser(int index) {
      if (index < users.size()) {
         return users[index];
      } else {
         User defaultUser("""", 0);
         return defaultUser;
      }
   }
};

int main() {
   UserRepository repo;
   repo.addUser(User(""John"", 30));
   User user = repo.getUser(0);
   cout << user.name << endl;
   return 0;
}
",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.cache = {}

    def load(self, key):
        # Load config file each time, ignoring cache
        with open(self.path, 'r') as f:
            data = json.load(f)
        return data.get(key)

    def get_cached(self, key):
        if key in self.cache:
            return self.cache[key]
        value = self.load(key)
        self.cache[key] = value
        return value

def process_user_input(user_input):
    # Vulnerable to command injection
    os.system(f""echo {user_input}"")
    return user_input.strip().lower()

def main():
    cfg = ConfigLoader('config.json')
    mode = cfg.get_cached('mode')
    if mode == 'debug':
        print('Debug mode enabled')
    user = input('Enter name: ')
    sanitized = process_user_input(user)
    print(f'Hello, {sanitized}!')

if __name__ == '__main__':
    main()",code_defect,command_injection,,openai/gpt-oss-120b
Java,"public class UserAuthentication {
    private String currentUser;

    public boolean login(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        if (username.equals(""admin"") && password.equals(""securepass123"")) {
            currentUser = username;
            return true;
        }

        return false;
    }

    public void performAction() {
        if (currentUser != null) {
            System.out.println(""User: "" + currentUser + "" is performing action."");
        }
    }

    public void logout() {
        currentUser = null;
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final String DEFAULT_PASSWORD = ""password123""; public void createUser(String username) { System.out.println(""Creating user: "" + username); User user = new User(username, DEFAULT_PASSWORD); saveUser(user); } private void saveUser(User user) { // Simulate saving user to database System.out.println(""Saving user: "" + user.getUsername()); } private class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } } }",code_defect,hardcoded_secrets,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if username contains malicious input
            String query = ""SELECT role FROM user_roles WHERE username = '"" + username + ""'"";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role""));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (Exception ignored) {}
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import os
import json
import requests
from datetime import datetime

API_KEY = 'hardcoded_secret_key_do_not_commit'

def fetch_weather_data(city):
    url = f'https://api.weatherapi.com/v1/current.json?key={API_KEY}&q={city}'
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return None

def process_weather_data(data):
    if not data:
        return None
    location = data['location']['name']
    temp_c = data['current']['temp_c']
    condition = data['current']['condition']['text']
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    return {
        'location': location,
        'temperature_celsius': temp_c,
        'condition': condition,
        'timestamp': timestamp
    }

def main():
    city = 'London'
    weather_data = fetch_weather_data(city)
    processed_data = process_weather_data(weather_data)

    if processed_data:
        print(json.dumps(processed_data, indent=2))
    else:
        print(f'Failed to retrieve weather data for {city}')

if __name__ == '__main__':
    main()",code_defect,hardcoded_credentials,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, account_number, balance=0.0):
        self.account_number = account_number
        self.balance = balance
        self.transactions = []

    def deposit(self, amount):
        self.balance += amount
        self.transactions.append(('deposit', amount))

    def withdraw(self, amount):
        if amount > self.balance:
            print('Insufficient funds')
        else:
            self.balance -= amount
            self.transactions.append(('withdrawal', amount))

    def get_balance(self):
        return self.balance

    def get_transactions(self):
        return self.transactions",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
    constructor(db) {
        this.db = db; // database client
    }

    // Process a batch of orders and update inventory
    async processOrders(orders) {
        for (let i = 0; i < orders.length; i++) {
            const order = orders[i];
            // Update order status
            await this.db.query('UPDATE orders SET status = ? WHERE id = ?', ['processed', order.id]);
            // Decrease inventory for each item
            for (const item of order.items) {
                await this.db.query('UPDATE inventory SET quantity = quantity - ? WHERE product_id = ?', [item.qty, item.productId]);
            }
        }
        return { success: true };
    }
}

// Usage example (simplified)
const dbClient = require('some-db-lib').createClient();
const processor = new OrderProcessor(dbClient);
processor.processOrders(req.body.orders);
",code_defect,missing_error_handling,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    const activeUsers = this.users.filter(user => user.isActive);
    const inactiveUsers = this.users.filter(user => !user.isActive);

    activeUsers.forEach(user => {
      this.createUserProfile(user);
      this.sendWelcomeEmail(user);
      this.logUserActivity(user);
    });

    inactiveUsers.forEach(user => {
      this.createUserProfile(user);
      this.logUserActivity(user);
    });

    return {
      activeUsers: activeUsers.length,
      inactiveUsers: inactiveUsers.length
    };
  }

  createUserProfile(user) {
    // Simulate profile creation
    user.profileCreated = true;
  }

  sendWelcomeEmail(user) {
    // Simulate sending an email
    console.log(`Welcome email sent to ${user.email}`);
  }

  logUserActivity(user) {
    // Simulate logging activity
    console.log(`User ${user.id} logged in.`);
  }
}",code_smell,duplicated_code,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
     constructor(username, password) {
       this.username = username;
       this.password = password;
     }

     authenticate(username, password) {
       if (username === this.username && password === this.password) {
         return true;
       }
       return false;
     }

     updatePassword(newPassword) {
       this.password = newPassword;
     }
   }

   function main() {
     let account = new UserAccount('user123', 'pass123');
     console.log(account.authenticate('user123', 'pass123'));  // prints: true
     account.updatePassword('newPass');
     console.log(account.authenticate('user123', 'newPass'));  // prints: true
   }

   main();
 ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
  }

  async process(orderId) {
    const order = await this.db.getOrder(orderId);
    if (!order) {
      throw new Error('Order not found');
    }
    // Calculate total price
    let total = 0;
    for (let i = 0; i <= order.items.length; i++) { // off‑by‑one error
      const item = order.items[i];
      total += item.price * item.quantity;
    }
    // Update order status
    await this.db.updateOrder(orderId, { status: 'processed', total });
    return total;
  }
}

module.exports = OrderProcessor;",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  getUserByEmail(email) {
    return this.users.find(user => user.email === email);
  }

  addUser(user) {
    this.users.push(user);
  }

  deleteUserByEmail(email) {
    const index = this.users.findIndex(user => user.email === email);
    if (index !== -1) {
      this.users.splice(index, 1);
    }
  }

  updateUserEmail(oldEmail, newEmail) {
    const user = this.users.find(user => user.email === oldEmail);
    if (user) {
      user.email = newEmail;
    }
  }
}

const userManager = new UserManager();
userManager.addUser({ name: 'Alice', email: 'alice@example.com' });
userManager.addUser({ name: 'Bob', email: 'bob@example.com' });
userManager.updateUserEmail('alice@example.com', 'alice_new@example.com');
userManager.deleteUserByEmail('bob@example.com');",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username == null || username.isEmpty()) {
            return false;
        }
        return password.equals(DEFAULT_PASSWORD);
    }
}",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class UserManager {
public:
    UserManager() {
        // Load users from a mock database
        users_ = {""alice"", ""bob"", ""carol""};
    }

    // Returns true if the username exists
    bool userExists(const std::string& username) const {
        return std::find(users_.begin(), users_.end(), username) != users_.end();
    }

    // Removes a user; returns false if user not found
    bool removeUser(const std::string& username) {
        auto it = std::find(users_.begin(), users_.end(), username);
        if (it != users_.end()) {
            users_.erase(it);
            return true;
        }
        return false;
    }

    // Adds a user; returns false if already exists
    bool addUser(const std::string& username) {
        if (userExists(username)) return false;
        users_.push_back(username);
        return true;
    }

    // Returns the number of users
    size_t count() const { return users_.size(); }

private:
    std::vector<std::string> users_;
};

int main() {
    UserManager manager;
    std::string input;
    while (true) {
        std::cout << ""Enter command (add/remove/count/exit): "";
        std::getline(std::cin, input);
        if (input == ""exit"") break;
        if (input == ""count"") {
            std::cout << ""User count: "" << manager.count() << std::endl;
        } else if (input.rfind(""add "", 0) == 0) {
            std::string name = input.substr(4);
            if (manager.addUser(name))
                std::cout << ""Added "" << name << std::endl;
            else
                std::cout << ""User exists"" << std::endl;
        } else if (input.rfind(""remove "", 0) == 0) {
            std::string name = input.substr(7);
            if (manager.removeUser(name))
                std::cout << ""Removed "" << name << std::endl;
            else
                std::cout << ""User not found"" << std::endl;
        }
    }
    return 0;
}",code_defect,off_by_one_error_in_substr,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  updateEmail(oldEmail, newEmail) {
    const user = this.getUserByEmail(oldEmail);
    if (user) {
      user.email = newEmail;
    }
  }

  getAllUsers() {
    return this.users;
  }
}

const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com' },
  { id: 2, name: 'Bob', email: 'bob@example.com' }
];

const manager = new UserManager(users);
manager.updateEmail('alice@example.com', 'alice_new@example.com');",code_smell,mutable_data,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>
class Employee {
public:
    std::string name;
    int salary;
    Employee(std::string n, int s) : name(n), salary(s) {}
};
class Company {
public:
    std::vector<Employee> employees;
    void addEmployee(Employee e) {
        employees.push_back(e);
    }
    int getTotalSalary() {
        int total = 0;
        for (const auto& e : employees) {
            total += e.salary;
        }
        return total;
    }
};
int main() {
    Company c;
    c.addEmployee(Employee(""John"", 50000));
    c.addEmployee(Employee(""Alice"", 60000));
    std::cout << c.getTotalSalary() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user and their orders, but loads all orders for every user
    async getUserProfile(userId) {
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) throw new Error('User not found');
        // Inefficient: fetches entire orders table then filters in JS
        const allOrders = await this.db.query('SELECT * FROM orders');
        const userOrders = allOrders.filter(o => o.user_id === userId);
        return { ...user[0], orders: userOrders };
    }

    // Updates user email without validation
    async updateEmail(userId, newEmail) {
        await this.db.execute(`UPDATE users SET email = '${newEmail}' WHERE id = ${userId}`);
    }
}

// Usage example (ignored in production)
(async () => {
    const db = {
        query: async (sql, params) => {
            // mock implementation
            return [];
        },
        execute: async (sql) => {
            // mock implementation
        }
    };
    const service = new UserService(db);
    try {
        const profile = await service.getUserProfile(42);
        console.log(profile);
    } catch (e) {
        console.error(e);
    }
})();",code_smell,inefficient_data_fetch_and_sql_injection_risk,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order, String customerName, String customerEmail, String paymentMethod, String shippingAddress) {
        if (order == null || order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                continue;
            }
            System.out.println(""Processing item: "" + item.getName() + "" x"" + item.getQuantity());
            // TODO: Add inventory check
            // TODO: Add payment processing
        }

        if (paymentMethod.equals(""CREDIT_CARD"")) {
            // Placeholder for credit card processing
            System.out.println(""Payment processed via Credit Card for "" + customerName);
        } else if (paymentMethod.equals(""PAYPAL"")) {
            System.out.println(""Payment processed via PayPal for "" + customerName);
        } else {
            System.out.println(""Unsupported payment method: "" + paymentMethod);
        }

        System.out.println(""Order processed successfully for "" + customerEmail);
        // TODO: Add order confirmation email
        // TODO: Add shipping logistics handling
    }

    // Unused method
    private void logError(String message) {
        System.out.println(""ERROR: "" + message);
    }
}",code_smell,long_method,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, name, email):
        if user_id not in self.users:
            self.users[user_id] = {'name': name, 'email': email}
            return True
        return False

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, name=None, email=None):
        if user_id in self.users:
            if name:
                self.users[user_id]['name'] = name
            if email:
                self.users[user_id]['email'] = email
            return True
        return False

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
            return True
        return False

    def get_all_users(self):
        return list(self.users.values())

manager = UserManager()
manager.add_user(1, 'John Doe', 'john@example.com')
print(manager.get_user(1))
manager.update_user(1, email='johndoe@example.com')
print(manager.get_user(1))
manager.delete_user(1)
print(manager.get_all_users())
",code_smell,god_class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""appuser"";
    private static final String PASS = ""apppass"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import os
import json
import requests

API_KEY = 'hardcoded_secret_key'

def get_weather_data(city, unit='metric'):
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units={unit}'
    response = requests.get(url)
    data = response.json()
    return data

def display_weather_info(data):
    if 'main' in data and 'weather' in data:
        temp = data['main']['temp']
        description = data['weather'][0]['description']
        print(f""Current temperature: {temp}°C\nDescription: {description}"")
    else:
        print('Invalid data structure received.')

if __name__ == '__main__':
    city_name = input('Enter city name: ')
    weather_data = get_weather_data(city_name)
    display_weather_info(weather_data)
    # print(weather_data)  # Debugging code left in production",code_defect,hardcoded_secrets,,qwen/qwen3-32b
Java,public class UserService { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUserById(int id) { for (User user : users) { if (user.getId() == id) { return user; } } return null; } public void removeUserById(int id) { for (int i = 0; i < users.size(); i++) { if (users.get(i).getId() == id) { users.remove(i); break; } } } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    UserManager() = default;
    void addUser(const std::string& username) {
        users.push_back(username);
    }
    // Returns true if the user exists, false otherwise
    bool hasUser(const std::string& username) const {
        return std::find(users.begin(), users.end(), username) != users.end();
    }
    // Returns the username at the given index
    std::string getUserAt(int index) const {
        // BUG: off‑by‑one error – should be index < users.size()
        if (index <= users.size()) {
            return users[index];
        }
        return """";
    }
private:
    std::vector<std::string> users;
};

int main() {
    UserManager mgr;
    mgr.addUser(""alice"");
    mgr.addUser(""bob"");
    mgr.addUser(""carol"");
    // This will incorrectly access out‑of‑bounds when index == size()
    std::cout << ""User at 3: "" << mgr.getUserAt(3) << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, roles) {
    this.users = users;
    this.roles = roles;
  }

  processUsers() {
    this.users.forEach(user => {
      if (user.role && this.roles.includes(user.role)) {
        user.status = 'active';
      } else {
        user.status = 'inactive';
      }
    });
  }

  getActiveUsers() {
    return this.users.filter(user => user.status === 'active');
  }

  getInactiveUsers() {
    return this.users.filter(user => user.status === 'inactive');
  }
}

// Usage example:
const users = [
  { id: 1, role: 'admin' },
  { id: 2, role: 'user' },
  { id: 3 }
];

const roles = ['admin', 'moderator'];
const processor = new UserProcessor(users, roles);
processor.processUsers();
console.log('Active Users:', processor.getActiveUsers());",code_smell,mutating_parameters,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUsers() { let users = await this.userDao.getAllUsers(); for (let i = 0; i < users.length; i++) { let user = users[i]; user.fullName = user.firstName + ' ' + user.lastName; } return users; } async getUserById(id) { return await this.userDao.getUserById(id); } async saveUser(user) { if (user.id) { return await this.userDao.updateUser(user); } else { return await this.userDao.createUser(user); } } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class UserService {
  constructor(db) {
    this.db = db;
  }

  // Returns a page of users, 1‑based page index
  async getUsersPage(page, pageSize) {
    const offset = (page - 1) * pageSize;
    const limit = pageSize;
    // Off‑by‑one: should use offset, but uses page instead
    const rows = await this.db.query('SELECT * FROM users LIMIT ?, ?', [page, limit]);
    return rows;
  }

  // Updates user email without validation
  async updateEmail(userId, newEmail) {
    await this.db.query('UPDATE users SET email = ? WHERE id = ?', [newEmail, userId]);
    // No error handling; assumes query succeeds
  }
}

module.exports = UserService;",code_defect,off_by_one_error_in_pagination,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  getUserById(id) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        return this.users[i];
      }
    }
    return null;
  }

  deleteUserById(id) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        this.users.splice(i, 1);
        return;
      }
    }
  }

  getAllUsers() {
    return this.users;
  }
}

// Example usage
const manager = new UserManager();
manager.addUser({ id: 1, name: 'Alice' });
manager.addUser({ id: 2, name: 'Bob' });
manager.addUser({ id: 3, name: 'Charlie' });",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, name, email):
        if user_id in self.users:
            return False
        self.users[user_id] = {'name': name, 'email': email}
        return True

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, name=None, email=None):
        if user_id not in self.users:
            return False
        if name:
            self.users[user_id]['name'] = name
        if email:
            self.users[user_id]['email'] = email
        return True

    def delete_user(self, user_id):
        if user_id not in self.users:
            return False
        del self.users[user_id]
        return True

    def get_all_users(self):
        return list(self.users.values())

user_manager = UserManager()
user_manager.add_user(1, 'John Doe', 'john@example.com')
print(user_manager.get_user(1))
user_manager.update_user(1, email='john2@example.com')
print(user_manager.get_all_users())
   ",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file for each call
    async getUserProfile(userId) {
        // Fetch user from DB
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            throw new Error('User not found');
        }
        // Perform some business logic
        const profile = {
            id: user.id,
            name: user.name,
            email: user.email,
            // compute age from birthdate each time
            age: new Date().getFullYear() - new Date(user.birthdate).getFullYear()
        };
        // Write a log file (inefficient: opens a new file for every request)
        const logMessage = `User ${userId} profile accessed at ${new Date().toISOString()}\n`;
        fs.appendFileSync('/var/log/user_service.log', logMessage);
        return profile;
    }

    // Updates user email without validation
    async updateEmail(userId, newEmail) {
        await this.db.execute('UPDATE users SET email = ? WHERE id = ?', [newEmail, userId]);
        // No verification that email format is correct
        return true;
    }
}

module.exports = UserService;",code_smell,inefficient_io_and_missing_input_validation,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      if (user.isActive) {
        this.sendEmail(user.email);
        this.logActivity(user.id);
        this.updateDatabase(user);
      }
    }
  }

  sendEmail(email) {
    console.log(`Email sent to ${email}`);
  }

  logActivity(userId) {
    console.log(`User ${userId} is active`);
  }

  updateDatabase(user) {
    console.log(`User ${user.id} updated in DB`);
  }
}

// Usage
const users = [
  { id: 1, email: 'user1@example.com', isActive: true },
  { id: 2, email: 'user2@example.com', isActive: false },
  { id: 3, email: 'user3@example.com', isActive: true }
];

const processor = new UserProcessor(users);
processor.processUsers();",code_smell,large_class,,qwen/qwen3-32b
Java,public class UserService { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUser(int index) { return users.get(index); } public void removeUser(int index) { users.remove(index); } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class BatchProcessor {
  constructor(batchSize) {
    this.batchSize = batchSize;
    this.queue = [];
  }

  addTask(task) {
    this.queue.push(task);
    if (this.queue.length >= this.batchSize) {
      this.flush();
    }
  }

  flush() {
    const tasksToRun = this.queue.slice(0, this.batchSize);
    // Process tasks synchronously (simplified)
    for (let i = 0; i <= tasksToRun.length; i++) {
      try {
        tasksToRun[i]();
      } catch (e) {
        console.error('Task failed', e);
      }
    }
    // Remove processed tasks
    this.queue = this.queue.slice(this.batchSize);
  }
}

// Example usage
const processor = new BatchProcessor(3);
processor.addTask(() => console.log('Task 1'));
processor.addTask(() => console.log('Task 2'));
processor.addTask(() => console.log('Task 3'));
processor.addTask(() => console.log('Task 4'));
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor() {
        this.orders = new ArrayList<>();
    }

    public void addOrder(Order order) {
        if (order != null) {
            orders.add(order);
        }
    }

    public double calculateTotalRevenue() {
        double total = 0;
        for (Order order : orders) {
            if (order.getStatus().equals(""PAID"")) {
                total += order.getAmount();
            }
        }
        return total;
    }

    public void applyDiscount(double discountRate) {
        for (Order order : orders) {
            if (order.getStatus().equals(""PAID"")) {
                order.setAmount(order.getAmount() * (1 - discountRate));
            }
        }
    }

    public List<Order> getOrders() {
        return orders;
    }
}",code_smell,feature envy,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments""; private static final String DB_USER = ""payment_user""; private static final String DB_PASSWORD = ""password123""; public void processPayment(String paymentId, double amount) { try { Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD); Statement stmt = conn.createStatement(); stmt.executeUpdate(""UPDATE payments SET status='processed' WHERE id='"" + paymentId + ""'""); } catch (SQLException e) { System.out.println(""Error processing payment: "" + e.getMessage()); } } }",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize || 10;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn should return a promise resolving to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off‑by‑one error – should use (pageNumber - 1)
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    const next = this.currentPage + 1;
    const page = this.getPage(next);
    if (page.length) {
      this.currentPage = next;
    }
    return page;
  }
}

// Example usage
const paginator = new Paginator(5);
await paginator.loadItems(() => Promise.resolve([1,2,3,4,5,6,7,8,9,10]));
console.log('First page:', paginator.nextPage()); // Expected [1,2,3,4,5] but gets [] due to bug",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

struct User {
    std::string name;
    std::string email;
    int age;
};

std::vector<User> parseUsers(const std::string& input) {
    std::vector<User> users;
    std::string line;
    std::string delimiter = "","";
    
    size_t pos = 0;
    while ((pos = input.find(delimiter)) != std::string::npos) {
        line = input.substr(0, pos);
        users.push_back(User{});
        users.back().name = line;
        input.erase(0, pos + delimiter.length());
    }
    
    users.back().email = input;
    return users;
}

int main() {
    std::string user_data = ""Alice,alice@example.com,30,Bob,bob@example.com,25"";
    auto users = parseUsers(user_data);
    
    for (const auto& user : users) {
        std::cout << ""Name: "" << user.name << ""\n"";
        std::cout << ""Email: "" << user.email << ""\n\n"";
    }
    
    return 0;
}",code_defect,incorrect_parsing_logic,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor() {
            this.users = [];
         }

         async addUser(username, password) {
            const user = { username, password };
            this.users.push(user);
            return user;
         }

         async getUser(username) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].username === username) {
                  return this.users[i];
               }
            }
            return null;
         }
      }

      const userService = new UserService();
      userService.addUser('john', 'password123').then(user => console.log(user));
   ",code_smell,inefficient_data_structure,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<User> getActiveUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, username, email FROM users WHERE status = 'active'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            User u = new User();
            u.setId(rs.getInt(""id""));
            u.setUsername(rs.getString(""username""));
            u.setEmail(rs.getString(""email""));
            users.add(u);
        }
        // Missing rs.close(), stmt.close(), conn.close() leads to resource leak
        return users;
    }

    public void deactivateUser(int userId) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""UPDATE users SET status = 'inactive' WHERE id = "" + userId; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        // Resources not closed
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection and resource leak,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    for (let j = 0; j < data[i].length; j++) {
      if (data[i][j] % 2 === 0) {
        result.push(data[i][j] * 2);
      }
    }
  }
  return result;
}

function processNestedData(data) {
  let processed = [];
  for (let i = 0; i < data.length; i++) {
    for (let j = 0; j < data[i].length; j++) {
      for (let k = 0; k < data[i][j].length; k++) {
        if (data[i][j][k] % 2 === 0) {
          processed.push(data[i][j][k] * 2);
        }
      }
    }
  }
  return processed;
}",code_smell,duplicate_code,,qwen/qwen3-32b
Java,"public class PaymentProcessor {
    public void processPayment(String paymentMethod, double amount) {
        if (paymentMethod.equals(""credit_card"")) {
            // Process credit card payment
            System.out.println(""Processing credit card payment of $"" + amount);
        } else if (paymentMethod.equals(""paypal"")) {
            // Process paypal payment
            System.out.println(""Processing paypal payment of $"" + amount);
        } else if (paymentMethod.equals(""bank_transfer"")) {
            // Process bank transfer payment
            System.out.println(""Processing bank transfer payment of $"" + amount);
        }
    }

    public static void main(String[] args) {
        PaymentProcessor paymentProcessor = new PaymentProcessor();
        paymentProcessor.processPayment(""credit_card"", 100.0);
    }
}",code_smell,long_method,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getPendingPayments() throws SQLException {
        List<String> pending = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT user_id FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            pending.add(rs.getString(""user_id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return pending;
    }

    public boolean processPayment(String userId, double amount) {
        // Missing validation for amount <= 0
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""UPDATE payments SET status='COMPLETED' WHERE user_id='"" + userId + ""'""; // SQL injection risk
            PreparedStatement stmt = conn.prepareStatement(sql);
            int rows = stmt.executeUpdate();
            stmt.close();
            conn.close();
            return rows > 0;
        } catch (SQLException e) {
            // Swallowing exception, no logging
            return false;
        }
    }

    public void batchProcess(List<String> userIds) {
        for (String userId : userIds) {
            // Calls processPayment with a fixed amount, ignoring actual owed amount
            processPayment(userId, 100.0);
        }
    }
}
",code_defect,SQL injection and missing input validation,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input) {
    std::vector<int> numbers;
    std::string temp;

    for (char c : input) {
        if (c >= '0' && c <= '9') {
            temp += c;
        } else {
            if (!temp.empty()) {
                numbers.push_back(std::stoi(temp));
                temp.clear();
            }
        }
    }

    if (!temp.empty()) {
        numbers.push_back(std::stoi(temp));
    }

    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0) {
            std::cout << numbers[i] << "" is even.\n"";
        } else {
            std::cout << numbers[i] << "" is odd.\n"";
        }
    }
}

int main() {
    std::string input;
    std::cout << ""Enter a sequence of numbers separated by non-numeric characters: "";
    std::getline(std::cin, input);
    processUserInput(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class PaymentProcessor { constructor(merchantId) { this.merchantId = merchantId; } processPayment(amount, currency) { let taxRate = 0.08; let paymentAmount = amount * (1 + taxRate); let payment = { amount: paymentAmount, currency: currency }; let paymentGateway = new PaymentGateway(); return paymentGateway.chargeCard(payment); } } class PaymentGateway { chargeCard(payment) { let url = 'https://example.com/payment'; let headers = { 'Content-Type': 'application/json' }; let body = JSON.stringify(payment); return fetch(url, { method: 'POST', headers: headers, body: body }); } }",code_smell,Tight Coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>

class UserManager {
public:
    void addUser(const std::string& name, int age) {
        std::lock_guard<std::mutex> lock(mutex_);
        users_.push_back({name, age});
    }

    // Returns the average age of all users.
    double averageAge() const {
        if (users_.empty()) return 0.0;
        int total = 0;
        for (size_t i = 0; i <= users_.size(); ++i) { // off‑by‑one error
            total += users_[i].age;
        }
        return static_cast<double>(total) / users_.size();
    }

private:
    struct User { std::string name; int age; };
    std::vector<User> users_;
    mutable std::mutex mutex_;
};

int main() {
    UserManager um;
    um.addUser(""Alice"", 30);
    um.addUser(""Bob"", 25);
    std::cout << ""Average age: "" << um.averageAge() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

struct User {
    std::string name;
    int age;
    std::string email;
};

bool validateEmail(const std::string& email) {
    return email.find('@') != std::string::npos;
}

void registerUser(const std::vector<User>& users, const User& newUser) {
    for (const auto& user : users) {
        if (user.email == newUser.email) {
            std::cout << ""Email already exists!"" << std::endl;
            return;
        }
    }

    if (validateEmail(newUser.email) && newUser.age >= 18) {
        std::cout << ""User registered successfully."" << std::endl;
    } else {
        std::cout << ""Invalid registration data."" << std::endl;
    }
}

int main() {
    std::vector<User> existingUsers = { {""Alice"", 25, ""alice@example.com""}, {""Bob"", 17, ""bob@example.com""} };
    User newUser = {""Charlie"", 20, ""charlie@example.com""};

    registerUser(existingUsers, newUser);

    return 0;
}",code_smell,poor_error_handling,,qwen/qwen3-32b
Java,"public class UserDAO { private Connection conn; public UserDAO() { try { Class.forName(""com.mysql.cj.jdbc.Driver""); conn = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""root"", ""password""); } catch (Exception e) { System.out.println(e.getMessage()); } } public User getUser(int id) { try { Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""SELECT * FROM users WHERE id = "" + id); if (rs.next()) { return new User(rs.getInt(""id""), rs.getString(""name""), rs.getString(""email"")); } } catch (Exception e) { System.out.println(e.getMessage()); } return null; } }",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a log file
    async getUserProfile(userId) {
        const user = await this.db.query('SELECT * FROM users WHERE id = ' + userId);
        // Log the request (potentially blocking I/O)
        fs.writeFileSync('/var/log/user_requests.log', `User ${userId} requested at ${new Date().toISOString()}\n`, {flag: 'a'});
        return user;
    }
}

module.exports = UserService;",code_defect,SQL_injection_via_string_concatenation,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  process(order) {
    if (!order || !order.items || order.items.length === 0) {
      return;
    }

    let totalPrice = 0;
    for (let i = 0; i < order.items.length; i++) {
      totalPrice += order.items[i].price * order.items[i].quantity;
    }

    if (order.discount) {
      totalPrice -= order.discount;
    }

    console.log(`Total price after discount: ${totalPrice}`);
    this.applyTax(totalPrice);
  }

  applyTax(price) {
    const taxRate = 0.1;
    const finalPrice = price + (price * taxRate);
    console.log(`Final price with tax: ${finalPrice}`);
  }

  validate(order) {
    if (!order || !order.items) {
      console.log('Order is invalid');
      return false;
    }

    for (let i = 0; i < order.items.length; i++) {
      if (order.items[i].price <= 0) {
        console.log(`Invalid item price at index ${i}`);
        return false;
      }
    }

    return true;
  }
}

// Usage
const order = {
  items: [
    { price: 10, quantity: 2 },
    { price: 5, quantity: 3 }
  ],
  discount: 5
};

const processor = new OrderProcessor();
processor.process(order);",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private String passwordHash; public UserAuthenticator(String passwordHash) { this.passwordHash = passwordHash; } public boolean authenticate(String inputPassword) { String hashedInput = inputPassword; for (int i = 0; i < 10000; i++) { hashedInput = hashedInput + ""salt""; } return hashedInput.equals(passwordHash); } }",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import os
import json

def process_user_data(user_data):
    processed_data = []
    for user in user_data:
        if 'name' in user and 'email' in user:
            user['name'] = user['name'].strip().title()
            user['email'] = user['email'].strip().lower()
            processed_data.append(user)
        else:
            print(f""Skipping incomplete user data: {user}"")
    return processed_data

def save_to_file(data, filename='output.json'):
    with open(filename, 'w') as f:
        json.dump(data, f, indent=4)

if __name__ == '__main__':
    raw_data = [
        {'name': ' alice ', 'email': 'ALICE@example.com', 'age': 30},
        {'name': 'bob', 'email': 'bob@example.com'},
        {'email': 'charlie@example.com'},
        {'name': 'david'}
    ]
    processed_data = process_user_data(raw_data)
    save_to_file(processed_data)",code_smell,incomplete_error_handling,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class UserService {
public:
    vector<string> getUsers() {
        vector<string> users;
        users.push_back(""John"");
        users.push_back(""Alice"");
        users.push_back(""Bob"");
        return users;
    }
};

class UserRepository {
public:
    vector<string> fetchUsersFromDB() {
        // Assume this function fetches users from a database
        vector<string> users;
        users.push_back(""John"");
        users.push_back(""Alice"");
        users.push_back(""Bob"");
        return users;
    }
};

int main() {
    UserService userService;
    UserRepository userRepository;
    vector<string> users = userService.getUsers();
    // The following line is not used anywhere
    vector<string> dbUsers = userRepository.fetchUsersFromDB();
    for (string user : users) {
        cout << user << endl;
    }
    return 0;
}",code_smell,unused_variable,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor{constructor(db){this.db=db;}processOrders(orders){for(let i=0;i<=orders.length;i++){let order=orders[i];if(!order||!order.id)return;this.db.save(order);}}}const db={save(o){console.log('saved',o.id);}};const processor=new OrderProcessor(db);processor.processOrders([{id:1},{id:2},{id:3}]);",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processUserData(users) {
  const results = [];
  for (let i = 0; i < users.length; i++) {
    let user = users[i];
    if (user.isActive) {
      user.role = user.role || 'guest';
      user.metadata = user.metadata || {};
      user.metadata.lastLogin = new Date();
      results.push(user);
    }
  }
  return results;
}

function updateDatabase(records) {
  for (let i = 0; i < records.length; i++) {
    let record = records[i];
    // Simulate database update
    console.log(`Updating record for ${record.name}`);
    if (record.metadata && record.metadata.lastLogin) {
      console.log(`Last login: ${record.metadata.lastLogin}`);
    }
  }
}

function handleUserRequests(data) {
  const processedUsers = processUserData(data);
  updateDatabase(processedUsers);
  console.log('All users processed and database updated.');//debug
}",code_smell,long_function,,qwen/qwen3-32b
Java,"public class UserService { private Map<String, String> users = new HashMap<>(); public synchronized void addUser(String username, String password) { if (users.containsKey(username)) { return; } users.put(username, password); } public synchronized boolean authenticate(String username, String password) { return users.containsKey(username) && users.get(username).equals(password); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class UserManager {
public:
    void addUser(const std::string& name) {
        users.push_back(name);
    }

    // Returns the nth user (1-based index) or empty string if out of range
    std::string getUserByRank(int rank) const {
        // Bug: off-by-one error, should be rank-1
        if (rank <= 0 || rank > static_cast<int>(users.size())) {
            return """";
        }
        return users[rank];
    }

    // Removes duplicate usernames (case-sensitive)
    void deduplicate() {
        std::sort(users.begin(), users.end());
        auto it = std::unique(users.begin(), users.end());
        users.erase(it, users.end());
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""alice"");
    um.addUser(""bob"");
    um.addUser(""charlie"");
    um.addUser(""bob"");
    um.deduplicate();
    std::cout << ""Second user: "" << um.getUserByRank(2) << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  if (input === null || input === undefined) {
    return 'Invalid input';
  }

  let output = '';
  for (let i = 0; i < input.length; i++) {
    if (input[i] === 'a') {
      output += '1';
    } else if (input[i] === 'b') {
      output += '2';
    } else if (input[i] === 'c') {
      output += '3';
    } else {
      output += input[i];
    }
  }
  return output;
}

function processUsers(users) {
  for (let i = 0; i < users.length; i++) {
    const processed = processUserInput(users[i].name);
    console.log(`Processed name: ${processed}`);
  }
}

const userArray = [{ name: 'abc' }, { name: 'def' }, { name: 'ghi' }];
processUsers(userArray);",code_smell,long_function,,qwen/qwen3-32b
Java,public class UserManager { private List<User> users = new ArrayList<>(); public void addUser(User user) { for (User existingUser : users) { if (existingUser.getId() == user.getId()) { users.remove(existingUser); break; } } users.add(user); } public User getUser(int id) { for (User user : users) { if (user.getId() == id) { return user; } } return null; } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user profile and writes a log file
  async getUserProfile(userId) {
    const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
    if (!user) {
      throw new Error('User not found');
    }
    // Log the access (bug: race condition with async file write)
    fs.appendFile('access.log', `User ${userId} accessed at ${new Date().toISOString()}\n`, (err) => {
      if (err) console.error('Failed to write log');
    });
    return user;
  }

  // Updates user email without proper validation (defect: insecure input handling)
  async updateEmail(userId, newEmail) {
    const result = await this.db.execute(`UPDATE users SET email = '${newEmail}' WHERE id = ${userId}`);
    return result.affectedRows;
  }
}

module.exports = UserService;",code_defect,SQL_injection,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users) {
    this.users = users;
  }

  validateUser(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username && this.users[i].password === password) {
        return true;
      }
    }
    return false;
  }

  authenticateUser(username, password) {
    if (this.validateUser(username, password)) {
      console.log('Authentication successful');
      return true;
    } else {
      console.log('Authentication failed');
      return false;
    }
  }
}

const users = [
  { username: 'admin', password: 'admin123' },
  { username: 'user', password: 'pass123' }
];

const auth = new UserAuth(users);
auth.authenticateUser('admin', 'admin123');",code_smell,poor_error_handling,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>
   
   class Student {
   public:
       std::string name;
       int grade;
   
       Student(std::string n, int g) : name(n), grade(g) {}
   
       bool operator<(const Student& other) const {
           return grade < other.grade;
       }
   };
   
   void sortStudents(std::vector<Student>& students) {
       std::sort(students.begin(), students.end());
   }
   
   int main() {
       std::vector<Student> students = {Student(""John"", 85), Student(""Alice"", 90), Student(""Bob"", 78)};
       sortStudents(students);
       for (const auto& student : students) {
           std::cout << student.name << "" "" << student.grade << std::endl;
       }
       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.account;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection,,openai/gpt-oss-120b
Python,"import os
import requests

API_KEY = '1234567890abcdefg'


def fetch_weather_data(city):
    url = f'http://api.weatherapi.com/v1/current.json?key={API_KEY}&q={city}'
    response = requests.get(url)
    data = response.json()

    if response.status_code == 200:
        return {
            'temperature': data['current']['temp_c'],
            'condition': data['current']['condition']['text'],
            'humidity': data['current']['humidity']
        }
    else:
        return None


def log_weather_info(city, weather_info):
    with open(f'{city}_weather.log', 'w') as log_file:
        log_file.write(f""Weather in {city}:
"")
        log_file.write(f""Temperature: {weather_info['temperature']}°C\n"")
        log_file.write(f""Condition: {weather_info['condition']}\n"")
        log_file.write(f""Humidity: {weather_info['humidity']}%\n"")


def main():
    city = input('Enter city name: ')
    weather_data = fetch_weather_data(city)
    if weather_data:
        log_weather_info(city, weather_data)
        print('Weather data logged successfully.')
    else:
        print('Failed to fetch weather data.')

if __name__ == '__main__':
    main()",code_defect,hardcoded_secret,,qwen/qwen3-32b
Java,"public class UserDAO {
    private Connection connection;
    public UserDAO() {
        try {
            Class.forName(""com.mysql.cj.jdbc.Driver"");
            connection = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""root"", ""password"");
        } catch (Exception e) {}
    }
    public User getUser(int id) {
        try {
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(""SELECT * FROM users WHERE id = "" + id);
            if (resultSet.next()) {
                return new User(resultSet.getInt(""id""), resultSet.getString(""name""), resultSet.getString(""email""));
            }
        } catch (Exception e) {}
        return null;
    }
}",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # NOTE: using eval on file content – insecure
        with open(self.config_path, 'r') as f:
            data = f.read()
            self.settings = eval(data)  # dangerous if file is tampered

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)
        self.output_dir = self.config.get('output_dir', '/tmp')

    def process(self, records):
        # Off‑by‑one error: should process up to len(records)
        for i in range(self.batch_size):
            record = records[i]
            self._handle(record)
        self._finalize()

    def _handle(self, record):
        # Simulate processing
        result = {k: v*2 for k, v in record.items()}
        self._save(result)

    def _save(self, result):
        filename = os.path.join(self.output_dir, f""result_{result['id']}.json"")
        with open(filename, 'w') as f:
            json.dump(result, f)

    def _finalize(self):
        print('Processing complete')

if __name__ == '__main__':
    loader = ConfigLoader('config.cfg')
    processor = DataProcessor(loader)
    sample_records = [{'id': i, 'value': i*10} for i in range(50)]
    processor.process(sample_records)",code_defect,off_by_one_and_insecure_eval,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(String productId, String customerEmail, int quantity) {
        if (productId == null || productId.trim().isEmpty()) {
            productId = ""default_product"";
        }

        if (customerEmail == null || !customerEmail.contains(""@"")) {
            customerEmail = ""noemail@example.com"";
        }

        if (quantity <= 0) {
            quantity = 1;
        }

        String orderSummary = String.format(""Product ID: %s, Customer Email: %s, Quantity: %d"", productId, customerEmail, quantity);
        System.out.println(orderSummary);

        // Additional logic for processing order
        // ...
    }
}",code_smell,magic_string,,qwen/qwen3-32b
JavaScript,"class PaymentGateway { constructor(apiKey) { this.apiKey = apiKey; } processPayment(amount, currency) { const apiEndpoint = 'https://example.com/api/'; const headers = { 'Authorization': 'Bearer ' + this.apiKey }; const paymentData = { amount: amount, currency: currency }; return fetch(apiEndpoint + 'payment', { method: 'POST', headers: headers, body: JSON.stringify(paymentData) }); } }",code_smell,Tight Coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit; // insecure concatenation
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        // Missing close of ResultSet, Statement, and Connection
        return payments;
    }

    public boolean processPayment(String paymentId, double amount) {
        // Simulated processing logic
        if (amount <= 0) {
            throw new IllegalArgumentException(""Amount must be positive"");
        }
        // Bug: using string comparison with == instead of equals
        if (paymentId == null || paymentId == """") {
            return false;
        }
        // Assume payment is processed successfully
        return true;
    }
}
",code_defect,logic_error_and_resource_leak,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getQuantity() <= 0) {
                continue;
            }
            double itemPrice = item.getPrice();
            int quantity = item.getQuantity();
            double discount = 0;

            if (quantity >= 100) {
                discount = 0.1;
            } else if (quantity >= 50) {
                discount = 0.05;
            } else if (quantity >= 20) {
                discount = 0.02;
            }

            double total = itemPrice * quantity * (1 - discount);
            item.setTotalPrice(total);
        }

        double orderTotal = order.getItems().stream()
                .mapToDouble(OrderItem::getTotalPrice)
                .sum();
        order.setTotal(orderTotal);
    }
}",code_smell,long_function,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password
        else:
            print('User already exists')

    def authenticate(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def get_all_users(self):
        return list(self.users.keys())

    def update_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
        else:
            print('User does not exist')

# usage
user_db = UserDatabase('users.db')
user_db.add_user('admin', 'password123')
print(user_db.authenticate('admin', 'password123'))  # prints: True
print(user_db.get_all_users())  # prints: ['admin']
user_db.update_password('admin', 'new_password')
print(user_db.authenticate('admin', 'new_password'))  # prints: True",code_smell,Tight Coupling,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db; // expects a database client with async query method
  }

  // Processes an array of orders and returns total revenue
  async processOrders(orders) {
    let total = 0;
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      // fetch product price (assume async DB call)
      const priceRow = await this.db.query('SELECT price FROM products WHERE id = ?', [order.productId]);
      const price = priceRow[0].price;
      // BUG: quantity is a string from external source, implicit conversion may cause concatenation
      total += price * order.quantity;
    }
    // BUG: returns string when total is 0 because of implicit type coercion earlier
    return total;
  }
}

// Example usage (not part of production code)
(async () => {
  const fakeDb = {
    async query(sql, params) {
      // mock returning price 10 for any product
      return [{ price: 10 }];
    }
  };
  const processor = new OrderProcessor(fakeDb);
  const orders = [
    { productId: 1, quantity: '2' }, // quantity as string
    { productId: 2, quantity: 3 }
  ];
  const revenue = await processor.processOrders(orders);
  console.log('Total revenue:', revenue);
})();",code_defect,type_coercion_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
    this.pendingOrders = [];
  }

  // Adds an order to the processing queue
  enqueue(order) {
    this.pendingOrders.push(order);
  }

  // Processes all pending orders sequentially
  async processAll() {
    while (this.pendingOrders.length > 0) {
      const order = this.pendingOrders.shift();
      try {
        await this._processOrder(order);
      } catch (e) {
        console.error('Failed to process order', order.id, e);
      }
    }
  }

  // Private method to handle a single order
  async _processOrder(order) {
    // Validate order fields
    if (!order.id || !order.amount) {
      throw new Error('Invalid order');
    }
    // Insert order into DB without parameterization – SQL injection risk
    const query = `INSERT INTO orders (id, amount) VALUES ('${order.id}', ${order.amount})`;
    await this.db.execute(query);
    // Simulate external payment call (no timeout handling)
    const paymentResult = await this._chargePayment(order);
    if (!paymentResult.success) {
      throw new Error('Payment failed');
    }
    console.log('Order processed:', order.id);
  }

  // Simulated payment gateway call
  async _chargePayment(order) {
    // Missing error handling for network failures
    const response = await fetch(`https://payment.example.com/charge?amount=${order.amount}`);
    return response.json();
  }
}

module.exports = OrderProcessor;",code_defect,SQL_injection_and_missing_error_handling,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 0) {
            std::cout << data[i] << "" is even\n"";
        } else {
            std::cout << data[i] << "" is odd\n"";
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5};
    processData(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, email):
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()

    def find_user(self, username):
        cursor = self.conn.cursor()
        # Vulnerable to SQL injection because username is interpolated directly
        query = f""SELECT id, username, email FROM users WHERE username = '{username}'""
        cursor.execute(query)
        return cursor.fetchone()

    def close(self):
        self.conn.close()

# Example usage
repo = UserRepository('example.db')
repo.add_user('alice', 'alice@example.com')
# An attacker could pass a malicious username like ""' OR '1'='1"" to retrieve all users
user = repo.find_user(""' OR '1'='1"")
print(user)
repo.close()",code_defect,sql_injection,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        // Hardcoded credentials
        String validUsername = ""admin"";
        String validPassword = ""admin123!"";

        if (username.equals(validUsername) && password.equals(validPassword)) {
            System.out.println(""Authentication successful for user: "" + username);
            return true;
        } else {
            System.out.println(""Authentication failed for user: "" + username);
            return false;
        }
    }
}",code_defect,hardcoded_credentials,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public synchronized User getUser(String username) { for (User user : users.values()) { if (user.getUsername().equals(username)) { return user; } } return null; } public synchronized void addUser(User user) { users.put(user.getUsername(), user); } } class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<Payment> getPendingPayments() throws SQLException {
        List<Payment> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, account FROM pending_payments"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Payment p = new Payment();
            p.setId(rs.getInt(""id""));
            p.setAmount(rs.getDouble(""amount""));
            p.setAccount(rs.getString(""account""));
            payments.add(p);
        }
        // Missing close of ResultSet, Statement, and Connection -> resource leak
        return payments;
    }

    public boolean processPayment(Payment payment) {
        // Incorrect conditional logic: should check > 0, but uses >= 0 allowing zero amount
        if (payment.getAmount() >= 0) {
            // Simulate processing
            try {
                Thread.sleep(100); // blocking call in potentially async context
            } catch (InterruptedException e) {
                // Swallow interruption, continue as if successful
            }
            return true;
        }
        return false;
    }

    public void processAll() throws SQLException {
        List<Payment> pending = getPendingPayments();
        for (Payment p : pending) {
            if (!processPayment(p)) {
                // No error handling, just continue
                continue;
            }
            // Update status without transaction safety
            updatePaymentStatus(p.getId(), ""PROCESSED"");
        }
    }

    private void updatePaymentStatus(int paymentId, String status) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""UPDATE pending_payments SET status = ? WHERE id = ?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, status);
            stmt.setInt(2, paymentId);
            stmt.executeUpdate();
            // Missing close of Statement and Connection
        } catch (SQLException e) {
            // Swallow exception, lose visibility of failure
        }
    }
}

class Payment {
    private int id;
    private double amount;
    private String account;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getAccount() { return account; }
    public void setAccount(String account) { this.account = account; }
}",code_defect,resource_leak_and_logic_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  processUser(user) {
    if (!user || !user.id || !user.name) {
      return;
    }

    const sanitizedUser = this.sanitizeUser(user);

    if (sanitizedUser) {
      this.saveUserToDatabase(sanitizedUser);
    }

    // Legacy code from previous version, kept for reference
    // this.sendUserEmail(user);
  }

  sanitizeUser(user) {
    const allowedKeys = ['id', 'name', 'email'];
    const sanitized = {};

    for (const key in user) {
      if (allowedKeys.includes(key)) {
        sanitized[key] = user[key];
      }
    }

    return sanitized;
  }

  saveUserToDatabase(user) {
    console.log(`Saving user: ${user.name} with ID: ${user.id}`);
    // Database save logic goes here
  }
}

// Unused function
function sendWelcomeEmail(user) {
  console.log(`Sending email to ${user.email}`);
}

export default UserProcessor;",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class UserManager { private static Map<String, User> users = new HashMap<>(); public static void addUser(User user) { users.put(user.getUsername(), user); } public static User getUser(String username) { return users.get(username); } public static void removeUser(String username) { users.remove(username); } public static void main(String[] args) { User user1 = new User(""john"", ""password123""); User user2 = new User(""jane"", ""password456""); addUser(user1); addUser(user2); System.out.println(getUser(""john"").getPassword()); removeUser(""jane""); System.out.println(getUser(""jane"")); } } class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; }}",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {
        // Load users from a data source (simulated)
        users = {""alice"", ""bob"", ""charlie""};
    }

    // Returns the user at the given index, or empty string if out of range
    std::string getUserAt(int index) const {
        // BUG: off‑by‑one error – should be index >= 0 && index < users.size()
        if (index > 0 && index <= static_cast<int>(users.size())) {
            return users[index];
        }
        return """";
    }

    // Prints all users
    void printAll() const {
        for (size_t i = 0; i < users.size(); ++i) {
            std::cout << i << "": "" << users[i] << std::endl;
        }
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.printAll();
    // Attempt to fetch the last user (should be index 2)
    std::cout << ""Fetching user at index 2: "" << um.getUserAt(2) << std::endl;
    // Off‑by‑one causes out‑of‑range access for the last element
    std::cout << ""Fetching user at index 3: "" << um.getUserAt(3) << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    private String username;
    private String password;

    public UserAuthenticator(String username, String password) {
        this.username = username;
        this.password = password;
    }

    public boolean authenticate() {
        if (username == null || password == null) {
            return false;
        }

        String dbPassword = getPasswordFromDatabase(username);
        if (dbPassword == null) {
            return false;
        }

        return dbPassword.equals(password);
    }

    private String getPasswordFromDatabase(String username) {
        // Simulated hardcoded user for demo
        if (""admin"".equals(username)) {
            return ""s3cr3tP@ss"";
        }
        return null;
    }

    public void resetPassword(String newPassword) {
        password = newPassword;
        // Intentionally missing DB update logic
    }
}",code_smell,incomplete_logic,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
      constructor() {
         this.users = [];
      }

      addUser(user) {
         this.users.push(user);
      }

      removeUser(username) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].username === username) {
               this.users.splice(i, 1);
               break;
            }
         }
      }

      getUser(username) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].username === username) {
               return this.users[i];
            }
         }
         return null;
      }
   }

   const userManager = new UserManager();
   userManager.addUser({ username: 'john', password: '123' });
   console.log(userManager.getUser('john'));
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3
from datetime import datetime

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def create_user(self, username, password):
        # Insecure: storing plain password in DB
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, password_hash, created_at) VALUES (?, ?, ?)',
                       (username, password, datetime.utcnow().isoformat()))
        self.conn.commit()
        return cursor.lastrowid

    def authenticate(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute('SELECT password_hash FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row and row[0] == password:
            return True
        return False

    def export_user_data(self, user_id, export_path):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
        user = cursor.fetchone()
        if not user:
            raise ValueError('User not found')
        # Vulnerable to path traversal
        with open(export_path, 'w') as f:
            json.dump({'id': user[0], 'username': user[1]}, f)

    def close(self):
        self.conn.close()

# Example usage
if __name__ == '__main__':
    manager = UserManager('users.db')
    uid = manager.create_user('alice', 'secret123')
    print('Created user with ID:', uid)
    auth = manager.authenticate('alice', 'secret123')
    print('Authentication success:', auth)
    manager.export_user_data(uid, '../../tmp/export.json')
    manager.close()
",code_defect,insecure_password_storage_and_path_traversal,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processItems(std::vector<int>& items, int threshold, bool flag1, bool flag2, int multiplier = 1) {
    for (size_t i = 0; i < items.size(); ++i) {
        if (items[i] > threshold) {
            if (flag1) {
                items[i] *= multiplier;
            }
            if (flag2) {
                items[i] /= 2;
            }
        }
    }
}

int main() {
    std::vector<int> data = {5, 10, 15, 20, 25};
    processItems(data, 10, true, false);
    for (int val : data) {
        std::cout << val << "" "";
    }
    return 0;
}",code_smell,"large_function, long_parameter_list",,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string name, int age) : name(name), age(age) {}

    bool operator<(const User& other) const {
        return age < other.age;
    }
};

void sortUsers(std::vector<User>& users) {
    std::sort(users.begin(), users.end());
}

int main() {
    std::vector<User> users = {User(""John"", 30), User(""Alice"", 25), User(""Bob"", 40)};
    sortUsers(users);
    for (const auto& user : users) {
        std::cout << user.name << "" is "" << user.age << "" years old."" << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::vector<std::string>& logs) : logs_(logs) {}
    void startProcessing() {
        for (size_t i = 0; i < logs_.size(); ++i) {
            workers_.emplace_back(&LogProcessor::processLog, this, i);
        }
        for (auto& t : workers_) t.join();
    }
private:
    void processLog(size_t index) {
        std::lock_guard<std::mutex> lock(mtx_);
        // Simulate processing
        std::string entry = logs_[index];
        if (entry.empty()) return;
        // Bug: off‑by‑one, should be < entry.size()
        for (size_t i = 0; i <= entry.size(); ++i) {
            if (entry[i] == '\n') ++newlineCount_;
        }
    }
    const std::vector<std::string>& logs_;
    std::vector<std::thread> workers_;
    std::mutex mtx_;
    size_t newlineCount_ = 0;
};

int main(){
    std::vector<std::string> logs = {""first line\nsecond line"", ""single line""};
    LogProcessor lp(logs);
    lp.startProcessing();
    std::cout << ""Processing complete"" << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserAuthenticationService {
    private String storedPasswordHash = ""5f4dcc3b5aa765d0e4e32b32c8b512b0"";

    public boolean authenticate(String username, String password) {
        String passwordHash = computeMD5Hash(password);
        return storedPasswordHash.equals(passwordHash);
    }

    private String computeMD5Hash(String input) {
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            byte[] array = md.digest(input.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : array) {
                sb.append(Integer.toHexString((b & 0xFF) | 0x100).substring(1, 3));
            }
            return sb.toString();
        } catch (Exception e) {
            return """";
        }
    }
}",code_defect,security_defect,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <string>
      class User {
         public:
            User(std::string name, int age) : name(name), age(age) {}
            std::string getName() { return name; }
            int getAge() { return age; }
         private:
            std::string name;
            int age;
      };
      class UserService {
         public:
            UserService() {}
            User* getUser(std::string name) {
               for (int i = 0; i < 1000000; i++) {
                  if (users[i].getName() == name) {
                     return &users[i];
                  }
               }
               return nullptr;
            }
         private:
            User users[1000000];
      };
      int main() {
         UserService service;
         User* user = service.getUser(""John"");
         if (user != nullptr) {
            std::cout << user->getName() << std::endl;
         }
         return 0;
      }
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class LogProcessor {
public:
    LogProcessor(const std::vector<std::string>& logs) : logs_(logs) {}

    // Returns the most frequent log entry length
    size_t mostFrequentLength() const {
        std::vector<size_t> lengths;
        lengths.reserve(logs_.size());
        for (const auto& entry : logs_) {
            lengths.push_back(entry.size());
        }
        std::sort(lengths.begin(), lengths.end());
        size_t bestLen = 0;
        size_t bestCount = 0;
        size_t currentLen = 0;
        size_t currentCount = 0;
        for (size_t i = 0; i <= lengths.size(); ++i) { // BUG: off‑by‑one, accesses out of bounds
            if (i < lengths.size() && lengths[i] == currentLen) {
                ++currentCount;
            } else {
                if (currentCount > bestCount) {
                    bestCount = currentCount;
                    bestLen = currentLen;
                }
                if (i < lengths.size()) {
                    currentLen = lengths[i];
                    currentCount = 1;
                }
            }
        }
        return bestLen;
    }

private:
    std::vector<std::string> logs_;
};

int main() {
    std::vector<std::string> logs = {
        ""Error: Disk full"",
        ""Warning: Low memory"",
        ""Info: Startup complete"",
        ""Error: Disk full"",
        ""Error: Disk full""
    };
    LogProcessor lp(logs);
    std::cout << ""Most frequent length: "" << lp.mostFrequentLength() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  findUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  validateEmail(email) {
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return regex.test(email);
  }

  addUser(email, name) {
    if (!this.validateEmail(email)) {
      console.log('Invalid email format');
      return;
    }

    const userExists = this.findUserByEmail(email);
    if (userExists) {
      console.log('User already exists');
      return;
    }

    const newUser = {
      id: this.users.length + 1,
      name,
      email
    };

    this.users.push(newUser);
  }
}

const users = [{ id: 1, name: 'Alice', email: 'alice@example.com' }];
const userManager = new UserManager(users);
userManager.addUser('bob@example.com', 'Bob');",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userDao) {
         this.userDao = userDao;
      }

      async getUser(id) {
         const user = await this.userDao.findById(id);
         if (!user) {
            throw new Error(`User with id ${id} not found`);
         }
         return user;
      }

      async getUsers() {
         return await this.userDao.findAll();
      }
   }

   class UserDao {
      constructor(db) {
         this.db = db;
      }

      async findById(id) {
         return await this.db.collection('users').findOne({ id });
      }

      async findAll() {
         return await this.db.collection('users').find().toArray();
      }
   }

   const db = { collection: () => ({ findOne: () => {}, find: () => ({ toArray: () => {} }) }) };
   const userDao = new UserDao(db);
   const userService = new UserService(userDao);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cur = self.conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY,
                        username TEXT NOT NULL,
                        data TEXT)''')
        self.conn.commit()

    def load_user(self, username):
        cur = self.conn.cursor()
        cur.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cur.fetchone()
        if row:
            # Unsafe deserialization of stored JSON data
            return json.loads(row[0])
        return None

    def save_user(self, username, data):
        cur = self.conn.cursor()
        # Directly embedding JSON string without escaping can lead to SQL injection if data contains quotes
        json_data = json.dumps(data)
        cur.execute(f""INSERT OR REPLACE INTO users (username, data) VALUES ('{username}', '{json_data}')"")
        self.conn.commit()

    def delete_user(self, username):
        cur = self.conn.cursor()
        cur.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage (would be called elsewhere in the application)
manager = UserManager(os.getenv('USER_DB', ':memory:'))
manager.save_user('alice', {'role': 'admin', 'prefs': {'theme': 'dark'}})
user_data = manager.load_user('alice')
print(user_data)",code_defect,SQL_injection_and_unsafe_deserialization,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users) {
    this.users = users;
  }

  validateUser(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username && this.users[i].password === password) {
        return true;
      }
    }
    return false;
  }

  loginHandler(req, res) {
    const { username, password } = req.body;
    if (this.validateUser(username, password)) {
      res.status(200).send('Login successful');
    } else {
      res.status(401).send('Invalid credentials');
    }
  }
}

module.exports = UserAuth;",code_defect,insecure_authentication,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) { users.push_back(user); }
    User* getUserByName(std::string name) {
        for (auto& user : users) {
            if (user.getName() == name) {
                return &user;
            }
        }
        return nullptr;
    }
private:
    std::vector<User> users;
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User* user = service.getUserByName(""John"");
    if (user != nullptr) {
        std::cout << user->getName() << std::endl;
    }
    return 0;
}",code_defect,dangling_pointer,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and watches for changes.""""""
    def __init__(self, path: str):
        self.path = path
        self._config = {}
        self._lock = threading.Lock()
        self._load()
        self._watch_thread = threading.Thread(target=self._watch_file, daemon=True)
        self._watch_thread.start()

    def _load(self):
        with open(self.path, 'r') as f:
            data = json.load(f)
        with self._lock:
            self._config.update(data)

    def _watch_file(self):
        last_mtime = os.path.getmtime(self.path)
        while True:
            try:
                current_mtime = os.path.getmtime(self.path)
                if current_mtime != last_mtime:
                    self._load()
                    last_mtime = current_mtime
            except Exception:
                pass
            # No sleep -> busy loop

    def get(self, key, default=None):
        with self._lock:
            return self._config.get(key, default)

# Usage example (would be in production code)
config = ConfigLoader('/etc/app/config.json')
api_key = config.get('api_key')  # Sensitive data loaded without validation
",code_defect,busy_wait_without_sleep,,openai/gpt-oss-120b
JavaScript,"function processOrders(orders, discounts) {
  let total = 0;
  for (let i = 0; i < orders.length; i++) {
    const order = orders[i];
    let orderTotal = 0;
    for (let j = 0; j < order.items.length; j++) {
      const item = order.items[j];
      orderTotal += item.price * item.quantity;
    }

    let discount = 0;
    if (discounts.includes(order.customerId)) {
      discount = orderTotal * 0.1;
    }

    total += orderTotal - discount;
  }

  console.log(`Total revenue: $${total.toFixed(2)}`);
}

// Example usage:
const orders = [
  {
    customerId: 'C123',
    items: [
      { price: 10, quantity: 2 },
      { price: 5, quantity: 4 }
    ]
  },
  {
    customerId: 'C456',
    items: [
      { price: 8, quantity: 1 }
    ]
  }
];

const discounts = ['C123'];

processOrders(orders, discounts);",code_smell,nested_loops,,qwen/qwen3-32b
Java,public class UserService { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUserById(int id) { for (User user : users) { if (user.getId() == id) { return user; } } return null; } public void removeUser(int id) { for (User user : users) { if (user.getId() == id) { users.remove(user); break; } } } },code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}

    def load(self):
        # NOTE: The config file may contain sensitive information
        with open(self.config_path, 'r') as f:
            data = f.read()
        # Unsafe deserialization: using eval on file contents
        self.settings = eval(data)  # potential code execution vulnerability
        return self.settings

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)

    def process(self, records):
        results = []
        for i in range(0, len(records), self.batch_size):
            batch = records[i:i + self.batch_size]
            # Simulate processing each record
            for rec in batch:
                if rec.get('value') is None:
                    continue
                results.append(self._transform(rec))
        return results

    def _transform(self, record):
        # Simple transformation that could raise KeyError if 'value' missing
        return record['value'] * 2

# Usage example (would be in production code)
config = ConfigLoader('config.cfg')
config.load()
processor = DataProcessor(config)
sample_data = [{'value': i} for i in range(500)]
output = processor.process(sample_data)
print(json.dumps(output))",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Python,"import os
import requests

API_KEY = '1234567890abcdef'  # Hardcoded API key

def fetch_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    headers = {
        'Authorization': f'Bearer {API_KEY}'
    }
    response = requests.get(url, headers=headers)
    return response.json()


def process_user(user_data):
    name = user_data.get('name', '')
    email = user_data.get('email', '')
    if not email:
        return None
    
    # Complex processing logic
    processed = {
        'full_name': name,
        'email': email.lower(),
    }
    return processed


def main():
    user_id = input('Enter user ID: ')
    user_data = fetch_user_data(user_id)
    processed_user = process_user(user_data)
    
    if processed_user:
        print('User processed successfully:', processed_user)
    else:
        print('Failed to process user.')

if __name__ == '__main__':
    main()",code_defect,hardcoded_secrets,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final double TAX_RATE = 0.08; public double calculateTotal(double subtotal) { return subtotal + (subtotal * TAX_RATE); } public double calculateTotalWithDiscount(double subtotal, double discount) { return calculateTotal(subtotal) - discount; } public static void main(String[] args) { PaymentProcessor paymentProcessor = new PaymentProcessor(); double subtotal = 100.0; double discount = 10.0; double total = paymentProcessor.calculateTotalWithDiscount(subtotal, discount); System.out.println(""Total: "" + total); } }",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.account;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class AccountService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASS = ""apppass"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallowing exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,sql_injection,,openai/gpt-oss-120b
Python,"import os
import time

def process_files(directory):
    files = os.listdir(directory)
    results = []

    for file in files:
        if not file.endswith('.txt'):
            continue
        file_path = os.path.join(directory, file)
        with open(file_path, 'r') as f:
            content = f.read()
            words = content.split()
            word_count = len(words)
            results.append((file, word_count))

    time.sleep(2)  # Simulate processing delay
    return results


def main():
    directory = '/data/input'
    if not os.path.exists(directory):
        print(f""Directory {directory} does not exist."")
        return

    results = process_files(directory)
    for file, count in results:
        print(f""{file}: {count} words"")

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor() {
         this.processedPayments = {};
      }

      processPayment(paymentId, amount) {
         if (!this.processedPayments[paymentId]) {
            this.processedPayments[paymentId] = amount;
         } else {
            this.processedPayments[paymentId] += amount;
         }
      }

      getPaymentHistory() {
         return Object.keys(this.processedPayments).map(paymentId => ({ paymentId, amount: this.processedPayments[paymentId] }));
      }
   }

   const paymentProcessor = new PaymentProcessor();
   paymentProcessor.processPayment('123', 100);
   paymentProcessor.processPayment('123', 200);
   console.log(paymentProcessor.getPaymentHistory());
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // Unsafe eval of config file content
    this.cache = eval(data);
    return this.cache;
  }
}

function initializeApp() {
  const loader = new ConfigLoader('./config.js');
  const config = loader.load();
  // Assume config has a port property
  const server = require('http').createServer((req, res) => {
    res.writeHead(200, {'Content-Type': 'text/plain'});
    res.end('Server running');
  });
  server.listen(config.port);
  console.log(`Server listening on port ${config.port}`);
}

initializeApp();",code_defect,unsafe_eval_execution,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data, int threshold) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = i + 1; j < data.size(); ++j) {
            if (data[i] + data[j] > threshold) {
                data[i] = data[j] = 0;
            }
        }
    }
}

int main() {
    std::vector<int> values = {10, 20, 30, 40, 50};
    processData(values, 50);

    for (const auto& val : values) {
        std::cout << val << "" "";
    }

    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
class User {
public:
   User(std::string name, int age) : name(name), age(age) {}
   std::string getName() { return name; }
   int getAge() { return age; }
private:
   std::string name;
   int age;
};
class UserService {
public:
   void saveUser(User user) {
      users.push_back(user);
   }
   User getUser(int index) {
      if (index < users.size()) {
         return users[index];
      }
      // Return default user if index is out of bounds
      return User(""Unknown"", 0);
   }
private:
   std::vector<User> users;
};
int main() {
   UserService service;
   service.saveUser(User(""John Doe"", 30));
   User user = service.getUser(0);
   std::cout << user.getName() << std::endl;
   return 0;
}
",code_smell,Magic Number,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public User getUserById(int userId) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String query = ""SELECT id, username, email FROM users WHERE id = "" + userId; // insecure concatenation
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();
        User user = null;
        if (rs.next()) {
            user = new User();
            user.setId(rs.getInt(""id""));
            user.setUsername(rs.getString(""username""));
            user.setEmail(rs.getString(""email""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return user;
    }
}

class User {
    private int id;
    private String username;
    private String email;
    public void setId(int id) { this.id = id; }
    public void setUsername(String username) { this.username = username; }
    public void setEmail(String email) { this.email = email; }
    // getters omitted for brevity
}",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processUserInput(const std::string& input, bool flag) {
    std::string result = input;
    if (flag) {
        result += ""_flagged"";
    }

    for (int i = 0; i < input.length(); ++i) {
        if (islower(input[i])) {
            result[i] = toupper(input[i]);
        }
    }

    return result;
}

int main() {
    std::string user_input = ""example"";
    bool flag = true;

    std::string processed = processUserInput(user_input, flag);

    std::cout << ""Processed: "" << processed << std::endl;
    return 0;
}",code_defect,off_by_one_error,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, String> users = new HashMap<>(); public void saveUser(String username, String password) { users.put(username, password); } public boolean authenticate(String username, String password) { return users.containsKey(username) && users.get(username).equals(password); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Missing error handling – if file is missing or malformed, JSON.parse will throw
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    // If load() hasn't been called, cache is null and this will throw
    return this.cache[key];
  }
}

// Global singleton used across the app
const config = new ConfigLoader('./config.json');
config.load();

function processRequest(req, res) {
  // Assume userId comes from query string without validation
  const userId = req.query.id;
  // Directly embed user input into file path – path traversal vulnerability
  const userFile = `./data/users/${userId}.json`;
  const userData = JSON.parse(fs.readFileSync(userFile, 'utf8'));
  // Business logic uses config values
  if (userData.role === config.get('adminRole')) {
    res.send('Welcome, admin!');
  } else {
    res.send('Access denied');
  }
}

module.exports = { processRequest, ConfigLoader };",code_defect,unvalidated_user_input_path_traversal_and_missing_error_handling,,openai/gpt-oss-120b
Python,"import os
import requests

API_KEY = '1234567890'

def fetch_weather_data(city_name):
    url = f'https:",code_defect,hardcoded_secret,,qwen/qwen3-32b
Java,"public class UserProcessor { private static final int MAX_RETRIES = 5; public void processUser(String userId) { for (int i = 0; i < MAX_RETRIES; i++) { try { // simulate some work String userData = fetchUserDataFromDatabase(userId); if (userData == null) { throw new RuntimeException(""User data not found""); } System.out.println(""User data: "" + userData); break; } catch (Exception e) { System.out.println(""Error processing user: "" + e.getMessage()); } } } private String fetchUserDataFromDatabase(String userId) { // simulate a database query return userId.equals(""existing_user"") ? ""Existing user data"" : null; } }",code_smell,inefficient_error_handling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : log_file(file) {}
    void process() {
        std::lock_guard<std::mutex> lock(mtx);
        std::vector<std::string> lines = readLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off‑by‑one bug: should be i < lines.size()
            std::string line = lines[i];
            if (line.find(""ERROR"") != std::string::npos) {
                ++error_count;
            }
        }
        std::cout << ""Errors: "" << error_count << std::endl;
    }
private:
    std::vector<std::string> readLines() {
        // Dummy implementation for illustration
        return {""INFO start"", ""ERROR something failed"", ""INFO end""};
    }
    std::string log_file;
    size_t error_count = 0;
    std::mutex mtx;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.process();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    private String databasePassword = ""password123"";

    public void processUserInput(String userInput) {
        String query = ""SELECT * FROM users WHERE username = '"" + userInput + ""'"";
        // Simulate executing the query
        System.out.println(""Executing query: "" + query);
        // No input sanitization or validation
    }

    public void setupDatabaseConnection() {
        // Hardcoded password in source code
        String connectionString = ""jdbc:mysql://localhost:3306/mydb?user=admin&password="" + databasePassword;
        // Simulate connection setup
        System.out.println(""Connecting to database with: "" + connectionString);
    }
}",code_defect,security_defect,,qwen/qwen3-32b
Python,"
class BankAccount:
    def __init__(self, account_number, balance=0):
        self.account_number = account_number
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        if amount > self.balance:
            return False
        self.balance -= amount
        return True

    def get_balance(self):
        return self.balance

class BankSystem:
    def __init__(self):
        self.accounts = {}

    def create_account(self, account_number, initial_balance):
        if account_number in self.accounts:
            return False
        self.accounts[account_number] = BankAccount(account_number, initial_balance)
        return True

    def get_account(self, account_number):
        return self.accounts.get(account_number)

    def transfer(self, from_account_number, to_account_number, amount):
        from_account = self.get_account(from_account_number)
        to_account = self.get_account(to_account_number)
        if from_account and to_account:
            if from_account.withdraw(amount):
                to_account.deposit(amount)
                return True
        return False

bank_system = BankSystem()
bank_system.create_account('12345', 1000)
bank_system.create_account('67890', 500)
print(bank_system.get_account('12345').get_balance())
bank_system.transfer('12345', '67890', 200)
print(bank_system.get_account('12345').get_balance())
print(bank_system.get_account('67890').get_balance())
",code_defect,race condition,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None
        self.load()

    def load(self):
        # NOTE: Using eval on file contents – insecure!
        with open(self.config_path, 'r') as f:
            data = f.read()
        self._config = eval(data)  # unsafe deserialization
        logger.info(""Configuration loaded."")

    def get(self, key, default=None):
        return self._config.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.cfg = config_loader
        self.batch_size = self.cfg.get('batch_size', 100)
        self.output_dir = self.cfg.get('output_dir', '/tmp')

    def process(self, records):
        # Process records in batches but off‑by‑one error: last batch may be skipped
        for i in range(0, len(records), self.batch_size):
            batch = records[i:i + self.batch_size - 1]
            self._handle_batch(batch)

    def _handle_batch(self, batch):
        # Simulate writing results to files
        for idx, record in enumerate(batch):
            out_path = os.path.join(self.output_dir, f""result_{idx}.json"")
            with open(out_path, 'w') as f:
                json.dump(record, f)
        logger.debug(f""Processed batch of {len(batch)} records."")

def main():
    cfg = ConfigLoader('config.cfg')
    processor = DataProcessor(cfg)
    # Simulated input data
    records = [{""id"": i, ""value"": i * 2} for i in range(250)]
    processor.process(records)

if __name__ == '__main__':
    main()",code_defect,off_by_one_error_and_unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class ReportGenerator {
    public void generateReport(String input, String format) {
        if (format.equals(""PDF"")) {
            System.out.println(""Generating PDF report..."");
            System.out.println(""Input data: "" + input);
            System.out.println(""PDF generated successfully."");
        } else if (format.equals(""CSV"")) {
            System.out.println(""Generating CSV report..."");
            System.out.println(""Input data: "" + input);
            System.out.println(""CSV generated successfully."");
        } else {
            System.out.println(""Unsupported format: "" + format);
        }
    }

    public static void main(String[] args) {
        ReportGenerator generator = new ReportGenerator();
        generator.generateReport(""Sample data"", ""PDF"");
        generator.generateReport(""More data"", ""CSV"");
        generator.generateReport(""Invalid input"", ""XML"");
    }
}",code_smell,duplicated_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) { users.push_back(user); }
    std::vector<User> getUsers() { return users; }

private:
    std::vector<User> users;
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    service.addUser(User(""Alice"", 25));

    std::vector<User> users = service.getUsers();
    for (const auto& user : users) {
        std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
    }

    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class FileCache {
  constructor(cacheDir) {
    this.cacheDir = cacheDir;
    if (!fs.existsSync(cacheDir)) {
      fs.mkdirSync(cacheDir, { recursive: true });
    }
    this.cache = {};
  }

  // Loads a file into memory and caches it
  load(key, filePath) {
    const fullPath = `${this.cacheDir}/${filePath}`;
    const data = fs.readFileSync(fullPath, 'utf8');
    this.cache[key] = data;
    return data;
  }

  // Retrieves cached data; if missing, reads from disk (but forgets to update cache)
  get(key, filePath) {
    if (this.cache[key]) {
      return this.cache[key];
    }
    const fullPath = `${this.cacheDir}/${filePath}`;
    // BUG: reading file synchronously without handling errors and not caching result
    return fs.readFileSync(fullPath, 'utf8');
  }

  // Clears a specific cache entry
  invalidate(key) {
    delete this.cache[key];
  }
}

// Example usage
const cache = new FileCache('/tmp/cache');
cache.load('config', 'config.json');
// Subsequent calls will read from disk each time instead of using the cache
const config1 = cache.get('config', 'config.json');
const config2 = cache.get('config', 'config.json');
console.log(config1 === config2); // false due to defect",code_defect,cache_miss_logic,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let results = [];
  for (let i = 0; i < data.length; i++) {
    let item = data[i];
    let processed = {};
    processed.id = item.id;
    processed.name = item.name;
    if (item.type === 'user') {
      processed.status = 'active';
    } else {
      processed.status = 'inactive';
    }
    results.push(processed);
  }
  return results;
}

function processExtraData(extraData) {
  let results = [];
  for (let i = 0; i < extraData.length; i++) {
    let item = extraData[i];
    let processed = {};
    processed.id = item.id;
    processed.name = item.name;
    if (item.type === 'user') {
      processed.status = 'active';
    } else {
      processed.status = 'inactive';n    }
    results.push(processed);
  }
  return results;
}",code_smell,duplicate_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};
class UserService {
public:
    UserService() {}
    void addUser(User user) {
        users.push_back(user);
    }
    std::vector<User> getUsers() {
        return users;
    }
private:
    std::vector<User> users;
};
int main() {
    UserService service;
    service.addUser(User(""John Doe"", 30));
    service.addUser(User(""Jane Doe"", 25));
    std::vector<User> users = service.getUsers();
    for (const auto& user : users) {
        std::cout << user.getName() << "" is "" << user.getAge() << "" years old."" << std::endl;
    }
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogProcessor {
public:
    LogProcessor(const std::string& filename) : fileName(filename) {}
    void start() {
        running = true;
        worker = std::thread(&LogProcessor::processLoop, this);
    }
    void stop() {
        running = false;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& line) {
        std::lock_guard<std::mutex> lock(queueMutex);
        queue.push_back(line);
    }
private:
    void processLoop() {
        while (running) {
            std::string line;
            {
                std::lock_guard<std::mutex> lock(queueMutex);
                if (!queue.empty()) {
                    line = queue.front();
                    queue.erase(queue.begin());
                }
            }
            // BUG: If queue is empty, 'line' remains unchanged from previous iteration
            // leading to processing the same line repeatedly.
            writeToFile(line);
        }
    }
    void writeToFile(const std::string& data) {
        // Simplified: just print to console instead of actual file I/O
        std::cout << ""Processed: "" << data << std::endl;
    }
    std::string fileName;
    std::vector<std::string> queue;
    std::mutex queueMutex;
    std::thread worker;
    bool running = false;
};

int main() {
    LogProcessor lp(""app.log"");
    lp.start();
    lp.enqueue(""first entry"");
    lp.enqueue(""second entry"");
    std::this_thread::sleep_for(std::chrono::seconds(1));
    lp.stop();
    return 0;
}",code_defect,logic_error_reprocessing_stale_data,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  let data = {};
  if (input && input.length > 0) {
    data.name = input.split(',')[0].trim();
    data.age = parseInt(input.split(',')[1].trim(), 10);
    data.email = input.split(',')[2].trim();
    if (isNaN(data.age)) {
      data.age = 0;
    }
  }
  return data;
}

function sendEmailToUser(user) {
  const emailTemplate = `Dear ${user.name},\nThank you for registering! Your details are:\nName: ${user.name}\nAge: ${user.age}\nEmail: ${user.email}`;
  console.log(`Sending email: ${emailTemplate}`);
}

function handleRegistration(input) {
  const user = processUserInput(input);
  sendEmailToUser(user);
}

handleRegistration('John Doe, 30, john.doe@example.com');",code_smell,poor_error_handling,,qwen/qwen3-32b
Java,"public class UserService { private static Map<String, User> users = new HashMap<>(); public static void addUser(User user) { users.put(user.getUsername(), user); } public static User getUser(String username) { return users.get(username); } public static void main(String[] args) { User user = new User(""john"", ""password123""); addUser(user); System.out.println(getUser(""john"").getPassword()); } } class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.configPath = configPath;
    this.cache = null;
  }

  // Loads JSON config file; caches result but never invalidates it
  loadConfig() {
    if (this.cache) return this.cache;
    const raw = fs.readFileSync(this.configPath, 'utf8');
    // BUG: JSON.parse can throw, but not caught – crashes the process
    this.cache = JSON.parse(raw);
    return this.cache;
  }

  // Returns a config value; if key missing returns undefined
  get(key) {
    const cfg = this.loadConfig();
    return cfg[key];
  }
}

// Usage example
const loader = new ConfigLoader('/etc/app/config.json');
const dbHost = loader.get('databaseHost');
console.log('DB Host:', dbHost);

// Later in the app we attempt to reload config after a change
function reloadConfig() {
  // BUG: reset cache not performed, so stale config is used
  // Intended to clear cache but mistakenly reassigns a new loader
  const loader = new ConfigLoader('/etc/app/config.json');
  // This creates a new instance but does not affect the original one used elsewhere
  console.log('Config reloaded');
}

module.exports = { ConfigLoader, reloadConfig };",code_defect,unhandled_exception_and_stale_cache,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class UserProcessor {
public:
    void processUsers(const std::vector<std::string>& users) {
        for (const auto& user : users) {
            if (user.empty()) {
                continue;
            }
            if (user.length() > 255) {
                std::cerr << ""User name too long: "" << user << std::endl;
                continue;
            }
            if (user.find(''') != std::string::npos) {
                std::cerr << ""User name contains invalid character: "" << user << std::endl;
                continue;
            }
            // Simulate some processing
            std::cout << ""Processing user: "" << user << std::endl;
        }
    }
};

int main() {
    std::vector<std::string> users = {""Alice"", ""Bob"", ""Charlie@"", """", ""Alice O'Connor""};
    UserProcessor processor;
    processor.processUsers(users);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    std::string name;
    int salary;

    Employee(std::string n, int s) : name(n), salary(s) {}

    bool operator<(const Employee& other) const {
        return salary < other.salary;
    }
};

class EmployeeManager {
public:
    std::vector<Employee> employees;

    void addEmployee(const Employee& employee) {
        employees.push_back(employee);
    }

    void sortEmployees() {
        std::sort(employees.begin(), employees.end());
    }

    Employee getHighestPaidEmployee() {
        if (employees.empty()) {
            return Employee("""", 0);
        }
        return *std::max_element(employees.begin(), employees.end());
    }
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 50000));
    manager.addEmployee(Employee(""Alice"", 60000));
    manager.sortEmployees();
    Employee highestPaid = manager.getHighestPaidEmployee();
    std::cout << highestPaid.name << std::endl;
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""admin123""; // hardcoded secret

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        String query = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk if limit derived from user
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                payments.add(rs.getString(""payment_id""));
            }
        }
        return payments;
    }

    public void processPayments() throws SQLException {
        List<String> pending = getPendingPayments(100);
        for (String paymentId : pending) {
            // Simulate processing
            boolean success = externalPaymentGatewayCall(paymentId);
            updatePaymentStatus(paymentId, success ? ""COMPLETED"" : ""FAILED"");
        }
    }

    private boolean externalPaymentGatewayCall(String paymentId) {
        // Placeholder for external call, always returns true for demo
        return true;
    }

    private void updatePaymentStatus(String paymentId, String status) throws SQLException {
        String update = ""UPDATE payments SET status='"" + status + ""' WHERE payment_id='"" + paymentId + ""'""; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(update)) {
            stmt.executeUpdate();
        }
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"function processUserInput(input) {
  let result = '';
  if (input) {
    if (input.length > 0) {
      for (let i = 0; i < input.length; i++) {
        if (input[i] === 'a') {
          result += 'apple';
        } else if (input[i] === 'b') {
          result += 'banana';
        } else if (input[i] === 'c') {
          result += 'cherry';
        } else {
          result += input[i];
        }
      }
    }
  }
  return result;
}

function main() {
  const userInput = 'abc';
  const processed = processUserInput(userInput);
  console.log(processed);
}

main();",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
       constructor(paymentGateway) {
           this.paymentGateway = paymentGateway;
       }

       processPayment(amount, currency) {
           if (amount <= 0) {
               throw new Error('Invalid amount');
           }
           const paymentResult = this.paymentGateway.chargeCard(amount, currency);
           if (paymentResult.success) {
               return paymentResult.transactionId;
           } else {
               return null;
           }
       }
   }

   class PaymentGateway {
       chargeCard(amount, currency) {
           // Simulating a payment gateway API call
           return { success: true, transactionId: 'TRANSACTION_ID' };
       }
   }

   const paymentGateway = new PaymentGateway();
   const paymentProcessor = new PaymentProcessor(paymentGateway);
   const transactionId = paymentProcessor.processPayment(100, 'USD');
   console.log(transactionId);
   ",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}
    void addTransaction(int amount) {
        // No validation of amount, can be negative
        std::lock_guard<std::mutex> lock(mtx_);
        pending_.push_back(amount);
    }
    void processAll() {
        // Process pending transactions without clearing the vector safely
        for (size_t i = 0; i <= pending_.size(); ++i) {
            total_ += pending_[i]; // Off‑by‑one leads to out‑of‑bounds read
        }
        pending_.clear();
    }
    int getTotal() const { return total_; }
private:
    std::vector<int> pending_;
    int total_;
    mutable std::mutex mtx_;
};

int main() {
    TransactionProcessor tp;
    tp.addTransaction(100);
    tp.addTransaction(-50); // Negative amount allowed
    std::thread t1([&tp](){ tp.processAll(); });
    std::thread t2([&tp](){ tp.processAll(); }); // Concurrent processing without proper sync
    t1.join();
    t2.join();
    std::cout << ""Total: "" << tp.getTotal() << std::endl;
    return 0;
}
",code_defect,off_by_one_and_race_condition,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    private List<User> users;

    public UserProcessor(List<User> users) {
        this.users = users;
    }

    public void processUsers() {
        for (User user : users) {
            if (user.isActive()) {
                if (user.getRole().equals(""ADMIN"")) {
                    user.grantAccess();
                } else if (user.getRole().equals(""MODERATOR"")) {
                    user.grantAccess();
                } else {
                    user.denyAccess();
                }
            } else {
                user.denyAccess();
            }
        }
    }

    // Legacy code - to be removed
    // public void deprecatedProcessUsers() {
    //     users.forEach(user -> user.denyAccess());
    // }

    public static class User {
        private String role;
        private boolean active;

        public User(String role, boolean active) {
            this.role = role;
            this.active = active;
        }

        public String getRole() {
            return role;
        }

        public boolean isActive() {
            return active;
        }

        public void grantAccess() {
            System.out.println(""Access granted."");
        }

        public void denyAccess() {
            System.out.println(""Access denied."");
        }
    }
}",code_smell,duplicate_condition,,qwen/qwen3-32b
Python,"class UserManager:
    def __init__(self, db_connection):
        self.db_connection = db_connection
        self.users = {}

    def add_user(self, user_id, username, email):
        if user_id not in self.users:
            self.users[user_id] = {'username': username, 'email': email}
            self.db_connection.execute('INSERT INTO users (id, username, email) VALUES (?, ?, ?)', (user_id, username, email))
        else:
            self.users[user_id]['username'] = username
            self.users[user_id]['email'] = email
            self.db_connection.execute('UPDATE users SET username = ?, email = ? WHERE id = ?', (username, email, user_id))

    def get_user(self, user_id):
        return self.users.get(user_id)

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
            self.db_connection.execute('DELETE FROM users WHERE id = ?', (user_id,))
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize || 10;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn returns a promise resolving to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off‑by‑one error – should use pageNumber - 1 for zero‑based index
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    const next = this.currentPage + 1;
    const page = this.getPage(next);
    if (page.length > 0) {
      this.currentPage = next;
    }
    return page;
  }
}

// Example usage
const paginator = new Paginator(5);
await paginator.loadItems(() => Promise.resolve([1,2,3,4,5,6,7,8,9,10]));
console.log('First page:', paginator.getPage(1)); // Expected [1,2,3,4,5] but gets [] due to bug
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processUserData(userInput) {
  let processedData = [];

  for (let i = 0; i < userInput.length; i++) {
    const item = userInput[i];
    let result = '';

    if (item.type === 'text') {
      result = item.value.toUpperCase();
    } else if (item.type === 'number') {
      result = item.value * 2;
    } else if (item.type === 'boolean') {
      result = !item.value;
    } else {
      result = null;
    }

    processedData.push(result);
  }

  return processedData;
}

// Example usage
const input = [
  { type: 'text', value: 'hello' },
  { type: 'number', value: 42 },
  { type: 'boolean', value: true },
  { type: 'unknown', value: 123 }
];

const output = processUserData(input);
console.log(output);",code_smell,large_function,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(merchantId, apiKey) {
         this.merchantId = merchantId;
         this.apiKey = apiKey;
      }

      processPayment(amount, currency, cardNumber, expirationDate, cvv) {
         const paymentData = {
            amount: amount,
            currency: currency,
            cardNumber: cardNumber,
            expirationDate: expirationDate,
            cvv: cvv
         };

         const xml = `
            <?xml version='1.0' encoding='utf-8'?>
            <payment>
               <amount>${amount}</amount>
               <currency>${currency}</currency>
               <cardNumber>${cardNumber}</cardNumber>
               <expirationDate>${expirationDate}</expirationDate>
               <cvv>${cvv}</cvv>
            </payment>
         `;

         const https = require('https');
         const options = {
            method: 'POST',
            hostname: 'payment-gateway.com',
            path: '/process',
            headers: {
               'Content-Type': 'application/xml',
               'Authorization': 'Bearer ' + this.apiKey
            }
         };

         const req = https.request(options, (res) => {
            let data = '';
            res.on('data', (chunk) => {
               data += chunk;
            });
            res.on('end', () => {
               console.log(data);
            });
         });

         req.on('error', (error) => {
            console.error(error);
         });

         req.write(xml);
         req.end();
      }
   }

   const paymentProcessor = new PaymentProcessor('12345', 'my_api_key');
   paymentProcessor.processPayment(10.99, 'USD', '1234-1234-1234-1234', '12/2025', '123');
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a log file
    async getUserProfile(userId) {
        // Missing validation: userId could be undefined or malicious
        const user = await this.db.query('SELECT * FROM users WHERE id = ' + userId);
        if (!user) {
            throw new Error('User not found');
        }
        // Async file write without awaiting - race condition
        fs.writeFile('/var/log/user_access.log', `User ${userId} accessed at ${new Date().toISOString()}\n`, (err) => {
            if (err) console.error('Log write failed');
        });
        return user;
    }
}

// Example usage
(async () => {
    const fakeDb = {
        query: async (sql) => {
            // Simulate SQL injection vulnerability
            if (sql.includes('DROP')) return null;
            return { id: 1, name: 'Alice' };
        }
    };
    const service = new UserService(fakeDb);
    const profile = await service.getUserProfile('1; DROP TABLE users');
    console.log('Profile:', profile);
})();",code_defect,SQL_injection_and_race_condition,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUser(User user) {
        if (user != null && user.getEmail() != null && !user.getEmail().isEmpty()) {
            String email = user.getEmail().trim();
            if (isValidEmail(email)) {
                String normalizedEmail = email.toLowerCase();
                if (normalizedEmail.contains(""@example.com"")) {
                    System.out.println(""Processing example user: "" + normalizedEmail);
                } else {
                    System.out.println(""Skipping non-example user: "" + normalizedEmail);
                }
            }
        }
    }

    private boolean isValidEmail(String email) {
        return email != null && email.matches(""^[A-Za-z0-9+_.-]+@(.+$)?"");
    }
}",code_smell,long_method,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = "" + str(user_id))
        user_data = cursor.fetchone()
        return user_data

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data

    def update_user(self, user_id, new_email):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET email = '"" + new_email + ""' WHERE id = "" + str(user_id))
        self.db_connection.commit()

# usage
import sqlite3
db_connection = sqlite3.connect(':memory:')
cursor = db_connection.cursor()
cursor.execute(""CREATE TABLE users (id INTEGER, email TEXT)"")
cursor.execute(""INSERT INTO users VALUES (1, 'user1@example.com')"")
cursor.execute(""INSERT INTO users VALUES (2, 'user2@example.com')"")
user_service = UserService(db_connection)
print(user_service.get_user(1))
print(user_service.get_all_users())
user_service.update_user(1, 'new_email@example.com')
print(user_service.get_user(1))
",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigManager:
    def __init__(self, config_path: str):
        self.config_path = config_path
        self._config = {}
        self._load_config()

    def _load_config(self):
        # NOTE: This loads JSON without any validation. If the file is tampered, arbitrary objects could be injected.
        with open(self.config_path, 'r') as f:
            self._config = json.load(f)
        logger.info('Configuration loaded')

    def get(self, key: str, default=None):
        return self._config.get(key, default)

    def set(self, key: str, value):
        self._config[key] = value
        self._save_config()

    def _save_config(self):
        # Overwrites the config file directly; no backup or atomic write.
        with open(self.config_path, 'w') as f:
            json.dump(self._config, f, indent=2)
        logger.info('Configuration saved')

class UserService:
    def __init__(self, db_path: str, config: ConfigManager):
        self.db_path = db_path
        self.config = config
        self._ensure_db()

    def _ensure_db(self):
        if not os.path.exists(self.db_path):
            with open(self.db_path, 'w') as f:
                f.write('[]')  # simple JSON list for users

    def add_user(self, username: str, password: str):
        # Password stored in plain text! Also no duplicate check.
        with open(self.db_path, 'r+') as f:
            users = json.load(f)
            users.append({'username': username, 'password': password})
            f.seek(0)
            json.dump(users, f, indent=2)
            f.truncate()
        logger.info(f'User {username} added')

    def authenticate(self, username: str, password: str) -> bool:
        with open(self.db_path, 'r') as f:
            users = json.load(f)
            for user in users:
                if user['username'] == username and user['password'] == password:
                    return True
        return False

# Example usage (would be in production code)
config = ConfigManager('app_config.json')
service = UserService('users.json', config)
service.add_user('admin', 'secret123')
print('Authenticated:', service.authenticate('admin', 'secret123'))",code_defect,insecure_password_storage,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private List<String> users;

    public UserProcessor(List<String> users) {
        this.users = users;
    }

    public List<String> processUsers() {
        List<String> processedUsers = new ArrayList<>();
        for (String user : users) {
            if (user != null && !user.isEmpty()) {
                String processed = user.trim().toLowerCase();
                if (!processed.equals(""admin"")) {
                    processedUsers.add(processed);
                }
            }
        }
        return processedUsers;
    }

    private void someUnusedMethod() {
        // Legacy code that's no longer used
        System.out.println(""This is unused"");
    }
}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
       constructor(paymentGateway) {
           this.paymentGateway = paymentGateway;
       }

       processPayment(amount, currency) {
           if (amount <= 0) {
               throw new Error('Invalid amount');
           }
           return new Promise((resolve, reject) => {
               setTimeout(() => {
                   this.paymentGateway.charge(amount, currency, (error, result) => {
                       if (error) {
                           reject(error);
                       } else {
                           resolve(result);
                       }
                   });
               }, 1000);
           });
       }
   }

   class PaymentGateway {
       charge(amount, currency, callback) {
           // Simulating a payment processing delay
           setTimeout(() => {
               callback(null, { status: 'success', transactionId: '12345' });
           }, 2000);
       }
   }

   const paymentGateway = new PaymentGateway();
   const paymentProcessor = new PaymentProcessor(paymentGateway);

   paymentProcessor.processPayment(100, 'USD').then((result) => {
       console.log(result);
   }).catch((error) => {
       console.error(error);
   });
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class OrderProcessor {
    private Connection conn;
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/shop"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public OrderProcessor() throws SQLException {
        conn = DriverManager.getConnection(DB_URL, USER, PASS);
    }

    public List<String> getPendingOrders(int limit) throws SQLException {
        List<String> orders = new ArrayList<>();
        String query = ""SELECT order_id FROM orders WHERE status='PENDING' LIMIT "" + limit; // insecure concatenation
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(query);
        while (rs.next()) {
            orders.add(rs.getString(""order_id""));
        }
        rs.close();
        stmt.close();
        return orders;
    }

    public void processOrders() {
        try {
            List<String> pending = getPendingOrders(100);
            for (String orderId : pending) {
                // Simulate processing
                updateOrderStatus(orderId, ""PROCESSED"");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateOrderStatus(String orderId, String status) throws SQLException {
        String sql = ""UPDATE orders SET status='"" + status + ""' WHERE order_id='"" + orderId + ""'""; // SQL injection risk
        Statement stmt = conn.createStatement();
        stmt.executeUpdate(sql);
        stmt.close();
    }

    public void close() throws SQLException {
        if (conn != null && !conn.isClosed()) {
            conn.close();
        }
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order != null && order.isValid()) {
                applyDiscounts(order);
                calculateTotal(order);
                saveToDatabase(order);
            }
        }
    }

    private void applyDiscounts(Order order) {
        if (order.getCustomerType() == CustomerType.VIP) {
            order.setTotal(order.getTotal() * 0.9);
        } else if (order.getCustomerType() == CustomerType.REGULAR) {
            order.setTotal(order.getTotal() * 0.95);
        }
    }

    private void calculateTotal(Order order) {
        double total = 0;
        for (OrderItem item : order.getItems()) {
            total += item.getPrice() * item.getQuantity();
        }
        order.setTotal(total);
    }

    private void saveToDatabase(Order order) {
        // Simulate database operation
        System.out.println(""Saving order: "" + order.getId());
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(merchantId, apiKey) {
         this.merchantId = merchantId;
         this.apiKey = apiKey;
      }

      processPayment(amount, currency, cardDetails) {
         const paymentGatewayUrl = 'https://example.com/payment';
         const headers = {
            'Authorization': 'Bearer ' + this.apiKey,
            'Content-Type': 'application/json'
         };
         const paymentData = {
            'amount': amount,
            'currency': currency,
            'cardDetails': cardDetails
         };

         // Using a timeout to simulate a delay, which could potentially lead to a race condition if not handled properly
         setTimeout(() => {
            fetch(paymentGatewayUrl, {
               method: 'POST',
               headers: headers,
               body: JSON.stringify(paymentData)
            })
            .then(response => response.json())
            .then(data => console.log(data))
            .catch(error => console.error(error));
         }, 1000);
      }
   }

   const paymentProcessor = new PaymentProcessor('MERCHANT123', 'APIKEY123');
   paymentProcessor.processPayment(100, 'USD', { cardNumber: '1234-1234-1234-1234', expirationDate: '12/25', cvv: '123' });
   ",code_defect,race_condition,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        # Insecure: directly eval content, allowing code execution if file is tampered
        with open(self.path, 'r') as f:
            data = f.read()
            self.config = eval(data)  # unsafe deserialization

    def get(self, key, default=None):
        return self.config.get(key, default)

class UserService:
    def __init__(self, config_path):
        self.cfg = ConfigLoader(config_path)
        self.users = {}
        self._populate()

    def _populate(self):
        # Simulate loading users from a DB; here we just hardcode for demo
        self.users = {
            1: {'name': 'Alice', 'role': 'admin'},
            2: {'name': 'Bob', 'role': 'user'}
        }

    def get_user_role(self, user_id):
        return self.users[user_id]['role']

    def is_admin(self, user_id):
        return self.get_user_role(user_id) == 'admin'

def main():
    service = UserService('config.cfg')
    if service.is_admin(2):
        print('User is admin')
    else:
        print('User is not admin')

if __name__ == '__main__':
    main()",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order, User user, boolean isPriority, String promoCode) {
        if (order == null || user == null) {
            return;
        }

        if (order.getItems().isEmpty()) {
            System.out.println(""Order has no items."");
            return;
        }

        double totalPrice = 0;
        for (Item item : order.getItems()) {
            totalPrice += item.getPrice();
        }

        if (isPriority) {
            totalPrice *= 1.15; // Priority fee
        }

        if (promoCode != null && promoCode.equals(""SUMMER2023"")) {
            totalPrice *= 0.9; // Apply discount
        }

        if (user.getBalance() >= totalPrice) {
            deductBalance(user, totalPrice);
            System.out.println(""Order processed successfully."");
        } else {
            System.out.println(""Insufficient balance."");
        }
    }

    private void deductBalance(User user, double amount) {
        user.setBalance(user.getBalance() - amount);
    }
}",code_smell,large_method,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserRepository {
public:
    vector<User> users;
    void addUser(User u) { users.push_back(u); }
    User* getUserByName(string name) {
        for (auto& user : users) {
            if (user.name == name) return &user;
        }
        return nullptr;
    }
};

int main() {
    UserRepository repo;
    repo.addUser(User(""John"", 30));
    User* user = repo.getUserByName(""John"");
    if (user) cout << user->name << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserReportGenerator {
    constructor(db) {
        this.db = db;
    }

    // Generates a CSV report for a list of user IDs
    generateReport(userIds) {
        // NOTE: This method does everything – fetching, formatting, and writing
        let csv = 'id,name,email,age\n';
        for (let i = 0; i < userIds.length; i++) {
            const user = this.db.getUserById(userIds[i]); // synchronous DB call
            if (!user) continue;
            // Magic numbers for age categories
            let ageCategory = '';
            if (user.age < 18) ageCategory = 'minor';
            else if (user.age < 65) ageCategory = 'adult';
            else ageCategory = 'senior';
            csv += `${user.id},${user.name},${user.email},${ageCategory}\n`;
        }
        // Write to file – path is hardcoded
        fs.writeFileSync('/var/reports/user_report.csv', csv);
        return '/var/reports/user_report.csv';
    }
}

// Usage example (in production this would be elsewhere)
const db = require('./db'); // heavy module, imported even if not needed
const reportGen = new UserReportGenerator(db);
const ids = [1,2,3,4,5,6,7,8,9,10];
reportGen.generateReport(ids);",code_smell,god_class_and_magic_numbers,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUser(User user) {
        if (user != null) {
            String name = user.getName();
            if (name != null && !name.isEmpty()) {
                name = name.trim();
                System.out.println(""Processing user: "" + name);
            }
            String email = user.getEmail();
            if (email != null && email.contains(""@"")) {
                System.out.println(""User email: "" + email);
            }
            boolean isVerified = user.isVerified();
            if (isVerified) {
                System.out.println(""User is verified."");
            } else {
                System.out.println(""User is NOT verified."");
            }
        }
    }
}",code_smell,long_method,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data

    def update_user(self, user_id, new_email):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET email = %s WHERE id = %s"", (new_email, user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()

    def create_user(self, name, email):
        cursor = self.db_connection.cursor()
        cursor.execute(""INSERT INTO users (name, email) VALUES (%s, %s)"", (name, email))
        self.db_connection.commit()
",code_smell,God class,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_schema()

    def _ensure_schema(self):
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        email TEXT NOT NULL
                      )''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> int:
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        user_id = cur.lastrowid
        conn.commit()
        conn.close()
        return user_id

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('SELECT id, username, email FROM users ORDER BY id LIMIT ? OFFSET ?', (page_size, offset))
        rows = cur.fetchall()
        conn.close()
        # BUG: off‑by‑one error – returns one extra record when page is 1
        if page == 1:
            rows = rows[:-1]
        return [{'id': r[0], 'username': r[1], 'email': r[2]} for r in rows]

# Example usage
repo = UserRepository('app.db')
for i in range(1, 31):
    repo.add_user(f'user{i}', f'user{i}@example.com')
print(repo.get_users_page(1, 10))  # Expected 10 users, but returns 9 due to bug",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void process_data(const std::vector<int>& data, int id) {
    for (int val : data) {
        if (val % 2 == 0) {
            std::lock_guard<std::mutex> lock(mtx);
            std::cout << ""Thread "" << id << "" processing: "" << val << std::endl;
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<std::thread> threads;

    for (int i = 0; i < 4; ++i) {
        threads.emplace_back(process_data, input, i);
    }

    for (auto& t : threads) {
        t.join();
    }

    return 0;
}",code_defect,data_racing,,qwen/qwen3-32b
Java,"public class UserDAO { private static final String DB_PASSWORD = ""mysecretpassword""; private Connection connection; public UserDAO() { try { Class.forName(""com.mysql.cj.jdbc.Driver""); connection = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""myuser"", DB_PASSWORD); } catch (Exception e) { System.out.println(""Error connecting to database: "" + e.getMessage()); } } public List<User> getAllUsers() { List<User> users = new ArrayList<>(); try { Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(""SELECT * FROM users""); while (resultSet.next()) { User user = new User(); user.setId(resultSet.getInt(""id"")); user.setName(resultSet.getString(""name"")); users.add(user); } } catch (Exception e) { System.out.println(""Error retrieving users: "" + e.getMessage()); } return users; } }",code_smell,hardcoded_secrets,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if(worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void process() {
        while(!stopFlag) {
            std::string msg;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if(!queue.empty()) {
                    msg = queue.front();
                    queue.erase(queue.begin());
                }
            }
            // Simulate processing
            std::cout << ""Processed: "" << msg << std::endl;
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main(){
    LogProcessor lp;
    lp.start();
    for(int i=0;i<5;++i){
        lp.enqueue(""Message "" + std::to_string(i));
    }
    // Missing lp.stop(); leads to thread running after main exits
    return 0;
}
",code_defect,missing_thread_join_on_exit,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

def process_user_data(data):
    processed = []
    for entry in data:
        if entry.get('status') == 'active':
            user = {
                'username': entry['username'],
                'email': entry['email'],
                'joined': datetime.strptime(entry['joined'], '%Y-%m-%d').date(),
                'last_login': entry.get('last_login')
            }
            processed.append(user)

    with open('processed_users.json', 'w') as f:
        json.dump(processed, f, indent=2)

    return processed

# Legacy code, might be removed later
# def old_processing(data):
#     return [x for x in data if x['status'] == 'active']

if __name__ == '__main__':
    with open('users.json', 'r') as f:
        raw_data = json.load(f)
    
    result = process_user_data(raw_data)
    print(f'Processed {len(result)} users.')",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class OrderProcessor { private static final double TAX_RATE = 0.08; public void processOrder(Order order) { double subtotal = 0; for (OrderItem item : order.getItems()) { subtotal += item.getPrice() * item.getQuantity(); } double tax = subtotal * TAX_RATE; double total = subtotal + tax; System.out.println(""Order Total: $"" + String.format(""%.2f"", total)); } } class Order { private List<OrderItem> items; public List<OrderItem> getItems() { return items; } public void setItems(List<OrderItem> items) { this.items = items; } } class OrderItem { private double price; private int quantity; public double getPrice() { return price; } public void setPrice(double price) { this.price = price; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; }}",code_smell,god_class,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize || 10;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn should return a promise resolving to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off-by-one error, pageNumber is 1-based but calculation treats it as 0-based
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    const next = this.currentPage + 1;
    const page = this.getPage(next);
    if (page.length > 0) {
      this.currentPage = next;
    }
    return page;
  }
}

// Example usage
const paginator = new Paginator(5);
await paginator.loadItems(() => Promise.resolve([1,2,3,4,5,6,7,8,9,10]));
console.log('First page:', paginator.getPage(1)); // Expected [1,2,3,4,5] but gets [] due to bug
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"function processOrders(orders, discount) {
  for (let i = 0; i < orders.length; i++) {
    orders[i].total = orders[i].price * orders[i].quantity;
    if (orders[i].total > 100) {
      orders[i].total *= 1 - discount;
    }
    console.log(`Order processed: ${orders[i].id}, Total: $${orders[i].total.toFixed(2)}`);
  }
}

function calculateMonthlyRevenue(orders) {
  let totalRevenue = 0;
  for (let i = 0; i < orders.length; i++) {
    totalRevenue += orders[i].total;
  }
  return totalRevenue;
}

const ordersData = [
  { id: 1, price: 50, quantity: 2 },
  { id: 2, price: 75, quantity: 1 },
  { id: 3, price: 30, quantity: 4 }
];

processOrders(ordersData, 0.1);
console.log(`Total monthly revenue: $${calculateMonthlyRevenue(ordersData).toFixed(2)}`);",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};
class UserRepository {
public:
    void addUser(User user) { users.push_back(user); }
    User getUser(int index) { return users[index]; }
private:
    std::vector<User> users;
};
int main() {
    UserRepository repository;
    repository.addUser(User(""John Doe"", 30));
    User user = repository.getUser(0);
    std::cout << user.getName() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json, os, logging

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        # Insecure: directly evals file content, allowing code execution if file is tampered
        with open(self.path, 'r') as f:
            data = f.read()
            self.config = eval(data)  # unsafe

    def get(self, key, default=None):
        return self.config.get(key, default)

class UserService:
    def __init__(self, config_path):
        self.cfg = ConfigLoader(config_path)
        self.db_url = self.cfg.get('db_url')
        self.logger = logging.getLogger('UserService')

    def fetch_user(self, user_id):
        # Simulated DB fetch; missing error handling for missing user
        query = f""SELECT * FROM users WHERE id = {user_id}""  # potential SQL injection
        result = self._execute_query(query)
        return result[0]  # may raise IndexError if result empty

    def _execute_query(self, query):
        # Placeholder for DB execution; returns empty list for demo
        self.logger.debug(f""Executing query: {query}"")
        return []

if __name__ == '__main__':
    service = UserService('config.cfg')
    user = service.fetch_user(42)
    print(json.dumps(user))
",code_defect,unsafe_eval_and_sql_injection,,openai/gpt-oss-120b
Python,"import time

class UserManager:
    def __init__(self):
        self.users = []

    def add_user(self, name, email, is_admin=False):
        user = {
            'name': name,
            'email': email,
            'is_admin': is_admin
        }
        self.users.append(user)

    def send_email(self, user_email, subject, content):
        # Simulate sending an email
        print(f""Sending email to {user_email} with subject '{subject}'..."")
        time.sleep(1)  # Simulated delay
        print('Email sent successfully.')

    def notify_users(self, message):
        for user in self.users:
            if user['is_admin']:
                self.send_email(user['email'], 'Admin Message', message)
            else:
                self.send_email(user['email'], 'User Message', message)

    def remove_user(self, email):
        for user in self.users:
            if user['email'] == email:
                self.users.remove(user)
                return True
        return False

# Example usage
if __name__ == ""__main__"":
    manager = UserManager()
    manager.add_user('Alice', 'alice@example.com', True)
    manager.add_user('Bob', 'bob@example.com')
    manager.notify_users('System is going down for maintenance.')
    manager.remove_user('bob@example.com')",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticateUser(String username, String password) {
        if (username == null || password == null) {
            return false;
        }
        return password.equals(DEFAULT_PASSWORD);
    }
}",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}

    void addTransaction(int amount) {
        // No synchronization – race condition when called from multiple threads
        total_ += amount;
    }

    int getTotal() const {
        return total_;
    }

private:
    int total_; // shared mutable state
};

void worker(TransactionProcessor& processor, const std::vector<int>& data) {
    for (int val : data) {
        processor.addTransaction(val);
    }
}

int main() {
    TransactionProcessor processor;
    std::vector<int> batch1 = {10, 20, 30, 40, 50};
    std::vector<int> batch2 = {5, 15, 25, 35, 45};

    std::thread t1(worker, std::ref(processor), std::cref(batch1));
    std::thread t2(worker, std::ref(processor), std::cref(batch2));

    t1.join();
    t2.join();

    std::cout << ""Total: "" << processor.getTotal() << std::endl;
    return 0;
}
",code_defect,race_condition,,openai/gpt-oss-120b
JavaScript,"function processUserTransactions(transactions) {
  let total = 0;
  let summary = '';
  for (let i = 0; i < transactions.length; i++) {
    if (transactions[i].type === 'debit') {
      total -= transactions[i].amount;
    } else if (transactions[i].type === 'credit') {
      total += transactions[i].amount;
    }

    summary += `Processed transaction: ${transactions[i].description} (Amount: $${transactions[i].amount})\n`;
  }

  console.log('Summary:\n' + summary);
  return total;
}

const userTransactions = [
  { type: 'debit', amount: 100, description: 'Groceries' },
  { type: 'credit', amount: 500, description: 'Salary' },
  { type: 'debit', amount: 50, description: 'Entertainment' },
];

const balance = processUserTransactions(userTransactions);
console.log(`Final balance: $${balance}`);",code_smell,large_function,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    Student(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class StudentDatabase {
public:
    void addStudent(Student student) { students.push_back(student); }
    void removeStudent(Student student) {
        for (auto it = students.begin(); it != students.end(); ++it) {
            if (it->getName() == student.getName() && it->getAge() == student.getAge()) {
                students.erase(it);
                break;
            }
        }
    }

    void printStudents() {
        for (const auto& student : students) {
            std::cout << student.getName() << "" "" << student.getAge() << std::endl;
        }
    }

private:
    std::vector<Student> students;
};

int main() {
    StudentDatabase db;
    db.addStudent(Student(""John"", 20));
    db.addStudent(Student(""Alice"", 22));
    db.printStudents();
    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogBuffer {
public:
    void addEntry(const std::string& entry) {
        std::lock_guard<std::mutex> lock(mtx_);
        buffer_.push_back(entry);
    }
    std::vector<std::string> flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        std::vector<std::string> copy = buffer_;
        buffer_.clear();
        return copy;
    }
private:
    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

void worker(LogBuffer& log, int id) {
    for (int i = 0; i < 1000; ++i) {
        log.addEntry(""Thread "" + std::to_string(id) + "" entry "" + std::to_string(i));
    }
}

int main() {
    LogBuffer log;
    std::thread t1(worker, std::ref(log), 1);
    std::thread t2(worker, std::ref(log), 2);
    t1.join();
    // Missing t2.join(); leads to data race on destruction of log
    auto entries = log.flush();
    std::cout << ""Flushed "" << entries.size() << "" entries"" << std::endl;
    return 0;
}
",code_defect,missing_thread_join,,openai/gpt-oss-120b
Python,"import os
import json


class ConfigLoader:
    def __init__(self):
        self._config_path = ""config.json""
        self._config_data = None

    def load_config(self):
        try:
            with open(self._config_path, 'r') as f:
                self._config_data = json.load(f)
        except FileNotFoundError:
            print(""Config file not found. Using default values."")
            self._config_data = {""host"": ""localhost"", ""port"": 8080}

    def get_database_url(self):
        return f""{self._config_data['db_type']}://{self._config_data['user']}:"" \
               f""{self._config_data['password']}@{self._config_data['host']}:"" \
               f""{self._config_data['port']}/{self._config_data['database']}""


if __name__ == ""__main__"":
    config_loader = ConfigLoader()
    config_loader.load_config()
    print(config_loader.get_database_url())",code_defect,missing_error_handling,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

class Person {
public:
    std::string name;
    int age;
    Person(std::string n, int a) : name(n), age(a) {}
};

class PersonDatabase {
public:
    void addPerson(Person p) { people.push_back(p); }
    void sortPeople() { std::sort(people.begin(), people.end(), [](Person a, Person b) { return a.age < b.age; }); }
    void printPeople() {
        for (Person p : people) {
            std::cout << p.name << "" is "" << p.age << "" years old.\n"";
        }
    }
private:
    std::vector<Person> people;
};

int main() {
    PersonDatabase db;
    db.addPerson(Person(""John"", 30));
    db.addPerson(Person(""Alice"", 25));
    db.sortPeople();
    db.printPeople();
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // BUG: If no task was available, task remains 0 and is processed anyway
            std::cout << ""Processing: "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 1; i <= 5; ++i) dp.addTask(i);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}
",code_defect,logic_error_processing_empty_queue,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(std::vector<std::string>& userInputs) {
    std::string input;
    while (true) {
        std::cout << ""Enter input (type 'exit' to quit): "";
        std::getline(std::cin, input);
        if (input == ""exit"") {
            break;
        }
        userInputs.push_back(input);
    }
}

void printUserInputs(const std::vector<std::string>& userInputs) {
    std::cout << ""User inputs:
"";
    for (const auto& input : userInputs) {
        std::cout << input << std::endl;
    }
}

int main() {
    std::vector<std::string> userInputs;
    processUserInput(userInputs);
    printUserInputs(userInputs);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final int MAX_RETRIES = 3; public void processPayment(String paymentId) { for (int i = 0; i < MAX_RETRIES; i++) { try { // Simulate payment processing with potential exceptions throw new RuntimeException(""Payment processing failed""); } catch (RuntimeException e) { if (i < MAX_RETRIES - 1) { System.out.println(""Retrying payment processing...""); } else { System.out.println(""Payment processing failed after "" + MAX_RETRIES + "" retries""); } } } } }",code_defect,infinite_retry_with_unhandled_exception,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cur = self.conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        data TEXT)''')
        self.conn.commit()

    def add_user(self, username, data):
        cur = self.conn.cursor()
        # Directly embedding user input into SQL leads to injection vulnerability
        cur.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')"")
        self.conn.commit()

    def get_user(self, user_id):
        cur = self.conn.cursor()
        cur.execute('SELECT username, data FROM users WHERE id = ?', (user_id,))
        row = cur.fetchone()
        if row:
            username, data_json = row
            return {'username': username, 'data': json.loads(data_json)}
        return None

    def delete_all(self):
        # Dangerous operation without confirmation
        cur = self.conn.cursor()
        cur.execute('DELETE FROM users')
        self.conn.commit()

# Example usage
if __name__ == '__main__':
    manager = UserManager('users.db')
    manager.add_user('admin', {'role': 'admin', 'token': os.getenv('ADMIN_TOKEN')})
    user = manager.get_user(1)
    print(user)",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"function processUserData(userData) {
  let result = [];
  for (let i = 0; i < userData.length; i++) {
    if (userData[i].type === 'active') {
      for (let j = 0; j < userData.length; j++) {
        if (userData[i].id === userData[j].id) {
          result.push(userData[j]);
        }
      }
    }
  }
  return result;
}

function fetchActiveUsers() {
  const allUsers = [
    { id: 1, name: 'Alice', type: 'active' },
    { id: 2, name: 'Bob', type: 'inactive' },
    { id: 1, name: 'Alice', type: 'active' },
    { id: 3, name: 'Charlie', type: 'active' }
  ];
  return processUserData(allUsers);
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Python,"
class UserDatabase:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username in self.users:
            return False
        self.users[username] = password
        return True

    def authenticate(self, username, password):
        if username not in self.users:
            return False
        return self.users[username] == password

    def get_all_users(self):
        return list(self.users.keys())

    def delete_user(self, username):
        if username not in self.users:
            return False
        del self.users[username]
        return True

db = UserDatabase()
db.add_user('admin', 'password123')
print(db.authenticate('admin', 'password123'))  # prints: True
print(db.get_all_users())  # prints: ['admin']
db.delete_user('admin')
print(db.get_all_users())  # prints: []
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i]; // out‑of‑bounds read may crash
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << "" Odd sum: "" << processor.getOddSum() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.users = [];
  }

  registerUser(username, password, email, isVerified, role, preferences) {
    const user = {
      username,
      password,
      email,
      isVerified,
      role,
      preferences
    };

    this.users.push(user);
  }

  authenticateUser(username, password) {
    const user = this.users.find(u => u.username === username && u.password === password);
    if (!user) {
      throw new Error('Invalid credentials');
    }

    return user;
  }

  sendVerificationEmail(user) {
    if (!user.email) {
      throw new Error('User email is missing');
    }

    // Simulate sending an email
    console.log(`Verification email sent to ${user.email}`);
  }
}

// Usage
const auth = new UserAuth();
auth.registerUser('john_doe', 'securepassword123', 'john@example.com', false, 'user', { theme: 'dark' });

try {
  const user = auth.authenticateUser('john_doe', 'securepassword123');
  auth.sendVerificationEmail(user);
} catch (error) {
  console.error(error.message);
}",code_smell,long_parameter_list,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(merchantId, apiKey) {
         this.merchantId = merchantId;
         this.apiKey = apiKey;
         this.cache = {};
      }

      async processPayment(amount, customerId) {
         const cacheKey = `${amount}-${customerId}`;
         if (this.cache[cacheKey]) {
            return this.cache[cacheKey];
         }

         const response = await fetch('https://api.example.com/payment', {
            method: 'POST',
            headers: {
               'Authorization': `Bearer ${this.apiKey}`,
               'Content-Type': 'application/json'
            },
            body: JSON.stringify({
               amount: amount,
               customerId: customerId,
               merchantId: this.merchantId
            })
         });

         const result = await response.json();
         this.cache[cacheKey] = result;
         return result;
      }
   }

   const processor = new PaymentProcessor('12345', 'abcdefg');
   processor.processPayment(100, 'customer1').then(result => {
      console.log(result);
   });
   ",code_smell,inefficient_caching,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }
    void flush() {
        for (const auto& line : logs_) {
            std::cout << line << std::endl;
        }
        logs_.clear();
    }
private:
    std::vector<std::string> logs_;
    std::mutex mtx_;
};

void worker(LogAggregator* agg, int id) {
    for (int i = 0; i < 5; ++i) {
        agg->addLog(""Thread "" + std::to_string(id) + "" log "" + std::to_string(i));
    }
    // Missing flush call leads to lost logs if program ends before destructor
}

int main() {
    LogAggregator* aggregator = new LogAggregator();
    std::thread t1(worker, aggregator, 1);
    std::thread t2(worker, aggregator, 2);
    t1.join();
    t2.join();
    // Forget to call aggregator->flush();
    delete aggregator; // Destructor does not flush, logs are lost
    return 0;
}
",code_defect,lost_logs_due_to_missing_flush,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final String DEFAULT_CURRENCY = ""USD"";

    public double calculateTotalPrice(List<OrderItem> items, String currency) {
        double totalPrice = 0;
        for (OrderItem item : items) {
            if (item != null) {
                double price = item.getPrice();
                if (currency.equals(""USD"")) {
                    totalPrice += price * 1.0;
                } else if (currency.equals(""EUR"")) {
                    totalPrice += price * 0.9;
                } else if (currency.equals(""JPY"")) {
                    totalPrice += price * 110.0;
                } else {
                    totalPrice += price * 1.0;
                }
            }
        }
        return totalPrice;
    }

    public boolean isEligibleForDiscount(Order order) {
        if (order == null) {
            return false;
        }
        return order.getItems().size() > 5 && order.getTotalPrice() > 100.0;
    }
}",code_smell,primitive_obsession,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(paymentGateway) {
         this.paymentGateway = paymentGateway;
      }

      processPayment(amount, currency) {
         if (amount <= 0) {
            throw new Error('Invalid amount');
         }
         const exchangeRate = this.getExchangeRate(currency);
         const amountInUSD = amount / exchangeRate;
         this.paymentGateway.chargeCard(amountInUSD);
      }

      getExchangeRate(currency) {
         const exchangeRates = {
            'USD': 1,
            'EUR': 0.88,
            'GBP': 0.76
         };
         return exchangeRates[currency];
      }
   }

   class PaymentGateway {
      chargeCard(amount) {
         // Simulate a payment gateway charge
         console.log(`Charging card with amount: ${amount}`);
      }
   }

   const paymentGateway = new PaymentGateway();
   const paymentProcessor = new PaymentProcessor(paymentGateway);
   paymentProcessor.processPayment(100, 'EUR');
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT NOT NULL,
            password TEXT NOT NULL
        )''')
        self.conn.commit()

    def add_user(self, username, password):
        # Store password in plain text (security flaw)
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, password))
        self.conn.commit()

    def authenticate(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute('SELECT password FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row and row[0] == password:
            return True
        return False

    def export_user_data(self, export_path):
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, username, password FROM users')
        users = cursor.fetchall()
        # Insecurely write raw passwords to a JSON file
        with open(export_path, 'w') as f:
            json.dump([{'id': u[0], 'username': u[1], 'password': u[2]} for u in users], f)

# Usage example
if __name__ == '__main__':
    manager = UserManager('users.db')
    manager.add_user('alice', 's3cr3t')
    manager.add_user('bob', 'p@ssw0rd')
    print('Alice auth:', manager.authenticate('alice', 's3cr3t'))
    manager.export_user_data('export.json')
",code_defect,insecure_password_storage,,openai/gpt-oss-120b
Python,"import json
import requests

API_KEY = '1234567890'


def fetch_weather_data(city):
    url = f'http://api.weatherapi.com/v1/current.json?key={API_KEY}&q={city}'
    response = requests.get(url)
    data = json.loads(response.text)
    
    return {
        'temperature': data['current']['temp_c'],
        'condition': data['current']['condition']['text'],
    }


def get_weather_info():
    city = input('Enter a city name: ')
    weather_data = fetch_weather_data(city)
    print(f""Temperature in {city} is {weather_data['temperature']}°C."")
    print(f""Condition: {weather_data['condition']}."")

if __name__ == '__main__':
    get_weather_info()",code_defect,hardcoded_secrets,,qwen/qwen3-32b
Python,"
class UserDatabase:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password

    def check_credentials(self, username, password):
        if username in self.users and self.users[username] == password:
            return True
        return False

    def update_password(self, username, new_password):
        if username in self.users:
            self.users[username] = new_password
            return True
        return False

    def delete_user(self, username):
        if username in self.users:
            del self.users[username]
            return True
        return False

    def get_all_users(self):
        return list(self.users.keys())

db = UserDatabase()

def main():
    while True:
        print(""1. Add user"")
        print(""2. Check credentials"")
        print(""3. Update password"")
        print(""4. Delete user"")
        print(""5. Get all users"")
        print(""6. Exit"")
        choice = input(""Choose an option: "")

        if choice == '1':
            username = input(""Enter username: "")
            password = input(""Enter password: "")
            db.add_user(username, password)
        elif choice == '2':
            username = input(""Enter username: "")
            password = input(""Enter password: "")
            if db.check_credentials(username, password):
                print(""Credentials are correct"")
            else:
                print(""Credentials are incorrect"")
        elif choice == '3':
            username = input(""Enter username: "")
            new_password = input(""Enter new password: "")
            if db.update_password(username, new_password):
                print(""Password updated successfully"")
            else:
                print(""User not found"")
        elif choice == '4':
            username = input(""Enter username: "")
            if db.delete_user(username):
                print(""User deleted successfully"")
            else:
                print(""User not found"")
        elif choice == '5':
            print(db.get_all_users())
        elif choice == '6':
            break
        else:
            print(""Invalid choice"")
",code_smell,god_class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String domainFilter) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // insecure concatenation, vulnerable to SQL injection
            String query = ""SELECT email FROM users WHERE email LIKE '"" + domainFilter + ""%'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception, lose error info
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (i != j && data[i] == data[j]) {
                std::cout << ""Duplicate found at indices "" << i << "" and "" << j << std::endl;
            }
        }
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 2, 4, 5, 1};
    processData(input);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>

   class Student {
   public:
       Student(std::string name, int grade) : name(name), grade(grade) {}
       std::string getName() { return name; }
       int getGrade() { return grade; }
   private:
       std::string name;
       int grade;
   };

   std::vector<Student> filterStudents(const std::vector<Student>& students, int minGrade) {
       std::vector<Student> filtered;
       for (const auto& student : students) {
           if (student.getGrade() >= minGrade) {
               filtered.push_back(student);
           }
       }
       return filtered;
   }

   int main() {
       std::vector<Student> students = {Student(""Alice"", 90), Student(""Bob"", 80), Student(""Charlie"", 95)};
       std::vector<Student> filtered = filterStudents(students, 85);
       for (const auto& student : filtered) {
           std::cout << student.getName() << "" "" << student.getGrade() << std::endl;
       }
       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(int id) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(id);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int id = -1;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    id = queue.back();
                    queue.pop_back();
                }
            }
            if (id != -1) {
                // Simulate processing
                std::cout << ""Processing log "" << id << std::endl;
            }
        }
    }
    std::vector<int> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(i);
    }
    // Missing lp.stop(); leads to thread running after main exits
    return 0;
}
",code_defect,resource_leak_thread_not_joined,,openai/gpt-oss-120b
Java,"public class ReportGenerator {
    private String reportFormat;

    public ReportGenerator(String reportFormat) {
        this.reportFormat = reportFormat;
    }

    public void generateReport() {
        if (reportFormat.equals(""PDF"")) {
            System.out.println(""Generating PDF report..."");
            System.out.println(""Report content: Placeholder"");
            System.out.println(""Report generated."");
        } else if (reportFormat.equals(""CSV"")) {
            System.out.println(""Generating CSV report..."");
            System.out.println(""Report content: Placeholder"");
            System.out.println(""Report generated."");
        } else if (reportFormat.equals(""XML"")) {
            System.out.println(""Generating XML report..."");
            System.out.println(""Report content: Placeholder"");
            System.out.println(""Report generated.
        }
    }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>

   class Employee {
   public:
       std::string name;
       int salary;

       Employee(std::string name, int salary) : name(name), salary(salary) {}

       bool operator<(const Employee& other) const {
           return salary < other.salary;
       }
   };

   void sortEmployees(std::vector<Employee>& employees) {
       std::sort(employees.begin(), employees.end());
   }

   int main() {
       std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
       sortEmployees(employees);

       for (const auto& employee : employees) {
           std::cout << employee.name << "" "" << employee.salary << std::endl;
       }

       return 0;
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize || 10;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn returns a promise resolving to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off‑by‑one error – should use pageNumber - 1
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    const next = this.currentPage + 1;
    const page = this.getPage(next);
    if (page.length > 0) {
      this.currentPage = next;
      return page;
    }
    return [];
  }
}

// Usage example (not part of the library)
const paginator = new Paginator(5);
await paginator.loadItems(() => Promise.resolve([1,2,3,4,5,6,7,8,9,10]));
console.log('First page:', paginator.getPage(1)); // Expected [1,2,3,4,5] but gets [] due to bug",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

void processData(std::string data) {
    int count = 0;
    std::string processedData;

    for (size_t i = 0; i < data.length(); ++i) {
        if (data[i] >= 'A' && data[i] <= 'Z') {
            processedData += data[i];
            ++count;
        }
    }

    std::cout << ""Processed data length: "" << processedData.length() << std::endl;
    std::cout << ""Capital letter count: "" << count << std::endl;
}

int main() {
    std::string input = ""ExampleInput123"";
    processData(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor() {
            this.users = [];
         }

         async loadUsers() {
            const response = await fetch('https://example.com/users');
            const data = await response.json();
            this.users = data;
         }

         getUser(id) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === id) {
                  return this.users[i];
               }
            }
            return null;
         }
      }

      const userService = new UserService();
      userService.loadUsers();
      const user = userService.getUser(1);
      console.log(user);
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Simulate processing
            std::cout << ""Processing "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 0; i < 5; ++i) dp.addTask(i);
    // Missing dp.stop(); leads to thread running after main exits
    return 0;
}
",code_defect,resource_leak_thread_not_joined,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let results = [];
  for (let i = 0; i < data.length; i++) {
    let item = data[i];
    if (item && item.value && item.value > 0) {
      let processedItem = {
        id: item.id,
        value: item.value * 2
      };
      results.push(processedItem);
    }
  }
  return results;
}

function updateDatabase(records) {
  for (let i = 0; i < records.length; i++) {
    let record = records[i];
    console.log(`Updating record ID: ${record.id}, Value: ${record.value}`);
    // Simulate a database update
    if (record.value % 2 === 0) {
      console.log('Update successful');
    } else {
      console.log('Update failed');
    }
  }
}

function main() {
  let rawData = [
    { id: 1, value: 10 },
    { id: 2, value: 5 },
    { id: 3, value: -3 },
    { id: 4, value: 7 }
  ];
  let processed = processData(rawData);
  updateDatabase(processed);
}

main();",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
    
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
    
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn returns a promise that resolves to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off‑by‑one error – should use pageNumber - 1
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    const next = this.currentPage + 1;
    const page = this.getPage(next);
    if (page.length > 0) {
      this.currentPage = next;
    }
    return page;
  }
}

// Usage example
const paginator = new Paginator(10);
await paginator.loadItems(() => fetch('/api/items').then(r => r.json()));
console.log('First page:', paginator.getPage(1)); // Returns items 10‑19 instead of 0‑9",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class DataProcessor {
  constructor(data) {
    this.data = data;
    this.cache = {};
  }

  process() {
    const result = [];
    for (let i = 0; i < this.data.length; i++) {
      const item = this.data[i];
      let processed = this.cache[item.id];
      
      if (!processed) {
        processed = this._processItem(item);
        this.cache[item.id] = processed;
      }

      result.push(processed);
    }
    return result;
  }

  _processItem(item) {
    let value = item.value;
    if (item.type === 'string') {
      value = value.toUpperCase();
    } else if (item.type === 'number') {
      value = Math.sqrt(value);
    } else if (item.type === 'boolean') {
      value = !value;
    } else {
      value = null;
    }
    return { id: item.id, value };
  }
}

// Example usage
const data = [
  { id: 1, value: 'hello', type: 'string' },
  { id: 2, value: 25, type: 'number' },
  { id: 3, value: true, type: 'boolean' },
  { id: 4, value: 'world', type: 'string' }
];

const processor = new DataProcessor(data);
const output = processor.process();",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,class PaymentProcessor { constructor() { this.payments = []; } addPayment(amount) { this.payments.push(amount); } calculateTotal() { let total = 0; for (let i = 0; i < this.payments.length; i++) { total += this.payments[i]; } return total; } applyDiscount(discountPercentage) { let total = this.calculateTotal(); let discountAmount = total * (discountPercentage / 100); return total - discountAmount; } },code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,hardcoded_credentials_and_sql_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor() {
        orders = new ArrayList<>();
    }

    public void addOrder(Order order) {
        orders.add(order);
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                if (order.getStatus().equals(""PENDING"")) {
                    if (order.getTotal() > 0) {
                        System.out.println(""Processing order: "" + order.getOrderId());
                        sendOrderToInventory(order);
                        sendOrderToShipping(order);
                        markAsProcessed(order);
                    }
                }
            }
        }
    }

    private void sendOrderToInventory(Order order) {
        // simulate API call
        System.out.println(""Sent order to inventory: "" + order.getOrderId());
    }

    private void sendOrderToShipping(Order order) {
        // simulate API call
        System.out.println(""Sent order to shipping: "" + order.getOrderId());
    }

    private void markAsProcessed(Order order) {
        order.setStatus(""PROCESSED"");
    }
}",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
     constructor() {
       this.users = [];
     }

     addUser(user) {
       this.users.push(user);
     }

     removeUser(userId) {
       for (let i = 0; i < this.users.length; i++) {
         if (this.users[i].id === userId) {
           this.users.splice(i, 1);
           break;
         }
       }
     }

     getUserCount() {
       return this.users.length;
     }
   }

   function main() {
     const userManager = new UserManager();
     userManager.addUser({ id: 1, name: 'John Doe' });
     userManager.addUser({ id: 2, name: 'Jane Doe' });
     console.log(userManager.getUserCount());
     userManager.removeUser(1);
     console.log(userManager.getUserCount());
   }

   main();
 ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL,
                profile TEXT
            )
        ''')
        self.conn.commit()

    def create_user(self, username, password):
        # NOTE: Insecure password handling for demo purposes
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, password_hash) VALUES (?, ?)', (username, password))
        self.conn.commit()
        return cursor.lastrowid

    def get_user_profile(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT profile FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            # Potential unsafe deserialization
            return json.loads(row[0])
        return None

    def update_profile(self, user_id, profile_dict):
        cursor = self.conn.cursor()
        profile_json = json.dumps(profile_dict)
        cursor.execute('UPDATE users SET profile = ? WHERE id = ?', (profile_json, user_id))
        self.conn.commit()

    def delete_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE id = ?', (user_id,))
        self.conn.commit()

# Usage example (would be called from elsewhere)
manager = UserManager(os.getenv('DB_PATH', ':memory:'))
uid = manager.create_user('alice', 'password123')
manager.update_profile(uid, {'age': 30, 'email': 'alice@example.com'})
profile = manager.get_user_profile(uid)
print('Loaded profile:', profile)
",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  findUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  getAllUsers() {
    return this.users;
  }

  updateUserEmail(user, newEmail) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === user.id) {
        this.users[i].email = newEmail;
      }
    }
  }
}

const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com' },
  { id: 2, name: 'Bob', email: 'bob@example.com' }
];

const userManager = new UserManager(users);
userManager.updateUserEmail({ id: 1 }, 'alice_new@example.com');",code_smell,mutation_of_immutable_data,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    DataProcessor(const std::vector<int>& data) : data_(data) {}
    void process() {
        for (int i = 0; i < data_.size(); ++i) {
            std::cout << data_[i] << std::endl;
        }
    }
private:
    std::vector<int> data_;
};

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    DataProcessor processor(data);
    processor.process();
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    """"""Loads configuration from a JSON file.

    The path is taken from an environment variable. If the file is missing or malformed,
    the application falls back to defaults.
    """"""
    DEFAULT_CONFIG = {
        ""retry_count"": 3,
        ""timeout"": 30,
        ""api_key"": """"
    }

    def __init__(self):
        self.config_path = os.getenv('APP_CONFIG_PATH', '/etc/app/config.json')
        self.config = self.DEFAULT_CONFIG.copy()
        self._load()

    def _load(self):
        try:
            with open(self.config_path, 'r') as f:
                data = json.load(f)
                self.config.update(data)
        except Exception as e:
            logger.warning(f""Failed to load config from {self.config_path}: {e}"")

    def get(self, key):
        return self.config.get(key)

class DataProcessor:
    """"""Processes incoming data records and stores them in a database.

    The `process` method expects a dictionary with specific fields.
    """"""
    def __init__(self, db_connection):
        self.db = db_connection
        self.allowed_fields = {'id', 'value', 'timestamp'}

    def _validate(self, record):
        # Missing check for extra unexpected fields
        return all(k in self.allowed_fields for k in record.keys())

    def process(self, record):
        if not self._validate(record):
            raise ValueError(""Invalid record fields"")
        # Direct string interpolation leads to SQL injection vulnerability
        query = f""INSERT INTO records (id, value, timestamp) VALUES ({record['id']}, '{record['value']}', '{record['timestamp']}')""
        self.db.execute(query)

# Example usage (would be called by the application entry point)
if __name__ == '__main__':
    import sqlite3
    conn = sqlite3.connect(':memory:')
    conn.execute('CREATE TABLE records (id INTEGER, value TEXT, timestamp TEXT)')
    processor = DataProcessor(conn)
    sample = {'id': 1, 'value': ""test"", 'timestamp': '2025-01-01T00:00:00'}
    processor.process(sample)
    conn.commit()
    conn.close()",code_defect,SQL_injection,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users;
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  getAllUsersWithRole(role) {
    const result = [];
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].role === role) {
        result.push(this.users[i]);
      }
    }
    return result;
  }

  addUser(newUser) {
    this.users.push(newUser);
  }

  removeUserByEmail(email) {
    this.users = this.users.filter(user => user.email !== email);
  }
}

const usersData = [
  { name: 'Alice', email: 'alice@example.com', role: 'admin' },
  { name: 'Bob', email: 'bob@example.com', role: 'user' },
  { name: 'Charlie', email: 'charlie@example.com', role: 'user' }
];

const userManager = new UserManager(usersData);",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getUsers() { const users = await this.userRepository.getAllUsers(); return users.map(user => ({ id: user.id, name: user.name })); } async getUserById(id) { const user = await this.userRepository.getUserById(id); if (!user) { throw new Error('User not found'); } return user; } }",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""SELECT balance FROM accounts WHERE user_id = ?"";
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, userId);
            rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    // Update balance without transaction safety
                    String updateSql = ""UPDATE accounts SET balance = balance - ? WHERE user_id = ?"";
                    PreparedStatement updateStmt = conn.prepareStatement(updateSql);
                    updateStmt.setDouble(1, amount);
                    updateStmt.setString(2, userId);
                    updateStmt.executeUpdate();
                    // Log transaction (ignores failures)
                    logTransaction(userId, amount);
                    return true;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
        return false;
    }

    private void logTransaction(String userId, double amount) {
        // Simplified logging, no error handling
        System.out.println(""Transaction: user="" + userId + "", amount="" + amount);
    }
}
",code_defect,missing_transaction_handling,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(String userId, String productId, int quantity, String paymentMethod, boolean isExpressDelivery, String shippingAddress) {
        if (userId == null || productId == null || quantity <= 0) {
            return;
        }

        boolean isPaymentValid = validatePayment(paymentMethod);
        if (!isPaymentValid) {
            return;
        }

        String finalAddress = shippingAddress;
        if (isExpressDelivery) {
            finalAddress = getExpressDeliveryAddress();
        }

        if (finalAddress == null) {
            return;
        }

        // TODO: Check if product is in stock
        boolean isAvailable = checkProductAvailability(productId);
        if (!isAvailable) {
            return;
        }

        // Placeholder for actual order processing logic
        System.out.println(""Order processed for user "" + userId + "", product "" + productId);
        System.out.println(""Quantity: "" + quantity + "", Address: "" + finalAddress);
    }

    private boolean validatePayment(String method) {
        // Dummy validation logic
        return method != null && !method.isEmpty();
    }

    private String getExpressDeliveryAddress() {
        return ""123 Fast Lane"";
    }

    private boolean checkProductAvailability(String productId) {
        // Simulate product availability
        return productId != null && productId.length() > 3;
    }
}",code_smell,,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username == null || username.isEmpty()) {
            return false;
        }
        return password.equals(DEFAULT_PASSWORD);
    }
}",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            conn.setAutoCommit(false);
            // Deduct balance
            String updateSql = ""UPDATE accounts SET balance = balance - ? WHERE user_id = ?"";
            try (PreparedStatement ps = conn.prepareStatement(updateSql)) {
                ps.setDouble(1, amount);
                ps.setString(2, userId);
                int rows = ps.executeUpdate();
                if (rows != 1) {
                    conn.rollback();
                    return false;
                }
            }
            // Log transaction
            String insertSql = ""INSERT INTO transactions (user_id, amount) VALUES (?, ?)"";
            try (PreparedStatement ps = conn.prepareStatement(insertSql)) {
                ps.setString(1, userId);
                ps.setDouble(2, amount);
                ps.executeUpdate();
            }
            conn.commit();
            return true;
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ex) {}
            return false;
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException e) {}
        }
    }

    // Vulnerable method: SQL injection via orderBy parameter
    public ResultSet getUserTransactions(String userId, String orderBy) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String query = ""SELECT * FROM transactions WHERE user_id = '"" + userId + ""' ORDER BY "" + orderBy;
        PreparedStatement stmt = conn.prepareStatement(query);
        return stmt.executeQuery(); // connection never closed, potential resource leak
    }
}
",code_defect,sql_injection_and_resource_leak,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class DataProcessor {
public:
    void process(const vector<string>& input) {
        for (const auto& str : input) {
            if (str.empty()) {
                continue;
            }
            if (str.length() > 10) {
                cout << ""Long string: "" << str << endl;
            } else {
                cout << ""Short string: "" << str << endl;
            }
        }
    }
};

int main() {
    vector<string> input = {""example123"", ""short"", """", ""anotherLongString""};
    DataProcessor processor;
    processor.process(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email

    def login(self, password):
        if self.password == password:
            return True
        else:
            return False

    def change_password(self, old_password, new_password):
        if self.password == old_password:
            self.password = new_password
            return True
        else:
            return False

class UserManager:
    def __init__(self):
        self.accounts = {}

    def create_account(self, username, password, email):
        if username in self.accounts:
            return False
        self.accounts[username] = UserAccount(username, password, email)
        return True

    def get_account(self, username):
        return self.accounts.get(username)

# Example usage
manager = UserManager()
manager.create_account('test_user', 'test_password', 'test@example.com')
account = manager.get_account('test_user')
if account.login('test_password'):
    print('Login successful')
else:
    print('Login failed')
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }
    void flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        for (const auto& line : logs_) {
            std::cout << line << std::endl;
        }
        logs_.clear();
    }
private:
    std::vector<std::string> logs_;
    std::mutex mtx_;
};

void worker(LogAggregator* agg, int id) {
    for (int i = 0; i < 100; ++i) {
        agg->addLog(""Worker "" + std::to_string(id) + "" iteration "" + std::to_string(i));
    }
    // Missing call to flush leads to data loss if program exits before flush
}

int main() {
    LogAggregator aggregator;
    std::thread t1(worker, &aggregator, 1);
    std::thread t2(worker, &aggregator, 2);
    t1.join();
    t2.join();
    // aggregator.flush(); // Intentionally omitted, causing logs to be lost
    return 0;
}
",code_defect,lost_logs_due_to_missing_flush,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processUserInput(const std::string& input) {
    std::string processed = input;
    if (input.length() > 0) {
        for (char& c : processed) {
            if (c == 'a') {
                c = 'A';
            } else if (c == 'e') {
                c = 'E';
            } else if (c == 'i') {
                c = 'I';
            } else if (c == 'o') {
                c = 'O';
            } else if (c == 'u') {
                c = 'U';
            }
        }
    }
    return processed;
}

int main() {
    std::string input;
    std::cout << ""Enter a string: "";
    std::getline(std::cin, input);

    std::string result = processUserInput(input);
    std::cout << ""Processed string: "" << result << std::endl;

    return 0;
}",code_smell,long_method,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger logger = LoggerFactory.getLogger(UserService.class); public void saveUser(User user) { try { User existingUser = userRepository.findByUsername(user.getUsername()); if (existingUser != null) { existingUser.setEmail(user.getEmail()); existingUser.setName(user.getName()); userRepository.save(existingUser); } else { userRepository.save(user); } } catch (Exception e) { logger.error(""Error saving user"", e); } } }",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class LogProcessor {
    constructor(logFilePath) {
        this.logFilePath = logFilePath;
        this.buffer = [];
    }

    // Reads the entire log file into memory and processes each line
    processLogs() {
        const data = fs.readFileSync(this.logFilePath, 'utf8');
        const lines = data.split('\n');
        for (let i = 0; i <= lines.length; i++) { // off‑by‑one error: i can equal lines.length
            const line = lines[i];
            if (line && line.includes('ERROR')) {
                this.buffer.push(this._parseError(line));
            }
        }
        this._writeReport();
    }

    _parseError(line) {
        const parts = line.split(' ');
        return {
            timestamp: parts[0],
            level: parts[1],
            message: parts.slice(2).join(' ')
        };
    }

    _writeReport() {
        const reportPath = this.logFilePath + '.report.json';
        fs.writeFileSync(reportPath, JSON.stringify(this.buffer, null, 2));
    }
}

module.exports = LogProcessor;",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import requests

def fetch_and_process_data(url, auth_token=None, timeout=10, max_retries=3):
    headers = {'Authorization': f'Bearer {auth_token}'} if auth_token else {}
    data = None
    for retry in range(max_retries):
        try:
            response = requests.get(url, headers=headers, timeout=timeout)
            if response.status_code == 200:
                data = response.json()
                break
            elif response.status_code == 401:
                raise Exception('Authentication failed')
        except requests.RequestException as e:
            print(f'Request failed: {e}')
            continue
    return data

result = fetch_and_process_data('https://api.example.com/data', auth_token='12345')",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Person {
public:
    string name;
    int age;
    Person(string n, int a) : name(n), age(a) {}
};

class PersonDatabase {
public:
    vector<Person> people;
    void addPerson(Person p) { people.push_back(p); }
    Person getOldestPerson() {
        if (people.empty()) return Person("""", -1);
        return *max_element(people.begin(), people.end(), [](const Person& a, const Person& b) { return a.age < b.age; });
    }
};

int main() {
    PersonDatabase db;
    db.addPerson(Person(""John"", 30));
    db.addPerson(Person(""Alice"", 25));
    Person oldest = db.getOldestPerson();
    cout << oldest.name << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""admin123""; // hardcoded credentials

    public List<String> getPendingTransactions() throws Exception {
        List<String> ids = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(""SELECT id FROM transactions WHERE status='PENDING'"");
        while (rs.next()) {
            ids.add(rs.getString(""id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return ids;
    }

    public void processAll() throws Exception {
        List<String> pending = getPendingTransactions();
        for (String id : pending) {
            processTransaction(id);
        }
    }

    private void processTransaction(String transactionId) throws Exception {
        // Vulnerable to SQL injection if transactionId is manipulated
        String query = ""UPDATE transactions SET status='COMPLETED' WHERE id='"" + transactionId + ""'"";
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        Statement stmt = conn.createStatement();
        stmt.executeUpdate(query);
        stmt.close();
        conn.close();
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>

using namespace std;

string processUserInput(string input) {
    string result = input;
    for (int i = 0; i < input.length(); i++) {
        if (input[i] == 'a') {
            result[i] = 'A';
        } else if (input[i] == 'e') {
            result[i] = 'E';
        } else if (input[i] == 'i') {
            result[i] = 'I';
        } else if (input[i] == 'o') {
            result[i] = 'O';
        } else if (input[i] == 'u') {
            result[i] = 'U';
        }
    }
    return result;
}

int main() {
    string user_input;
    cout << ""Enter a string: "";
    getline(cin, user_input);
    cout << ""Processed string: "" << processUserInput(user_input) << endl;
    return 0;
}",code_smell,long_function,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
        else:
            self.users[user_id].update(user_data)

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            raise Exception('User not found')

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
        else:
            raise Exception('User not found')

    def get_all_users(self):
        return list(self.users.values())

# usage
user_manager = UserManager()
user_manager.add_user('1', {'name': 'John', 'age': 30})
user_manager.add_user('2', {'name': 'Alice', 'age': 25})
print(user_manager.get_all_users())
",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3
from typing import List, Dict

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_db()

    def _ensure_db(self):
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        email TEXT NOT NULL,
                        data TEXT
                    )''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str, data: Dict):
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        # BUG: Directly embedding user-provided data into SQL leads to SQL injection
        c.execute(f""INSERT INTO users (username, email, data) VALUES ('{username}', '{email}', '{json.dumps(data)}')"")
        conn.commit()
        conn.close()

    def get_user(self, user_id: int) -> Dict:
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        c.execute('SELECT id, username, email, data FROM users WHERE id = ?', (user_id,))
        row = c.fetchone()
        conn.close()
        if row:
            return {'id': row[0], 'username': row[1], 'email': row[2], 'data': json.loads(row[3])}
        return {}

    def list_all_users(self) -> List[Dict]:
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        c.execute('SELECT id, username, email, data FROM users')
        rows = c.fetchall()
        conn.close()
        return [{'id': r[0], 'username': r[1], 'email': r[2], 'data': json.loads(r[3])} for r in rows]

# Example usage (would be removed in production)
if __name__ == '__main__':
    repo = UserRepository(os.getenv('USER_DB', 'users.db'))
    repo.add_user('alice', 'alice@example.com', {'role': 'admin'})
    print(repo.get_user(1))
    print(repo.list_all_users())
",code_defect,sql_injection_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    void process(const std::vector<int>& data) {
        if (data.empty()) {
            std::cerr << ""Error: empty data provided."" << std::endl;
            return;
        }

        for (size_t i = 0; i < data.size(); ++i) {
            if (data[i] % 2 == 0) {
                std::cout << ""Even number: "" << data[i] << std::endl;
            } else {
                std::cout << ""Odd number: "" << data[i] << std::endl;
            }
        }
    }
};

int main() {
    DataProcessor processor;
    std::vector<int> input = {2, 3, 4, 5, 6};
    processor.process(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public synchronized void addUser(User user) { users.put(user.getUsername(), user); } public synchronized User getUser(String username) { return users.get(username); } public synchronized void removeUser(String username) { users.remove(username); } }",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&TransactionProcessor::processQueue, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(int amount) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(amount);
    }
private:
    void processQueue() {
        while (!stopFlag) {
            int item = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    item = queue.back();
                    queue.pop_back();
                }
            }
            // Process the item without checking if queue was empty
            // This can lead to processing a default-initialized value (0)
            // which may represent an invalid transaction.
            processTransaction(item);
        }
    }
    void processTransaction(int amount) {
        // Simulate a critical operation that must not receive zero
        if (amount == 0) {
            std::cerr << ""Error: Invalid transaction amount!"" << std::endl;
            // Missing proper error handling; continue processing
        }
        std::cout << ""Processed transaction of $"" << amount << std::endl;
    }
    std::vector<int> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    TransactionProcessor tp;
    tp.start();
    tp.enqueue(100);
    tp.enqueue(200);
    // No more enqueues; thread will keep processing zeros indefinitely
    std::this_thread::sleep_for(std::chrono::seconds(2));
    tp.stop();
    return 0;
}
",code_defect,logic_error_due_to_unchecked_empty_queue,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrder(order) {
    if (!order || !order.items || !order.customer) {
      return 'Invalid order';
    }

    let totalPrice = 0;
    for (let i = 0; i < order.items.length; i++) {
      const item = order.items[i];
      totalPrice += item.price * item.quantity;
    }

    if (totalPrice <= 0) {
      return 'Total price must be greater than zero';
    }

    if (order.customer.type === 'VIP') {
      totalPrice *= 0.9;
    }

    if (order.payment.method === 'credit_card') {
      // Simulate payment processing
      if (!order.payment.cardNumber || !order.payment.expiry) {
        return 'Payment information incomplete';
      }
      // Simulate external payment API call
      if (!this._simulatePayment(order.payment)) {
        return 'Payment failed';
      }
    }

    return `Order processed successfully. Total: $${totalPrice.toFixed(2)}`;
  }

  _simulatePayment(payment) {
    // Simulate a failed payment when card number is even-length
    return payment.cardNumber.length % 2 === 1;
  }
}",code_defect,logic_error,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = []

    def add_user(self, user_id, username):
        for user in self.users:
            if user['id'] == user_id:
                user['username'] = username
                return
        self.users.append({'id': user_id, 'username': username})

    def get_user(self, user_id):
        for user in self.users:
            if user['id'] == user_id:
                return user
        return None

    def update_user(self, user_id, username):
        user = self.get_user(user_id)
        if user:
            user['username'] = username
        else:
            self.add_user(user_id, username)

    def delete_user(self, user_id):
        self.users = [user for user in self.users if user['id'] != user_id]
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a log file
    async getUserProfile(userId) {
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            throw new Error('User not found');
        }
        // Write audit log (potential race condition)
        fs.appendFile('audit.log', `User ${userId} accessed at ${new Date().toISOString()}\n`, (err) => {
            if (err) {
                console.error('Failed to write audit log');
            }
        });
        return user;
    }

    // Updates user email without proper validation (security defect)
    async updateEmail(userId, newEmail) {
        // Directly interpolates user input into SQL query
        const query = `UPDATE users SET email = '${newEmail}' WHERE id = ${userId}`;
        await this.db.execute(query);
        // No verification that email format is correct
        return true;
    }
}

module.exports = UserService;",code_defect,SQL_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final String DISCOUNT_CODE = ""SUMMER20"";

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        double totalPrice = calculateTotalPrice(order.getItems());
        if (DISCOUNT_CODE.equals(order.getDiscountCode())) {
            totalPrice *= 0.8;
        }

        System.out.println(""Processing order: "" + order.getOrderId());
        System.out.println(""Total price after discount: "" + totalPrice);

        sendOrderToWarehouse(order);
    }

    private double calculateTotalPrice(List<Item> items) {
        double total = 0;
        for (Item item : items) {
            total += item.getPrice() * item.getQuantity();
        }
        return total;
    }

    private void sendOrderToWarehouse(Order order) {
        System.out.println(""Order sent to warehouse: "" + order.getOrderId());
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"const fs = require('fs');
const path = require('path');
const _ = require('lodash'); // unused import

class UserProcessor {
    constructor(baseDir) {
        this.baseDir = baseDir;
    }

    // Processes all JSON user files in the directory
    processAll() {
        const files = fs.readdirSync(this.baseDir);
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            if (path.extname(file) !== '.json') continue;
            const data = fs.readFileSync(path.join(this.baseDir, file), 'utf8');
            const user = JSON.parse(data);
            this._processUser(user);
        }
    }

    _processUser(user) {
        // Simulate heavy computation
        for (let i = 0; i < 1000000; i++) {
            user.score += Math.sqrt(i);
        }
        console.log(`Processed user ${user.id} with score ${user.score}`);
    }
}

module.exports = UserProcessor;",code_smell,unused_import,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processUserInput(std::vector<int>& inputList, int threshold) {
    for (size_t i = 0; i < inputList.size(); ++i) {
        if (inputList[i] > threshold) {
            std::cout << inputList[i] << "" is above threshold."" << std::endl;
        } else {
            std::cout << inputList[i] << "" is below threshold."" << std::endl;
        }
    }
}

int main() {
    std::vector<int> userValues = {5, 15, 20, 10, 30};
    int thresholdValue = 20;

    processUserInput(userValues, thresholdValue);

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private Map<String, User> users = new HashMap<>(); public synchronized void addUser(User user) { users.put(user.getUsername(), user); } public synchronized User getUser(String username) { return users.get(username); } public void updateUser(User user) { users.put(user.getUsername(), user); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // Missing try/catch: if file is malformed JSON, JSON.parse throws and crashes the process
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function getUserPreference(userId) {
  const loader = new ConfigLoader('./user_prefs.json');
  const prefs = loader.load();
  // Assume prefs is an object keyed by userId
  return prefs[userId] || {};
}

async function updatePreference(userId, key, value) {
  const loader = new ConfigLoader('./user_prefs.json');
  const prefs = loader.load();
  if (!prefs[userId]) prefs[userId] = {};
  prefs[userId][key] = value;
  // Write back without atomic write: possible race condition if multiple calls overlap
  await fs.promises.writeFile('./user_prefs.json', JSON.stringify(prefs, null, 2));
}

module.exports = { getUserPreference, updatePreference };",code_defect,missing_error_handling_and_race_condition,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processItems(const std::vector<int>& items) {
    for (size_t i = 0; i < items.size(); ++i) {
        std::cout << ""Item "" << i << "": "" << items[i] << std::endl;
    }

    // Legacy code for debugging
    // std::cout << ""Size: "" << items.size() << std::endl;
}

int main() {
    std::vector<int> data = {10, 20, 30, 40, 50};

    processItems(data);

    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userDao) {
         this.userDao = userDao;
      }

      async getAllUsers() {
         const users = await this.userDao.findAll();
         return users.map(user => ({ id: user.id, name: user.name }));
      }

      async getUserById(id) {
         const user = await this.userDao.findById(id);
         if (!user) {
            throw new Error('User not found');
         }
         return { id: user.id, name: user.name };
      }
   }

   class UserDao {
      async findAll() {
         // Assume this is a mock database call
         return [
            { id: 1, name: 'John Doe' },
            { id: 2, name: 'Jane Doe' }
         ];
      }

      async findById(id) {
         // Assume this is a mock database call
         const users = await this.findAll();
         return users.find(user => user.id === id);
      }
   }

   const userDao = new UserDao();
   const userService = new UserService(userDao);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL,
            data TEXT NOT NULL
        )''')
        self.conn.commit()

    def save_user(self, username, data):
        cursor = self.conn.cursor()
        # Insecure: directly embedding user data into SQL string
        query = f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')""
        cursor.execute(query)
        self.conn.commit()

    def load_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('SELECT data FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def delete_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM users WHERE username = ?', (username,))
        self.conn.commit()

# Example usage
if __name__ == '__main__':
    manager = UserManager('users.db')
    manager.save_user('admin', {'role': 'superuser', 'token': os.getenv('ADMIN_TOKEN')})
    user_data = manager.load_user('admin')
    print('Loaded user data:', user_data)
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.users = [];
  }

  addUser(id, username, password) {
    this.users.push({ id, username, password });
  }

  authenticate(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        if (this.users[i].password === password) {
          return true;
        } else {
          return false;
        }
      }
    }
    return false;
  }

  getAllUsers() {
    return this.users;
  }
}

// Example usage
const auth = new UserAuth();
auth.addUser(1, 'admin', 'securepassword');
auth.authenticate('admin', 'securepassword');",code_defect,security_issue,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger logger = LoggerFactory.getLogger(UserService.class); public User getUser(String username) { try { User user = UserRepository.getInstance().findUserByUsername(username); if (user == null) { throw new RuntimeException(""User not found""); } return user; } catch (Exception e) { logger.error(""Error getting user"", e); return null; } } }",code_smell,swallowing_exceptions,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigManager:
    """"""Loads configuration from a JSON file and provides access to settings.""""""
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, config_path='config.json'):
        # Singleton pattern, but flawed: config_path is ignored on subsequent calls
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super(ConfigManager, cls).__new__(cls)
                    cls._instance._load(config_path)
        return cls._instance

    def _load(self, path):
        with open(path, 'r') as f:
            self._data = json.load(f)
        # Missing validation of required keys

    def get(self, key, default=None):
        return self._data.get(key, default)

    def set(self, key, value):
        self._data[key] = value
        # Writes back to file without atomicity
        with open('config.json', 'w') as f:
            json.dump(self._data, f)

def process_user_input(user_input):
    """"""Processes raw user input and returns a sanitized command string.""""""
    # Vulnerable to command injection: directly concatenates input
    command = ""ls "" + user_input
    os.system(command)
    return command

def main():
    cfg = ConfigManager('/etc/app/config.json')
    timeout = cfg.get('timeout', 30)
    # Timeout is retrieved but never used
    while True:
        inp = input('Enter directory: ')
        if inp == 'exit':
            break
        process_user_input(inp)

if __name__ == '__main__':
    main()",code_defect,command_injection,,openai/gpt-oss-120b
Python,"import os
import time

class FileProcessor:
    def __init__(self, directory):
        self.directory = directory
        self.files = []
        self.load_files()

    def load_files(self):
        for file in os.listdir(self.directory):
            if file.endswith('.txt'):
                self.files.append(file)

    def process_files(self):
        for file in self.files:
            with open(os.path.join(self.directory, file), 'r') as f:
                content = f.read()
                self._do_processing(content)

    def _do_processing(self, content):
        processed = content.replace('old', 'new')
        print(processed[:100])

    def save_results(self):
        for file in self.files:
            with open(f'results/{file}_processed', 'w') as f:
                f.write('')

if __name__ == '__main__':
    processor = FileProcessor('data')
    processor.process_files()
    processor.save_results()",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final int MAX_RETRIES = 5; public void processPayment(String paymentId, double amount) { for (int i = 0; i < MAX_RETRIES; i++) { try { // Simulating a payment processing service call Thread.sleep(100); System.out.println(""Payment processed: "" + paymentId); break; } catch (InterruptedException e) { System.out.println(""Error processing payment: "" + e.getMessage()); } } } }",code_smell,magic_number,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // BUG: If no task was available, task remains 0 and is processed incorrectly
            processTask(task);
        }
    }
    void processTask(int value) {
        // Simulate work
        std::cout << ""Processing: "" << value << std::endl;
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    dp.addTask(42);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
Python,"import requests
import time

def fetch_and_process_data(url):
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        for item in data:
            if item['status'] == 'active':
                time.sleep(0.5)
                print(f""Processing {item['id']}..."")
                if 'content' in item:
                    process_content(item['content'])
                else:
                    print(f""No content found for {item['id']}"")

                if 'metadata' in item:
                    process_metadata(item['metadata'])
                else:
                    print(f""No metadata found for {item['id']}"")

            else:
                print(f""Skipping inactive item {item['id']}"")

    else:
        print(""Failed to fetch data"")

    return True

def process_content(content):
    # Dummy processing
    pass

def process_metadata(metadata):
    # Dummy processing
    pass

if __name__ == ""__main__"":
    fetch_and_process_data(""https://api.example.com/data"")",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor() {
            this.users = [];
         }

         addUser(user) {
            this.users.push(user);
         }

         getUserById(id) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === id) {
                  return this.users[i];
               }
            }
            return null;
         }

         getAllUsers() {
            return this.users;
         }
      }

      class User {
         constructor(id, name) {
            this.id = id;
            this.name = name;
         }
      }

      let userService = new UserService();
      let user1 = new User(1, 'John Doe');
      let user2 = new User(2, 'Jane Doe');
      userService.addUser(user1);
      userService.addUser(user2);
      console.log(userService.getAllUsers());
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String domain) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // insecure string concatenation leads to SQL injection
            String sql = ""SELECT email FROM users WHERE email LIKE '"" + ""%@"" + domain + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception silently
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,sql_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrders(List<Order> orders, String clientType) {
        for (Order order : orders) {
            if (clientType.equals(""premium"")) {
                order.applyDiscount(10);
            } else if (clientType.equals(""standard"")) {
                order.applyDiscount(5);
            } else {
                order.applyDiscount(0);
            }
            
            if (order.getItems().isEmpty()) {
                continue;
            }
            
            for (Item item : order.getItems()) {
                if (item.getQuantity() <= 0) {
                    item.setPrice(0);
                }
                
                if (clientType.equals(""premium"")) {
                    item.setPrice(item.getPrice() * 0.9);
                } else if (clientType.equals(""standard"")) {
                    item.setPrice(item.getPrice() * 0.95);
                }
            }
        }
    }
}

class Order {
    private List<Item> items = new ArrayList<>();
    private double total = 0;

    public List<Item> getItems() {
        return items;
    }

    public void applyDiscount(double discountPercentage) {
        total *= (1 - discountPercentage / 100);
    }
}

class Item {
    private int quantity;
    private double price;

    public int getQuantity() {
        return quantity;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }
}",code_smell,duplicate_code,,qwen/qwen3-32b
Python,"
class OrderProcessor:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def process_order(self, order_id):
        order_data = self.db_connection.get_order(order_id)
        if order_data['status'] == 'pending':
            # Perform some external API calls
            external_api_call(order_data['customer_id'])
            self.db_connection.update_order_status(order_id, 'processing')
            # Simulate some long-running operation
            import time
            time.sleep(5)
            self.db_connection.update_order_status(order_id, 'completed')
        else:
            print('Order is not pending')

def external_api_call(customer_id):
    # Simulate an external API call
    import requests
    response = requests.get(f'https://example.com/api/customers/{customer_id}')
    if response.status_code != 200:
        raise Exception('Failed to retrieve customer data')

class DatabaseConnection:
    def __init__(self):
        self.orders = {}

    def get_order(self, order_id):
        return self.orders.get(order_id)

    def update_order_status(self, order_id, status):
        if order_id in self.orders:
            self.orders[order_id]['status'] = status

    def add_order(self, order_id, order_data):
        self.orders[order_id] = order_data

# Usage
db_connection = DatabaseConnection()
db_connection.add_order('order1', {'status': 'pending', 'customer_id': 'customer1'})
order_processor = OrderProcessor(db_connection)
order_processor.process_order('order1')
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : total_(0) {}
    void addData(const std::vector<int>& data) {
        std::lock_guard<std::mutex> lock(mtx_);
        for (int v : data) {
            buffer_.push_back(v);
        }
    }
    void process() {
        // Process data in parallel, but shares total_ without proper synchronization
        std::vector<std::thread> workers;
        for (size_t i = 0; i < buffer_.size(); ++i) {
            workers.emplace_back([this, i]() {
                // Simulate work
                int value = buffer_[i] * 2;
                // Bug: race condition on total_
                total_ += value;
            });
        }
        for (auto& t : workers) {
            if (t.joinable()) t.join();
        }
    }
    int getTotal() const { return total_; }
private:
    std::vector<int> buffer_;
    int total_;
    mutable std::mutex mtx_;
};

int main() {
    DataProcessor dp;
    dp.addData({1, 2, 3, 4, 5});
    dp.process();
    std::cout << ""Total: "" << dp.getTotal() << std::endl;
    return 0;
}",code_defect,race_condition,,openai/gpt-oss-120b
Python,"import os
import sqlite3
from datetime import datetime

def process_user_data(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user_data = cursor.fetchone()

    if user_data:
        print(f'User {user_id} found: {user_data}')
        cursor.execute(f""UPDATE users SET last_accessed = '{datetime.now()}' WHERE id = {user_id}"")
        conn.commit()
    else:
        print(f'User {user_id} not found.')

    conn.close()

    # TODO: Handle error cases

if __name__ == '__main__':
    process_user_data(1)",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class ShoppingCart {
public:
    void addItem(const std::string& item) {
        items_.push_back(item);
    }

    void removeItem(const std::string& item) {
        for (auto it = items_.begin(); it != items_.end(); ++it) {
            if (*it == item) {
                items_.erase(it);
                break;
            }
        }
    }

    void displayItems() {
        for (const auto& item : items_) {
            std::cout << item << std::endl;
        }
    }

private:
    std::vector<std::string> items_;
};

int main() {
    ShoppingCart cart;
    cart.addItem(""Apple"");
    cart.addItem(""Banana"");
    cart.removeItem(""Apple"");
    cart.displayItems();
    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json, os, logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = {}
        self.load()

    def load(self):
        # Insecure: directly eval user-controlled file content
        with open(self.config_path, 'r') as f:
            data = f.read()
        self._config = eval(data)  # unsafe deserialization
        logger.info('Configuration loaded')

    def get(self, key, default=None):
        return self._config.get(key, default)

class DataProcessor:
    def __init__(self, cfg_loader):
        self.cfg = cfg_loader
        self.batch_size = self.cfg.get('batch_size', 100)

    def process(self, records):
        # Off-by-one error: should process up to batch_size, but uses >
        for i in range(self.batch_size + 1):
            record = records[i]
            self._handle(record)

    def _handle(self, record):
        # Simulated processing
        print(f""Processing {record}"")

if __name__ == '__main__':
    cfg = ConfigLoader('config.txt')
    processor = DataProcessor(cfg)
    sample_data = [f""item{i}"" for i in range(200)]
    processor.process(sample_data)",code_defect,unsafe_deserialization_and_off_by_one,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    private String dbPassword = ""secret123"";

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        if (order.getItems().isEmpty()) {
            System.out.println(""No items in order. Skipping..."");
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (item.getPrice() <= 0) {
                continue;
            }
            if (item.getQuantity() <= 0) {
                continue;
            }
            // TODO: implement inventory check
            // if (inventoryAvailable(item)) {
            //     deductInventory(item);
            // }
        }

        saveToDatabase(order);
    }

    private void saveToDatabase(Order order) {
        String query = ""INSERT INTO orders VALUES ("" + order.getId() + "", '"" + order.getCustomer() + ""')"";
        // Simulate DB operation
        System.out.println(""Executing query: "" + query);
    }
}",code_defect,security_issue,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getUser(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return user;
         }

         async getUsers() {
            const users = await this.userRepository.findAll();
            return users;
         }

         async createUser(user) {
            const existingUser = await this.userRepository.findByEmail(user.email);
            if (existingUser) {
               throw new Error('User with this email already exists');
            }
            const newUser = await this.userRepository.create(user);
            return newUser;
         }
      }

      class UserRepository {
         constructor(db) {
            this.db = db;
         }

         async findById(id) {
            return this.db.query(`SELECT * FROM users WHERE id = ${id}`);
         }

         async findAll() {
            return this.db.query('SELECT * FROM users');
         }

         async findByEmail(email) {
            return this.db.query(`SELECT * FROM users WHERE email = '${email}'`);
         }

         async create(user) {
            return this.db.query(`INSERT INTO users (name, email) VALUES ('${user.name}', '${user.email}')`);
         }
      }
   ",code_smell,sql_injection_vulnerability,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}

    void addTransaction(int amount) {
        // No validation of amount; negative values allowed
        std::lock_guard<std::mutex> lock(mtx_);
        transactions_.push_back(amount);
        total_ += amount; // Potential overflow, no check
    }

    int computeTotal() const {
        // Returns cached total, but if addTransaction is called concurrently without lock, race occurs
        return total_;
    }

    void processAll() {
        // Launch a thread for each transaction (inefficient and may exhaust resources)
        std::vector<std::thread> workers;
        for (int amt : transactions_) {
            workers.emplace_back([this, amt]() {
                // Simulate work
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                // Intentional bug: subtract instead of add
                std::lock_guard<std::mutex> lock(mtx_);
                total_ -= amt;
            });
        }
        for (auto &t : workers) t.join();
    }

private:
    std::vector<int> transactions_;
    mutable std::mutex mtx_;
    int total_; // Not atomic, accessed without proper synchronization in computeTotal
};

int main() {
    TransactionProcessor tp;
    tp.addTransaction(100);
    tp.addTransaction(200);
    tp.processAll();
    std::cout << ""Final total: "" << tp.computeTotal() << std::endl;
    return 0;
}",code_defect,logic_error_subtract_instead_of_add_and_race_condition,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      if (order.status === 'pending') {
        this.processOrder(order);
      }
    }
  }

  processOrder(order) {
    const user = this.getUserById(order.userId);
    const product = this.getProductById(order.productId);

    if (!user || !product) {
      return;
    }

    if (product.stock <= 0) {
      console.log(`Product ${product.id} is out of stock. Cannot process order.`);
      return;
    }

    product.stock -= order.quantity;
    user.points += order.quantity * product.pointsPerUnit;

    console.log(`Order processed for user ${user.id}, product ${product.id}.`);
  }

  getUserById(userId) {
    // Simulated database lookup
    return {
      id: userId,
      points: 0
    };
  }

  getProductById(productId) {
    // Simulated database lookup
    return {
      id: productId,
      stock: 100,
      pointsPerUnit: 5
    };
  }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>
using namespace std;

class User {
public:
    string name;
    int age;
    User(string n, int a) : name(n), age(a) {}
};

class UserService {
public:
    vector<User> users;
    void addUser(User u) { users.push_back(u); }
    User* getUserByName(string name) {
        for (auto& u : users) {
            if (u.name == name) return &u;
        }
        return nullptr;
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User* user = service.getUserByName(""John"");
    if (user) cout << user->name << endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserCache {
  constructor(filePath) {
    this.filePath = filePath;
    this.cache = {};
    this._load();
  }

  _load() {
    try {
      const data = fs.readFileSync(this.filePath, 'utf8');
      this.cache = JSON.parse(data);
    } catch (e) {
      // ignore errors, start with empty cache
    }
  }

  getUser(id) {
    if (this.cache[id]) {
      return this.cache[id];
    }
    // Simulate DB fetch (synchronous for simplicity)
    const user = { id, name: 'User' + id };
    this.cache[id] = user;
    return user;
  }

  // BUG: does not wait for write to finish, may lose data on process exit
  save() {
    const data = JSON.stringify(this.cache);
    fs.writeFile(this.filePath, data, (err) => {
      if (err) console.error('Failed to write cache');
    });
  }
}

// Usage example
const cache = new UserCache('./userCache.json');
cache.getUser(42);
cache.save();
",code_defect,asynchronous_write_loss,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrders(orders, discountCode, taxRate) {
    let total = 0;

    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      let orderTotal = 0;

      for (let j = 0; j < order.items.length; j++) {
        const item = order.items[j];
        const itemPrice = item.price * item.quantity;
        orderTotal += itemPrice;
      }

      if (discountCode === 'SUMMER20') {
        orderTotal *= 0.8;
      }

      total += orderTotal * (1 + taxRate);
    }

    return total;
  }

  applyDiscount(orderTotal, discountCode) {
    if (discountCode === 'SUMMER20') {
      return orderTotal * 0.8;
    }

    if (discountCode === 'FALL30') {
      return orderTotal * 0.7;
    }

    return orderTotal;
  }

  calculateTax(orderTotal, taxRate) {
    return orderTotal * (1 + taxRate);
  }
}

const orders = [
  {
    items: [
      { price: 10, quantity: 2 },
      { price: 20, quantity: 1 }
    ]
  }
];

const processor = new OrderProcessor();
console.log(processor.processOrders(orders, 'SUMMER20', 0.1));",code_smell,duplicated_code,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
            return True
        return False

    def get_user(self, user_id):
        for key in self.users:
            if key == user_id:
                return self.users[key]
        return None

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id] = user_data
            return True
        return False

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
            return True
        return False

# example usage
manager = UserManager()
manager.add_user('1', {'name': 'John', 'age': 30})
print(manager.get_user('1'))
manager.update_user('1', {'name': 'Jane', 'age': 30})
print(manager.get_user('1'))
manager.delete_user('1')
print(manager.get_user('1'))
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogManager {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        buffer_.push_back(msg);
        if (buffer_.size() > 1000) {
            flush();
        }
    }

    void flush() {
        // Simulate writing to disk (omitted)
        buffer_.clear();
    }

private:
    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

class Worker {
public:
    Worker(int id, LogManager& logger) : id_(id), logger_(logger) {}
    void operator()() {
        for (int i = 0; i < 10000; ++i) {
            // Bug: using i without proper bounds check leads to out-of-range when i == 9999
            logger_.log(""Worker "" + std::to_string(id_) + "" processed item "" + std::to_string(i));
        }
    }
private:
    int id_;
    LogManager& logger_;
};

int main() {
    LogManager logger;
    std::vector<std::thread> threads;
    for (int i = 0; i < 5; ++i) {
        threads.emplace_back(Worker(i, logger));
    }
    for (auto& t : threads) {
        t.join();
    }
    // Missing final flush may lose logs
    return 0;
}
",code_defect,missing final flush leading to lost logs and potential data race on logger buffer,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, logger) {
    this.users = users;
    this.logger = logger;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      if (user.isActive) {
        this.logger.log(`Processing user: ${user.name}`);
        this._validateUser(user);
        this._updateUser(user);
        this._notifyUser(user);
      }
    }
  }

  _validateUser(user) {
    if (!user.email) {
      throw new Error(`User ${user.id} has no email`);
    }
    if (user.age < 18) {
      throw new Error(`User ${user.id} is underage`);
    }
  }

  _updateUser(user) {
    user.status = 'processed';
    user.lastProcessed = new Date();
  }

  _notifyUser(user) {
    // Simulate sending email
    console.log(`Email sent to ${user.email}`);
  }
}

// Usage
const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com', age: 25, isActive: true },
  { id: 2, name: 'Bob', email: '', age: 16, isActive: true },
  { id: 3, name: 'Charlie', email: 'charlie@example.com', age: 30, isActive: false }
];

const logger = {
  log: (message) => console.log(`[LOG] ${message}`)
};

const processor = new UserProcessor(users, logger);
processor.processUsers();",code_defect,error_handling_issue,,qwen/qwen3-32b
Python,"class UserManager:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, new_email):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET email = %s WHERE id = %s"", (new_email, user_id))
        self.db_connection.commit()
    
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : log_file(file) {}
    void process() {
        std::vector<std::string> lines = readLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off‑by‑one error
            std::string line = lines[i];
            if (line.find(""ERROR"") != std::string::npos) {
                std::lock_guard<std::mutex> lock(mtx);
                error_count++;
            }
        }
    }
    int getErrorCount() const { return error_count; }
private:
    std::vector<std::string> readLines() {
        // Dummy implementation
        return {""INFO start"", ""ERROR failed"", ""INFO end""};
    }
    std::string log_file;
    int error_count = 0;
    std::mutex mtx;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    std::thread t1([&lp](){ lp.process(); });
    std::thread t2([&lp](){ lp.process(); });
    t1.join();
    t2.join();
    std::cout << ""Total errors: "" << lp.getErrorCount() << std::endl;
    return 0;
}",code_defect,off_by_one_error_and_data_race,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    DataProcessor() {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i < data.size(); ++i) {
            if (data[i] % 2 == 0) {
                std::cout << data[i] << "" is even"" << std::endl;
            } else {
                std::cout << data[i] << "" is odd"" << std::endl;
            }
            if (data[i] == 42) {
                std::cout << ""Found the meaning of life!"" << std::endl;
            }
        }
    }
};

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 42, 5, 6, 7, 8, 9, 10};
    DataProcessor dp;
    dp.process(numbers);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) {
        users.push_back(user);
    }

    User* getUserByName(std::string name) {
        for (auto& user : users) {
            if (user.getName() == name) {
                return &user;
            }
        }
        return nullptr;
    }

private:
    std::vector<User> users;
};

int main() {
    UserService userService;
    userService.addUser(User(""John"", 30));
    User* user = userService.getUserByName(""John"");
    if (user != nullptr) {
        std::cout << user->getName() << std::endl;
    }
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        // Reads config file synchronously each time, ignoring cache
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }

    get(key) {
        // If config not loaded yet, load it lazily
        if (!this.cache) {
            this.load();
        }
        return this.cache[key];
    }
}

function processUserInput(input) {
    // Directly eval user input – security defect
    return eval(input);
}

function main() {
    const config = new ConfigLoader('./config.json');
    const userCommand = process.argv[2] || '""2 + 2""';
    const result = processUserInput(userCommand);
    console.log('Result:', result);
    console.log('Config version:', config.get('version'));
}

main();",code_defect,unsafe_eval,,openai/gpt-oss-120b
Python,"import os
import requests

def fetch_weather(city):
    url = f""http://api.weatherapi.com/v1/current.json?key=1234567890&city={city}""
    response = requests.get(url)
    data = response.json()

    if data.get('error'):
        return None

    temp = data['current']['temp_c']
    condition = data['current']['condition']['text']
    
    return {
        'city': city,
        'temperature': temp,
        'condition': condition,
    }


def main():
    city = input(""Enter city name: "")
    weather = fetch_weather(city)
    
    if weather:
        print(f""{weather['city']}: {weather['temperature']}°C, {weather['condition']}"")
    else:
        print(""Could not fetch weather data."")

if __name__ == ""__main__"":
    main()",code_defect,hardcoded_secret,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, user_data):
        query = ""UPDATE users SET name = '"" + user_data['name'] + ""', email = '"" + user_data['email'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()

# usage
import mysql.connector
db_connection = mysql.connector.connect(host='localhost', database='mydb', user='myuser', password='mypass')
user_service = UserService(db_connection)
user_data = user_service.get_user(1)
print(user_data)
user_service.update_user(1, {'name': 'John Doe', 'email': 'johndoe@example.com'})
",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''CREATE TABLE IF NOT EXISTS users (
                                id INTEGER PRIMARY KEY,
                                username TEXT NOT NULL,
                                data TEXT
                             )''')
        self.conn.commit()

    def add_user(self, username, data):
        # Directly interpolate user input into SQL -> SQL injection risk
        query = f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')""
        self.conn.execute(query)
        self.conn.commit()

    def get_user_data(self, username):
        cursor = self.conn.execute(f""SELECT data FROM users WHERE username = '{username}'"")
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def delete_user(self, username):
        # Missing error handling; if username does not exist, nothing happens silently
        self.conn.execute(f""DELETE FROM users WHERE username = '{username}'"")
        self.conn.commit()

# Usage example (would be in production code)
if __name__ == ""__main__"":
    manager = UserManager('/tmp/users.db')
    manager.add_user('admin', {'role': 'superuser', 'token': os.getenv('ADMIN_TOKEN')})
    user_data = manager.get_user_data('admin')
    print('User data:', user_data)
    manager.delete_user('admin')
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        String customerEmail = order.getCustomerEmail();
        double totalAmount = order.getTotalAmount();

        if (totalAmount > 100) {
            sendEmail(customerEmail, ""Your order has been processed."");
            updateInventory(order.getItems());
        } else {
            sendEmail(customerEmail, ""Your order is being processed."");
            // TODO: Implement low-value order handling
        }

        // Legacy code below
        // if (totalAmount < 0) {
        //     refundOrder(order);
        // }
    }

    private void sendEmail(String email, String message) {
        // Simulated email sending
    }

    private void updateInventory(List<Item> items) {
        // Simulated inventory update
    }

    // Unused method
    private void refundOrder(Order order) {
        // Not in use anymore
    }
}",code_smell,,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async getAllUsers() {
            const users = await this.userDao.getAllUsers();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async getUserById(id) {
            const user = await this.userDao.getUserById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return user;
         }
      }

      class UserDao {
         async getAllUsers() {
            // assume db connection
            return [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }];
         }

         async getUserById(id) {
            // assume db connection
            return { id: 1, name: 'John' };
         }
      }

      const userDao = new UserDao();
      const userService = new UserService(userDao);
      const allUsers = userService.getAllUsers();
      const userById = userService.getUserById(1);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        // Synchronously read config file each time load is called
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }

    get(key) {
        // If cache is empty, load config (but load may throw)
        if (!this.cache) {
            this.load();
        }
        return this.cache[key];
    }
}

// Usage example
function initializeApp() {
    const config = new ConfigLoader('/etc/app/config.json');
    const port = config.get('port');
    const mode = config.get('mode');
    startServer(port, mode);
}

function startServer(port, mode) {
    // Assume server.start is async but we don't handle errors
    server.start({ port, mode })
        .then(() => console.log(`Server started on ${port} in ${mode} mode`))
        .catch(err => console.error('Failed to start server:', err));
}

initializeApp();",code_defect,synchronous_file_read_blocking,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    public void processUsers(List<User> users) {
        for (User user : users) {
            if (user.getEmail() != null && !user.getEmail().isEmpty()) {
                if (isValidEmail(user.getEmail())) {
                    sendWelcomeEmail(user);
                }
            }
            if (user.getRegistrationDate() != null) {
                if (isEligibleForDiscount(user.getRegistrationDate())) {
                    applyDiscount(user);
                }
            }
            if (user.getStatus() != null && user.getStatus().equals(""active"")) {
                updateActivityStatus(user);
            }
        }
    }

    private boolean isValidEmail(String email) {
        // Incomplete regex for email validation
        return email.matches(""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"");
    }

    private void sendWelcomeEmail(User user) {
        // Simulate email sending logic
    }

    private boolean isEligibleForDiscount(Date registrationDate) {
        return registrationDate.before(new Date());
    }

    private void applyDiscount(User user) {
        // Simulate discount application logic
    }

    private void updateActivityStatus(User user) {
        // Simulate activity status update
    }
}",code_smell,long_method,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, account_number, balance=0.0):
        self.account_number = account_number
        self.balance = balance
    
    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
        
    def withdraw(self, amount):
        if amount > 0 and self.balance >= amount:
            self.balance -= amount
        
    def get_balance(self):
        return self.balance

account = BankAccount('123456789', 1000.0)
print(account.get_balance())",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation on limit
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void deleteUser(String username) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // SQL injection vulnerability
            String sql = ""DELETE FROM users WHERE username = '"" + username + ""'"";
            stmt.executeUpdate(sql);
        } catch (Exception e) {
            // ignore
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,SQL injection vulnerability and hardcoded credentials,,openai/gpt-oss-120b
Python,"import os
import time

class UserManager:
    def __init__(self):
        self.users = []

    def add_user(self, name, email, is_admin=False):
        user = {
            'name': name,
            'email': email,
            'is_admin': is_admin,
            'created_at': time.time()
        }
        self.users.append(user)

    def get_admin_users(self):
        admins = []
        for user in self.users:
            if user['is_admin']:
                admins.append(user)
        return admins

    def send_notifications(self, message):
        for user in self.users:
            # Simulate sending email notification
            print(f""Sending to {user['email']}: {message}"")
            time.sleep(0.1)

    def delete_inactive_users(self):
        active_users = []
        for user in self.users:
            if (time.time() - user['created_at']) < 86400:
                active_users.append(user)
        self.users = active_users

# Unused function
# def old_delete_users(users):
#     users.clear()

if __name__ == '__main__':
    manager = UserManager()
    manager.add_user('Alice', 'alice@example.com', True)
    manager.add_user('Bob', 'bob@example.com')
    manager.add_user('Charlie', 'charlie@example.com')
    manager.delete_inactive_users()
    manager.send_notifications('Hello from the system!')",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(merchantId, apiKey) {
         this.merchantId = merchantId;
         this.apiKey = apiKey;
      }

      async processPayment(amount, currency, paymentMethod) {
         const paymentData = {
            amount,
            currency,
            paymentMethod
         };

         try {
            const response = await fetch('https://api.example.com/payment', {
               method: 'POST',
               headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${this.apiKey}`
               },
               body: JSON.stringify(paymentData)
            });

            if (response.status !== 200) {
               throw new Error('Payment failed');
            }

            return await response.json();
         } catch (error) {
            console.error(error);
            return { success: false, message: 'Payment failed' };
         }
      }
   }

   const processor = new PaymentProcessor('12345', 'abc123');
   processor.processPayment(10.99, 'USD', 'credit_card').then(result => console.log(result));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    // Loads JSON config file; caches result but never invalidates it
    loadConfig() {
        if (this.cache) {
            return this.cache;
        }
        const data = fs.readFileSync(this.path, 'utf8');
        // No try/catch: malformed JSON will crash the process
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function initializeApp() {
    const loader = new ConfigLoader('./config.json');
    const config = loader.loadConfig();
    // Assume config has a ""port"" field
    const server = require('http').createServer((req, res) => {
        res.writeHead(200, {'Content-Type': 'text/plain'});
        res.end('Server running');
    });
    server.listen(config.port);
    console.log(`Server listening on port ${config.port}`);
}

initializeApp();",code_defect,unhandled_JSON_parse_error,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    if (user && user.id && user.name) {
      this.users.push(user);
    }
  }

  deleteUser(userId) {
    this.users = this.users.filter(u => u.id !== userId);
  }

  getUserById(userId) {
    return this.users.find(u => u.id === userId);
  }

  getAllUsers() {
    return this.users;
  }

  updateUserName(userId, newName) {
    const user = this.getUserById(userId);
    if (user) {
      user.name = newName;
    }
  }
}

const userManager = new UserManager();
userManager.addUser({ id: 1, name: 'Alice' });
userManager.addUser({ id: 2, name: 'Bob' });
userManager.updateUserName(1, 'Alice Smith');",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
      constructor() {
         this.users = [];
      }

      addUser(user) {
         this.users.push(user);
      }

      removeUser(username) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].username === username) {
               this.users.splice(i, 1);
               break;
            }
         }
      }

      getUser(username) {
         for (let user of this.users) {
            if (user.username === username) {
               return user;
            }
         }
         return null;
      }
   }

   class User {
      constructor(username, password) {
         this.username = username;
         this.password = password;
      }
   }

   let userManager = new UserManager();
   let user = new User('johnDoe', 'password123');
   userManager.addUser(user);
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    // Loads JSON config synchronously; caches result for future calls
    load() {
        if (this.cache) return this.cache;
        // NOTE: No validation of file existence or JSON structure
        const raw = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(raw);
        return this.cache;
    }
}

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user by ID; expects numeric ID
    getUser(id) {
        // Off-by-one error: IDs start at 1 but query uses 0-based index
        const query = `SELECT * FROM users WHERE id = ${id - 1}`;
        return this.db.query(query);
    }
}

// Example usage
const config = new ConfigLoader('./config.json').load();
const db = require('some-db-lib').connect(config.dbUrl);
const userService = new UserService(db);

// This will fetch the wrong user due to the off-by-one bug
userService.getUser(5).then(user => {
    console.log('User:', user);
}).catch(err => {
    console.error('Error:', err);
});",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json

def load_user_preferences(user_id):
    file_path = f'./preferences/{user_id}.json'

    if not os.path.exists(file_path):
        return {}

    try:
        with open(file_path, 'r') as f:
            preferences = json.load(f)
            return preferences
    except Exception as e:
        print(f'Error loading preferences for {user_id}: {e}')
        return {}


def apply_user_settings(user_id, settings):
    file_path = f'./preferences/{user_id}.json'
    
    try:
        with open(file_path, 'w') as f:
            json.dump(settings, f, indent=2)
    except Exception as e:
        print(f'Error saving settings for {user_id}: {e}')


def update_user_theme(user_id, theme):
    prefs = load_user_preferences(user_id)
    
    if 'theme' in prefs and prefs['theme'] == theme:
        print(f""Theme '{theme}' is already set for user {user_id}."")
        return

    prefs['theme'] = theme
    apply_user_settings(user_id, prefs)
    
    print(f""Theme updated to '{theme}' for user {user_id}"")",code_defect,missing_error_handling,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor() {
         this.users = [];
      }

      async addUser(user) {
         try {
            const response = await fetch('https://example.com/api/users', {
               method: 'POST',
               headers: { 'Content-Type': 'application/json' },
               body: JSON.stringify(user)
            });

            if (response.ok) {
               this.users.push(user);
            } else {
               throw new Error('Failed to add user');
            }
         } catch (error) {
            console.error(error);
         }
      }

      getUsers() {
         return this.users;
      }
   }

   const userService = new UserService();

   async function main() {
      await userService.addUser({ name: 'John Doe', email: 'john@example.com' });
      console.log(userService.getUsers());
   }

   main();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT NOT NULL,
            data TEXT
        )''')
        self.conn.commit()

    def add_user(self, username, data):
        # Directly interpolating user input into SQL – SQL injection risk
        query = f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')""
        self.conn.execute(query)
        self.conn.commit()

    def get_user_data(self, username):
        cursor = self.conn.execute(f""SELECT data FROM users WHERE username = '{username}'"")
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def close(self):
        self.conn.close()

# Example usage
if __name__ == ""__main__"":
    manager = UserManager('/tmp/users.db')
    manager.add_user('admin', {'role': 'admin', 'prefs': {}})
    # Potentially unsafe: passing raw input directly to get_user_data
    user_input = os.getenv('TARGET_USER') or 'admin'
    data = manager.get_user_data(user_input)
    print(f""Data for {user_input}: {data}"")
    manager.close()",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor() {
    this.orderData = [];
    this.validStatuses = ['pending', 'shipped', 'delivered'];
  }

  processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      if (this.validStatuses.includes(order.status)) {
        this.orderData.push(order);
      }
    }
  }

  getTotalOrders() {
    return this.orderData.length;
  }

  getOrdersByStatus(status) {
    return this.orderData.filter(order => order.status === status);
  }

  updateOrderStatus(orderId, newStatus) {
    for (let i = 0; i < this.orderData.length; i++) {
      const order = this.orderData[i];
      if (order.id === orderId) {
        if (this.validStatuses.includes(newStatus)) {
          order.status = newStatus;
        } else {
          console.warn(`Invalid status: ${newStatus}`);
        }
        break;
      }
    }
  }
}

// Example usage:
const processor = new OrderProcessor();
processor.processOrders([
  { id: 1, status: 'pending' },
  { id: 2, status: 'shipped' }
]);
processor.updateOrderStatus(1, 'delivered');",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

private:
    std::string name;
    int salary;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    void removeEmployee(std::string name) {
        for (auto it = employees.begin(); it != employees.end(); ++it) {
            if (it->getName() == name) {
                employees.erase(it);
                return;
            }
        }
    }

    int calculateTotalSalary() {
        int totalSalary = 0;
        for (const auto& employee : employees) {
            totalSalary += employee.getSalary();
        }
        return totalSalary;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John Doe"", 50000));
    manager.addEmployee(Employee(""Jane Doe"", 60000));

    std::cout << ""Total salary: "" << manager.calculateTotalSalary() << std::endl;

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,hardcoded_credentials_and_sql_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final String DATABASE_URL = ""jdbc:mysql://localhost:3306/mydb"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""password123!"";

    public void processOrder(Order order) {
        try {
            Connection conn = DriverManager.getConnection(DATABASE_URL, DB_USER, DB_PASSWORD);
            String query = ""UPDATE orders SET status = 'PROCESSED' WHERE id = "" + order.getId();
            Statement stmt = conn.createStatement();
            stmt.executeUpdate(query);
            stmt.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>
   #include <string>

   class User {
   public:
       std::string name;
       int age;

       User(std::string n, int a) : name(n), age(a) {}
   };

   bool compareUsers(const User& u1, const User& u2) {
       return u1.age < u2.age;
   }

   void sortUsers(std::vector<User>& users) {
       std::sort(users.begin(), users.end(), compareUsers);
   }

   int main() {
       std::vector<User> users = {User(""John"", 25), User(""Alice"", 30), User(""Bob"", 20)};
       sortUsers(users);

       for (const auto& user : users) {
           std::cout << user.name << "" is "" << user.age << "" years old."" << std::endl;
       }

       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file for each call
    async getUserInfo(userId) {
        // Bad practice: opening a file synchronously inside async flow
        const log = fs.openSync('user_requests.log', 'a');
        try {
            const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
            if (!user) {
                throw new Error('User not found');
            }
            // Inefficient: converting to JSON twice
            const userJson = JSON.stringify(user);
            fs.writeSync(log, `Fetched user: ${userJson}\n`);
            return JSON.parse(userJson);
        } finally {
            // Missing close for the file descriptor leads to descriptor leak
        }
    }

    // Large method with many responsibilities
    async updateUser(userId, data) {
        // Validate input (poor validation)
        if (!data || typeof data !== 'object') {
            throw new Error('Invalid data');
        }
        // Directly mutating the input object
        data.updatedAt = new Date();
        // Multiple DB calls in a loop
        for (const key in data) {
            await this.db.query(`UPDATE users SET ${key} = ? WHERE id = ?`, [data[key], userId]);
        }
        // No transaction, partial updates possible
        return true;
    }
}

module.exports = UserService;",code_smell,resource_leak_and_poor_error_handling,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex m;

void processData(const std::vector<int>& data, int start, int end) {
    int sum = 0;
    for (int i = start; i < end; ++i) {
        sum += data[i];
    }

    std::lock_guard<std::mutex> lock(m);
    static int totalSum = 0;
    totalSum += sum;
}

void processInParallel(const std::vector<int>& data) {
    std::thread t1(processData, std::ref(data), 0, data.size() / 2);
    std::thread t2(processData, std::ref(data), data.size() / 2, data.size());

    t1.join();
    t2.join();
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8};
    processInParallel(data);

    std::cout << ""Total sum: "" << totalSum << std::endl;
    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(paymentGateway) {
         this.paymentGateway = paymentGateway;
      }

      processPayment(amount, currency) {
         if (amount <= 0) {
            return false;
         }
         const paymentResult = this.paymentGateway.chargeCard(amount, currency);
         if (paymentResult === 'success') {
            // Introduce subtle timing-related issue here
            setTimeout(() => {
               this.paymentGateway.updateTransactionStatus('paid');
            }, 1000);
            return true;
         } else {
            return false;
         }
      }
   }

   class PaymentGateway {
      chargeCard(amount, currency) {
         // Simulate payment processing delay
         const delay = Math.floor(Math.random() * 2000);
         setTimeout(() => {
            // Assume payment is successful for demonstration
            return 'success';
         }, delay);
      }

      updateTransactionStatus(status) {
         // Simulate database update
         console.log(`Transaction status updated to ${status}`);
      }
   }

   const paymentGateway = new PaymentGateway();
   const paymentProcessor = new PaymentProcessor(paymentGateway);
   paymentProcessor.processPayment(100, 'USD');
   ",code_defect,race_condition,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails() {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception, no logging
        } finally {
            // missing close for stmt and conn leads to resource leak
        }
        return emails;
    }

    public boolean deleteUser(int userId) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // SQL injection vulnerability: userId is concatenated directly
            String sql = ""DELETE FROM users WHERE id = "" + userId;
            int rows = stmt.executeUpdate(sql);
            return rows > 0;
        } catch (Exception e) {
            return false;
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,SQL injection and resource leak,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order != null) {
            if (order.getItems() != null && !order.getItems().isEmpty()) {
                for (OrderItem item : order.getItems()) {
                    if (item.getProduct() != null && item.getQuantity() > 0) {
                        if (item.getProduct().getPrice() > 0) {
                            double totalItemCost = item.getQuantity() * item.getProduct().getPrice();
                            double discount = applyDiscount(order, item);
                            double finalCost = totalItemCost - discount;

                            System.out.println(""Item "" + item.getProduct().getName() + "" cost: "" + finalCost);
                        }
                    }
                }
            }
        }
    }

    private double applyDiscount(Order order, OrderItem item) {
        if (item.getProduct().getName().equalsIgnoreCase(""VIP_ITEM"")) {
            return item.getQuantity() * item.getProduct().getPrice() * 0.2;
        }
        return 0;
    }
}",code_smell,nested_conditionals,,qwen/qwen3-32b
Java,"public class UserDAO { private static final String DB_URL = ""jdbc:mysql://localhost:3306/mydb""; private static final String USERNAME = ""root""; private static final String PASSWORD = ""password""; public User getUserById(int id) { try { Class.forName(""com.mysql.cj.jdbc.Driver""); Connection conn = DriverManager.getConnection(DB_URL, USERNAME, PASSWORD); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""SELECT * FROM users WHERE id = "" + id); User user = null; if (rs.next()) { user = new User(rs.getInt(""id""), rs.getString(""name""), rs.getString(""email"")); } rs.close(); stmt.close(); conn.close(); return user; } catch (Exception e) { return null; } } } class User { private int id; private String name; private String email; public User(int id, String name, String email) { this.id = id; this.name = name; this.email = email; } public int getId() { return id; } public String getName() { return name; } public String getEmail() { return email; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import logging
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.config = {}
        self._load()

    def _load(self):
        # No error handling; will raise if file missing
        with open(self.config_path, 'r') as f:
            self.config = json.load(f)

    def get(self, key, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, db_conn, cache):
        self.db = db_conn
        self.cache = cache
        self.logger = logging.getLogger('DataProcessor')

    def process_batch(self, batch_ids):
        results = []
        for i in range(len(batch_ids)):
            # Inefficient: fetching each record individually
            record = self.db.fetch_one('SELECT * FROM data WHERE id = %s' % batch_ids[i])
            if record is None:
                self.logger.warning('Missing record for id %s', batch_ids[i])
                continue
            transformed = self._transform(record)
            results.append(transformed)
        # Store all results at once
        self.db.insert_many('processed_data', results)
        return results

    def _transform(self, record):
        # Very large function, does many unrelated things
        value = record['value']
        # Hardcoded multiplier
        value *= 42
        # Unvalidated external input used in eval (security risk)
        expr = record.get('calc')
        if expr:
            try:
                value = eval(expr, {'__builtins__': None}, {'value': value})
            except Exception as e:
                self.logger.error('Eval failed: %s', e)
        # Cache result
        self.cache.set(record['id'], value)
        return {'id': record['id'], 'result': value}

# Usage example (not part of library)
if __name__ == '__main__':
    cfg = ConfigLoader(os.getenv('CONFIG_PATH', 'config.json'))
    db = MyDatabaseConnection(cfg.get('db_conn_string'))
    cache = SimpleCache()
    processor = DataProcessor(db, cache)
    ids = [1, 2, 3, 4, 5]
    processor.process_batch(ids)
",code_smell,inefficient_loop_and_unsafe_eval,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    void process(std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) {
            if (i % 2 == 0) {
                data[i] *= 2;
            }
        }
    }
};

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    DataProcessor processor;
    processor.process(data);
    for (int val : data) {
        std::cout << val << "" "";
    }
    return 0;
}",code_defect,off_by_one_error,,qwen/qwen3-32b
JavaScript,"
      class UserAccount {
         constructor(username, password, email) {
            this.username = username;
            this.password = password;
            this.email = email;
            this.loginAttempts = 0;
         }

         authenticate(password) {
            if (this.password === password) {
               this.loginAttempts = 0;
               return true;
            } else {
               this.loginAttempts++;
               return false;
            }
         }

         getAccountInfo() {
            return {
               username: this.username,
               email: this.email,
               loginAttempts: this.loginAttempts
            };
         }
      }

      function main() {
         let account = new UserAccount('testUser', 'password123', 'test@example.com');
         console.log(account.getAccountInfo());
         console.log(account.authenticate('wrongpassword'));
         console.log(account.authenticate('password123'));
      }

      main();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        // Synchronous read blocks event loop – potential performance issue
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }

    get(key) {
        if (!this.cache) {
            this.load();
        }
        return this.cache[key];
    }
}

class UserService {
    constructor(db) {
        this.db = db;
        this.config = new ConfigLoader('./config.json');
    }

    // Defect: missing await, returns a pending promise instead of result
    async getUserProfile(userId) {
        const user = this.db.findUserById(userId);
        const settings = this.config.get('defaultSettings');
        return { ...user, settings };
    }
}

// Mock database with async method
const mockDb = {
    async findUserById(id) {
        return { id, name: 'Alice' };
    }
};

const service = new UserService(mockDb);
service.getUserProfile(42).then(profile => {
    console.log('User profile:', profile);
});",code_defect,missing_await_async_bug,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

std::string processString(const std::string& input) {
    std::string result = input;

    for (size_t i = 0; i < result.size(); ++i) {
        if (result[i] >= 'a' && result[i] <= 'z') {
            result[i] -= 32;
        }
    }

    for (size_t i = 0; i < result.size(); ++i) {
        if (result[i] == 'A') {
            result[i] = '@';
        }
    }

    return result;
}

int main() {
    std::string input = ""Hello World"";
    std::string output = processString(input);
    std::cout << output << std::endl;
    return 0;
}",code_smell,inefficient_loops,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
   ",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}

    void addTransaction(int amount) {
        // No validation of amount, negative values allowed
        std::lock_guard<std::mutex> lock(mtx_);
        transactions_.push_back(amount);
        total_ += amount; // potential overflow, no check
    }

    int computeTotal() const {
        return total_; // returns possibly overflowed sum
    }

    void processAll() {
        // Launch a thread per transaction (inefficient and can exhaust resources)
        std::vector<std::thread> workers;
        for (int amt : transactions_) {
            workers.emplace_back([this, amt]() {
                // Simulate work
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                // Incorrectly updates total without synchronization -> data race
                total_ += amt;
            });
        }
        for (auto &t : workers) {
            if (t.joinable()) t.join();
        }
    }

private:
    std::vector<int> transactions_;
    mutable std::mutex mtx_;
    int total_; // not atomic, accessed without lock in processAll
};

int main() {
    TransactionProcessor tp;
    tp.addTransaction(100);
    tp.addTransaction(-50);
    tp.addTransaction(200);
    tp.processAll();
    std::cout << ""Total: "" << tp.computeTotal() << std::endl;
    return 0;
}",code_defect,data_race_and_overflow,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

std::vector<int> processNumbers(const std::vector<int>& numbers) {
    std::vector<int> result;
    for (size_t i = 0; i < numbers.size(); ++i) {
        for (size_t j = 0; j < numbers.size(); ++j) {
            if (i != j) {
                result.push_back(numbers[i] + numbers[j]);
            }
        }
    }
    return result;
}

int main() {
    std::vector<int> data = {1, 2, 3, 4};
    std::vector<int> output = processNumbers(data);

    for (int val : output) {
        std::cout << val << "" "";
    }

    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Java,public class UserManager { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUser(int index) { return users.get(index); } public void removeUser(int index) { users.remove(index); } public int getCount() { return users.size(); } },code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class LogProcessor {
    constructor(logFilePath) {
        this.logFilePath = logFilePath;
        this.buffer = [];
    }

    // Reads the entire log file into memory and processes each line
    async processLogs() {
        const data = await fs.promises.readFile(this.logFilePath, 'utf8');
        const lines = data.split('\n');
        for (let i = 0; i <= lines.length; i++) { // off‑by‑one error: should be i < lines.length
            const line = lines[i];
            if (line.trim() === '') continue;
            this.buffer.push(this.parseLogLine(line));
        }
        this.flushBuffer();
    }

    parseLogLine(line) {
        const parts = line.split(' ');
        return {
            timestamp: parts[0],
            level: parts[1],
            message: parts.slice(2).join(' ')
        };
    }

    // Writes buffered log entries to a JSON file
    flushBuffer() {
        const outputPath = this.logFilePath + '.json';
        fs.writeFileSync(outputPath, JSON.stringify(this.buffer, null, 2));
    }
}

// Usage example (would be called elsewhere in the app)
const processor = new LogProcessor('/var/log/app.log');
processor.processLogs().catch(err => console.error('Failed to process logs:', err));",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import requests

def get_user_data(user_id):
    response = requests.get(f'https://api.example.com/users/{user_id}')
    if response.status_code == 200:
        return response.json()
    else:
        return None

def process_user_data(data):
    if not data:
        return

    user_name = data.get('name')
    email = data.get('email')

    if not user_name or not email:
        return

    with open(f'{user_name}_profile.txt', 'w') as file:
        file.write(f'Name: {user_name}\n')
        file.write(f'Email: {email}\n')

    print(f'Processed {user_name} successfully.')

def main():
    user_ids = [1, 2, 3, 4, 5]
    for user_id in user_ids:
        user_data = get_user_data(user_id)
        process_user_data(user_data)

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
      constructor(username, password) {
         this.username = username;
         this.password = password;
         this.isLoggedIn = false;
      }

      login() {
         this.isLoggedIn = true;
      }

      logout() {
         this.isLoggedIn = false;
      }

      changePassword(newPassword) {
         this.password = newPassword;
      }
   }

   function authenticateUser(username, password) {
      const users = [
         { username: 'admin', password: 'password123' },
         { username: 'user', password: 'password456' }
      ];

      for (let i = 0; i < users.length; i++) {
         if (users[i].username === username && users[i].password === password) {
            return true;
         }
      }

      return false;
   }

   const user = new UserAccount('admin', 'password123');
   if (authenticateUser(user.username, user.password)) {
      user.login();
   } else {
      console.log('Authentication failed');
   }
   ",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}

    void addTransaction(int amount) {
        std::lock_guard<std::mutex> lock(mtx_);
        transactions_.push_back(amount);
        // Intentional bug: total is updated without holding the lock after push_back
        total_ += amount; // race condition
    }

    int getTotal() const {
        return total_; // may return inconsistent value
    }

    void processAll() {
        std::vector<std::thread> workers;
        for (size_t i = 0; i < transactions_.size(); ++i) {
            workers.emplace_back([this, i]() {
                // Simulate processing delay
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                // No synchronization here, potential data race on transactions_
                int val = transactions_[i];
                std::cout << ""Processed: "" << val << std::endl;
            });
        }
        for (auto &t : workers) t.join();
    }

private:
    std::vector<int> transactions_;
    mutable std::mutex mtx_;
    int total_; // not protected consistently
};

int main() {
    TransactionProcessor tp;
    for (int i = 0; i < 100; ++i) {
        tp.addTransaction(i);
    }
    tp.processAll();
    std::cout << ""Total: "" << tp.getTotal() << std::endl;
    return 0;
}
",code_defect,race_condition,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order, boolean isPriority, String customerEmail, String paymentMethod, boolean isInternational) {
        if (order == null) {
            return;
        }

        if (isPriority) {
            sendPriorityNotification(customerEmail);
        }

        if (paymentMethod.equals(""CREDIT_CARD"")) {
            if (isInternational) {
                applyAdditionalCharges(order);
            }
            chargeCreditCard(order.getTotal());
        } else if (paymentMethod.equals(""PAYPAL"")) {
            processPaypal(order.getTotal());
        } else {
            // TODO: Handle other payment methods
        }

        if (order.getItems().isEmpty()) {
            return;
        }

        for (Item item : order.getItems()) {
            if (item.getQuantity() > 0) {
                item.setProcessed(true);
            }
        }

        // Legacy code that is no longer used
        // if (customerEmail.contains(""test"")) {
        //     sendTestEmail();
        // }

        updateOrderStatus(order, ""PROCESSED"");
    }

    private void sendPriorityNotification(String email) {
        // Implementation not shown
    }

    private void applyAdditionalCharges(Order order) {
        // Implementation not shown
    }

    private void chargeCreditCard(double amount) {
        // Implementation not shown
    }

    private void processPaypal(double amount) {
        // Implementation not shown
    }

    private void updateOrderStatus(Order order, String status) {
        // Implementation not shown
    }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    std::string name;
    int salary;

    Employee(std::string n, int s) : name(n), salary(s) {}

    bool operator<(const Employee& other) const {
        return salary < other.salary;
    }
};

class Company {
public:
    std::vector<Employee> employees;

    void addEmployee(Employee e) {
        employees.push_back(e);
    }

    void sortEmployees() {
        std::sort(employees.begin(), employees.end());
    }

    Employee getHighestPaidEmployee() {
        if (employees.empty()) {
            return Employee("""", 0);
        }
        return *std::max_element(employees.begin(), employees.end());
    }
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));
    company.sortEmployees();
    Employee highestPaid = company.getHighestPaidEmployee();
    std::cout << ""Highest paid employee: "" << highestPaid.name << "" with salary: "" << highestPaid.salary << std::endl;
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigManager:
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, config_path='config.json'):
        # Singleton pattern but flawed: race condition possible
        if not cls._instance:
            with cls._lock:
                if not cls._instance:
                    cls._instance = super(ConfigManager, cls).__new__(cls)
                    cls._instance._load(config_path)
        return cls._instance

    def _load(self, path):
        # Insecure: directly reads file without validation
        with open(path, 'r') as f:
            self.settings = json.load(f)

    def get(self, key, default=None):
        return self.settings.get(key, default)

    def set(self, key, value):
        self.settings[key] = value
        self._save()

    def _save(self):
        # Vulnerable: writes back to the same file without atomic operation
        with open('config.json', 'w') as f:
            json.dump(self.settings, f, indent=2)

def process_user_input(user_input):
    # Missing validation leads to potential injection
    cfg = ConfigManager()
    if user_input.startswith('set '):
        _, key, val = user_input.split(' ', 2)
        cfg.set(key, val)
    elif user_input.startswith('get '):
        _, key = user_input.split(' ', 1)
        print(f""{key} = {cfg.get(key)}"")
    else:
        print('Unknown command')

# Example usage (would be called from a network handler in real app)
if __name__ == '__main__':
    while True:
        cmd = input('> ')
        if cmd == 'exit':
            break
        process_user_input(cmd)",code_defect,race_condition_and_insecure_file_handling,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(userData) {
    this.userData = userData;
  }

  processUsers() {
    const results = [];
    for (let i = 0; i < this.userData.length; i++) {
      const user = this.userData[i];
      if (user.isActive) {
        const processedUser = {
          id: user.id,
          name: user.name.toUpperCase(),
          email: user.email,
          created: new Date().toISOString()
        };
        results.push(processedUser);
      }
    }
    return results;
  }

  getActiveUsersCount() {
    return this.processUsers().length;
  }
}

const userProcessor = new UserProcessor([
  { id: 1, name: 'Alice', email: 'alice@example.com', isActive: true },
  { id: 2, name: 'Bob', email: 'bob@example.com', isActive: false },
  { id: 3, name: 'Charlie', email: 'charlie@example.com', isActive: true }
]);

const activeCount = userProcessor.getActiveUsersCount();
console.log(`Active users count: ${activeCount}`);",code_smell,duplicated_code,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <algorithm>
      
      class Employee {
      public:
         Employee(std::string name, int salary) : name(name), salary(salary) {}
      
         std::string getName() { return name; }
         int getSalary() { return salary; }
      
      private:
         std::string name;
         int salary;
      };
      
      class EmployeeDatabase {
      public:
         void addEmployee(Employee employee) { employees.push_back(employee); }
         Employee getEmployeeWithHighestSalary() {
            if (employees.empty()) {
               throw std::runtime_error(""No employees in the database"");
            }
            return *std::max_element(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
               return a.getSalary() < b.getSalary();
            });
         }
      
      private:
         std::vector<Employee> employees;
      };
      
      int main() {
         EmployeeDatabase database;
         database.addEmployee(Employee(""John Doe"", 50000));
         database.addEmployee(Employee(""Jane Doe"", 60000));
         Employee highestPaid = database.getEmployeeWithHighestSalary();
         std::cout << ""The employee with the highest salary is: "" << highestPaid.getName() << std::endl;
         return 0;
      }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password""; // hardcoded secret

    public List<Payment> getPendingPayments() throws SQLException {
        List<Payment> pending = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, status FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Payment p = new Payment();
            p.setId(rs.getInt(""id""));
            p.setAmount(rs.getDouble(""amount""));
            p.setStatus(rs.getString(""status""));
            pending.add(p);
        }
        // Missing close of ResultSet, Statement, and Connection (resource leak)
        return pending;
    }

    public void processPayments() {
        try {
            List<Payment> payments = getPendingPayments();
            for (Payment p : payments) {
                // Simulate external API call
                boolean success = externalCharge(p.getAmount());
                updatePaymentStatus(p.getId(), success ? ""COMPLETED"" : ""FAILED"");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private boolean externalCharge(double amount) {
        // Placeholder for real payment gateway integration
        return amount > 0; // simplistic check, may approve zero or negative amounts elsewhere
    }

    private void updatePaymentStatus(int paymentId, String newStatus) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""UPDATE payments SET status = ? WHERE id = ?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, newStatus);
            stmt.setInt(2, paymentId);
            stmt.executeUpdate();
            // Missing commit/close, potential transaction issues
        } catch (SQLException e) {
            // Swallowing exception silently
        }
    }
}

class Payment {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}
",code_defect,resource_leak_and_silent_exception,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor() {
    this._orders = [];
  }

  addOrder(order) {
    this._orders.push(order);
  }

  processOrders() {
    for (let i = 0; i < this._orders.length; i++) {
      const order = this._orders[i];
      this._validateOrder(order);
      this._chargeCustomer(order);
      this._shipOrder(order);
    }
  }

  _validateOrder(order) {
    if (!order.customer || !order.items || order.items.length === 0) {
      throw new Error('Invalid order: missing customer or items');
    }
  }

  _chargeCustomer(order) {
    // Simulated charge logic
    console.log(`Charging customer ${order.customer.id} for $${order.total}`);
  }

  _shipOrder(order) {
    // Simulated shipping logic
    console.log(`Shipping order ${order.id} to ${order.shippingAddress}`);
  }
}

// Example usage
const processor = new OrderProcessor();
processor.addOrder({ id: 1, customer: { id: 101 }, items: [{ product: 'Book', price: 10 }], total: 10, shippingAddress: '123 Main St' });
processor.processOrders();",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
       constructor(paymentGateway) {
           this.paymentGateway = paymentGateway;
       }

       processPayment(order) {
           const paymentMethod = order.paymentMethod;
           if (paymentMethod === 'credit_card') {
               this.paymentGateway.chargeCreditCard(order.amount, order.creditCardNumber);
           } else if (paymentMethod === 'paypal') {
               this.paymentGateway.chargePayPal(order.amount, order.payPalEmail);
           }
           // TODO: add more payment methods in the future
           return true;
       }
   }

   class PaymentGateway {
       chargeCreditCard(amount, creditCardNumber) {
           // simulate a credit card charge
           console.log(`Charged $${amount} to credit card ${creditCardNumber}`);
       }

       chargePayPal(amount, payPalEmail) {
           // simulate a PayPal charge
           console.log(`Charged $${amount} to PayPal account ${payPalEmail}`);
       }
   }

   const paymentGateway = new PaymentGateway();
   const paymentProcessor = new PaymentProcessor(paymentGateway);
   const order = {
       amount: 100,
       paymentMethod: 'credit_card',
       creditCardNumber: '1234-5678-9012-3456'
   };

   paymentProcessor.processPayment(order);
   ",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  // Loads JSON config file. Caches result but never invalidates.
  load() {
    if (this.cache) {
      return this.cache;
    }
    const data = fs.readFileSync(this.path, 'utf8');
    // BUG: JSON.parse can throw, but error is not caught, causing the whole process to crash.
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function initializeApp() {
  const loader = new ConfigLoader('./config.json');
  const config = loader.load();
  // Assume config has a ""port"" property.
  const server = require('http').createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('Server running');
  });
  server.listen(config.port);
}

initializeApp();",code_defect,unhandled_exception,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor() {
        this.orders = new ArrayList<>();
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                if (order.getTotal() > 0) {
                    if (order.getCustomerId() != null) {
                        order.markAsProcessed();
                        sendConfirmationEmail(order);
                    }
                }
            }
        }
    }

    private void sendConfirmationEmail(Order order) {
        // Email sending logic
        System.out.println(""Email sent for order: "" + order.getId());
    }

    public void addOrder(Order order) {
        this.orders.add(order);
    }
}",code_smell,nested_conditionals,,qwen/qwen3-32b
Python,"
class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        return self.balance

    def withdraw(self, amount):
        if amount > self.balance:
            return 'Insufficient funds'
        self.balance -= amount
        return self.balance

    def get_balance(self):
        return self.balance

    def transfer(self, amount, recipient_account):
        if amount > self.balance:
            return 'Insufficient funds'
        self.balance -= amount
        recipient_account.deposit(amount)
        return self.balance

account1 = BankAccount(1000)
account2 = BankAccount(500)
print(account1.get_balance())
print(account2.get_balance())
account1.transfer(200, account2)
print(account1.get_balance())
print(account2.get_balance())
   ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    load() {
        if (this.cache) return this.cache;
        // Synchronous file read without error handling – may throw and crash the process
        const data = fs.readFileSync(this.path, 'utf8');
        // Assume JSON, but no try/catch for malformed content
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function processUserInput(input) {
    // Directly uses user input in a shell command – command injection risk
    const exec = require('child_process').exec;
    exec(`ls ${input}`, (err, stdout, stderr) => {
        if (err) {
            console.error('Execution error');
            return;
        }
        console.log('Files:', stdout);
    });
}

function calculateDiscount(price, discount) {
    // Off‑by‑one error: should be price * (1 - discount/100)
    return price - (price * discount) / 100 - 1;
}

module.exports = { ConfigLoader, processUserInput, calculateDiscount };",code_defect,command_injection_and_off_by_one,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

struct User {
    std::string name;
    int age;
    std::string email;
};

void sendEmail(const std::string& to, const std::string& subject, const std::string& body) {
    std::cout << ""Sending email to "" << to << "" with subject: "" << subject << std::endl;
}

void notifyUsers(const std::vector<User>& users) {
    for (const auto& user : users) {
        if (user.email.empty()) {
            std::cerr << ""User "" << user.name << "" has no email address.\n"";
            continue;
        }
        
        std::string subject = ""Welcome, "" + user.name;
        std::string body = ""Dear "" + user.name + "",\n\nWelcome to our platform!"";
        
        sendEmail(user.email, subject, body);
    }
}

int main() {
    std::vector<User> users = {
        {""Alice"", 28, ""alice@example.com""},
        {""Bob"", 35, ""bob@example.com""},
        {""Charlie"", 22, """"},
        {""Diana"", 31, ""diana@example.org""}
    };

    notifyUsers(users);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }
        return username.equals(""admin"") && password.equals(DEFAULT_PASSWORD);
    }
}",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user data and writes a report file
  async generateUserReport(userId) {
    // Potential race condition: no lock, multiple calls may interleave
    const user = await this.db.getUserById(userId);
    if (!user) {
      throw new Error('User not found');
    }

    const orders = await this.db.getOrdersForUser(userId);
    const total = orders.reduce((sum, o) => sum + o.amount, 0);

    const report = {
      id: user.id,
      name: user.name,
      email: user.email,
      totalSpent: total,
      orderCount: orders.length,
    };

    // BUG: Asynchronous write without awaiting, may cause incomplete file
    fs.writeFile('reports/' + user.id + '.json', JSON.stringify(report), (err) => {
      if (err) console.error('Failed to write report', err);
    });

    return report;
  }
}

module.exports = UserService;",code_defect,async_file_write_without_await,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor(users) {
    this.users = users || [];
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  addUser(user) {
    this.users.push(user);
  }

  deleteUserByEmail(email) {
    const index = this.users.findIndex(user => user.email === email);
    if (index !== -1) {
      this.users.splice(index, 1);
    }
  }

  getAllUsers() {
    return this.users;
  }
}

const user1 = { id: 1, name: 'Alice', email: 'alice@example.com' };
const user2 = { id: 2, name: 'Bob', email: 'bob@example.com' };
const userManager = new UserManager([user1, user2]);",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, String> users = new HashMap<>(); public synchronized void addUser(String username, String password) { if (!users.containsKey(username)) { users.put(username, password); } } public synchronized String getPassword(String username) { return users.get(username); } public static void main(String[] args) { UserService userService = new UserService(); userService.addUser(""user1"", ""password1""); System.out.println(userService.getPassword(""user1"")); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it in memory.""""""
    _cache = {}
    _lock = threading.Lock()

    @classmethod
    def get_config(cls, path: str) -> dict:
        # NOTE: No validation of path, potential path traversal
        with cls._lock:
            if path in cls._cache:
                return cls._cache[path]
            with open(path, 'r') as f:
                data = json.load(f)
                cls._cache[path] = data
                return data

class UserService:
    def __init__(self, config_path: str):
        self.config = ConfigLoader.get_config(config_path)
        self.db_conn_str = self.config.get('db_connection')
        # Directly using the connection string without sanitization
        self._connect_to_db()

    def _connect_to_db(self):
        # Simulated insecure DB connection (e.g., using eval on connection string)
        # This is a placeholder for actual DB connection logic
        self.db = eval(self.db_conn_str)  # Dangerous: executes arbitrary code

    def get_user(self, user_id: int) -> dict:
        # Potential SQL injection if query were built with string formatting
        query = f""SELECT * FROM users WHERE id = {user_id}""
        # Simulated DB fetch (placeholder)
        result = self.db.execute(query)
        return result.fetchone()

def main():
    service = UserService('/etc/app/config.json')
    user = service.get_user(42)
    print(json.dumps(user))

if __name__ == '__main__':
    main()",code_defect,unsafe_eval_and_sql_injection,,openai/gpt-oss-120b
Python,"import requests
import json

API_URL = 'https://api.example.com/data'
API_KEY = 'myhardcodedapikey123'

def fetch_and_process_data():
    headers = {'Authorization': f'Bearer {API_KEY}'}
    response = requests.get(API_URL, headers=headers)
    if response.status_code != 200:
        print('Failed to fetch data')
        return

    data = json.loads(response.text)

    results = []
    for item in data:
        if 'id' in item and 'name' in item:
            results.append({
                'id': item['id'],
                'name': item['name'],
                'formatted_name': f""{item['name'].title()} (ID: {item['id']})""
            })

    return results

# TODO: Add data validation and error handling

if __name__ == '__main__':
    output = fetch_and_process_data()
    if output:
        print(json.dumps(output, indent=2))",code_defect,hardcoded_secret,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string name, int age) : name(name), age(age) {}
};

class UserService {
public:
    std::vector<User> users;

    void addUser(User user) {
        users.push_back(user);
    }

    User* getUserByName(std::string name) {
        for (User& user : users) {
            if (user.name == name) {
                return &user;
            }
        }
        return nullptr;
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    service.addUser(User(""Alice"", 25));

    User* user = service.getUserByName(""John"");
    if (user != nullptr) {
        std::cout << user->name << std::endl;
    }

    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // BUG: If no task was available, task remains 0 and is processed anyway
            std::cout << ""Processing: "" << task << std::endl;
            std::this_thread::sleep_for(std::chrono::milliseconds(10));
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 1; i <= 5; ++i) dp.addTask(i);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
Python,"import requests

class UserAuthHandler:
    def __init__(self):
        self.base_url = 'https://api.example.com/v1'
        self.api_key = 'super-secret-key'  # Hardcoded secret
        self.headers = {'Authorization': f'Bearer {self.api_key}'}

    def fetch_user(self, user_id):
        url = f'{self.base_url}/user/{user_id}'
        response = requests.get(url, headers=self.headers)
        if response.status_code == 200:
            return response.json()
        else:
            return None

    def update_user(self, user_id, data):
        url = f'{self.base_url}/user/{user_id}'
        response = requests.patch(url, json=data, headers=self.headers)
        return response.status_code == 200

# Example usage
if __name__ == '__main__':
    auth_handler = UserAuthHandler()
    user_data = auth_handler.fetch_user(12345)
    print(user_data)
    auth_handler.update_user(12345, {'name': 'New Name'})",code_defect,hardcoded_secret,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(paymentGateway) {
         this.paymentGateway = paymentGateway;
      }

      processPayment(order) {
         const paymentMethod = order.paymentMethod;
         if (paymentMethod === 'creditCard') {
            this.paymentGateway.chargeCard(order.amount, order.creditCardNumber, order.expirationDate, order.cvv);
         } else if (paymentMethod === 'paypal') {
            this.paymentGateway.chargePaypal(order.amount, order.paypalEmail);
         }
      }
   }

   class PaymentGateway {
      chargeCard(amount, cardNumber, expirationDate, cvv) {
         // Simulate a successful charge
         console.log(`Charged $${amount} to card ${cardNumber}`);
      }

      chargePaypal(amount, paypalEmail) {
         // Simulate a successful charge
         console.log(`Charged $${amount} to PayPal account ${paypalEmail}`);
      }
   }

   const paymentGateway = new PaymentGateway();
   const paymentProcessor = new PaymentProcessor(paymentGateway);
   const order = {
      amount: 100,
      paymentMethod: 'creditCard',
      creditCardNumber: '1234567890',
      expirationDate: '12/25',
      cvv: '123'
   };
   paymentProcessor.processPayment(order);
   ",code_smell,Tight Coupling,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

class LogProcessor {
public:
    LogProcessor(const std::vector<std::string>& logs) : logs_(logs) {}

    // Returns the most frequent log entry length
    size_t mostFrequentLength() const {
        std::vector<size_t> lengths;
        lengths.reserve(logs_.size());
        for (const auto& entry : logs_) {
            lengths.push_back(entry.size());
        }
        std::sort(lengths.begin(), lengths.end());
        size_t maxCount = 0;
        size_t currentCount = 1;
        size_t mostFreq = 0;
        for (size_t i = 1; i <= lengths.size(); ++i) { // BUG: off‑by‑one, accesses out of bounds
            if (i < lengths.size() && lengths[i] == lengths[i - 1]) {
                ++currentCount;
            } else {
                if (currentCount > maxCount) {
                    maxCount = currentCount;
                    mostFreq = lengths[i - 1];
                }
                currentCount = 1;
            }
        }
        return mostFreq;
    }

private:
    std::vector<std::string> logs_;
};

int main() {
    std::vector<std::string> logs = {""error"", ""warning"", ""info"", ""debug"", ""error"", ""error""};
    LogProcessor processor(logs);
    std::cout << ""Most frequent length: "" << processor.mostFrequentLength() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    DataProcessor() : processed_count(0) {}

    void process(const std::vector<int>& data) {
        for (int i = 0; i < data.size(); ++i) {
            if (data[i] > 0) {
                processed_count++;
            }
        }
    }

    int getProcessedCount() const {
        return processed_count;
    }

private:
    int processed_count;
};

int main() {
    std::vector<int> input = {1, -2, 3, 0, 5, -1};
    DataProcessor dp;
    dp.process(input);
    std::cout << ""Processed items: "" << dp.getProcessedCount() << std::endl;
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>

   class PriorityQueue {
   private:
       std::vector<int> queue;

   public:
       void push(int value) {
           queue.push_back(value);
           std::sort(queue.begin(), queue.end(), std::greater<int>());
       }

       int pop() {
           if (queue.empty()) {
               return -1; // Return -1 if queue is empty
           }
           int value = queue[0];
           queue.erase(queue.begin());
           return value;
       }
   };

   int main() {
       PriorityQueue pq;
       pq.push(3);
       pq.push(1);
       pq.push(2);

       std::cout << pq.pop() << std::endl; // prints 3
       std::cout << pq.pop() << std::endl; // prints 2
       std::cout << pq.pop() << std::endl; // prints 1
       std::cout << pq.pop() << std::endl; // prints -1

       return 0;
   }
   ",code_smell,inefficient_data_structure,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String role) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String sql = ""SELECT email FROM users WHERE role = '"" + role + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, lose stack trace
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    // Unused method, dead code
    private void logAccess(String userId) {
        System.out.println(""User accessed: "" + userId);
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"class DataProcessor {
  constructor() {
    this.cache = {};
  }

  process(data) {
    if (!data || data.length === 0) {
      return [];
    }

    let processed = [];
    for (let i = 0; i < data.length; i++) {
      let item = data[i];
      if (this.cache[item.id]) {
        processed.push(this.cache[item.id]);
        continue;
      }

      let result = this._compute(item);
      this.cache[item.id] = result;
      processed.push(result);
    }

    return processed;
  }

  _compute(item) {
    let value = Math.sqrt(item.value);
    let status = 'active';

    if (value < 5) {
      status = 'low';
    } else if (value < 10) {
      status = 'medium';
    } else {
      status = 'high';
    }

    return {
      id: item.id,
      value: value.toFixed(2),
      status: status
    };
  }
}

module.exports = DataProcessor;",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAuthenticator {
    private static final String DEFAULT_PASSWORD = ""password123"";
    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }
        if (username.equals(""admin"") && password.equals(DEFAULT_PASSWORD)) {
            return true;
        }
        // Legacy authentication logic
        return username.equals(password);
    }
}",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String role) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // SQL injection vulnerability: role is concatenated directly
            String sql = ""SELECT email FROM users WHERE role='"" + role + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallowing exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processItems(const std::vector<int>& items) {
    for (size_t i = 0; i < items.size(); ++i) {
        for (size_t j = 0; j < items.size(); ++j) {
            if (items[i] == items[j]) {
                std::cout << ""Duplicate found at ("" << i << "", "" << j << "")"" << std::endl;
            }
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 2, 4};
    processItems(data);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Java,"public class UserManager { private static final int MAX_RETRIES = 3; public void createUser(String username, String password) { for (int i = 0; i < MAX_RETRIES; i++) { try { // Simulate a delay to represent a database operation Thread.sleep(100); System.out.println(""User created: "" + username); break; } catch (InterruptedException e) { System.out.println(""Error creating user: "" + e.getMessage()); } } } }",code_smell,inefficient_error_handling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self._config = None
        self._lock = threading.Lock()

    def load(self):
        # No error handling; assumes file exists and contains valid JSON
        with open(self.path, 'r') as f:
            data = f.read()
        # Unsafe deserialization: using eval on file content
        self._config = eval(data)
        return self._config

    def get(self, key, default=None):
        with self._lock:
            return self._config.get(key, default) if self._config else default

# Usage example
loader = ConfigLoader('/etc/app/config.cfg')
config = loader.load()
api_key = config.get('API_KEY')
print('API key loaded:', api_key)
",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

struct DataProcessor {
    std::vector<int> process(const std::vector<int>& input) {
        std::vector<int> result;
        for (int i = 0; i < input.size(); ++i) {
            for (int j = 0; j < input.size(); ++j) {
                if (i != j && input[i] > input[j]) {
                    result.push_back(input[i]);
                }
            }
        }
        return result;
    }
};

int main() {
    std::vector<int> data = {3, 1, 4, 1, 5};
    DataProcessor dp;
    std::vector<int> processed = dp.process(data);
    for (int val : processed) {
        std::cout << val << "" "";
    }
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public synchronized User getUser(String username) { if (!users.containsKey(username)) { User user = new User(username); users.put(username, user); return user; } return users.get(username); } public static class User { private final String username; public User(String username) { this.username = username; } public String getUsername() { return username; } } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i]; // may read out of bounds
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1,2,3,4,5};
    std::thread t([&](){ processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << "" Odd sum: "" << processor.getOddSum() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

using namespace std;

int process_data(vector<int>& data) {
    int result = 0;
    for (int i = 0; i < data.size(); i++) {
        for (int j = 0; j < data.size(); j++) {
            if (data[i] == data[j]) {
                result++;
            }
        }
    }
    return result;
}

int main() {
    vector<int> input = {1, 2, 3, 2, 1};
    int output = process_data(input);
    cout << ""Result: "" << output << endl;
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <algorithm>

      class Employee {
      public:
         Employee(std::string name, int salary) : name(name), salary(salary) {}

         std::string getName() { return name; }
         int getSalary() { return salary; }

      private:
         std::string name;
         int salary;
      };

      std::vector<Employee> sortEmployees(std::vector<Employee>& employees) {
         std::sort(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
            return a.getSalary() < b.getSalary();
         });
         return employees;
      }

      int main() {
         std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
         std::vector<Employee> sortedEmployees = sortEmployees(employees);

         for (const auto& employee : sortedEmployees) {
            std::cout << employee.getName() << "" - "" << employee.getSalary() << std::endl;
         }

         return 0;
      }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"class UserService {
    constructor(db) {
        this.db = db;
    }

    // Fetch a page of users, page numbers start at 1
    async getUsersPage(page, pageSize) {
        const offset = (page - 1) * pageSize;
        const limit = pageSize;
        const rows = await this.db.query('SELECT * FROM users LIMIT ?, ?', [offset, limit]);
        return rows;
    }

    // Delete a user by ID without proper permission check
    async deleteUser(userId) {
        // Assume admin check is performed elsewhere
        await this.db.execute('DELETE FROM users WHERE id = ?', [userId]);
        console.log(`User ${userId} deleted`);
    }
}

// Usage example
(async () => {
    const db = require('mysql2/promise').createPool({
        host: 'localhost',
        user: 'root',
        password: 'root', // hardcoded secret
        database: 'app'
    });
    const service = new UserService(db);
    const users = await service.getUsersPage(1, 10);
    console.log('First page users:', users);
    // Off‑by‑one bug: requesting page 0 returns the last page instead of error
    const invalidPage = await service.getUsersPage(0, 10);
    console.log('Invalid page users:', invalidPage);
})();",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (i != j && data[i] == data[j]) {
                std::cout << ""Duplicate found at indices "" << i << "" and "" << j << std::endl;
            }
        }
    }
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 2, 4, 5, 3};
    processData(numbers);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Python,"
class BankAccount:
    def __init__(self, account_number, balance=0):
        self.account_number = account_number
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        if amount > self.balance:
            self.balance = 0
        else:
            self.balance -= amount

    def get_balance(self):
        return self.balance

class Bank:
    def __init__(self):
        self.accounts = {}

    def create_account(self, account_number, balance=0):
        if account_number not in self.accounts:
            self.accounts[account_number] = BankAccount(account_number, balance)
        else:
            print('Account already exists')

    def get_account(self, account_number):
        return self.accounts.get(account_number)

    def transfer(self, from_account_number, to_account_number, amount):
        from_account = self.get_account(from_account_number)
        to_account = self.get_account(to_account_number)
        if from_account and to_account:
            from_account.withdraw(amount)
            to_account.deposit(amount)
        else:
            print('One or both accounts do not exist')

bank = Bank()
bank.create_account('12345', 1000)
bank.create_account('67890', 500)
bank.transfer('12345', '67890', 200)
print(bank.get_account('12345').get_balance())
print(bank.get_account('67890').get_balance())
",code_defect,inconsistent_state_management,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String domain) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            stmt = conn.createStatement();
            // SQL injection vulnerability: domain is concatenated directly
            String query = ""SELECT email FROM users WHERE email LIKE '%"" + domain + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        } catch (Exception e) {
            // Swallowing exception, no logging
        } finally {
            // Resources not closed properly, may leak connections
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_resource_leak,,openai/gpt-oss-120b
Python,"import json
import requests

def fetch_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        return {
            'id': data['id'],
            'name': data['name'],
            'email': data['email'],
        }
    else:
        return None

def send_welcome_email(email):
    payload = {'to': email, 'subject': 'Welcome!', 'body': 'Thank you for signing up.'}
    requests.post('https://api.example.com/email/send', json=payload)


def onboard_new_user(user_id):
    user_data = fetch_user_data(user_id)
    if user_data:
        send_welcome_email(user_data['email'])
        print(f""Welcome email sent to {user_data['name']}."")
    else:
        print(f""Failed to fetch user data for ID {user_id}."")

# Example usage
if __name__ == '__main__':
    onboard_new_user(123)",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Student {
public:
    string name;
    int grade;
    Student(string n, int g) : name(n), grade(g) {}
};

bool compareStudents(Student a, Student b) {
    return a.grade > b.grade;
}

void sortStudents(vector<Student>& students) {
    sort(students.begin(), students.end(), compareStudents);
}

int main() {
    vector<Student> students = {Student(""John"", 90), Student(""Alice"", 95), Student(""Bob"", 80)};
    sortStudents(students);
    for (auto& student : students) {
        cout << student.name << "" "" << student.grade << endl;
    }
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.config = {}
        self._load()

    def _load(self):
        # Insecure: directly eval the config file content
        with open(self.config_path, 'r') as f:
            data = f.read()
            self.config = eval(data)  # unsafe deserialization

    def get(self, key, default=None):
        return self.config.get(key, default)

class UserService:
    def __init__(self, db_connection):
        self.db = db_connection
        self.cache = {}

    def get_user(self, user_id):
        if user_id in self.cache:
            return self.cache[user_id]
        # Missing error handling for DB failures
        result = self.db.execute(f""SELECT * FROM users WHERE id = {user_id}"")
        user = result.fetchone()
        self.cache[user_id] = user
        return user

# Usage example (would be in production code)
config = ConfigLoader('/etc/app/config.cfg')
service = UserService(db_connection=os.getenv('DB_CONN'))
print(json.dumps(service.get_user(42)))",code_defect,unsafe_deserialization_and_sql_injection,,openai/gpt-oss-120b
Python,"import requests

def fetch_data_from_api(url, headers=None):
    response = requests.get(url, headers=headers)
    return response.json()


def process_user_data(user_data):
    users = []
    for user in user_data:
        if user['status'] == 'active':
            user_profile = {
                'id': user['id'],
                'name': user['name'],
                'email': user['email']
            }
            users.append(user_profile)
    return users


def main():
    api_url = 'https://api.example.com/users'
    headers = {
        'Authorization': 'Bearer 1234567890',
        'Content-Type': 'application/json'
    }

    raw_data = fetch_data_from_api(api_url, headers)
    active_users = process_user_data(raw_data)
    print(f'Active users: {active_users}')

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string name, int age) : name(name), age(age) {}
};

class UserService {
private:
    std::vector<User> users;

public:
    void addUser(User user) {
        users.push_back(user);
    }

    User* getUserByName(std::string name) {
        for (auto& user : users) {
            if (user.name == name) {
                return &user;
            }
        }
        return nullptr;
    }
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User* user = service.getUserByName(""John"");
    if (user != nullptr) {
        std::cout << user->name << std::endl;
    }
    return 0;
}
",code_defect,dangling_pointer,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cur = self.conn.cursor()
        cur.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username: str, email: str):
        cur = self.conn.cursor()
        cur.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        self.conn.commit()

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page - 1) * page_size
        cur = self.conn.cursor()
        cur.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cur.fetchall()
        # Off‑by‑one bug: should return empty list when page is out of range, but returns last page again
        if not rows and page > 1:
            # incorrectly fetch previous page instead of empty
            cur.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset - page_size))
            rows = cur.fetchall()
        return [dict(id=r[0], username=r[1], email=r[2]) for r in rows]

# Example usage (would be in production code)
repo = UserRepository('users.db')
repo.add_user('alice', 'alice@example.com')
repo.add_user('bob', 'bob@example.com')
print(repo.get_users_page(2))",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import requests
import json

def fetch_user_data(user_id):
    url = 'https://api.example.com/users/' + str(user_id)
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if 'name' in data and 'email' in data:
            return {
                'name': data['name'],
                'email': data['email']
            }
        else:
            return None
    else:
        return None

def process_user_data(user_data):
    if user_data is None:
        print('User data is missing.')
        return

    full_name = user_data['name'].strip().title()
    email = user_data['email'].strip().lower()

    if '@' not in email:
        print('Invalid email format.')
        return

    print(f'Processing user: {full_name}, Email: {email}')

    # Additional processing logic can be added here


def main():
    user_id = input('Enter user ID: ')
    user_data = fetch_user_data(user_id)
    process_user_data(user_data)

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <string>
   class UserManager {
   public:
       void registerUser(const std::string& username, const std::string& password) {
           users[username] = password;
       }
       bool authenticateUser(const std::string& username, const std::string& password) {
           if (users.find(username) != users.end()) {
               return users[username] == password;
           }
           return false;
       }
   private:
       std::map<std::string, std::string> users;
   };
   int main() {
       UserManager userManager;
       userManager.registerUser(""user123"", ""password123"");
       std::cout << std::boolalpha << userManager.authenticateUser(""user123"", ""password123"") << std::endl;
       return 0;
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a log file for each call
    async getUserData(userId) {
        // Bad practice: opening and closing file on every request
        const logStream = fs.createWriteStream('user_access.log', { flags: 'a' });
        try {
            const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
            logStream.write(`User ${userId} accessed at ${new Date().toISOString()}\n`);
            return user[0];
        } catch (err) {
            logStream.write(`Error fetching user ${userId}: ${err.message}\n`);
            throw err;
        } finally {
            logStream.end();
        }
    }

    // Updates user profile; large parameter list and mutable arguments
    async updateUserProfile(userId, firstName, lastName, email, address, phone, preferences) {
        // Mutating the preferences object directly
        preferences.lastUpdated = new Date();
        const sql = `UPDATE users SET first_name = ?, last_name = ?, email = ?, address = ?, phone = ?, preferences = ? WHERE id = ?`;
        const params = [firstName, lastName, email, address, phone, JSON.stringify(preferences), userId];
        return this.db.execute(sql, params);
    }
}

module.exports = UserService;",code_smell,resource_leak_and_large_parameter_list,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

struct User {
    std::string name;
    int age;
    std::string email;
};

void processUser(const User& user) {
    std::cout << ""Processing user: "" << user.name << std::endl;
    if (user.age < 18) {
        std::cout << ""User is a minor. No action taken."" << std::endl;
        return;
    }

    std::string emailDomain = user.email.substr(user.email.find('@') + 1);
    if (emailDomain != ""example.com"") {
        std::cout << ""User email domain is not allowed."" << std::endl;
        return;
    }

    std::cout << ""User is valid. Proceeding..."" << std::endl;
    // Simulate some processing
}

int main() {
    std::vector<User> users = {
        {""Alice"", 25, ""alice@example.com""},
        {""Bob"", 17, ""bob@untrusted.com""},
        {""Charlie"", 30, ""charlie@unknown.org""},
        {""David"", 22, ""david@example.com""}
    };

    for (const auto& user : users) {
        processUser(user);
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        if user_data:
            return {'id': user_data[0], 'name': user_data[1], 'email': user_data[2]}
        else:
            return None
    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute('UPDATE users SET name = %s, email = %s WHERE id = %s', (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigManager:
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, config_path='config.json'):
        # Singleton pattern, but flawed: race condition possible
        if not cls._instance:
            with cls._lock:
                if not cls._instance:
                    cls._instance = super(ConfigManager, cls).__new__(cls)
                    cls._instance._load(config_path)
        return cls._instance

    def _load(self, path):
        # Insecure: loads JSON without validation, may contain malicious content
        with open(path, 'r') as f:
            self.settings = json.load(f)
        # Hardcoded secret fallback
        if 'api_key' not in self.settings:
            self.settings['api_key'] = 'DEFAULT_INSECURE_KEY'

    def get(self, key, default=None):
        return self.settings.get(key, default)

    def set(self, key, value):
        self.settings[key] = value
        # Missing persistence: changes are not saved to disk

# Usage example
if __name__ == '__main__':
    cfg = ConfigManager('/tmp/config.json')
    print('API Key:', cfg.get('api_key'))
    cfg.set('debug', True)
    # The program continues without persisting the new setting
",code_defect,race_condition_and_missing_persistence,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor(order, discountCodes) {
    this.order = order;
    this.discountCodes = discountCodes;
  }

  processOrder() {
    const total = this.calculateTotal();
    const finalAmount = this.applyDiscounts(total);
    this.sendConfirmationEmail();
    return finalAmount;
  }

  calculateTotal() {
    let total = 0;
    for (let i = 0; i < this.order.items.length; i++) {
      total += this.order.items[i].price * this.order.items[i].quantity;
    }
    return total;
  }

  applyDiscounts(total) {
    if (this.discountCodes.includes('SAVE10')) {
      return total * 0.9;
    } else if (this.discountCodes.includes('SAVE20')) {
      return total * 0.8;
    } else {
      return total;
    }
  }

  sendConfirmationEmail() {
    console.log('Email sent to customer');
  }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

class Person {
public:
    std::string name;
    int age;
    Person(std::string n, int a) : name(n), age(a) {}
};

typedef std::vector<Person> PersonList;

void sortPeople(PersonList& people) {
    std::sort(people.begin(), people.end(), [](const Person& a, const Person& b) {
        return a.age < b.age;
    });
}

int main() {
    PersonList people = {Person(""John"", 30), Person(""Alice"", 25), Person(""Bob"", 40)};
    sortPeople(people);
    for (const auto& person : people) {
        std::cout << person.name << "" is "" << person.age << "" years old."" << std::endl;
    }
    return 0;
}",code_smell,unused_import,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user profile and writes audit log asynchronously
  async getUserProfile(userId) {
    const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
    // Fire-and-forget logging, but forgetting to await may cause unhandled rejections
    this.logAccess(userId);
    return user[0];
  }

  // Logs access to a file; returns a promise but callers ignore it
  async logAccess(userId) {
    const logEntry = `${new Date().toISOString()} - User ${userId} accessed profile\n`;
    return new Promise((resolve, reject) => {
      fs.appendFile('access.log', logEntry, err => {
        if (err) reject(err);
        else resolve();
      });
    });
  }
}

// Example usage
(async () => {
  const db = { query: async (sql, params) => [{ id: params[0], name: 'Alice' }] };
  const service = new UserService(db);
  const profile = await service.getUserProfile(42);
  console.log('Profile:', profile);
})();",code_defect,unhandled_promise_rejection_due_to_missing_await,,openai/gpt-oss-120b
Python,"import os
import time

def process_files(directory, file_ext='.txt'):
    files = os.listdir(directory)
    results = []

    for file in files:
        if file.endswith(file_ext):
            file_path = os.path.join(directory, file)
            with open(file_path, 'r') as f:
                content = f.read()
                lines = content.split('\n')
                processed_lines = []
                for line in lines:
                    if line.strip() != '':
                        processed_lines.append(line.strip().upper())
                results.append(processed_lines)
                time.sleep(0.1)  # Simulate processing delay
    return results

# Example usage:
# data = process_files('input_data')
# print(data)",code_smell,inefficient_code,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async getUsers() {
            try {
               const users = await this.userDao.getUsers();
               return users.map(user => ({ id: user.id, name: user.name }));
            } catch (error) {
               console.error('Error fetching users:', error);
               return [];
            }
         }

         async getUserById(id) {
            try {
               const user = await this.userDao.getUserById(id);
               if (!user) {
                  throw new Error(`User with id ${id} not found`);
               }
               return { id: user.id, name: user.name };
            } catch (error) {
               console.error('Error fetching user:', error);
               throw error;
            }
         }
      }

      class UserDao {
         async getUsers() {
            // simulate database query
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' },
            ];
         }

         async getUserById(id) {
            // simulate database query
            const users = await this.getUsers();
            return users.find(user => user.id === id);
         }
      }

      const userDao = new UserDao();
      const userService = new UserService(userDao);
      userService.getUsers().then(users => console.log(users));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Bug: processing zero when no tasks were available
            std::cout << ""Processing: "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main(){
    DataProcessor dp;
    dp.start();
    dp.addTask(42);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

class DataProcessor:
    def __init__(self):
        self.data = []

    def load_data(self, file_path):
        if not os.path.exists(file_path):
            return

        with open(file_path, 'r') as f:
            self.data = json.load(f)

    def process(self):
        for item in self.data:
            if 'timestamp' not in item:
                continue

            # Convert timestamp to datetime
            item['datetime'] = datetime.fromtimestamp(item['timestamp'])

            # Calculate some arbitrary metric
            item['metric'] = item['value'] * 2

    def save_results(self, output_path):
        with open(output_path, 'w') as f:
            json.dump(self.data, f, indent=2)

    def run(self, input_path, output_path):
        self.load_data(input_path)
        self.process()
        self.save_results(output_path)

# Legacy code, not in use anymore
# def old_process(data):
#     results = []
#     for d in data:
#         results.append(d['value'])
#     return results

if __name__ == '__main__':
    processor = DataProcessor()
    processor.run('input.json', 'output.json')",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserManager { private static final String DB_PASSWORD = ""mysecretpassword""; private Connection dbConnection; public UserManager() { try { Class.forName(""com.mysql.cj.jdbc.Driver""); dbConnection = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""myuser"", DB_PASSWORD); } catch (Exception e) { System.out.println(""Error connecting to database: "" + e.getMessage()); } } public void addUser(String username, String password) { try { PreparedStatement statement = dbConnection.prepareStatement(""INSERT INTO users (username, password) VALUES (?, ?)""); statement.setString(1, username); statement.setString(2, password); statement.executeUpdate(); } catch (Exception e) { System.out.println(""Error adding user: "" + e.getMessage()); } } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it in memory.""""""
    _cache = {}
    _lock = threading.Lock()

    @classmethod
    def get_config(cls, path: str) -> dict:
        # Missing validation of path leads to potential path traversal
        with cls._lock:
            if path in cls._cache:
                return cls._cache[path]
            with open(path, 'r') as f:
                data = json.load(f)
                cls._cache[path] = data
                return data

class UserService:
    def __init__(self, config_path: str):
        self.config = ConfigLoader.get_config(config_path)
        self.db_conn_str = self.config.get('db_connection')
        # Directly using the connection string without sanitization
        self._connect_to_db(self.db_conn_str)

    def _connect_to_db(self, conn_str: str):
        # Placeholder for actual DB connection logic
        print(f""Connecting to DB with: {conn_str}"")
        # Simulate a connection object
        self.db = conn_str

    def get_user(self, user_id: int) -> dict:
        # SQL injection vulnerability: user_id is interpolated directly
        query = f""SELECT * FROM users WHERE id = {user_id}""
        print(f""Executing query: {query}"")
        # Simulated DB response
        return {""id"": user_id, ""name"": ""John Doe""}

    def update_user_email(self, user_id: int, new_email: str) -> bool:
        # No validation of email format; could store invalid data
        query = ""UPDATE users SET email = ? WHERE id = ?""
        print(f""Executing prepared statement with email={new_email}, id={user_id}"")
        # Simulate successful update
        return True

# Example usage (would be removed in production)
if __name__ == ""__main__"":
    service = UserService('config.json')
    user = service.get_user(42)
    print(user)
    service.update_user_email(42, 'new.email@example.com')",code_defect,sql_injection_vulnerability,,openai/gpt-oss-120b
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<User> getActiveUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id, username, email FROM users WHERE status = 'active'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            User u = new User();
            u.setId(rs.getInt(""id""));
            u.setUsername(rs.getString(""username""));
            u.setEmail(rs.getString(""email""));
            users.add(u);
        }
        // Missing rs.close(), stmt.close(), and conn.close() leads to resource leak
        return users;
    }

    public void deleteUserById(int userId) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""DELETE FROM users WHERE id = "" + userId; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        // Resources not closed
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
JavaScript,"class UserSession {
  constructor(userId, token) {
    this.userId = userId;
    this.token = token;
    this.lastActivity = new Date();
  }

  updateActivity() {
    this.lastActivity = new Date();
  }

  isExpired(timeout = 300000) {
    const now = new Date();
    const diff = now - this.lastActivity;
    return diff > timeout;
  }

  async validateSession() {
    const response = await fetch('/api/session/validate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.token}`
      }
    });

    if (!response.ok) {
      return false;
    }

    const data = await response.json();
    return data.valid;
  }
}

// Usage
const session = new UserSession('user123', 'abc123xyz');
setInterval(() => {
  session.updateActivity();
}, 60000);",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getAllUsers() {
            const users = await this.userRepository.findAll();
            return users.map(user => ({
               id: user.id,
               name: user.name,
               email: user.email
            }));
         }

         async getUserById(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return {
               id: user.id,
               name: user.name,
               email: user.email
            };
         }
      }

      class UserRepository {
         async findAll() {
            // simulate a database query
            return [
               { id: 1, name: 'John Doe', email: 'john@example.com' },
               { id: 2, name: 'Jane Doe', email: 'jane@example.com' }
            ];
         }

         async findById(id) {
            // simulate a database query
            const users = await this.findAll();
            return users.find(user => user.id === id);
         }
      }

      const userRepository = new UserRepository();
      const userService = new UserService(userRepository);

      async function main() {
         const users = await userService.getAllUsers();
         console.log(users);

         const user = await userService.getUserById(1);
         console.log(user);
      }

      main();
   ",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void process() {
        while (!stopFlag) {
            std::string msg;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    msg = queue.front();
                    queue.erase(queue.begin());
                }
            }
            // BUG: If queue was empty, msg is empty string and still processed
            std::cout << ""Processing: "" << msg << std::endl;
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    lp.enqueue(""Init complete"");
    lp.enqueue(""User login"");
    std::this_thread::sleep_for(std::chrono::seconds(1));
    lp.stop();
    return 0;
}",code_defect,logic_error_unchecked_empty_queue,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.getStatus().equals(""PENDING"")) {
                if (order.getAmount() > 0 && order.getCustomer() != null && order.getItems() != null && !order.getItems().isEmpty()) {
                    String paymentId = generatePaymentId();
                    String transactionId = generateTransactionId();
                    String confirmationCode = generateConfirmationCode();

                    System.out.println(""Processing order: "" + order.getId());
                    System.out.println(""Payment ID: "" + paymentId);
                    System.out.println(""Transaction ID: "" + transactionId);
                    System.out.println(""Confirmation Code: "" + confirmationCode);

                    // TODO: Add payment processing logic
                    // TODO: Add email confirmation logic
                }
            }
        }
    }

    private String generatePaymentId() {
        return UUID.randomUUID().toString();
    }

    private String generateTransactionId() {
        return UUID.randomUUID().toString();
    }

    private String generateConfirmationCode() {
        int length = 8;
        String characters = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < length; i++) {
            int index = (int) (Math.random() * characters.length());
            sb.append(characters.charAt(index));
        }
        return sb.toString();
    }
}",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getUsers() {
            const users = await this.userRepository.findAll();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async getUserById(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return { id: user.id, name: user.name };
         }
      }

      class UserRepository {
         async findAll() {
            // simulate database query
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' }
            ];
         }

         async findById(id) {
            // simulate database query
            const users = await this.findAll();
            return users.find(user => user.id === id);
         }
      }

      const userRepository = new UserRepository();
      const userService = new UserService(userRepository);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize || 10;
    this.currentPage = 0;
    this.items = [];
  }

  loadAll(items) {
    this.items = items;
  }

  getPage(page) {
    // Off‑by‑one error: should use (page - 1) * this.pageSize
    const start = page * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  next() {
    const nextPage = this.currentPage + 1;
    const pageData = this.getPage(nextPage);
    if (pageData.length === 0) return null; // no more data
    this.currentPage = nextPage;
    return pageData;
  }
}

// Usage example (bug manifests when requesting first page)
const paginator = new Paginator(5);
paginator.loadAll([1,2,3,4,5,6,7,8,9,10]);
console.log('First page:', paginator.getPage(1)); // Returns [] due to off‑by‑one
console.log('Next page:', paginator.next()); // Returns [1,2,3,4,5] unexpectedly
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json

def load_config(config_path='config.json'):
    with open(config_path, 'r') as f:
        config = json.load(f)
    return config

def process_data(data):
    result = []
    for item in data:
        if 'id' in item and 'value' in item:
            processed = {
                'identifier': item['id'],
                'score': item['value'] * 2
            }
            result.append(processed)
    return result

def main():
    config = load_config()
    data_path = config.get('data_path', 'data.json')
    
    with open(data_path, 'r') as f:
        raw_data = json.load(f)
    
    processed = process_data(raw_data)
    
    output_path = config.get('output_path', 'output.json')
    with open(output_path, 'w') as f:
        json.dump(processed, f)

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor() {
         this.transactions = [];
      }

      addTransaction(amount) {
         this.transactions.push(amount);
      }

      calculateTotal() {
         let total = 0;
         for (let i = 0; i < this.transactions.length; i++) {
            total += this.transactions[i];
         }
         return total;
      }

      processPayment(cardNumber, expirationDate, securityCode) {
         if (this.calculateTotal() > 1000) {
            return 'Payment exceeds limit';
         }
         // Simulate payment processing time
         const processingTime = Math.floor(Math.random() * 2000);
         setTimeout(() => {
            console.log('Payment processed successfully');
         }, processingTime);
      }
   }

   const paymentProcessor = new PaymentProcessor();
   paymentProcessor.addTransaction(500);
   paymentProcessor.addTransaction(600);
   paymentProcessor.processPayment('1234-5678-9012-3456', '12/25', '123');
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Fetch user data and write a report file
  async generateUserReport(userId) {
    const user = await this.db.getUserById(userId);
    if (!user) {
      throw new Error('User not found');
    }
    const orders = await this.db.getOrdersForUser(userId);
    const total = orders.reduce((sum, o) => sum + o.amount, 0);
    const report = `User: ${user.name}\nTotal Orders: ${orders.length}\nTotal Amount: $${total}`;
    // BUG: Asynchronous write without awaiting, may cause race condition when caller expects file to exist
    fs.writeFile('reports/' + userId + '.txt', report, (err) => {
      if (err) console.error('Failed to write report', err);
    });
    return report;
  }
}

module.exports = UserService;",code_defect,async_file_write_race_condition,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

struct User {
    std::string name;
    int age;
    std::string email;
};

bool validateUser(const User& user) {
    if (user.name.empty()) {
        return false;
    }

    if (user.age < 18) {
        return false;
    }

    if (user.email.find('@') == std::string::npos) {
        return false;
    }

    return true;
}

void registerUser(const User& user) {
    if (validateUser(user)) {
        std::cout << ""User registered: "" << user.name << std::endl;
    } else {
        std::cout << ""User registration failed."" << std::endl;
    }
}

int main() {
    User user = {"""", 16, ""testemail.com""};
    registerUser(user);
    return 0;
}",code_defect,invalid_data_handling,,qwen/qwen3-32b
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""p@ssw0rd""; // hardcoded secret

    public List<User> getActiveUsers() {
        List<User> users = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // SQL injection risk: concatenating user input directly
            String sql = ""SELECT id, username, email FROM users WHERE status='ACTIVE'"";
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                users.add(user);
            }
        } catch (Exception e) {
            // Swallowing exception, no logging
        } finally {
            // Missing close of ResultSet, Statement, and Connection leads to resource leak
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,resource_leak_and_exception_swallowing,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    if (data[i].status === 'active') {
      let processed = {};
      processed.id = data[i].id;
      processed.name = data[i].name.toUpperCase();
      processed.total = 0;
      for (let j = 0; j < data[i].items.length; j++) {
        processed.total += data[i].items[j].quantity * data[i].items[j].price;
      }
      result.push(processed);
    }
  }
  return result;
}

function filterAndProcess(data) {
  let filtered = [];
  for (let i = 0; i < data.length; i++) {
    if (data[i].status === 'active') {
      filtered.push(data[i]);
    }
  }
  return processData(filtered);
}",code_smell,duplicated_code,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>
   class Employee {
   public:
       std::string name;
       int salary;
       Employee(std::string n, int s) : name(n), salary(s) {}
   };
   class Company {
   public:
       std::vector<Employee> employees;
       void addEmployee(Employee e) { employees.push_back(e); }
       int getTotalSalary() {
           int sum = 0;
           for (auto &e : employees) {
               sum += e.salary;
           }
           return sum;
       }
   };
   int main() {
       Company c;
       c.addEmployee(Employee(""John"", 50000));
       c.addEmployee(Employee(""Alice"", 60000));
       std::cout << c.getTotalSalary() << std::endl;
       return 0;
   }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String role) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            stmt = conn.createStatement();
            // insecure concatenation leads to SQL injection
            String query = ""SELECT email FROM users WHERE role = '"" + role + ""'"";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        } catch (Exception e) {
            // swallow exception, lose stack trace
        } finally {
            // resources not closed properly, potential leak
            try { if (rs != null) rs.close(); } catch (Exception ignored) {}
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_resource_leak,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor() {
    this.cache = {};
  }

  async getUserDetails(userId) {
    if (this.cache[userId]) {
      return this.cache[userId];n
    }

    const user = await fetchUserFromDatabase(userId);

    if (user && user.isActive) {
      this.cache[userId] = user;
      return user;
    }

    return null;
  }

  async processUsers(userIds) {
    const results = [];
    for (let i = 0; i < userIds.length; i++) {
      const user = await this.getUserDetails(userIds[i]);
      if (user) {
        results.push(user);
      }
    }
    return results;
  }
}

async function fetchUserFromDatabase(userId) {
  // Simulate a database call
  return new Promise((resolve) => {
    setTimeout(() => {
      if (userId === 1) {
        resolve({ id: 1, name: 'Alice', isActive: true });
      } else {
        resolve(null);
      }
    }, 100);
  });
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class ShoppingCart {
         constructor() {
            this.items = [];
         }

         addItem(item) {
            this.items.push(item);
         }

         removeItem(item) {
            const index = this.items.indexOf(item);
            if (index !== -1) {
               this.items.splice(index, 1);
            }
         }

         calculateTotal() {
            let total = 0;
            for (let i = 0; i < this.items.length; i++) {
               total += this.items[i].price * this.items[i].quantity;
            }
            return total;
         }

         applyDiscount(discountPercentage) {
            let total = this.calculateTotal();
            return total * (1 - discountPercentage / 100);
         }
      }

      function main() {
         const cart = new ShoppingCart();
         cart.addItem({ price: 10, quantity: 2 });
         cart.addItem({ price: 20, quantity: 1 });
         console.log(cart.applyDiscount(10));
      }

      main();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserCache:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                data TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def get_user(self, user_id):
        cursor = self.conn.execute('SELECT data FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def set_user(self, user_id, user_obj):
        # Serialize user object to JSON and store it
        data = json.dumps(user_obj)
        self.conn.execute('INSERT OR REPLACE INTO users (id, data) VALUES (?, ?)', (user_id, data))
        self.conn.commit()

    def close(self):
        self.conn.close()

# Global cache instance (singleton pattern misuse)
CACHE = UserCache(os.getenv('USER_DB_PATH', ':memory:'))

def get_user_profile(user_id):
    # Directly returns mutable dict from cache; caller may modify it unintentionally
    profile = CACHE.get_user(user_id)
    if profile is None:
        profile = {'id': user_id, 'name': 'Anonymous', 'settings': {}}
        CACHE.set_user(user_id, profile)
    return profile

def update_user_setting(user_id, key, value):
    profile = get_user_profile(user_id)
    # Bug: modifies the cached dict but does not persist changes back to DB
    profile['settings'][key] = value
    # Missing CACHE.set_user call leads to loss of updates after process restart
    return True
",code_defect,state_not_persisted,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(const std::vector<int>& input, std::vector<int>& output) {
    for (size_t i = 0; i < input.size(); ++i) {
        output.push_back(input[i] * 2);
    }

    for (size_t i = 0; i < output.size(); ++i) {
        if (output[i] > 100) {
            output[i] = 0;
        }
    }
}

int main() {
    std::vector<int> data = {50, 60, 110, 30};
    std::vector<int> result;

    processData(data, result);

    for (int val : result) {
        std::cout << val << ' ';
    }
    std::cout << std::endl;

    return 0;
}",code_smell,inefficient_looping,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string name, int age) : name(name), age(age) {}
};

class UserRepository {
private:
    std::vector<User> users;

public:
    void addUser(User user) {
        users.push_back(user);
    }

    User* getUserByName(std::string name) {
        for (auto& user : users) {
            if (user.name == name) {
                return &user;
            }
        }
        return nullptr;
    }
};

int main() {
    UserRepository repo;
    repo.addUser(User(""John"", 30));
    User* user = repo.getUserByName(""John"");
    if (user) {
        std::cout << user->name << std::endl;
    }
    return 0;
}
",code_defect,dangling_pointer,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3
from typing import List, Dict

class UserRepository:
    def __init__(self, db_path: str = 'users.db'):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        data TEXT NOT NULL)''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, data: Dict):
        # Directly serializing user-provided data without validation
        serialized = json.dumps(data)
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        # SQL injection vulnerability: username is interpolated directly
        cur.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{serialized}')"")
        conn.commit()
        conn.close()

    def get_user(self, user_id: int) -> Dict:
        conn = sqlite3.connect(self.db_path)
        cur = conn.cursor()
        cur.execute('SELECT data FROM users WHERE id = ?', (user_id,))
        row = cur.fetchone()
        conn.close()
        if row:
            return json.loads(row[0])
        return {}

def bulk_import_users(csv_path: str, repo: UserRepository):
    # Reads a CSV file where each line is: username, json_data
    with open(csv_path, 'r') as f:
        for line in f:
            parts = line.strip().split(',')
            if len(parts) != 2:
                continue
            username, json_str = parts
            # No error handling for malformed JSON
            data = json.loads(json_str)
            repo.add_user(username, data)

if __name__ == '__main__':
    repo = UserRepository()
    bulk_import_users('users.csv', repo)
    print('Import complete')
",code_defect,SQL injection and unsafe deserialization,,openai/gpt-oss-120b
Java,"public class ReportGenerator {
    public void generateReport(String reportType, List<User> users, String outputFormat) {
        if (reportType == null || users == null || outputFormat == null) {
            return;
        }

        if (reportType.equals(""summary"")) {
            if (outputFormat.equals(""pdf"")) {
                generateSummaryPDF(users);
            } else if (outputFormat.equals(""csv"")) {
                generateSummaryCSV(users);
            }
        } else if (reportType.equals(""detailed"")) {
            if (outputFormat.equals(""pdf"")) {
                generateDetailedPDF(users);
            } else if (outputFormat.equals(""csv"")) {
                generateDetailedCSV(users);
            }
        }
    }

    private void generateSummaryPDF(List<User> users) {
        // PDF generation logic for summary report
    }

    private void generateSummaryCSV(List<User> users) {
        // CSV generation logic for summary report
    }

    private void generateDetailedPDF(List<User> users) {
        // PDF generation logic for detailed report
    }

    private void generateDetailedCSV(List<User> users) {
        // CSV generation logic for detailed report
    }
}",code_smell,conditional_complexity,,qwen/qwen3-32b
Python,"
class UserDatabase:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, username, email):
        if user_id in self.users:
            return
        self.users[user_id] = {'username': username, 'email': email}

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, username=None, email=None):
        if user_id not in self.users:
            return
        if username:
            self.users[user_id]['username'] = username
        if email:
            self.users[user_id]['email'] = email

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]

database = UserDatabase()

def main():
    database.add_user(1, 'john_doe', 'johndoe@example.com')
    print(database.get_user(1))
    database.update_user(1, email='johndoe2@example.com')
    print(database.get_user(1))
    database.delete_user(1)
    print(database.get_user(1))

main()
",code_smell,god_class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogManager {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        buffer_.push_back(msg);
        if (buffer_.size() > 10) {
            flush();
        }
    }
private:
    void flush() {
        for (const auto& line : buffer_) {
            std::cout << line << std::endl;
        }
        buffer_.clear();
    }
    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

void processData(LogManager& logger, const std::vector<int>& data) {
    for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
        int value = data[i]; // may read out of bounds
        if (value % 2 == 0) {
            logger.log(""Even: "" + std::to_string(value));
        } else {
            logger.log(""Odd: "" + std::to_string(value));
        }
    }
}

int main() {
    LogManager logger;
    std::vector<int> numbers = {1,2,3,4,5};
    std::thread t1(processData, std::ref(logger), std::cref(numbers));
    std::thread t2(processData, std::ref(logger), std::cref(numbers));
    t1.join();
    t2.join();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import random

def generate_random_data():
    data = []
    for _ in range(1000000):
        data.append(random.randint(1, 100))
    return data

def process_data(data):
    result = []
    for i in range(len(data)):
        for j in range(len(data)):
            result.append(data[i] * data[j])
    return result

if __name__ == '__main__':
    raw_data = generate_random_data()
    output = process_data(raw_data)
    print(f'Processed {len(output)} entries.')",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            self.users[user_id] = user_data

    def remove_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            raise Exception('User not found')

    def get_all_users(self):
        return list(self.users.values())
   ",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    // Synchronous read blocks event loop
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

class UserService {
  constructor(db) {
    this.db = db;
    this.config = new ConfigLoader('./config.json');
  }

  async getUserProfile(userId) {
    const cfg = this.config.load(); // potential race if config changes
    const user = await this.db.query('SELECT * FROM users WHERE id = ' + userId);
    if (!user) {
      throw new Error('User not found');
    }
    // Missing sanitization leads to SQL injection
    return {
      id: user.id,
      name: user.name,
      role: cfg.defaultRole // uses config that may be stale
    };
  }
}

module.exports = { ConfigLoader, UserService };",code_defect,SQL_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void processData(const std::vector<int>& data) {
    for (int val : data) {
        std::this_thread::sleep_for(std::chrono::milliseconds(10)); // simulate processing
        mtx.lock();
        std::cout << ""Processing: "" << val << std::endl;
        mtx.unlock();
    }
}

void workerThread(const std::vector<int>& data) {
    processData(data);
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};

    std::thread t1(workerThread, data);
    std::thread t2(workerThread, data);

    t1.join();
    t2.join();

    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    Employee getOldestEmployee() {
        if (employees.empty()) {
            throw std::runtime_error(""No employees"");
        }
        return *std::max_element(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
            return a.getAge() < b.getAge();
        });
    }
private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 30));
    manager.addEmployee(Employee(""Alice"", 25));
    manager.addEmployee(Employee(""Bob"", 40));
    try {
        Employee oldest = manager.getOldestEmployee();
        std::cout << ""Oldest employee: "" << oldest.getName() << std::endl;
    } catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
    }
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class UserProfileManager:
    def __init__(self, storage_path):
        self.storage_path = storage_path
        if not os.path.isdir(storage_path):
            os.makedirs(storage_path)
        self.cache = {}

    def load_user(self, user_id):
        """"""Load a user profile from disk, using a simple JSON file per user.""""""
        if user_id in self.cache:
            return self.cache[user_id]
        file_path = os.path.join(self.storage_path, f""{user_id}.json"")
        with open(file_path, 'r') as f:
            data = json.load(f)
        self.cache[user_id] = data
        return data

    def save_user(self, user_id, profile_data):
        """"""Save a user profile to disk and update cache.""""""
        file_path = os.path.join(self.storage_path, f""{user_id}.json"")
        # BUG: Using insecure eval on user-provided data before writing
        safe_data = eval(profile_data)  # unsafe deserialization
        with open(file_path, 'w') as f:
            json.dump(safe_data, f)
        self.cache[user_id] = safe_data

    def delete_user(self, user_id):
        """"""Delete a user profile from disk and cache.""""""
        file_path = os.path.join(self.storage_path, f""{user_id}.json"")
        if os.path.exists(file_path):
            os.remove(file_path)
        self.cache.pop(user_id, None)

    def list_all_users(self):
        """"""Return a list of all user IDs present in storage.""""""
        return [fname.split('.')[0] for fname in os.listdir(self.storage_path) if fname.endswith('.json')]

def main():
    manager = UserProfileManager('/tmp/user_profiles')
    user_id = '12345'
    profile = '{""name"": ""Alice"", ""age"": 30}'
    manager.save_user(user_id, profile)
    loaded = manager.load_user(user_id)
    logger.info(f""Loaded profile: {loaded}"")

if __name__ == '__main__':
    main()
",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class DataProcessor {
public:
    DataProcessor() {}
    
    void process(const vector<string>& input) {
        for (const auto& line : input) {
            if (line.empty()) continue;
            
            for (size_t i = 0; i < line.length(); ++i) {
                if (line[i] == 'X') {
                    cout << ""Found X at position "" << i << "" in line: "" << line << endl;
                }
            }
        }
    }
};

int main() {
    vector<string> input = {""ExampleX"", ""NoXHere"", ""XAnotherExample"", """"};
    DataProcessor processor;
    processor.process(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private Map<String, User> users = new HashMap<>(); public void addUser(User user) { users.put(user.getUsername(), user); } public User getUser(String username) { return users.get(username); } public void updateUser(User user) { users.put(user.getUsername(), user); } public void deleteUser(String username) { users.remove(username); } public List<User> getAllUsers() { return new ArrayList<>(users.values()); } }",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<String> getUserEmailsByRole(String role) {
        List<String> emails = new ArrayList<>();
        String query = ""SELECT email FROM users WHERE role = '"" + role + ""'""; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return emails;
    }

    public void updateUserLastLogin(int userId) {
        String sql = ""UPDATE users SET last_login = NOW() WHERE id = ?"";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, userId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            // Swallow exception, no logging
        }
    }
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  getUsers() {
    return this.users;
  }

  deleteUser(id) {
    this.users = this.users.filter(user => user.id !== id);
  }

  findUser(id) {
    return this.users.find(user => user.id === id);
  }

  updateUsername(id, newUsername) {
    const user = this.findUser(id);
    if (user) {
      user.username = newUsername;
    }
  }

  updateEmail(id, newEmail) {
    const user = this.findUser(id);
    if (user) {
      user.email = newEmail;
    }
  }
}

// Example usage:
const userManager = new UserManager();
userManager.addUser({ id: 1, username: 'johndoe', email: 'john@example.com' });
userManager.updateEmail(1, 'johnnew@example.com');",code_smell,large_class,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    Student(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

bool compareStudents(const Student& s1, const Student& s2) {
    return s1.getAge() < s2.getAge();
}

void sortStudents(std::vector<Student>& students) {
    std::sort(students.begin(), students.end(), compareStudents);
}

int main() {
    std::vector<Student> students = {Student(""John"", 20), Student(""Alice"", 22), Student(""Bob"", 19)};
    sortStudents(students);

    for (const auto& student : students) {
        std::cout << student.getName() << "" is "" << student.getAge() << "" years old."" << std::endl;
    }

    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_schema()

    def _ensure_schema(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> int:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        conn.commit()
        user_id = cursor.lastrowid
        conn.close()
        return user_id

    def get_users_page(self, page: int, page_size: int = 10):
        """"""Return a list of users for the given page number (1-indexed).""""""
        offset = (page - 1) * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cursor.fetchall()
        conn.close()
        # Off‑by‑one bug: returns one extra record when page is 1
        if page == 1:
            rows = rows[:-1]
        return [{'id': r[0], 'username': r[1], 'email': r[2]} for r in rows]

# Example usage (not part of the library)
repo = UserRepository('users.db')
for i in range(25):
    repo.add_user(f'user{i}', f'user{i}@example.com')
print(repo.get_users_page(1))
print(repo.get_users_page(2))",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        String customerEmail = order.getCustomer().getEmail();
        double total = 0;
        for (OrderItem item : order.getItems()) {
            total += item.getPrice() * item.getQuantity();
        }

        if (total > 0) {
            sendConfirmationEmail(customerEmail, total);
        }

        if (order.getStatus() == OrderStatus.PENDING) {
            order.setStatus(OrderStatus.PROCESSED);
        }

        saveOrderToDatabase(order);
    }

    private void sendConfirmationEmail(String email, double total) {
        // Email sending logic here
    }

    private void saveOrderToDatabase(Order order) {
        // Database persistence logic here
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
       constructor() {
           this.users = [];
       }

       addUser(user) {
           this.users.push(user);
       }

       removeUser(username) {
           for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].username === username) {
                   this.users.splice(i, 1);
                   break;
               }
           }
       }

       getUser(username) {
           for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].username === username) {
                   return this.users[i];
               }
           }
           return null;
       }
   }

   function main() {
       let userManager = new UserManager();
       userManager.addUser({ username: 'john', password: 'hello' });
       console.log(userManager.getUser('john'));
       userManager.removeUser('john');
       console.log(userManager.getUser('john'));
   }

   main();
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<Transaction> getPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction tx = new Transaction();
            tx.setId(rs.getInt(""id""));
            tx.setAmount(rs.getDouble(""amount""));
            tx.setStatus(rs.getString(""status""));
            list.add(tx);
        }
        // Missing close of ResultSet, Statement, and Connection -> resource leak
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = getPendingTransactions();
            for (Transaction tx : pending) {
                // Simulate processing
                if (tx.getAmount() < 0) {
                    // Incorrect logic: negative amounts should be rejected, but code proceeds
                    tx.setStatus(""COMPLETED"");
                } else {
                    tx.setStatus(""COMPLETED"");
                }
                updateTransactionStatus(tx);
            }
        } catch (SQLException e) {
            // Swallowing exception, no logging
        }
    }

    private void updateTransactionStatus(Transaction tx) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""UPDATE transactions SET status=? WHERE id=?"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, tx.getStatus());
        stmt.setInt(2, tx.getId());
        stmt.executeUpdate();
        // Missing close of Statement and Connection -> resource leak
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_logic_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processText(const std::string& input, const std::string& prefix, const std::string& suffix, bool capitalize, bool trim) {
    std::string result = input;

    if (trim) {
        // Remove leading and trailing whitespace
        size_t first = result.find_first_not_of(' ');
        size_t last = result.find_last_not_of(' ');
        if (first != std::string::npos && last != std::string::npos) {
            result = result.substr(first, last - first + 1);
        }
    }

    if (capitalize) {
        if (!result.empty()) {
            result[0] = toupper(result[0]);
        }
    }

    result = prefix + result + suffix;

    return result;
}

int main() {
    std::vector<std::string> data = {""hello"", ""  world  "", ""test\n""};
    std::string processed;

    for (const auto& text : data) {
        processed = processText(text, ""<<"", ""_END_"", true, true);
        std::cout << processed << std::endl;
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
    
    def login(self, input_username, input_password):
        if input_username == self.username and input_password == self.password:
            return True
        else:
            return False
    
    def change_password(self, new_password):
        self.password = new_password

account = UserAccount('admin', 'password123', 'admin@example.com')
print(account.login('admin', 'password123'))  # Expected output: True
print(account.login('admin', 'wrong_password'))  # Expected output: False
account.change_password('new_password')
print(account.login('admin', 'new_password'))  # Expected output: True",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk if limit derived from user input
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""id""));
        }
        // Missing close of ResultSet, Statement, and Connection
        return payments;
    }

    public void processPayments() {
        try {
            List<String> pending = getPendingPayments(100);
            for (String paymentId : pending) {
                // Simulate processing
                Thread.sleep(10);
                // Update status without transaction handling
                updatePaymentStatus(paymentId, ""COMPLETED"");
            }
        } catch (Exception e) {
            // Swallowing exception, no logging
        }
    }

    private void updatePaymentStatus(String paymentId, String status) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""UPDATE payments SET status = ? WHERE id = ?"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, status);
        stmt.setString(2, paymentId);
        stmt.executeUpdate();
        // Missing close of Statement and Connection
    }
}
",code_defect,resource_leak_and_missing_error_handling,,openai/gpt-oss-120b
Python,"import os
import time
import sqlite3

def process_user_data(user_id):
    db_path = os.path.join('/var/db/users', f'users.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute(f""SELECT * FROM users WHERE id = {user_id}"")
    user = cursor.fetchone()

    if user:
        username = user[1]
        print(f""Processing user {username}..."")
        time.sleep(2)
        print(f""User {username} processed successfully."")
    else:
        print(f""User with ID {user_id} not found."")

    cursor.close()
    conn.close()

    return user

if __name__ == ""__main__"":
    process_user_data(1)",code_defect,SQL injection vulnerability,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>

class BankAccount {
private:
    double balance;
public:
    BankAccount(double initialBalance) : balance(initialBalance) {}
    void withdraw(double amount) {
        if (amount > balance) {
            std::cout << ""Insufficient funds"" << std::endl;
            // Intentionally not updating the balance here
        } else {
            balance -= amount;
        }
    }
    double getBalance() {
        return balance;
    }
};

int main() {
    BankAccount account(1000.0);
    account.withdraw(500.0);
    account.withdraw(600.0);
    std::cout << ""Final balance: "" << account.getBalance() << std::endl;
    return 0;
}",code_defect,inconsistent_state,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i] * 2;
            results_.push_back(value);
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& results() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1,2,3,4,5};
    std::thread t([&](){ processor.process(input); });
    t.join();
    for (int v : processor.results()) {
        std::cout << v << "" "";
    }
    std::cout << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class DataProcessor {
public:
    void process(const vector<string>& data) {
        for (const auto& item : data) {
            if (!item.empty()) {
                string cleaned = removeLeadingWhitespace(item);
                cout << cleaned << endl;
            }
        }
    }

private:
    string removeLeadingWhitespace(const string& input) {
        size_t firstNonSpace = input.find_first_not_of(' ');
        return (firstNonSpace == string::npos) ? """" : input.substr(firstNonSpace);
    }
};",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserManager {
      constructor() {
         this.users = [];
      }

      addUser(username, password) {
         const user = { username, password };
         this.users.push(user);
      }

      removeUser(username) {
         this.users = this.users.filter(user => user.username !== username);
      }

      authenticate(username, password) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].username === username && this.users[i].password === password) {
               return true;
            }
         }
         return false;
      }
   }

   const userManager = new UserManager();
   userManager.addUser('admin', 'password123');
   console.log(userManager.authenticate('admin', 'password123')); // true
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json, os, logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # Loads JSON config without any validation
        with open(self.config_path, 'r') as f:
            self.settings = json.load(f)
        logger.info('Configuration loaded')

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, db_conn_str):
        self.db_conn_str = db_conn_str
        self._connect()

    def _connect(self):
        # Unsafe: directly uses connection string without sanitization
        self.conn = self.db_conn_str  # placeholder for actual DB connection
        logger.debug('Connected to DB')

    def fetch_user_data(self, user_id):
        # SQL injection vulnerability
        query = f""SELECT * FROM users WHERE id = {user_id}""
        logger.debug(f'Executing query: {query}')
        # Simulate execution
        return {'id': user_id, 'name': 'John Doe'}

    def process(self, user_id):
        data = self.fetch_user_data(user_id)
        # Assume some complex processing here
        result = data['name'].upper()
        logger.info(f'Processed data for user {user_id}')
        return result

if __name__ == '__main__':
    cfg = ConfigLoader(os.getenv('APP_CONFIG', 'config.json'))
    processor = DataProcessor(cfg.get('db_connection'))
    user_input = input('Enter user ID: ')
    print(processor.process(user_input))
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import os
import sqlite3
from datetime import datetime

def process_user_data(user_id, db_path='data.db'):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()

    if user:
        cursor.execute('UPDATE users SET last_active = ? WHERE id = ?',
                         (datetime.now(), user_id))
        conn.commit()

        # Legacy code from v1.0
        # cursor.execute('INSERT INTO logs (user_id, action) VALUES (?, ?)',
        #                (user_id, 'login'))

    cursor.close()
    conn.close()

    return user

# Hardcoded credentials for some external API
API_KEY = 'supersecretkey123'
API_SECRET = 'notsosecret'",code_smell,"dead_code, hardcoded_credentials",,qwen/qwen3-32b
JavaScript,"
   class UserManager {
      constructor() {
         this.users = [];
      }

      addUser(user) {
         this.users.push(user);
      }

      removeUser(userId) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].id === userId) {
               this.users.splice(i, 1);
               break;
            }
         }
      }

      getUserCount() {
         return this.users.length;
      }
   }

   function main() {
      let userManager = new UserManager();
      userManager.addUser({ id: 1, name: 'John Doe' });
      userManager.addUser({ id: 2, name: 'Jane Doe' });
      console.log(userManager.getUserCount());
   }

   main();
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""root"";
    private static final String DB_PASSWORD = ""rootpass""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            conn.setAutoCommit(false);
            // Debit the account
            String debitSql = ""UPDATE accounts SET balance = balance - ? WHERE account_id = ?"";
            try (PreparedStatement debitStmt = conn.prepareStatement(debitSql)) {
                debitStmt.setDouble(1, amount);
                debitStmt.setString(2, accountId);
                int rows = debitStmt.executeUpdate();
                if (rows != 1) {
                    conn.rollback();
                    return false;
                }
            }
            // Credit the merchant
            String creditSql = ""UPDATE merchants SET balance = balance + ? WHERE merchant_id = 'DEFAULT'""; // hardcoded merchant
            try (PreparedStatement creditStmt = conn.prepareStatement(creditSql)) {
                creditStmt.setDouble(1, amount);
                creditStmt.executeUpdate();
            }
            conn.commit();
            return true;
        } catch (SQLException e) {
            try {
                if (conn != null) conn.rollback();
            } catch (SQLException ex) {
                // ignore
            }
            return false;
        } finally {
            try {
                if (conn != null) conn.close();
            } catch (SQLException e) {
                // ignore
            }
        }
    }

    // Retrieves the balance but mistakenly uses string concatenation leading to SQL injection
    public double getAccountBalance(String accountId) {
        String query = ""SELECT balance FROM accounts WHERE account_id = '"" + accountId + ""'"";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            if (rs.next()) {
                return rs.getDouble(""balance"");
            }
        } catch (SQLException e) {
            // log error
        }
        return 0.0;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processUserInput(const std::string& input) {
    std::vector<int> numbers;
    std::string currentNum;
    
    for (char ch : input) {
        if (ch == ',') {
            if (!currentNum.empty()) {
                numbers.push_back(std::stoi(currentNum));
                currentNum.clear();
            }
        } else {
            currentNum += ch;
        }
    }

    if (!currentNum.empty()) {
        numbers.push_back(std::stoi(currentNum));
    }

    for (int num : numbers) {
        std::cout << num * num << ""\n"";
    }
}

int main() {
    std::string input;
    std::getline(std::cin, input);
    processUserInput(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userDao) {
            this.userDao = userDao;
         }

         async getUserById(id) {
            return this.userDao.getUserById(id);
         }

         async getUsers() {
            const users = await this.userDao.getUsers();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async createUser(user) {
            if (!user.name || !user.email) {
               throw new Error('Name and email are required');
            }
            return this.userDao.createUser(user);
         }
      }

      class UserDao {
         async getUserById(id) {
            // simulate database query
            return { id: 1, name: 'John Doe', email: 'john@example.com' };
         }

         async getUsers() {
            // simulate database query
            return [{ id: 1, name: 'John Doe', email: 'john@example.com' }, { id: 2, name: 'Jane Doe', email: 'jane@example.com' }];
         }

         async createUser(user) {
            // simulate database insert
            return { id: 3, name: user.name, email: user.email };
         }
      }

      const userDao = new UserDao();
      const userService = new UserService(userDao);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public User getUserById(int userId) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String query = ""SELECT id, username, email FROM users WHERE id = "" + userId; // insecure concatenation
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();
        User user = null;
        if (rs.next()) {
            user = new User();
            user.setId(rs.getInt(""id""));
            user.setUsername(rs.getString(""username""));
            user.setEmail(rs.getString(""email""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return user;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection vulnerability due to string concatenation and hardcoded credentials,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final int MAX_RETRIES = 3;

    public void processOrder(Order order) {
        int retryCount = 0;
        boolean success = false;

        while (retryCount <= MAX_RETRIES) {
            try {
                success = validateOrder(order);
                if (success) {
                    persistOrder(order);
                    sendOrderConfirmation(order);
                    break;
                }
            } catch (Exception e) {
                retryCount++;
                if (retryCount > MAX_RETRIES) {
                    logError(""Max retries reached for order: "" + order.getId(), e);
                    sendOrderFailureNotification(order);
                }
            }
        }
    }

    private boolean validateOrder(Order order) {
        if (order.getItems().isEmpty()) {
            return false;
        }
        if (order.getTotalPrice() <= 0) {
            return false;
        }
        return true;
    }

    private void persistOrder(Order order) {
        // Simulated database call
    }

    private void sendOrderConfirmation(Order order) {
        // Simulated email or notification call
    }

    private void logError(String message, Exception e) {
        // Simulated logging
    }

    private void sendOrderFailureNotification(Order order) {
        // Simulated notification
    }
}",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
      class UserAccount {
         constructor(username, password) {
            this.username = username;
            this.password = password;
         }

         authenticate(username, password) {
            if (this.username === username && this.password === password) {
               return true;
            }
            return false;
         }

         changePassword(oldPassword, newPassword) {
            if (this.password === oldPassword) {
               this.password = newPassword;
            }
         }
      }

      let user = new UserAccount('johnDoe', 'password123');
      console.log(user.authenticate('johnDoe', 'password123')); // true
      user.changePassword('password123', 'newPassword');
      console.log(user.authenticate('johnDoe', 'newPassword')); // true
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._ensure_table()

    def _ensure_table(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                email TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def add_user(self, username: str, email: str) -> int:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))
        user_id = cursor.lastrowid
        conn.commit()
        conn.close()
        return user_id

    def get_users_page(self, page: int, page_size: int = 10):
        # Off-by-one error: should offset = (page - 1) * page_size
        offset = page * page_size
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT id, username, email FROM users LIMIT ? OFFSET ?', (page_size, offset))
        rows = cursor.fetchall()
        conn.close()
        return [{'id': r[0], 'username': r[1], 'email': r[2]} for r in rows]

# Example usage (would be removed in production)
repo = UserRepository('users.db')
repo.add_user('alice', 'alice@example.com')
repo.add_user('bob', 'bob@example.com')
print(repo.get_users_page(0))",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    void process(std::vector<int>& data) {
        for (size_t i = 0; i < data.size(); ++i) {
            data[i] *= 2;
        }
    }

    void logData(std::vector<int>& data) {
        for (size_t i = 0; i < data.size(); ++i) {
            std::cout << data[i] << "" "";
        }
        std::cout << std::endl;
    }

    void processData(std::vector<int>& data) {
        process(data);
        logData(data);
    }
};

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    DataProcessor processor;
    processor.processData(data);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userDao) { this.userDao = userDao; } async getUsers() { let users = await this.userDao.getAllUsers(); for (let i = 0; i < users.length; i++) { users[i].fullName = users[i].firstName + ' ' + users[i].lastName; } return users; } },code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""p@ssw0rd""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            String query = ""SELECT email FROM users LIMIT "" + limit; // unsafe concatenation
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            try { if (rs != null) rs.close(); } catch (Exception ignored) {}
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL injection vulnerability and hardcoded credentials,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    private List<User> users;

    public UserProcessor(List<User> users) {
        this.users = users;
    }

    public void processUsers() {
        for (User user : users) {
            if (user != null && user.isActive()) {
                if (user.getRole().equalsIgnoreCase(""ADMIN"")) {
                    user.grantAccess();
                } else {
                    user.denyAccess();
                }
            }
        }
    }

    public void resetAllUsers() {
        for (User user : users) {
            user.setActive(false);
        }
    }

    public void addNewUser(String name, String email) {
        User newUser = new User(name, email);
        users.add(newUser);
    }

    public List<User> getUsers() {
        return users;
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final String DEFAULT_PASSWORD = ""password123""; public User createUser(String username, String email) { User user = new User(username, email); user.setPassword(DEFAULT_PASSWORD); return user; } public void updateUserPassword(User user, String newPassword) { user.setPassword(newPassword); } } class User { private String username; private String email; private String password; public User(String username, String email) { this.username = username; this.email = email; } public void setPassword(String password) { this.password = password; } }",code_smell,hardcoded_secrets,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    LogAggregator() : stopFlag(false) {
        worker = std::thread(&LogAggregator::processQueue, this);
    }
    ~LogAggregator() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void logMessage(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void processQueue() {
        while (!stopFlag) {
            std::vector<std::string> localCopy;
            {
                std::lock_guard<std::mutex> lock(mtx);
                localCopy.swap(queue);
            }
            for (const auto& m : localCopy) {
                std::cout << m << std::endl;
            }
            // Intentional bug: missing sleep leads to busy-wait consuming 100% CPU
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogAggregator logger;
    for (int i = 0; i < 5; ++i) {
        logger.logMessage(""Event "" + std::to_string(i));
    }
    // Program exits without giving worker thread time to flush messages
    return 0;
}",code_defect,busy_wait_cpu_spike,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processUserData(const std::string& data, int flag) {
    std::string result = data;
    if (flag == 1) {
        result += ""_processed"";
    } else if (flag == 2) {
        result += ""_enhanced"";
    } else if (flag == 3) {
        result += ""_transformed"";
    } else {
        // Legacy behavior
        result += ""_default"";
    }
    return result;
}

int main() {
    std::vector<std::string> inputs = {""user1"", ""user2"", ""user3""};
    for (const auto& input : inputs) {
        std::string processed = processUserData(input, 1);
        std::cout << processed << std::endl;
    }
    return 0;
}",code_smell,poor_function_design,,qwen/qwen3-32b
JavaScript,"
      class UserManager {
         constructor() {
            this.users = {};
         }

         addUser(username, password) {
            if (!this.users[username]) {
               this.users[username] = password;
            }
         }

         authenticate(username, password) {
            return this.users[username] === password;
         }
      }

      const userManager = new UserManager();
      userManager.addUser('admin', 'password123');
      console.log(userManager.authenticate('admin', 'password123')); // true
      console.log(userManager.authenticate('admin', 'wrongpassword')); // false
   ",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path
        self._conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self._conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL
            )
        ''')
        self._conn.commit()

    def find_user(self, username, password_hash):
        # Vulnerable to SQL injection because user input is directly concatenated
        query = f""SELECT * FROM users WHERE username = '{username}' AND password_hash = '{password_hash}'""
        cursor = self._conn.cursor()
        cursor.execute(query)
        return cursor.fetchone()

    def add_user(self, username, password_hash):
        cursor = self._conn.cursor()
        cursor.execute('INSERT INTO users (username, password_hash) VALUES (?, ?)', (username, password_hash))
        self._conn.commit()

# Example usage
repo = UserRepository('app.db')
repo.add_user('alice', 'hash123')
# The following line is insecure and can be exploited if username contains malicious SQL
user = repo.find_user(""alice' OR '1'='1"", 'anyhash')
print('Found user:', user)",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Python,"import os
import json

CONFIG_PATH = 'config.json'

def load_config():
    with open(CONFIG_PATH, 'r') as f:
        config = json.load(f)
    return config

def process_data(data):
    results = []
    for item in data:
        processed = {
            'id': item['id'],
            'value': item['value'] * 2,
            'status': 'active' if item['enabled'] else 'inactive'
        }
        results.append(processed)
    return results

def main():
    config = load_config()
    data = config['data']
    output = process_data(data)
    print(json.dumps(output, indent=2))

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final String DEFAULT_PASSWORD = ""password123""; public User createUser(String username, String email) { User user = new User(username, email); user.setPassword(DEFAULT_PASSWORD); return user; } } class User { private String username; private String email; private String password; public User(String username, String email) { this.username = username; this.email = email; } public void setPassword(String password) { this.password = password; } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i] * 2;
            results_.push_back(value);
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& results() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(input); });
    t.join();
    for (int v : processor.results()) {
        std::cout << v << "" "";
    }
    std::cout << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor(database) {
    this.db = database;
    this.orderCount = 0;
    this.lastOrder = null;
  }

  processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      this.orderCount++;
      this.lastOrder = order;
      this.db.save(order);
      this.logOrderDetails(order);
    }
  }

  logOrderDetails(order) {
    console.log(`Order ID: ${order.id}, Customer: ${order.customer}, Total: $${order.total}`);
  }

  getLastOrder() {
    return this.lastOrder;
  }

  getTotalOrdersProcessed() {
    return this.orderCount;
  }
}

// Example usage:
const db = {
  save: (order) => console.log(`Saved order: ${order.id}`)
};

const orders = [
  { id: 1, customer: 'Alice', total: 150 },
  { id: 2, customer: 'Bob', total: 75 },
  { id: 3, customer: 'Charlie', total: 300 }
];

const processor = new OrderProcessor(db);
processor.processOrders(orders);",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

private:
    std::string name;
    int salary;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    void removeEmployee(std::string name) {
        for (auto it = employees.begin(); it != employees.end(); ++it) {
            if (it->getName() == name) {
                employees.erase(it);
                return;
            }
        }
    }

    int calculateTotalSalary() {
        int totalSalary = 0;
        for (const auto& employee : employees) {
            totalSalary += employee.getSalary();
        }
        return totalSalary;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 50000));
    manager.addEmployee(Employee(""Alice"", 60000));
    std::cout << manager.calculateTotalSalary() << std::endl;
    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i]; // may read out of bounds
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::thread t([&]() { processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << ""\n"";
    std::cout << ""Odd sum: "" << processor.getOddSum() << ""\n"";
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor(database, paymentGateway) {
    this.database = database;
    this.paymentGateway = paymentGateway;
  }

  processOrder(order) {
    this.validateOrder(order);

    const customer = this.database.getCustomer(order.customerId);
    const product = this.database.getProduct(order.productId);

    if (!customer || !product) {
      throw new Error('Invalid customer or product');
    }

    if (product.stock < order.quantity) {
      throw new Error('Insufficient product stock');
    }

    const paymentResult = this.paymentGateway.processPayment(order);

    if (!paymentResult.success) {
      throw new Error('Payment processing failed');
    }

    this.database.updateStock(product.id, product.stock - order.quantity);
    this.database.createOrder(order);

    return { status: 'success', orderId: order.id };
  }

  validateOrder(order) {
    if (!order || !order.id || !order.customerId || !order.productId || !order.quantity) {
      throw new Error('Order data incomplete');
    }

    if (order.quantity <= 0) {
      throw new Error('Order quantity must be greater than zero');
    }
  }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, User> users = new HashMap<>(); public synchronized void addUser(User user) { users.put(user.getId(), user); } public synchronized User getUser(String id) { return users.get(id); } public synchronized void updateUser(User user) { if (users.containsKey(user.getId())) { users.put(user.getId(), user); } } public synchronized void deleteUser(String id) { users.remove(id); } }",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mutex_);
        logs_.push_back(msg);
    }

    void flush() {
        // Simulate writing logs to disk
        for (const auto& entry : logs_) {
            std::cout << entry << std::endl;
        }
        // BUG: logs_ not cleared, leading to unbounded memory growth
    }

private:
    std::vector<std::string> logs_;
    std::mutex mutex_;
};

void worker(LogAggregator& agg, int id) {
    for (int i = 0; i < 1000; ++i) {
        agg.addLog(""Thread "" + std::to_string(id) + "" log "" + std::to_string(i));
    }
}

int main() {
    LogAggregator aggregator;
    std::vector<std::thread> threads;
    for (int i = 0; i < 8; ++i) {
        threads.emplace_back(worker, std::ref(aggregator), i);
    }
    for (auto& t : threads) {
        t.join();
    }
    aggregator.flush();
    return 0;
}",code_defect,memory_leak_due_to_uncleared_buffer,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  processUsers(users) {
    const validUsers = [];
    for (let i = 0; i < users.length; i++) {
      const user = users[i];
      if (user.id && user.name && user.email) {
        validUsers.push({
          id: user.id,
          name: user.name.trim().toLowerCase(),
          email: user.email.trim().toLowerCase()
        });
      }
    }

    for (let i = 0; i < validUsers.length; i++) {
      const user = validUsers[i];
      if (user.email.includes('@example.com')) {
        user.isExampleUser = true;
      }
    }

    return validUsers;
  }

  getUserById(users, userId) {
    for (let i = 0; i < users.length; i++) {
      if (users[i].id === userId) {
        return users[i];
      }
    }
    return null;
  }
}

// Example usage
const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com' },
  { id: 2, name: 'Bob', email: 'bob@acme.com' }
];

const processor = new UserProcessor();
const processedUsers = processor.processUsers(users);
const user1 = processor.getUserById(processedUsers, 1);
console.log(user1);",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
  }

  // Process an order and update inventory
  async process(order) {
    // Validate order
    if (!order || !order.id || !order.items) {
      throw new Error('Invalid order');
    }

    // Update each item stock sequentially
    for (let i = 0; i < order.items.length; i++) {
      const item = order.items[i];
      const product = await this.db.getProduct(item.productId);
      // BUG: No check for negative stock leads to overselling
      product.stock -= item.quantity;
      await this.db.saveProduct(product);
    }

    // Mark order as processed
    await this.db.updateOrderStatus(order.id, 'processed');
    return true;
  }
}

module.exports = OrderProcessor;",code_defect,logic_error,,openai/gpt-oss-120b
Python,"import os
import re
import json

from datetime import datetime
from typing import List, Dict

# User data manager
class UserManager:
    def __init__(self):
        self._user_file = 'users.json'
        self._users = self._load_users()

    def _load_users(self) -> List[Dict]:
        if not os.path.exists(self._user_file):
            return []
        with open(self._user_file, 'r') as f:
            return json.load(f)

    def _save_users(self):
        with open(self._user_file, 'w') as f:
            json.dump(self._users, f)

    def add_user(self, name: str, email: str, role: str = 'user') -> None:
        if not re.match(r'[^@]+@[^@]+\.[^@]+', email):
            raise ValueError('Invalid email format')

        new_user = {
            'name': name,
            'email': email,
            'role': role,
            'created_at': datetime.now().isoformat()
        }
        self._users.append(new_user)
        self._save_users()

    def delete_user(self, email: str) -> None:
        self._users = [u for u in self._users if u['email'] != email]
        self._save_users()

    def get_users(self, role: str = None) -> List[Dict]:
        if role:
            return [u for u in self._users if u['role'] == role]
        return self._users

# Legacy code from previous version
# def legacy_function():
#     pass

if __name__ == '__main__':
    um = UserManager()
    um.add_user('Alice', 'alice@example.com', 'admin')
    um.add_user('Bob', 'bob@example.com', 'user')
    print(um.get_users())",code_smell,long_methods,,qwen/qwen3-32b
Python,"
class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
        else:
            self.users[user_id].update(user_data)

    def get_user(self, user_id):
        return self.users.get(user_id)

    def update_user(self, user_id, user_data):
        if user_id in self.users:
            self.users[user_id].update(user_data)
        else:
            raise Exception('User not found')

    def delete_user(self, user_id):
        if user_id in self.users:
            del self.users[user_id]
        else:
            raise Exception('User not found')

    def get_all_users(self):
        return list(self.users.values())

def main():
    user_manager = UserManager()
    user_manager.add_user('1', {'name': 'John', 'age': 30})
    user_manager.add_user('2', {'name': 'Alice', 'age': 25})
    print(user_manager.get_all_users())
    user_manager.update_user('1', {'age': 31})
    print(user_manager.get_user('1'))

if __name__ == '__main__':
    main()
",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : logFile(file) {}
    void process() {
        std::vector<std::string> lines = readLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off‑by‑one bug
            std::thread t(&LogProcessor::handleLine, this, lines[i]);
            t.detach();
        }
    }
private:
    std::string logFile;
    std::mutex mtx;
    std::vector<std::string> readLines() {
        // dummy implementation
        return {""entry1"", ""entry2"", ""entry3""};
    }
    void handleLine(const std::string& line) {
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << ""Processing: "" << line << std::endl;
    }
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.process();
    std::this_thread::sleep_for(std::chrono::seconds(1)); // wait for threads
    return 0;
}",code_defect,off_by_one_error_and_thread_race,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    private static final String SECRET_KEY = ""mySuperSecretKey123!"";

    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        String hashedPassword = hashPassword(password);

        // Dummy database lookup
        if (""admin"".equals(username) && ""admin123"".equals(hashedPassword)) {
            return true;
        }

        return false;
    }

    private String hashPassword(String password) {
        return password + SECRET_KEY;
    }

    // Unused method that is kept around
    public void oldLegacyMethod() {
        System.out.println(""This method is outdated"");
    }
}",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class UserDAO {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/mydb"";
    private static final String DB_USER = ""root"";
    private static final String DB_PASSWORD = ""password123"";
    
    public User getUserById(int id) {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            Class.forName(""com.mysql.cj.jdbc.Driver"");
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            rs = stmt.executeQuery(""SELECT * FROM users WHERE id = "" + id);
            if (rs.next()) {
                return new User(rs.getInt(""id""), rs.getString(""name""), rs.getString(""email""));
            }
        } catch (Exception e) {
            System.out.println(""Error: "" + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                System.out.println(""Error closing resources: "" + e.getMessage());
            }
        }
        return null;
    }
}",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            std::string msg;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    msg = queue.front();
                    queue.erase(queue.begin());
                }
            }
            // Bug: processing proceeds even if queue was empty, msg is empty string
            std::cout << ""Processing: "" << msg << std::endl;
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    lp.enqueue(""Event A"");
    lp.enqueue(""Event B"");
    std::this_thread::sleep_for(std::chrono::seconds(1));
    lp.stop();
    return 0;
}
",code_defect,logic_error_due_to_unchecked_empty_queue,,openai/gpt-oss-120b
Python,"import requests
import os

def fetch_user_data(user_id):
    url = 'https://api.example.com/users/' + str(user_id)
    headers = {'Authorization': 'Bearer ' + os.getenv('API_KEY')}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        return None

def process_user_data(data):
    if data is None:
        return
    for key, value in data.items():
        if key == 'email' and value:
            send_email_notification(value)


def send_email_notification(email):
    # Dummy implementation for demo
    print(f'Email notification sent to: {email}')

if __name__ == '__main__':
    user_data = fetch_user_data(123)
    process_user_data(user_data)",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}
    std::string name;
    int salary;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) {
        employees.push_back(employee);
    }

    int calculateTotalSalary() {
        int totalSalary = 0;
        for (int i = 0; i < employees.size(); i++) {
            totalSalary += employees[i].salary;
        }
        return totalSalary;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 50000));
    manager.addEmployee(Employee(""Alice"", 60000));
    std::cout << manager.calculateTotalSalary() << std::endl;
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""p@ssw0rd""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // SQL injection vulnerability: limit is concatenated directly
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
        } catch (Exception e) {
            // Swallow exception, lose error info
        } finally {
            try { if (rs != null) rs.close(); } catch (Exception ignored) {}
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void deleteUser(String username) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Missing quotes around username leads to SQL error and possible injection
            String sql = ""DELETE FROM users WHERE username = "" + username;
            stmt.executeUpdate(sql);
        } catch (Exception e) {
            // Ignored
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {

    public boolean authenticate(String username, String password, String confirmPassword) {
        if (username == null || username.isEmpty()) {
            return false;
        }

        if (password == null || password.isEmpty()) {
            return false;
        }

        if (!password.equals(confirmPassword)) {
            return false;
        }

        // Legacy check for backward compatibility
        // if (checkLegacySystem(username, password)) {
        //     return true;
        // }

        return verifyDatabaseCredentials(username, password);
    }

    private boolean verifyDatabaseCredentials(String username, String password) {
        // Simulating a database call
        if (username.equals(""admin"") && password.equals(""admin123"")) {
            return true;
        }
        return false;
    }

    // Unused method from a previous implementation
    // private boolean checkLegacySystem(String username, String password) {
    //     return username.equals(""legacy_admin"") && password.equals(""password1"");
    // }

}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserService {
     constructor(userRepository) {
       this.userRepository = userRepository;
     }

     async getAllUsers() {
       const users = await this.userRepository.findAll();
       return users.map(user => ({ id: user.id, name: user.name }));
     }

     async getUserById(id) {
       const user = await this.userRepository.findById(id);
       if (!user) {
         throw new Error('User not found');
       }
       return { id: user.id, name: user.name };
     }
   }

   class UserRepository {
     constructor(db) {
       this.db = db;
     }

     async findAll() {
       return await this.db.query('SELECT * FROM users');
     }

     async findById(id) {
       const result = await this.db.query('SELECT * FROM users WHERE id = $1', [id]);
       return result.rows[0];
     }
   }

   const db = {
     query: async (query, params) => {
       // simulate a database query
       return {
         rows: [
           { id: 1, name: 'John Doe' },
           { id: 2, name: 'Jane Doe' }
         ]
       };
     }
   };

   const userRepository = new UserRepository(db);
   const userService = new UserService(userRepository);

   (async () => {
     const users = await userService.getAllUsers();
     console.log(users);
   })();
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""admin123""; // hardcoded credentials

    public List<String> getPendingPayments() throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String query = ""SELECT payment_id FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        // Missing close of ResultSet, Statement, and Connection
        return payments;
    }

    public void processPayments() {
        try {
            List<String> pending = getPendingPayments();
            for (String paymentId : pending) {
                // Simulate processing
                if (paymentId == null) {
                    continue; // should never happen, but ignored
                }
                // Vulnerable to SQL injection if paymentId is ever derived from user input
                String update = ""UPDATE payments SET status='PROCESSED' WHERE payment_id='"" + paymentId + ""'"";
                try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
                     PreparedStatement stmt = conn.prepareStatement(update)) {
                    stmt.executeUpdate();
                }
            }
        } catch (SQLException e) {
            // Swallow exception, no logging
        }
    }

    public static void main(String[] args) {
        PaymentProcessor processor = new PaymentProcessor();
        processor.processPayments();
    }
}
",code_defect,resource_leak_and_sql_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    private String adminUsername = ""admin"";
    private String adminPassword = ""supersecret123"";

    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        if (username.equals(adminUsername) && password.equals(adminPassword)) {
            System.out.println(""Admin authenticated"");
            return true;
        }

        // Dummy check for regular users (not implemented)
        if (username.length() > 3 && password.length() > 7) {
            System.out.println(""Regular user authenticated"");
            return true;
        }

        return false;
    }
}",code_defect,insecure_authentication,,qwen/qwen3-32b
JavaScript,"
      class UserDatabase {
         constructor() {
            this.users = [];
         }

         async loadUsersFromDatabase() {
            const response = await fetch('https://example.com/users');
            const data = await response.json();
            this.users = data.map(user => ({ id: user.id, name: user.name }));
         }

         getUserById(id) {
            for (let i = 0; i < this.users.length; i++) {
               if (this.users[i].id === id) {
                  return this.users[i];
               }
            }
            return null;
         }
      }

      const db = new UserDatabase();
      db.loadUsersFromDatabase();
      const user = db.getUserById(1);
      console.log(user);
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logging.basicConfig(level=logging.INFO)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None

    def load(self):
        # Loads JSON config file; no validation performed
        with open(self.config_path, 'r') as f:
            self._config = json.load(f)
        return self._config

    def get(self, key, default=None):
        return self._config.get(key, default) if self._config else default

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)
        self.output_dir = self.config.get('output_dir', '/tmp')

    def process(self, data):
        # Process data in batches and write results to files
        for i in range(0, len(data), self.batch_size):
            batch = data[i:i+self.batch_size]
            result = self._process_batch(batch)
            self._write_result(i // self.batch_size, result)

    def _process_batch(self, batch):
        # Simulate some processing
        return [item * 2 for item in batch]

    def _write_result(self, batch_index, result):
        filename = os.path.join(self.output_dir, f""result_{batch_index}.json"")
        with open(filename, 'w') as f:
            json.dump(result, f)
        logging.info(f""Wrote batch {batch_index} to {filename}"")

if __name__ == ""__main__"":
    loader = ConfigLoader('config.json')
    config = loader.load()
    processor = DataProcessor(loader)
    # Example data
    data = list(range(1000))
    processor.process(data)
",code_defect,missing_error_handling,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private List<User> users;

    public UserProcessor() {
        this.users = new ArrayList<>();
    }

    public void processUsers() {
        for (User user : users) {
            if (user.isActive()) {
                String formattedName = user.getFirstName() + "" "" + user.getLastName();
                String message = ""Hello, "" + formattedName + ""! Your account is active."";
                sendNotification(message, user.getEmail());
            }
        }
    }

    private void sendNotification(String message, String email) {
        // Simulated email sending logic
        if (email == null || email.isEmpty()) {
            System.out.println(""Invalid email address for sending notification."");
            return;
        }
        try {
            System.out.println(""Sending: "" + message + "" To: "" + email);
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            // Ignored without rethrowing
            e.printStackTrace();
        }
    }

    public void addUsers(List<User> users) {
        if (users != null) {
            this.users.addAll(users);
        }
    }
}",code_defect,missing_error_handling,,qwen/qwen3-32b
Java,"public class UserProcessor { private static final Logger logger = LoggerFactory.getLogger(UserProcessor.class); public void processUsers(List<User> users) { for (User user : users) { try { Thread.sleep(100); } catch (InterruptedException e) { logger.error(""Error processing user"", e); } if (user.getName() != null && !user.getName().isEmpty()) { logger.info(""Processing user: {}"", user.getName()); } } } }",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    """"""Loads configuration from a JSON file.
    """"""
    def __init__(self, path: str):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        try:
            with open(self.path, 'r') as f:
                # Directly using json.load without validation can lead to code execution if the file contains malicious content
                self.config = json.load(f)
        except Exception as e:
            logger.error(f""Failed to load config: {e}"")
            self.config = {}

    def get(self, key: str, default=None):
        return self.config.get(key, default)

class DataProcessor:
    def __init__(self, config_loader: ConfigLoader):
        self.db_url = config_loader.get('db_url')
        self.batch_size = config_loader.get('batch_size', 100)

    def process(self, data):
        # Assume data is a list of dicts
        for item in data:
            self._process_item(item)

    def _process_item(self, item):
        # Vulnerable to SQL injection because it builds query strings directly
        query = f""INSERT INTO records (id, value) VALUES ({item['id']}, '{item['value']}')""
        self._execute_query(query)

    def _execute_query(self, query: str):
        # Placeholder for actual DB execution
        logger.debug(f""Executing query: {query}"")
        # In real code, this would execute against a database
        pass

if __name__ == ""__main__"":
    loader = ConfigLoader(os.getenv('CONFIG_PATH', 'config.json'))
    processor = DataProcessor(loader)
    sample_data = [{'id': 1, 'value': ""test""}, {'id': 2, 'value': ""example""}]
    processor.process(sample_data)
",code_defect,sql_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  getUserById(id) {
    return this.users.find(user => user.id === id);
  }

  deleteUser(id) {
    this.users = this.users.filter(user => user.id !== id);
  }

  getAllUsers() {
    return this.users;
  }

  updateUserName(id, newName) {
    const user = this.getUserById(id);
    if (user) {
      user.name = newName;
    }
  }
}

// Usage
const manager = new UserManager();
manager.addUser({ id: 1, name: 'Alice' });
manager.addUser({ id: 2, name: 'Bob' });
manager.updateUserName(1, 'Alicia');
console.log(manager.getAllUsers());",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <string>

class User {
public:
    std::string name;
    int age;
    User(std::string n, int a) : name(n), age(a) {}
};

std::vector<User> users;

void addUser(User u) {
    users.push_back(u);
}

void printUsers() {
    for (auto& u : users) {
        std::cout << u.name << "" is "" << u.age << "" years old.\n"";
    }
}

int main() {
    User u1(""John"", 30);
    User u2(""Alice"", 25);
    addUser(u1);
    addUser(u2);
    printUsers();
    return 0;
}",code_smell,global_variable,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""admin123""; // hardcoded credentials

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String sql = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk if limit is manipulated
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        // Missing close of ResultSet, Statement, and Connection
        return payments;
    }

    public void processPayments() {
        try {
            List<String> pending = getPendingPayments(100);
            for (String paymentId : pending) {
                // Simulate processing
                Thread.sleep(10);
                // Update status without transaction handling
                updatePaymentStatus(paymentId, ""COMPLETED"");
            }
        } catch (Exception e) {
            // Swallow exception, lose error details
        }
    }

    private void updatePaymentStatus(String paymentId, String newStatus) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""UPDATE payments SET status=? WHERE payment_id=?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, newStatus);
            stmt.setString(2, paymentId);
            stmt.executeUpdate();
            // Resources not closed, potential leak
        } catch (SQLException e) {
            // Log suppressed
        }
    }
}
",code_defect,resource_leak_and_unhandled_exceptions,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    private final List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.getStatus() == OrderStatus.PENDING) {
                if (isValid(order)) {
                    chargeCustomer(order);
                    updateInventory(order);
                    updateOrderStatus(order, OrderStatus.PROCESSED);
                }
            } else {
                // Ignoring non-pending orders
            }
        }
    }

    private boolean isValid(Order order) {
        return order.getCustomer() != null && order.getItems() != null && !order.getItems().isEmpty();
    }

    private void chargeCustomer(Order order) {
        // Simulate charging customer
        System.out.println(""Charging customer for order "" + order.getId());
    }

    private void updateInventory(Order order) {
        // Simulate updating inventory
        System.out.println(""Updating inventory for order "" + order.getId());
    }

    private void updateOrderStatus(Order order, OrderStatus status) {
        order.setStatus(status);
        // Simulate saving to database
        System.out.println(""Order "" + order.getId() + "" status updated to "" + status);
    }

    // Unused method that could be removed
    private void sendNotification(String message) {
        System.out.println(""Notification: "" + message);
    }

    // Dead code from a previous version
    // private void oldProcessOrder(Order order) {
    //     System.out.println(""Old processing for order "" + order.getId());
    // }

}",code_smell,dead_code,,qwen/qwen3-32b
Java,"public class UserService { private static Map<String, String> users = new HashMap<>(); public synchronized void addUser(String username, String password) { users.put(username, password); } public synchronized String getPassword(String username) { return users.get(username); } public static void main(String[] args) { UserService userService = new UserService(); userService.addUser(""user1"", ""password1""); System.out.println(userService.getPassword(""user1"")); } }",code_smell,"God class, tight coupling",,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable())
            worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Bug: processing runs even when no task was retrieved (task == 0)
            // This can cause unintended work on default value.
            std::cout << ""Processing: "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 1; i <= 5; ++i) {
        dp.addTask(i * 10);
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}",code_defect,logic_error_unintended_processing,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(String userId, String productId, int quantity) {
        if (userId == null || userId.isEmpty()) {
            userId = ""guest"";
        }

        if (productId == null || productId.isEmpty()) {
            productId = ""default_product"";
        }

        if (quantity <= 0) {
            quantity = 1;
        }

        // Simulating order processing
        System.out.println(""Processing order for user: "" + userId);
        System.out.println(""Product ID: "" + productId);
        System.out.println(""Quantity: "" + quantity);
        System.out.println(""Total price: $"" + calculateTotalPrice(productId, quantity));

        // Simulating external calls to payment gateway
        if (userId.equals(""guest"")) {
            System.out.println(""Redirecting to guest checkout..."");
        } else {
            System.out.println(""Processing secure payment..."");
        }
    }

    private double calculateTotalPrice(String productId, int quantity) {
        double basePrice = 10.0;
        if (productId.equals(""premium_product"")) {
            basePrice = 50.0;
        }

        return basePrice * quantity;
    }
}",code_smell,primitive_obsession,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class PriorityQueue {
public:
   void push(int value) {
       queue.push_back(value);
       std::sort(queue.begin(), queue.end(), std::greater<int>());
   }

   int pop() {
       if (queue.empty()) {
           return -1;
       }
       int max = queue[0];
       queue.erase(queue.begin());
       return max;
   }

private:
   std::vector<int> queue;
};

int main() {
   PriorityQueue pq;
   pq.push(5);
   pq.push(10);
   pq.push(3);
   std::cout << pq.pop() << std::endl;
   std::cout << pq.pop() << std::endl;
   std::cout << pq.pop() << std::endl;
   return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }
    void flush() {
        std::lock_guard<std::mutex> lock(mtx_);
        for (const auto& line : logs_) {
            std::cout << line << std::endl;
        }
        logs_.clear();
    }
private:
    std::vector<std::string> logs_;
    std::mutex mtx_;
};

void worker(LogAggregator* agg, int id) {
    for (int i = 0; i < 5; ++i) {
        agg->addLog(""Worker "" + std::to_string(id) + "" iteration "" + std::to_string(i));
        // Simulate work
        std::this_thread::sleep_for(std::chrono::milliseconds(10));
    }
    // Missing call to agg->flush(); leads to lost logs if aggregator is destroyed before flush
}

int main() {
    LogAggregator* aggregator = new LogAggregator();
    std::thread t1(worker, aggregator, 1);
    std::thread t2(worker, aggregator, 2);
    t1.join();
    t2.join();
    // aggregator->flush(); // Intended flush is commented out, causing data loss
    delete aggregator;
    return 0;
}
",code_defect,resource_leak_and_data_loss,,openai/gpt-oss-120b
Java,"public class UserAuthentication {
    private static final String SECRET_KEY = ""superSecretKey123"";

    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        String storedHashedPassword = retrieveHashedPasswordFromDatabase(username);
        if (storedHashedPassword == null) {
            return false;
        }

        String inputHash = hashPassword(password);
        return storedHashedPassword.equals(inputHash);
    }

    private String hashPassword(String password) {
        return password.hashCode() + """";
    }

    private String retrieveHashedPasswordFromDatabase(String username) {
        // Simulated database lookup
        if (""admin"".equals(username)) {
            return ""-1472765325"";
        }
        return null;
    }
}",code_defect,insecure_hashing,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger LOGGER = LoggerFactory.getLogger(UserService.class); public List<User> getUsers() { List<User> users = new ArrayList<>(); try (Connection connection = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""root"", ""password"")) { Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(""SELECT * FROM users""); while (resultSet.next()) { User user = new User(resultSet.getString(""name""), resultSet.getString(""email"")); users.add(user); } } catch (SQLException e) { LOGGER.error(""Error fetching users"", e); } return users; } }",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a log file synchronously (blocking I/O)
    getUserProfile(userId) {
        const user = this.db.query(`SELECT * FROM users WHERE id = ${userId}`);
        // BUG: If user is not found, user will be undefined and accessing .name throws
        const profile = {
            id: user.id,
            name: user.name,
            email: user.email,
            createdAt: user.created_at
        };
        // Insecure: directly writes user data to a log file without sanitization
        fs.writeFileSync('/var/log/user_profiles.log', JSON.stringify(profile) + '\n', { flag: 'a' });
        return profile;
    }
}

// Simulated DB object with a naive query method (SQL injection risk)
const fakeDb = {
    query: (sql) => {
        // Very simplistic parser, returns undefined for missing user
        const match = /WHERE id = (\d+)/.exec(sql);
        if (!match) return undefined;
        const id = parseInt(match[1], 10);
        if (id === 1) {
            return { id: 1, name: 'Alice', email: 'alice@example.com', created_at: '2023-01-01' };
        }
        // Returns undefined for any other id, leading to runtime error in getUserProfile
        return undefined;
    }
};

const service = new UserService(fakeDb);
// This call will cause a TypeError when userId is not 1
service.getUserProfile(2);",code_defect,null_reference_and_sql_injection_risk,,openai/gpt-oss-120b
Python,"import os
import json

class ConfigManager:
    def __init__(self):
        self.config_file = 'config.json'
        self.config = self.load_config()

    def load_config(self):
        if os.path.exists(self.config_file):
            with open(self.config_file, 'r') as f:
                return json.load(f)
        else:
            return {}

    def get_value(self, key):
        if key in self.config:
            return self.config[key]
        else:
            return None

    def set_value(self, key, value):
        self.config[key] = value
        self.save_config()

    def save_config(self):
        with open(self.config_file, 'w') as f:
            json.dump(self.config, f, indent=4)

    def delete_key(self, key):
        if key in self.config:
            del self.config[key]
            self.save_config()

    def update_config_from_dict(self, new_config):
        for k, v in new_config.items():
            self.config[k] = v
        self.save_config()

    def clear_config(self):
        self.config.clear()
        self.save_config()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class UserDatabase {
    constructor() {
        this.users = [];
    }

    addUser(user) {
        this.users.push(user);
    }

    getUserByEmail(email) {
        for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].email === email) {
                return this.users[i];
            }
        }
        return null;
    }

    removeUserByEmail(email) {
        for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].email === email) {
                this.users.splice(i, 1);
                break;
            }
        }
    }
}

let db = new UserDatabase();
let user1 = { name: 'John', email: 'john@example.com' };
db.addUser(user1);
let user2 = { name: 'Jane', email: 'jane@example.com' };
db.addUser(user2);
db.removeUserByEmail('john@example.com');
console.log(db.getUserByEmail('jane@example.com'));",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ReportGenerator {
    constructor(dbConnection, logger, config, cache, emailService) {
        this.db = dbConnection;
        this.logger = logger;
        this.config = config;
        this.cache = cache;
        this.emailService = emailService;
    }

    // Generates a monthly sales report and emails it
    async generateAndSendReport(userId, startDate, endDate, format, includeCharts, includeSummary, locale, timezone) {
        // Load user preferences (synchronously, blocking the event loop)
        const userPrefs = JSON.parse(fs.readFileSync(`./prefs/${userId}.json`, 'utf8'));

        // Fetch raw sales data
        const rawData = await this.db.query('SELECT * FROM sales WHERE user_id = ? AND date >= ? AND date <= ?', [userId, startDate, endDate]);

        // Apply filters based on user preferences (inefficient loop)
        let filteredData = [];
        for (let i = 0; i < rawData.length; i++) {
            const record = rawData[i];
            if (userPrefs.regions.includes(record.region) && record.amount > 0) {
                filteredData.push(record);
            }
        }

        // Transform data (large monolithic block)
        const reportData = filteredData.map(r => {
            return {
                date: new Date(r.date).toLocaleDateString(locale, { timeZone: timezone }),
                amount: r.amount,
                region: r.region,
                product: r.product_name,
                // duplicate calculation
                tax: r.amount * 0.07,
                total: r.amount + (r.amount * 0.07)
            };
        });

        // Generate report content (hardcoded format handling)
        let content = '';
        if (format === 'csv') {
            content = reportData.map(d => `${d.date},${d.amount},${d.region},${d.product},${d.tax},${d.total}`).join('\n');
        } else if (format === 'json') {
            content = JSON.stringify(reportData, null, 2);
        } else {
            content = 'Unsupported format';
        }

        // Cache the report (ignores cache expiration)
        this.cache.set(`report_${userId}_${startDate}_${endDate}`, content);

        // Email the report (no error handling)
        await this.emailService.send({
            to: userPrefs.email,
            subject: `Monthly Report (${startDate} - ${endDate})`,
            body: includeSummary ? 'Please find the attached report.' : '',
            attachments: [{ filename: `report.${format}`, content }]
        });

        this.logger.info(`Report generated and sent to ${userPrefs.email}`);
    }
}

module.exports = ReportGenerator;",code_smell,large_function_and_blocking_io,,openai/gpt-oss-120b
JavaScript,"function processData(data) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    if (data[i].type === 'A') {
      result.push(data[i].value * 2);
    } else if (data[i].type === 'B') {
      result.push(data[i].value + 10);
    } else if (data[i].type === 'C') {
      result.push(data[i].value ** 3);
    } else {
      result.push(0);
    }
  }
  return result;
}

function main() {
  const input = [
    { type: 'A', value: 5 },
    { type: 'B', value: 3 },
    { type: 'X', value: 2 }
  ];
  const output = processData(input);
  console.log(output);
}

main();",code_smell,large_function,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        cursor.close()
        return user_data
    
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        cursor.close()
        return users_data
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it in memory.""""""
    _cache = {}
    _lock = threading.Lock()

    @classmethod
    def load(cls, path: str) -> dict:
        # Missing validation of path, leading to potential path traversal
        with cls._lock:
            if path in cls._cache:
                return cls._cache[path]
            with open(path, 'r') as f:
                data = json.load(f)
                cls._cache[path] = data
                return data

class UserService:
    def __init__(self, config_path: str):
        self.config = ConfigLoader.load(config_path)
        self.db_path = self.config.get('db_path')

    def get_user(self, user_id: int) -> dict:
        # Directly interpolates user_id into SQL, SQL injection risk
        query = f""SELECT * FROM users WHERE id = {user_id}""
        conn = self._connect_db()
        cursor = conn.cursor()
        cursor.execute(query)
        row = cursor.fetchone()
        conn.close()
        if row:
            return {'id': row[0], 'name': row[1]}
        return {}

    def _connect_db(self):
        # Uses os.getenv without default, may return None and cause crash
        db_file = os.getenv('DB_FILE')
        import sqlite3
        return sqlite3.connect(db_file)

# Example usage (would be called from elsewhere)
service = UserService('/etc/app/config.json')
print(service.get_user(42))",code_defect,SQL_injection_and_missing_env_handling,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  process(order) {
    if (order.items.length === 0) return null;

    let total = 0;
    for (let i = 0; i < order.items.length; i++) {
      const item = order.items[i];
      total += item.price * item.quantity;
    }

    if (total < 100) {
      order.discount = total * 0.05;
    } else if (total >= 100 && total < 500) {
      order.discount = total * 0.1;
    } else {
      order.discount = total * 0.15;
    }

    order.total = total - order.discount;

    if (order.user && order.user.email) {
      this.sendConfirmationEmail(order.user.email, order.total);
    }

    return order;
  }

  sendConfirmationEmail(email, amount) {
    console.log(`Email sent to ${email} for amount $${amount.toFixed(2)}`);
  }
}

const order = {
  items: [
    { price: 49.99, quantity: 2 },
    { price: 29.99, quantity: 1 }
  ],
  user: {
    email: 'user@example.com'
  }
};

const processor = new OrderProcessor();
const processedOrder = processor.process(order);
console.log('Processed Order:', processedOrder);",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
      class UserManager {
         constructor() {
            this.users = [];
         }

         async addUser(user) {
            this.users.push(user);
            await this.persistUsers();
         }

         async persistUsers() {
            const fs = require('fs').promises;
            await fs.writeFile('users.json', JSON.stringify(this.users));
         }

         async removeUser(userId) {
            this.users = this.users.filter(user => user.id !== userId);
            await this.persistUsers();
         }
      }

      const userManager = new UserManager();
      userManager.addUser({ id: 1, name: 'John Doe' });
      userManager.removeUser(1);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.path = configPath;
    this.cache = null;
  }

  load() {
    // Synchronous read, blocks event loop
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) this.load();
    return this.cache[key];
  }
}

function processUserInput(input) {
  // Assume input is a JSON string from an untrusted source
  const obj = JSON.parse(input); // No validation
  if (obj.action === 'delete') {
    // Dangerous: directly using user-provided filename
    fs.unlinkSync(`/var/app/data/${obj.filename}`);
  }
  return obj;
}

module.exports = { ConfigLoader, processUserInput };",code_defect,unsafe_file_deletion,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(String userId, String productId, int quantity, String deliveryAddress, String paymentMethod) {
        if (userId == null || userId.isEmpty()) {
            throw new IllegalArgumentException(""User ID is missing"");
        }

        if (productId == null || productId.isEmpty()) {
            throw new IllegalArgumentException(""Product ID is missing"");
        }

        if (quantity <= 0) {
            throw new IllegalArgumentException(""Invalid quantity"");
        }

        // Simulate fetching user data from DB
        String userEmail = fetchUserEmail(userId);

        // Simulate fetching product price from DB
        double price = fetchProductPrice(productId);

        double totalCost = price * quantity;

        // Simulate sending confirmation email
        sendEmail(userEmail, ""Your order has been processed."");

        // Simulate payment processing
        processPayment(paymentMethod, totalCost);

        // Simulate shipping order
        scheduleShipping(deliveryAddress);
    }

    private String fetchUserEmail(String userId) {
        // Simulate DB call
        return ""user"" + userId + ""@example.com"";
    }

    private double fetchProductPrice(String productId) {
        // Simulate DB call
        return 19.99;
    }

    private void sendEmail(String email, String message) {
        // Simulate email sending
        System.out.println(""Email sent to "" + email + "": "" + message);
    }

    private void processPayment(String paymentMethod, double amount) {
        // Simulate payment processing
        System.out.println(""Processed payment of $"" + amount + "" via "" + paymentMethod);
    }

    private void scheduleShipping(String address) {
        // Simulate shipping scheduling
        System.out.println(""Scheduled shipping to "" + address);
    }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>

   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}

       std::string getName() { return name; }
       int getAge() { return age; }

   private:
       std::string name;
       int age;
   };

   class UserRepository {
   public:
       void addUser(User user) { users.push_back(user); }
       User getUser(int index) { return users[index]; }

   private:
       std::vector<User> users;
   };

   int main() {
       UserRepository repository;
       repository.addUser(User(""John"", 30));
       repository.addUser(User(""Alice"", 25));

       for (int i = 0; i < 3; i++) {
           try {
               User user = repository.getUser(i);
               std::cout << user.getName() << std::endl;
           } catch (...) {
               std::cout << ""Unknown error"" << std::endl;
           }
       }

       return 0;
   }
   ",code_defect,out_of_range_error,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        logs.push_back(msg);
    }
private:
    void process() {
        while (!stopFlag) {
            std::vector<std::string> batch;
            {
                std::lock_guard<std::mutex> lock(mtx);
                batch.swap(logs); // move all pending logs
            }
            for (const auto& entry : batch) {
                // Simulate I/O delay
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                std::cout << ""Processed: "" << entry << std::endl;
            }
        }
    }
    std::vector<std::string> logs;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.addLog(""Event "" + std::to_string(i));
    }
    // Forget to stop the processor before exiting
    return 0;
}
",code_defect,resource_leak_due_to_unjoined_thread,,openai/gpt-oss-120b
Python,"import os
import json

class ConfigLoader:
    def __init__(self, config_path='config.json'):
        self.config_path = config_path

    def load_config(self):
        if not os.path.exists(self.config_path):
            return {}

        with open(self.config_path, 'r') as f:
            config = json.load(f)

        return self._process_config(config)

    def _process_config(self, config):
        processed = {}
        for key, value in config.items():
            if isinstance(value, str) and value.isdigit():
                processed[key] = int(value)
            else:
                processed[key] = value
        return processed

    def get_db_config(self):
        config = self.load_config()
        db_config = config.get('database', {})
        db_config['username'] = db_config.get('username', 'default_user')
        db_config['password'] = db_config.get('password', 'default_pass')
        db_config['host'] = db_config.get('host', 'localhost')
        db_config['port'] = db_config.get('port', 5432)
        return db_config",code_smell,long_method,,qwen/qwen3-32b
Java,"public class UserAccountManager { private Map<String, User> users = new HashMap<>(); public void addUser(User user) { users.put(user.getUsername(), user); } public User getUser(String username) { return users.get(username); } public void updateUser(User user) { users.put(user.getUsername(), user); } public void deleteUser(String username) { users.remove(username); } public boolean usernameExists(String username) { return users.containsKey(username); } }",code_smell,God class,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""admin123""; // hardcoded password

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""SELECT balance FROM accounts WHERE user_id = '"" + userId + ""'""; // SQL injection risk
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            if (rs.next()) {
                double balance = rs.getDouble(""balance"");
                if (balance >= amount) {
                    double newBalance = balance - amount;
                    String updateSql = ""UPDATE accounts SET balance = "" + newBalance + "" WHERE user_id = '"" + userId + ""'"";
                    stmt.executeUpdate(updateSql);
                    // Log transaction (omitted)
                    return true;
                }
            }
            return false;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
            try { if (stmt != null) stmt.close(); } catch (SQLException ignored) {}
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }
}
",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    if (!user) return;
    if (!user.name || !user.email) {
      console.error('Invalid user data');
      return;
    }
    this.users.push(user);
  }

  findUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  removeUserByEmail(email) {
    const index = this.users.findIndex(user => user.email === email);
    if (index !== -1) {
      this.users.splice(index, 1);
    }
  }

  getUserCount() {
    return this.users.length;
  }
}

// Example usage
const userManager = new UserManager();
userManager.addUser({ name: 'Alice', email: 'alice@example.com' });
userManager.addUser({ name: 'Bob', email: 'bob@example.com' });
userManager.addUser({ name: 'Charlie', email: 'charlie@example.com' });",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>

class BankAccount {
public:
    BankAccount(double balance) : balance_(balance) {}
    void deposit(double amount) { balance_ += amount; }
    void withdraw(double amount) { balance_ -= amount; }
    double getBalance() { return balance_; }
private:
    double balance_;
};

int main() {
    BankAccount account(1000.0);
    account.deposit(500.0);
    account.withdraw(200.0);
    std::cout << ""Final balance: "" << account.getBalance() << std::endl;
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void process() {
        while (!stopFlag) {
            std::string entry;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    entry = queue.back(); // BUG: should pop from front, leads to out-of-order processing and possible memory growth
                    queue.pop_back();
                }
            }
            if (!entry.empty()) {
                // Simulate I/O delay
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                std::cout << ""Processed: "" << entry << std::endl;
            }
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 100; ++i) {
        lp.enqueue(""msg"" + std::to_string(i));
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    lp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
Python,"import os
import re

def parse_user_input(data):
    cleaned_data = re.sub(r'[^a-zA-Z0-9\s]', '', data)
    return cleaned_data

class UserProcessor:
    def __init__(self):
        self.cache = {}
        self.max_cache_size = 100

    def process_user(self, user_id, user_data):
        if user_id in self.cache:
            print('User already processed, skipping.')
            return self.cache[user_id]

        if len(user_data) > 255:
            user_data = user_data[:255]

        processed = self._sanitize_data(user_data)
        self.cache[user_id] = processed

        if len(self.cache) > self.max_cache_size:
            self.cache.clear()

        return processed

    def _sanitize_data(self, data):
        data = data.strip().lower()
        return re.sub(r'\s+', ' ', data)

    def save_to_file(self, filename, data):
        with open(filename, 'w') as f:
            f.write(data)

# Unused function below
def unused_function():
    print('This function is not used.')

if __name__ == '__main__':
    processor = UserProcessor()
    result = processor.process_user(1, 'John Doe!@#')
    processor.save_to_file('output.txt', result)",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getAllUsers() { const users = await this.userRepository.findAll(); return users.map(user => ({ id: user.id, name: user.name })); } async getUserById(id) { const user = await this.userRepository.findById(id); if (!user) return null; return { id: user.id, name: user.name }; } }",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user data and writes a report file
  async generateUserReport(userId) {
    const user = await this.db.getUserById(userId);
    if (!user) {
      throw new Error('User not found');
    }
    const orders = await this.db.getOrdersForUser(userId);
    const total = orders.reduce((sum, o) => sum + o.amount, 0);
    const report = {
      id: user.id,
      name: user.name,
      email: user.email,
      totalSpent: total,
      orderCount: orders.length,
    };
    // BUG: Asynchronously writing the file without awaiting, may cause race condition if caller expects completion
    fs.writeFile('reports/' + user.id + '.json', JSON.stringify(report), (err) => {
      if (err) console.error('Failed to write report:', err);
    });
    return report;
  }
}

module.exports = UserService;",code_defect,async_file_write_race_condition,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void process_data(int id, const std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        int result = data[i] * id;
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << ""Thread "" << id << "" processed "" << data[i] << "" -> "" << result << std::endl;
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<std::thread> threads;

    for (int i = 0; i < 5; ++i) {
        threads.emplace_back(process_data, i + 1, std::ref(data));
    }

    for (auto& t : threads) {
        t.join();
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    std::string name;
    int salary;

    Employee(std::string name, int salary) : name(name), salary(salary) {}

    bool operator<(const Employee& other) const {
        return salary < other.salary;
    }
};

void sortEmployees(std::vector<Employee>& employees) {
    std::sort(employees.begin(), employees.end());
}

void printEmployees(const std::vector<Employee>& employees) {
    for (const auto& employee : employees) {
        std::cout << employee.name << "" - "" << employee.salary << std::endl;
    }
}

int main() {
    std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
    sortEmployees(employees);
    printEmployees(employees);
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // JSON.parse can throw, but we ignore errors -> defect: uncaught exception
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

class UserService {
  constructor(db) {
    this.db = db;
    this.config = new ConfigLoader('./config.json');
  }

  async getUserProfile(userId) {
    const cfg = this.config.load(); // potential race if called concurrently
    const user = await this.db.query('SELECT * FROM users WHERE id = ' + userId);
    // Missing parameterization -> defect: SQL injection
    if (!user) return null;
    return {
      id: user.id,
      name: user.name,
      role: cfg.defaultRole // uses config without validation
    };
  }
}

module.exports = { ConfigLoader, UserService };",code_defect,unhandled_exception_and_sql_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final String API_KEY = ""1234567890abcdef"";

    public void processOrder(String userId, String productId, int quantity) {
        if (quantity <= 0) {
            System.out.println(""Invalid quantity"");
            return;
        }

        String formattedData = userId + "","" + productId + "","" + quantity;
        String encryptedData = encryptData(formattedData);

        boolean success = sendToPaymentGateway(encryptedData);
        if (success) {
            System.out.println(""Order processed successfully"");
        } else {
            System.out.println(""Failed to process order"");
        }
    }

    private String encryptData(String data) {
        return data + ""encrypted""; // Simulated encryption
    }

    private boolean sendToPaymentGateway(String data) {
        // Simulated call to a payment gateway
        if (data.contains(""encrypted"")) {
            return true;
        }
        return false;
    }
}",code_defect,hardcoded_secrets,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
        return self.get_user(user_id)

    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
        return True",code_smell,Tight Coupling,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class UserService {
    private Connection dbConnection;
    private static final String SELECT_USER = ""SELECT * FROM users WHERE username = '"" + ""?"" + ""'""; // insecure concatenation

    public UserService(Connection connection) {
        this.dbConnection = connection;
    }

    public Map<String, String> getUserInfo(String username) throws SQLException {
        Statement stmt = dbConnection.createStatement();
        ResultSet rs = stmt.executeQuery(SELECT_USER.replace(""?"", username));
        Map<String, String> userInfo = new HashMap<>();
        if (rs.next()) {
            userInfo.put(""id"", rs.getString(""id""));
            userInfo.put(""email"", rs.getString(""email""));
            userInfo.put(""role"", rs.getString(""role""));
        }
        rs.close();
        stmt.close();
        return userInfo;
    }
}
",code_defect,SQL_injection_via_string_concatenation,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order, String customerEmail, boolean isPriority, String promoCode, int discountPercentage) {
        if (order == null || order.getItems().isEmpty()) {
            return;
        }

        double total = 0;
        for (OrderItem item : order.getItems()) {
            total += item.getPrice() * item.getQuantity();
        }

        if (isPriority) {
            total -= total * 0.1;
        }

        if (promoCode != null && promoCode.equalsIgnoreCase(""SAVE10"")) {
            total -= total * discountPercentage / 100;
        }

        if (total < 0) {
            total = 0;
        }

        // TODO: send confirmation email
        // sendEmail(customerEmail, ""Order processed: $"" + total);

        // TODO: log order in database
        // logOrder(order);

        System.out.println(""Processed order for customer: "" + customerEmail);
    }

    // Unused method left in code
    public void oldCalculateTax(double amount) {
        System.out.println(""Tax: "" + amount * 0.08);
    }

    // Another unused method
    public void deprecatedProcess(Order order) {
        System.out.println(""Legacy processing... "");
    }
}",code_smell,dead_code,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        return user_data
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        return users_data
    def create_user(self, user_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""INSERT INTO users (name, email) VALUES (%s, %s)"", (user_data['name'], user_data['email']))
        self.db_connection.commit()
        return True",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None
        self._load_lock = threading.Lock()

    def load(self):
        # Double-checked locking pattern (incorrect in Python)
        if self._config is None:
            with self._load_lock:
                if self._config is None:
                    with open(self.config_path, 'r') as f:
                        self._config = json.load(f)
        return self._config

    def get(self, key, default=None):
        cfg = self.load()
        return cfg.get(key, default)

# Global instance (singleton misuse)
config = ConfigLoader('/etc/app/config.json')

def process_user_input(user_input):
    # Unsafe eval leading to code execution vulnerability
    result = eval(user_input)
    return result

def main():
    # Example usage
    db_host = config.get('db_host', 'localhost')
    print(f""Connecting to DB at {db_host}"")
    # Simulate processing untrusted input
    user_cmd = input('Enter command: ')
    output = process_user_input(user_cmd)
    print('Result:', output)

if __name__ == '__main__':
    main()",code_defect,unsafe_eval_execution,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

string processInput(const string& input) {
    string output = input;
    for (int i = 0; i < output.length(); ++i) {
        if (output[i] >= 'a' && output[i] <= 'z') {
            output[i] = toupper(output[i]);
        }
    }
    return output;
}

int main() {
    vector<string> data = {""hello"", ""world""};
    for (const string& s : data) {
        string processed = processInput(s);
        cout << processed << endl;
    }
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class UserService {
public:
    void addUser(User user) { users.push_back(user); }
    User* getUserByName(std::string name) {
        for (auto& user : users) {
            if (user.getName() == name) {
                return &user;
            }
        }
        return nullptr;
    }
private:
    std::vector<User> users;
};

int main() {
    UserService service;
    service.addUser(User(""John"", 30));
    User* user = service.getUserByName(""John"");
    if (user != nullptr) {
        std::cout << user->getName() << std::endl;
    }
    return 0;
}
",code_defect,dangling_pointer,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(int id) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(id);
    }
private:
    void process() {
        while (!stopFlag) {
            int item = -1;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    item = queue.front();
                    queue.erase(queue.begin());
                }
            }
            if (item != -1) {
                // Simulate processing
                std::cout << ""Processing id: "" << item << std::endl;
            }
        }
    }
    std::vector<int> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(i);
    }
    // Missing lp.stop(); leads to thread running indefinitely
    return 0;
}
",code_defect,resource_leak_thread_not_stopped,,openai/gpt-oss-120b
Python,"import os
import requests

def fetch_user_data(user_id):
    base_url = 'https://api.example.com/users/'
    url = base_url + str(user_id)
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return None


def process_user_data(user_data):
    if not user_data:
        return
    user_name = user_data.get('name', 'Unknown')
    user_email = user_data.get('email', 'No email provided')
    print(f'Processing user: {user_name} <{user_email}>')

    # Legacy code for backward compatibility
    # if 'old_field' in user_data:
    #     process_old_format(user_data)


def main():
    user_ids = [1, 2, 3, 4, 5]
    for user_id in user_ids:
        data = fetch_user_data(user_id)
        process_user_data(data)


if __name__ == '__main__':
    main()",code_smell,dead_code,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        cursor.close()
        if user_data:
            return {
                'id': user_data[0],
                'username': user_data[1],
                'email': user_data[2]
            }
        else:
            return None",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""admin123""; // hardcoded password

    public List<Payment> getPendingPayments() throws SQLException {
        List<Payment> pending = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, user_id FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Payment p = new Payment();
            p.setId(rs.getInt(""id""));
            p.setAmount(rs.getDouble(""amount""));
            p.setUserId(rs.getInt(""user_id""));
            pending.add(p);
        }
        // Missing close of ResultSet, Statement, and Connection
        return pending;
    }

    public void processPayments() {
        try {
            List<Payment> payments = getPendingPayments();
            for (Payment p : payments) {
                // Simulate external API call that may throw RuntimeException
                boolean success = externalCharge(p.getUserId(), p.getAmount());
                updatePaymentStatus(p.getId(), success ? ""COMPLETED"" : ""FAILED"");
            }
        } catch (SQLException e) {
            // Swallow exception, no logging
        }
    }

    private boolean externalCharge(int userId, double amount) {
        // Placeholder for real payment gateway integration
        if (amount < 0) {
            throw new IllegalArgumentException(""Negative amount"");
        }
        // Simulate random failure
        return Math.random() > 0.2;
    }

    private void updatePaymentStatus(int paymentId, String status) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""UPDATE payments SET status = ? WHERE id = ?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, status);
            stmt.setInt(2, paymentId);
            stmt.executeUpdate();
            // Missing close of Statement and Connection
        } catch (SQLException e) {
            // Ignored
        }
    }
}

class Payment {
    private int id;
    private double amount;
    private int userId;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
}",code_defect,resource_leak_and_swallowed_exceptions,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processValues(const std::vector<int>& values) {
    for (size_t i = 0; i <= values.size(); ++i) {
        if (i % 2 == 0) {
            std::cout << values[i] << "" "" << values[i] * 2 << std::endl;
        } else {
            std::cout << values[i] << "" "" << values[i] - 1 << std::endl;
        }
    }
}

int main() {
    std::vector<int> data = {10, 20, 30, 40, 50};
    processValues(data);
    return 0;
}",code_defect,out_of_bounds_access,,qwen/qwen3-32b
Java,"public class PaymentProcessor { public void processPayment(String paymentMethod, double amount) { if (paymentMethod.equals(""credit_card"")) { // simulate payment processing delay Thread.sleep(100); } else if (paymentMethod.equals(""paypal"")) { // simulate payment processing delay Thread.sleep(200); } System.out.println(""Payment processed successfully""); } public static void main(String[] args) { PaymentProcessor processor = new PaymentProcessor(); processor.processPayment(""credit_card"", 100.0); } }",code_smell,magic_string,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off-by-one error
            int value = data[i];
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1,2,3,4,5};
    std::thread t([&](){ processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << "" Odd sum: "" << processor.getOddSum() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrders(orders, users, inventory) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      const user = users.find(u => u.id === order.userId);

      if (!user) {
        continue;
      }

      for (let j = 0; j < order.items.length; j++) {
        const item = order.items[j];
        const stock = inventory[item.productId];

        if (stock && stock.quantity >= item.quantity) {
          stock.quantity -= item.quantity;
          this._log(`Processed ${item.quantity} units of ${item.productId} for user ${user.name}`);
        } else {
          this._log(`Insufficient stock for ${item.productId} in order ${order.id}`);
        }
      }
    }
  }

  _log(message) {
    console.log(`[OrderProcessor] ${message}`);
  }
}

const orders = [
  { id: 'order1', userId: 1, items: [{ productId: 'p1', quantity: 2 }] },
  { id: 'order2', userId: 2, items: [{ productId: 'p2', quantity: 5 }] }
];

const users = [
  { id: 1, name: 'Alice' },
  { id: 2, name: 'Bob' }
];

const inventory = {
  'p1': { quantity: 3 },
  'p2': { quantity: 4 }
};

const processor = new OrderProcessor();
processor.processOrders(orders, users, inventory);",code_smell,large_function,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string n, int a) : name(n), age(a) {}

    bool operator<(const User& other) const {
        return age < other.age;
    }
};

void sortUsers(std::vector<User>& users) {
    std::sort(users.begin(), users.end());
}

void printUsers(const std::vector<User>& users) {
    for (const auto& user : users) {
        std::cout << user.name << "" is "" << user.age << "" years old."" << std::endl;
    }
}

int main() {
    std::vector<User> users = {User(""John"", 30), User(""Alice"", 25), User(""Bob"", 40)};
    sortUsers(users);
    printUsers(users);
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                data TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, username, data):
        cursor = self.conn.cursor()
        # Directly embedding user-provided data into SQL leads to injection risk
        cursor.execute(f""INSERT INTO users (username, data) VALUES ('{username}', '{json.dumps(data)}')"")
        self.conn.commit()

    def get_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute(f""SELECT data FROM users WHERE username = '{username}'"")
        row = cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

    def delete_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute(f""DELETE FROM users WHERE username = '{username}'"")
        self.conn.commit()

# Example usage (would be called from elsewhere)
manager = UserManager(os.getenv('USER_DB', ':memory:'))
manager.add_user('alice', {'role': 'admin', 'active': True})
print(manager.get_user('alice'))
manager.delete_user('alice')",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {
    public boolean authenticate(String username, String password, boolean rememberMe, boolean isTwoFactorEnabled) {
        if (username == null || password == null) {
            return false;
        }

        if (username.trim().isEmpty() || password.trim().isEmpty()) {
            return false;
        }

        // TODO: Check if this is necessary for all cases
        if (rememberMe) {
            // Do something with rememberMe
        }

        if (isTwoFactorEnabled) {
            // Placeholder for 2FA logic
            // Not implemented yet
        }

        String query = ""SELECT * FROM users WHERE username = '"" + username + ""' AND password = '"" + password + ""'"";
        // Simulate DB call
        boolean isValid = executeQuery(query);
        return isValid;
    }

    private boolean executeQuery(String query) {
        // Simulate a database lookup
        return query.contains(""admin"") && query.contains(""1234"");
    }
}",code_smell,security_code_smell,,qwen/qwen3-32b
JavaScript,"class PaymentProcessor { constructor() { this.users = {}; } async processPayment(userId, amount) { const user = this.users[userId]; if (!user) { await new Promise(resolve => setTimeout(resolve, 1000)); this.users[userId] = { id: userId, balance: 0 }; } this.users[userId].balance += amount; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<User> getActiveUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""SELECT id, username, email FROM users WHERE status='ACTIVE'"";
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            while (rs.next()) {
                User u = new User();
                u.setId(rs.getInt(""id""));
                u.setUsername(rs.getString(""username""));
                u.setEmail(rs.getString(""email""));
                users.add(u);
            }
        } finally {
            // Missing close of ResultSet and Statement, and ignoring possible SQLException
            if (conn != null) {
                conn.close(); // may throw SQLException, not handled
            }
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}
",code_defect,resource_leak_and_unhandled_exception,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users) {
    this.users = users;
  }

  authenticateUser(username, password) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username && this.users[i].password === password) {
        return true;
      }
    }
    return false;
  }

  getUserRole(username) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        return this.users[i].role;
      }
    }
    return 'guest';
  }
}

// Sample usage
const users = [
  { username: 'admin', password: 'admin123', role: 'admin' },
  { username: 'user', password: 'user123', role: 'user' }
];

const auth = new UserAuth(users);
console.log(auth.authenticateUser('admin', 'admin123')); // true
console.log(auth.getUserRole('admin')); // 'admin'",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getAllUsers() {
            const users = await this.userRepository.findAll();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async getUserById(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return { id: user.id, name: user.name };
         }
      }

      class UserRepository {
         constructor(db) {
            this.db = db;
         }

         async findAll() {
            return this.db.query('SELECT * FROM users');
         }

         async findById(id) {
            return this.db.query('SELECT * FROM users WHERE id = $1', [id]);
         }
      }

      const db = {
         query: (sql, params) => {
            // simulate a database query
            return new Promise(resolve => {
               setTimeout(() => {
                  const result = [
                     { id: 1, name: 'John Doe' },
                     { id: 2, name: 'Jane Doe' }
                  ];
                  resolve(result);
               }, 100);
            });
         }
      };

      const userRepository = new UserRepository(db);
      const userService = new UserService(userRepository);

      (async () => {
         const users = await userService.getAllUsers();
         console.log(users);
      })();
   ",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {
        // Load users from a data source (simulated)
        users = {""alice"", ""bob"", ""carol""};
    }

    // Returns the user name at the given index
    // NOTE: Index is expected to be 1-based for legacy reasons
    std::string getUserById(int id) const {
        // BUG: Off-by-one error – should subtract 1 from id
        if (id < 1 || id > static_cast<int>(users.size())) {
            return """"; // invalid id
        }
        return users[id]; // <-- off-by-one, may access out of bounds
    }

    // Adds a new user
    void addUser(const std::string& name) {
        users.push_back(name);
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""dave"");
    std::cout << ""User 4: "" << um.getUserById(4) << std::endl; // Expected ""dave"", may crash
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processInput(const std::string& input) {
    std::string result;
    for (char c : input) {
        if (c >= 'A' && c <= 'Z') {
            result += c;
        } else if (c >= 'a' && c <= 'z') {
            result += c;
        }
    }
    return result;
}

int main() {
    std::vector<std::string> inputs = {""Hello123"", ""WORLD!@"", ""C++20""};
    for (const std::string& input : inputs) {
        std::string filtered = processInput(input);
        std::cout << ""Processed: "" << filtered << std::endl;
    }
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserService { private static final Logger logger = LoggerFactory.getLogger(UserService.class); public void updateUser(User user) { if (user.getId() != null) { try { User existingUser = userRepository.findById(user.getId()).orElseThrow(); existingUser.setName(user.getName()); existingUser.setEmail(user.getEmail()); userRepository.save(existingUser); } catch (Exception e) { logger.error(""Error updating user"", e); } } } }",code_smell,god_class,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.config = {}
        self._load()

    def _load(self):
        # Insecure: directly eval the config file content
        with open(self.path, 'r') as f:
            data = f.read()
            self.config = eval(data)  # code defect: unsafe deserialization

    def get(self, key, default=None):
        return self.config.get(key, default)

class UserService:
    def __init__(self, config_path):
        self.cfg = ConfigLoader(config_path)
        self.db_path = self.cfg.get('db_path')

    def get_user(self, user_id):
        # Simple SQL query without sanitization – code defect: SQL injection risk
        query = f""SELECT * FROM users WHERE id = {user_id}""
        conn = None
        try:
            conn = self._connect()
            cursor = conn.cursor()
            cursor.execute(query)
            result = cursor.fetchone()
            return result
        finally:
            if conn:
                conn.close()

    def _connect(self):
        import sqlite3
        return sqlite3.connect(self.db_path)

# Usage example (would be called from elsewhere)
service = UserService('config.cfg')
print(service.get_user(1))",code_defect,unsafe_deserialization_and_sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

class DataProcessor {
public:
    void process(const std::vector<std::string>& data) {
        for (const auto& item : data) {
            if (item.empty()) continue;

            if (item == ""skip"") {
                std::cout << ""Skipping: "" << item << std::endl;
                continue;
            }

            int value = 0;
            try {
                value = std::stoi(item);
            } catch (const std::exception& e) {
                std::cerr << ""Conversion failed for: "" << item << "" - "" << e.what() << std::endl;
                continue;
            }

            if (value > 100) {
                std::cout << ""High value: "" << item << std::endl;
            } else {
                std::cout << ""Low value: "" << item << std::endl;
            }
        }
    }
};

int main() {
    std::vector<std::string> input = { ""123"", ""abc"", ""skip"", """", ""150"", ""-10"" };
    DataProcessor processor;
    processor.process(input);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        cursor.close()
        return user_data
    
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users"")
        users_data = cursor.fetchall()
        cursor.close()
        return users_data
    
    def create_user(self, user_name, user_email):
        cursor = self.db_connection.cursor()
        cursor.execute(""INSERT INTO users (name, email) VALUES (%s, %s)"", (user_name, user_email))
        self.db_connection.commit()
        cursor.close()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // JSON.parse can throw, but we ignore errors
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

function processUserInput(input) {
  // Assume input is a string like ""key=value""
  const [key, value] = input.split('=');
  const config = new ConfigLoader('./config.json').load();
  // Directly assign user-provided value to config without validation
  config[key] = value;
  // Write back to file (potential race condition if called concurrently)
  fs.writeFileSync('./config.json', JSON.stringify(config, null, 2));
  return config;
}

module.exports = { processUserInput };",code_defect,unsafe_file_write_and_missing_validation,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(std::string input) {
    std::string command = input.substr(0, input.find(' '));
    std::string value = input.substr(input.find(' ')+1);

    if (command == ""set"") {
        std::cout << ""Setting value to "" << value << std::endl;
    } else if (command == ""get"") {
        std::cout << ""Retrieving value for "" << value << std::endl;
    } else {
        std::cout << ""Unknown command"" << std::endl;
    }
}

int main() {
    std::vector<std::string> inputs = {""set x"", ""get y"", ""delete z""};
    for (const auto& input : inputs) {
        processUserInput(input);
    }
    return 0;
}",code_smell,poor_error_handling,,qwen/qwen3-32b
Python,"
class BankAccount:
    def __init__(self, account_number, balance):
        self.account_number = account_number
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        if amount > self.balance:
            self.balance = 0
        else:
            self.balance -= amount

    def get_balance(self):
        return self.balance

class Bank:
    def __init__(self):
        self.accounts = {}

    def create_account(self, account_number, initial_balance):
        self.accounts[account_number] = BankAccount(account_number, initial_balance)

    def get_account(self, account_number):
        return self.accounts.get(account_number)

bank = Bank()
bank.create_account('12345', 1000)
account = bank.get_account('12345')
account.withdraw(500)
print(account.get_balance())
",code_defect,inconsistent_state,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""P@ssw0rd123""; // hardcoded secret

    public List<Payment> getPendingPayments() throws SQLException {
        List<Payment> pending = new ArrayList<>();
        String sql = ""SELECT id, amount, user_id FROM payments WHERE status='PENDING'"";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                Payment p = new Payment();
                p.setId(rs.getInt(""id""));
                p.setAmount(rs.getDouble(""amount""));
                p.setUserId(rs.getInt(""user_id""));
                pending.add(p);
            }
        }
        return pending;
    }

    public void processPayments() {
        try {
            List<Payment> payments = getPendingPayments();
            for (Payment p : payments) {
                // Simulate external payment gateway call
                boolean success = externalCharge(p.getUserId(), p.getAmount());
                updatePaymentStatus(p.getId(), success ? ""COMPLETED"" : ""FAILED"");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private boolean externalCharge(int userId, double amount) {
        // Placeholder for real implementation
        return amount < 1000; // simplistic rule
    }

    private void updatePaymentStatus(int paymentId, String status) {
        String sql = ""UPDATE payments SET status='"" + status + ""' WHERE id="" + paymentId; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

class Payment {
    private int id;
    private double amount;
    private int userId;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
}",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrders(orders) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      if (order.status === 'pending') {
        this.processOrder(order);
      }
    }
  }

  processOrder(order) {
    if (!order || !order.id || !order.items) {
      return;
    }

    for (let i = 0; i < order.items.length; i++) {
      const item = order.items[i];
      if (item.quantity <= 0) {
        continue;
      }
      // Some processing logic
      console.log(`Processing item ${item.id} for order ${order.id}`);
    }

    // Additional processing
    console.log(`Order ${order.id} processed`);

    // Dummy validation logic
    if (order.totalPrice && order.totalPrice < 0) {
      console.warn(`Negative price detected for order ${order.id}`);
    }

    // Simulate external service call
    this.sendOrderToWarehouse(order);
  }

  sendOrderToWarehouse(order) {
    console.log(`Sending order ${order.id} to warehouse`);
  }
}

// Example usage:
const processor = new OrderProcessor();
const orders = [
  { id: 1, status: 'pending', items: [{ id: 101, quantity: 2 }, { id: 102, quantity: 0 }], totalPrice: 100 },
  { id: 2, status: 'completed', items: [{ id: 201, quantity: 1 }], totalPrice: 50 },
];

processor.processOrders(orders);",clean_code,well_structured,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <algorithm>
      class Employee {
         public:
            Employee(std::string name, int salary) : name(name), salary(salary) {}
            std::string name;
            int salary;
      };
      bool compareEmployees(const Employee& a, const Employee& b) {
         return a.salary < b.salary;
      }
      void sortEmployees(std::vector<Employee>& employees) {
         std::sort(employees.begin(), employees.end(), compareEmployees);
      }
      int main() {
         std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
         sortEmployees(employees);
         for (const auto& employee : employees) {
            std::cout << employee.name << "" "" << employee.salary << std::endl;
         }
         return 0;
      }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn should return a promise resolving to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // Off‑by‑one error: pageNumber is 1‑based but calculations treat it as 0‑based
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    this.currentPage++;
    return this.getPage(this.currentPage);
  }
}

// Example usage
const paginator = new Paginator(10);

paginator.loadItems(() => Promise.resolve(Array.from({ length: 95 }, (_, i) => i + 1)))
  .then(() => {
    console.log('First page:', paginator.nextPage()); // Returns items 11‑20 instead of 1‑10
    console.log('Second page:', paginator.nextPage()); // Returns items 21‑30, skipping first page
  });",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processVector(const std::vector<int>& vec) {
    std::vector<int> result;
    for (size_t i = 0; i < vec.size(); ++i) {
        if (vec[i] % 2 == 0) {
            result.push_back(vec[i]);
        }
    }

    // Re-initializing and processing the same vector again
    result.clear();
    for (size_t i = 0; i < vec.size(); ++i) {
        if (vec[i] % 2 == 0) {
            result.push_back(vec[i]);
        }
    }

    for (size_t i = 0; i < result.size(); ++i) {
        std::cout << result[i] << "" "";
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5, 6};
    processVector(input);
    return 0;
}",code_smell,repeated_work,,qwen/qwen3-32b
Java,"public class UserService { private static final Map<String, String> users = new HashMap<>(); public synchronized void addUser(String username, String password) { users.put(username, password); } public synchronized String getPassword(String username) { return users.get(username); } public static void main(String[] args) { UserService userService = new UserService(); userService.addUser(""user1"", ""password1""); System.out.println(userService.getPassword(""user1"")); } }",code_smell,"God class, tight coupling",,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    // Synchronous file read blocks the event loop
    const data = fs.readFileSync(this.path, 'utf8');
    // No error handling; malformed JSON will throw
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

class UserService {
  constructor(db) {
    this.db = db;
    this.config = new ConfigLoader('./config.json');
  }

  async getUserProfile(userId) {
    const config = this.config.load(); // Potentially throws, not caught
    const user = await this.db.query('SELECT * FROM users WHERE id = ' + userId); // SQL injection risk
    if (!user) return null;
    // Missing await, returns a Promise instead of data
    return this._enrichProfile(user, config);
  }

  _enrichProfile(user, config) {
    // Assume config has a field 'bonusPoints'
    user.bonus = config.bonusPoints;
    return user;
  }
}

module.exports = { ConfigLoader, UserService };",code_defect,SQL_injection_and_unhandled_exception,,openai/gpt-oss-120b
Python,"import os
import subprocess

def run_command(command):
    try:
        result = subprocess.run(command, shell=True, check=True, text=True, capture_output=True)
        print(f""Command output:"")
        print(result.stdout)
        return result
    except subprocess.CalledProcessError as e:
        print(f""Error running command: {e}"")
        return None


def execute_user_input():
    user_input = input(""Enter a shell command to run: "")
    if user_input.strip():
        run_command(user_input)

if __name__ == ""__main__"":
    execute_user_input()",code_defect,security_vulnerability,,qwen/qwen3-32b
Java,"public class UserService { private static final String DEFAULT_PASSWORD = ""password123""; public User createUser(String username, String email) { User user = new User(); user.setUsername(username); user.setEmail(email); user.setPassword(DEFAULT_PASSWORD); return user; } }",code_smell,hardcoded_secret,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}

    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off-by-one error
            int value = data[i]; // may read out of bounds
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }

    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }

private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << ""\n"";
    std::cout << ""Odd sum: "" << processor.getOddSum() << ""\n"";
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  process(order) {
    if (order.status === 'pending') {
      const customer = order.customer;
      const items = order.items;
      let total = 0;

      for (let i = 0; i < items.length; i++) {
        total += items[i].price * items[i].quantity;
      }

      if (total > 0) {
        this.sendEmail(customer.email, 'Order Confirmation', 'Your order has been processed. Thank you!');
        this.updateInventory(items);
        order.status = 'processed';
      } else {
        this.sendEmail(customer.email, 'Order Error', 'Your order could not be processed. Total is zero.');
      }
    }
  }

  sendEmail(to, subject, body) {
    console.log(`Email sent to ${to}: ${subject} - ${body}`);
  }

  updateInventory(items) {
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      item.stock -= item.quantity;
      if (item.stock < 0) {
        item.stock = 0;
      }
    }
  }
}",code_smell,large_class,,qwen/qwen3-32b
Java,"public class UserDatabase { private static UserDatabase instance; private Map<String, User> users = new HashMap<>(); private UserDatabase() {} public static UserDatabase getInstance() { if (instance == null) { instance = new UserDatabase(); } return instance; } public void addUser(User user) { users.put(user.getUsername(), user); } public User getUser(String username) { return users.get(username); } public void removeUser(String username) { users.remove(username); } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json, os

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self.cache = {}

    def load(self, key):
        # Load config file each time, ignoring cache
        with open(self.path, 'r') as f:
            data = json.load(f)
        return data.get(key)

    def get_cached(self, key):
        if key in self.cache:
            return self.cache[key]
        value = self.load(key)
        self.cache[key] = value
        return value

class UserService:
    def __init__(self, config_path):
        self.config = ConfigLoader(config_path)

    def is_admin(self, user_id):
        # Security defect: uses eval on untrusted input
        admin_list = self.config.get_cached('admin_ids')
        expr = f""{user_id} in {admin_list}""
        return eval(expr)

    def get_user_profile(self, user_id):
        # Potential race condition: file may be modified between reads
        profile_path = f""/tmp/user_{user_id}.json""
        with open(profile_path, 'r') as f:
            return json.load(f)

# Example usage
service = UserService('/etc/app/config.json')
print(service.is_admin('123'))
",code_defect,unsafe_eval,,openai/gpt-oss-120b
Python,"import time

def process_user_data(data):
    user_data = []
    for item in data:
        if item.get('status') == 'active':
            name = item.get('name')
            email = item.get('email')
            user = {
                'username': name.split()[0].lower() + str(time.time()),
                'email': email,
                'timestamp': time.time()
            }
            user_data.append(user)
    return user_data

# Legacy code for older user formats
def create_usernames_legacy(data):
    users = []
    for entry in data:
        if entry['status'] == 'active':
            users.append(entry['name'].split()[0].lower() + str(time.time()))
    return users

# Uncomment if needed
# print(create_usernames_legacy([{'name': 'John Doe', 'status': 'active'}]))",code_smell,code_smell,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void printInfo() {
        std::cout << ""Name: "" << name << "", Age: "" << age << std::endl;
    }

private:
    std::string name;
    int age;
};

void printUsers(std::vector<User>& users) {
    for (int i = 0; i < users.size(); i++) {
        users[i].printInfo();
    }
}

int main() {
    std::vector<User> users;
    users.push_back(User(""John"", 30));
    users.push_back(User(""Alice"", 25));

    printUsers(users);

    return 0;
}
",code_smell,unused_imports,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserReportGenerator {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> generateReport(String startDate, String endDate) {
        List<String> reportLines = new ArrayList<>();
        String query = ""SELECT username, login_count FROM user_logins WHERE login_date >= '"" + startDate + ""' AND login_date <= '"" + endDate + ""'""; // SQL injection risk
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                String line = rs.getString(""username"") + "": "" + rs.getInt(""login_count"");
                reportLines.add(line);
            }
        } catch (Exception e) {
            // Swallow exception, no logging
        }
        return reportLines;
    }

    public static void main(String[] args) {
        UserReportGenerator gen = new UserReportGenerator();
        List<String> report = gen.generateReport(""2023-01-01"", ""2023-12-31"");
        for (String line : report) {
            System.out.println(line);
        }
    }
}",code_defect,SQL injection and hardcoded credentials,,openai/gpt-oss-120b
Python,"import requests
import json

def fetch_user_data(user_id, token, url_base='https://api.example.com/v1/users/'):
    headers = {'Authorization': f'Bearer {token}'}
    response = requests.get(f'{url_base}{user_id}', headers=headers)
    if response.status_code == 200:
        return json.loads(response.text)
    return None


def update_user_profile(user_id, token, data):
    headers = {'Authorization': f'Bearer {token}'}
    url_base = 'https://api.example.com/v1/users/'
    response = requests.put(f'{url_base}{user_id}', json=data, headers=headers)
    if response.status_code == 200:
        return True
    return False


def process_user(token, user_id, data):
    user_data = fetch_user_data(user_id, token)
    if user_data:
        updated = update_user_profile(user_id, token, data)
        if updated:
            print('User profile updated successfully.')
        else:
            print('Failed to update user profile.')
    else:
        print('Failed to fetch user data.')",code_smell,hardcoded_dependency,,qwen/qwen3-32b
Java,public class UserService { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUser(int index) { return users.get(index); } public void removeUser(int index) { users.remove(index); } public List<User> getAllUsers() { return users; } },code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <vector>
#include <string>
#include <iostream>

class UserManager {
public:
    UserManager() {
        // Load users from a data source (simulated)
        users = {""alice"", ""bob"", ""carol""};
    }

    // Returns the user name at the given index, or empty string if out of range
    std::string getUserAt(int index) const {
        // BUG: off-by-one error – should be index >= 0 && index < users.size()
        if (index > 0 && index <= static_cast<int>(users.size())) {
            return users[index];
        }
        return """";
    }

    // Adds a new user
    void addUser(const std::string& name) {
        users.push_back(name);
    }

private:
    std::vector<std::string> users;
};

int main() {
    UserManager um;
    um.addUser(""dave"");
    // Expect to retrieve the first user (""alice"")
    std::cout << ""User 0: "" << um.getUserAt(0) << std::endl; // prints empty due to bug
    // Retrieve last user correctly
    std::cout << ""User 4: "" << um.getUserAt(4) << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(String customerId, String productId, int quantity) {
        if (quantity <= 0) {
            System.out.println(""Invalid quantity"");
            return;
        }

        Product product = fetchProduct(productId);
        if (product == null) {
            System.out.println(""Product not found"");
            return;
        }

        Customer customer = fetchCustomer(customerId);
        if (customer == null) {
            System.out.println(""Customer not found"");
            return;
        }

        if (product.getStock() < quantity) {
            System.out.println(""Insufficient stock"");
            return;
        }

        product.setStock(product.getStock() - quantity);
        saveProduct(product);

        Order order = new Order();
        order.setCustomerId(customerId);
        order.setProductId(productId);
        order.setQuantity(quantity);
        order.setStatus(""PROCESSING"");
        saveOrder(order);
    }

    private Product fetchProduct(String productId) {
        // Simulated DB call
        return new Product(productId, ""Laptop"", 100);
    }

    private Customer fetchCustomer(String customerId) {
        // Simulated DB call
        return new Customer(customerId, ""John Doe"");
    }

    private void saveProduct(Product product) {
        // Simulated DB save
    }

    private void saveOrder(Order order) {
        // Simulated DB save
    }

    public static void main(String[] args) {
        OrderProcessor processor = new OrderProcessor();
        processor.processOrder(""C123"", ""P456"", 5);
    }
}

class Product {
    private String id;
    private String name;
    private int stock;

    public Product(String id, String name, int stock) {
        this.id = id;
        this.name = name;
        this.stock = stock;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getStock() {
        return stock;
    }

    public void setStock(int stock) {
        this.stock = stock;
    }
}

class Customer {
    private String id;
    private String name;

    public Customer(String id, String name) {
        this.id = id;
        this.name = name;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

class Order {
    private String customerId;
    private String productId;
    private int quantity;
    private String status;

    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public void setStatus(String status) {
        this.status = status;
    }
}",code_smell,large_function,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class User {
public:
    std::string name;
    int age;

    User(std::string n, int a) : name(n), age(a) {}

    bool operator<(const User& other) const {
        return age < other.age;
    }
};

void sortUsers(std::vector<User>& users) {
    std::sort(users.begin(), users.end());
}

void printUsers(const std::vector<User>& users) {
    for (const auto& user : users) {
        std::cout << user.name << "" is "" << user.age << "" years old."" << std::endl;
    }
}

int main() {
    std::vector<User> users = {User(""John"", 25), User(""Alice"", 30), User(""Bob"", 20)};
    sortUsers(users);
    printUsers(users);
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one bug
            int value = data[i] * 2; // may read out of bounds
            results_.push_back(value);
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& getResults() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(input); });
    t.join();
    for (int v : processor.getResults()) {
        std::cout << v << "" "";
    }
    std::cout << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users, secretKey) {
    this.users = users;
    this.secretKey = secretKey;
  }

  authenticateUser(email, password) {
    const user = this.users.find(u => u.email === email);

    if (!user) {
      return { success: false, message: 'User not found' };
    }

    if (user.password !== password) {
      return { success: false, message: 'Invalid password' };
    }

    return { success: true, token: this.generateToken(user.id) };
  }

  generateToken(userId) {
    return Buffer.from(`${userId}:${this.secretKey}`).toString('base64');
  }
}

const users = [
  { id: 1, email: 'user1@example.com', password: 'pass123' },
  { id: 2, email: 'user2@example.com', password: 'pass456' }
];

const auth = new UserAuth(users, 'my_secret_key');

// Example usage:
console.log(auth.authenticateUser('user1@example.com', 'pass123'));
console.log(auth.authenticateUser('user1@example.com', 'wrongpass'));",code_defect,insecure_authentication,,qwen/qwen3-32b
Python,"
class UserDatabase:
    def __init__(self):
        self.users = {}

    def add_user(self, username, password):
        if username in self.users:
            return False
        self.users[username] = password
        return True

    def authenticate(self, username, password):
        if username not in self.users:
            return False
        return self.users[username] == password

    def change_password(self, username, old_password, new_password):
        if username not in self.users or self.users[username] != old_password:
            return False
        self.users[username] = new_password
        return True

    def get_all_users(self):
        return list(self.users.keys())

db = UserDatabase()
db.add_user('admin', 'password123')
print(db.authenticate('admin', 'password123'))  # Should print: True
print(db.change_password('admin', 'password123', 'new_password'))  # Should print: True
print(db.authenticate('admin', 'new_password'))  # Should print: True
",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserReportGenerator {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> generateReport(int days) {
        List<String> report = new ArrayList<>();
        String query = ""SELECT username, last_login FROM users WHERE last_login >= DATE_SUB(NOW(), INTERVAL "" + days + "" DAY)"";
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                String line = rs.getString(""username"") + "": "" + rs.getTimestamp(""last_login"");
                report.add(line);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return report;
    }

    // Vulnerable method: directly concatenates user input into SQL
    public int countActiveUsers(String role) {
        String sql = ""SELECT COUNT(*) FROM users WHERE role = '"" + role + ""'""; // SQL injection risk
        int count = 0;
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            if (rs.next()) {
                count = rs.getInt(1);
            }
        } catch (Exception e) {
            // swallow exception silently
        }
        return count;
    }
}",code_defect,sql_injection,,openai/gpt-oss-120b
Python,"import requests
import json

def fetch_and_process_data(url, headers=None, params=None):
    if headers is None:
        headers = {}
    if params is None:
        params = {}

    response = requests.get(url, headers=headers, params=params)

    if response.status_code == 200:
        data = response.json()
        processed_data = []
        for item in data['items']:
            if 'name' in item and 'value' in item:
                processed_item = {
                    'id': item.get('id'),
                    'name': item['name'],
                    'value': item['value']
                }
                processed_data.append(processed_item)
        return processed_data
    else:
        return None

url = 'https://api.example.com/data'
headers = {'Authorization': 'Bearer 12345'}
result = fetch_and_process_data(url, headers)
print(json.dumps(result, indent=2))",code_smell,long_function,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private static final String DEFAULT_PASSWORD = ""password123""; public boolean authenticate(String username, String password) { if (username.equals(""admin"")) { return password.equals(DEFAULT_PASSWORD); } else { return password.length() > 5; } } }",code_defect,insecure_password_validation,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if username contains malicious input
            String query = ""SELECT role FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }

    public boolean isAdmin(String username) {
        List<String> roles = getUserRoles(username);
        return roles.contains(""ADMIN"");
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private final OrderService orderService;
    private final InventoryService inventoryService;
    private final EmailService emailService;

    public OrderProcessor(OrderService orderService, InventoryService inventoryService, EmailService emailService) {
        this.orderService = orderService;
        this.inventoryService = inventoryService;
        this.emailService = emailService;
    }

    public void processOrder(Order order) {
        if (order == null || order.getItems() == null || order.getItems().isEmpty()) {
            return;
        }

        for (OrderItem item : order.getItems()) {
            if (inventoryService.hasStock(item.getProductId(), item.getQuantity())) {
                inventoryService.deductStock(item.getProductId(), item.getQuantity());
            } else {
                // TODO: Handle out of stock
            }
        }

        orderService.saveOrder(order);
        emailService.sendEmail(order.getCustomerEmail(), ""Order Confirmation"", ""Your order has been processed."");
    }
}",code_smell,incomplete_list,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>

class User {
public:
    User(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void setName(std::string name) { this->name = name; }
    void setAge(int age) { this->age = age; }

private:
    std::string name;
    int age;
};

class UserRepository {
public:
    void saveUser(User user) {
        users.push_back(user);
    }

    User getUserByName(std::string name) {
        for (User user : users) {
            if (user.getName() == name) {
                return user;
            }
        }
        // User not found, return a default user
        return User(""Unknown"", 0);
    }

private:
    std::vector<User> users;
};

int main() {
    UserRepository repository;
    User user(""John"", 30);
    repository.saveUser(user);

    User retrievedUser = repository.getUserByName(""John"");
    std::cout << retrievedUser.getName() << std::endl;
    std::cout << retrievedUser.getAge() << std::endl;

    return 0;
}
",code_smell,God class,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    """"""Loads configuration from a JSON file.
    """"""
    def __init__(self, config_path):
        self.config_path = config_path
        self._config = None

    def load(self):
        # Missing error handling if file does not exist or JSON is malformed
        with open(self.config_path, 'r') as f:
            self._config = json.load(f)
        logger.info(""Configuration loaded from %s"", self.config_path)
        return self._config

    def get(self, key, default=None):
        if self._config is None:
            self.load()
        return self._config.get(key, default)

class UserService:
    """"""Service for user operations.""""""
    def __init__(self, db_connection_string):
        self.db_conn_str = db_connection_string
        self._connect()

    def _connect(self):
        # Simulated insecure DB connection using string formatting (SQL injection risk)
        self.conn = f""DB_CONNECTION({self.db_conn_str})""
        logger.debug(""Connected to DB: %s"", self.conn)

    def get_user(self, user_id):
        # Directly interpolates user_id into query without sanitization
        query = f""SELECT * FROM users WHERE id = {user_id}""
        logger.debug(""Executing query: %s"", query)
        # Simulated DB fetch (returns dummy data)
        return {""id"": user_id, ""name"": ""John Doe""}

    def update_user_email(self, user_id, new_email):
        # Off-by-one error: uses wrong placeholder index
        query = ""UPDATE users SET email = %s WHERE id = %d"" % (new_email, user_id + 1)
        logger.debug(""Executing update: %s"", query)
        # Assume execution succeeds
        return True

def main():
    cfg = ConfigLoader('config.json')
    db_str = cfg.get('database_url')
    service = UserService(db_str)
    user = service.get_user(42)
    print(f""User fetched: {user}"")
    # Intentional bug: passing email without validation
    service.update_user_email(42, 'new_email@example.com')

if __name__ == ""__main__"":
    main()",code_defect,SQL_injection_and_off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(String userId, String productId, int quantity, boolean isPriority, String paymentMethod) {
        if (userId == null || productId == null || quantity <= 0) {
            throw new IllegalArgumentException(""Invalid order details"");
        }

        if (isPriority) {
            // Special handling for priority orders
            checkInventory(productId, quantity * 2);
        } else {
            checkInventory(productId, quantity);
        }

        if (""credit_card"".equals(paymentMethod)) {
            processCreditCardPayment(userId, quantity);
        } else if (""paypal"".equals(paymentMethod)) {
            processPayPalPayment(userId, quantity);
        } else {
            throw new UnsupportedOperationException(""Unsupported payment method: "" + paymentMethod);
        }

        confirmOrder(userId, productId, quantity);
    }

    private void checkInventory(String productId, int quantity) {
        // Simulated inventory check
        if (productId.equals(""low_stock_item"") && quantity > 5) {
            throw new RuntimeException(""Not enough stock for product: "" + productId);
        }
    }

    private void processCreditCardPayment(String userId, int quantity) {
        // Simulated payment processing
        System.out.println(""Processed credit card payment for user "" + userId);
    }

    private void processPayPalPayment(String userId, int quantity) {
        // Simulated payment processing
        System.out.println(""Processed PayPal payment for user "" + userId);
    }

    private void confirmOrder(String userId, String productId, int quantity) {
        // Simulated confirmation
        System.out.println(""Order confirmed for user "" + userId + "", product "" + productId + "", quantity "" + quantity);
    }
}",code_smell,long_function,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i]; // may read out of bounds
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1,2,3,4,5};
    std::thread t1([&](){ processor.process(numbers); });
    std::thread t2([&](){ processor.process(numbers); }); // concurrent access without synchronization -> data race on sums
    t1.join();
    t2.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << "" Odd sum: "" << processor.getOddSum() << std::endl;
    return 0;
}",code_defect,off_by_one_and_data_race,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>

class DataProcessor {
public:
    void process(const std::vector<int>& input) {
        std::thread worker([this, input] {
            for (size_t i = 0; i < input.size(); ++i) {
                results.push_back(input[i] * 2);
            }
        });

        worker.join();
    }

    void printResults() const {
        for (int val : results) {
            std::cout << val << "" "";
        }
        std::cout << std::endl;
    }

private:
    mutable std::vector<int> results;
};

int main() {
    DataProcessor processor;
    std::vector<int> input = {1, 2, 3, 4, 5};
    processor.process(input);
    processor.printResults();

    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, user_id, username, password):
        if user_id not in self.users:
            self.users[user_id] = {'username': username, 'password': password}
            with open(self.db_file, 'a') as f:
                f.write(f'{user_id}:{username}:{password}\n')

    def get_user(self, user_id):
        if user_id in self.users:
            return self.users[user_id]
        else:
            with open(self.db_file, 'r') as f:
                for line in f:
                    id, username, password = line.strip().split(':')
                    if id == user_id:
                        return {'username': username, 'password': password}
        return None

    def update_user(self, user_id, username, password):
        if user_id in self.users:
            self.users[user_id]['username'] = username
            self.users[user_id]['password'] = password
            with open(self.db_file, 'r') as f:
                lines = f.readlines()
            with open(self.db_file, 'w') as f:
                for line in lines:
                    id, user, passw = line.strip().split(':')
                    if id == user_id:
                        f.write(f'{id}:{username}:{password}\n')
                    else:
                        f.write(line)
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserCache:
    """"""Simple in‑memory cache for user records fetched from the DB.""""""
    def __init__(self, db_path: str):
        self._db_path = db_path
        self._cache = {}
        self._conn = sqlite3.connect(self._db_path)
        self._conn.row_factory = sqlite3.Row

    def get_user(self, user_id: int) -> dict:
        # Return cached copy if present
        if user_id in self._cache:
            return self._cache[user_id]
        # Otherwise fetch from DB
        cur = self._conn.cursor()
        cur.execute(""SELECT * FROM users WHERE id = ?"", (user_id,))
        row = cur.fetchone()
        if row is None:
            raise ValueError(f""User {user_id} not found"")
        user = dict(row)
        self._cache[user_id] = user
        return user

    def invalidate(self, user_id: int) -> None:
        self._cache.pop(user_id, None)

    def close(self) -> None:
        self._conn.close()

def load_config(config_path: str) -> dict:
    # NOTE: This function trusts the JSON file content without validation
    with open(config_path, ""r"") as f:
        return json.load(f)

def main():
    cfg = load_config(""config.json"")
    cache = UserCache(cfg[""db_path""])
    # Process a batch of user IDs supplied via environment variable
    ids = os.getenv(""USER_IDS"", """").split("","")
    for uid_str in ids:
        if not uid_str:
            continue
        uid = int(uid_str)
        user = cache.get_user(uid)
        print(f""User {uid}: {user['name']} ({user['email']})"")
    cache.close()

if __name__ == ""__main__"":
    main()
",code_defect,unvalidated JSON config leads to potential code injection,,openai/gpt-oss-120b
Java,"public class ReportGenerator {
    private List<String> data;

    public ReportGenerator(List<String> data) {
        this.data = data;
    }

    public String generateReport() {
        StringBuilder report = new StringBuilder();
        report.append(""Report:"").append(""\n"");
        for (int i = 0; i < data.size(); i++) {
            String entry = data.get(i);
            if (entry != null && !entry.isEmpty()) {
                report.append(""Item "").append(i + 1).append("": "").append(entry).append(""\n"");
            }
        }
        return report.toString();
    }

    public void saveReportToFile(String filePath) {
        try {
            Files.write(Paths.get(filePath), generateReport().getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor(paymentGateway) {
         this.paymentGateway = paymentGateway;
      }

      processPayment(amount, currency) {
         if (this.paymentGateway === 'paypal') {
            // Simulate a delay for PayPal processing
            setTimeout(() => {
               console.log(`Payment of ${amount} ${currency} processed through PayPal`);
            }, 2000);
         } else if (this.paymentGateway === 'stripe') {
            console.log(`Payment of ${amount} ${currency} processed through Stripe`);
         }
      }
   }

   const paymentProcessor = new PaymentProcessor('paypal');
   paymentProcessor.processPayment(100, 'USD');
   paymentProcessor.processPayment(50, 'EUR');
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<User> getActiveUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""SELECT id, username, email FROM users WHERE active = 1"";
            stmt = conn.prepareStatement(sql);
            rs = stmt.executeQuery();
            while (rs.next()) {
                User u = new User();
                u.setId(rs.getInt(""id""));
                u.setUsername(rs.getString(""username""));
                u.setEmail(rs.getString(""email""));
                users.add(u);
            }
        } finally {
            // Missing close for ResultSet and PreparedStatement, potential resource leak
            if (conn != null) {
                conn.close();
            }
        }
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}
",code_defect,resource_leak_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class UserAuthentication {
    private String currentUser;

    public boolean authenticate(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        if (username.equals(""admin"") && password.equals(""123456"")) {
            currentUser = username;
            return true;
        }

        return false;
    }

    public String getCurrentUser() {
        return currentUser;
    }

    public void logout() {
        currentUser = null;
    }

    // TODO: Add more authentication providers
    // TODO: Store credentials securely
}",code_smell,hardcoded_credentials,,qwen/qwen3-32b
JavaScript,"
      class ShoppingCart {
         constructor() {
            this.items = [];
         }

         addItem(item) {
            this.items.push(item);
         }

         removeItem(itemName) {
            for (let i = 0; i < this.items.length; i++) {
               if (this.items[i].name === itemName) {
                  this.items.splice(i, 1);
                  break;
               }
            }
         }

         calculateTotal() {
            let total = 0;
            for (let item of this.items) {
               total += item.price;
            }
            return total;
         }
      }

      class Product {
         constructor(name, price) {
            this.name = name;
            this.price = price;
         }
      }

      let cart = new ShoppingCart();
      cart.addItem(new Product('Product A', 10.99));
      cart.addItem(new Product('Product B', 5.99));
      console.log(cart.calculateTotal());
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
    constructor(pageSize) {
        this.pageSize = pageSize || 10;
        this.currentPage = 0;
    }

    setData(items) {
        this.items = items || [];
    }

    getPage(pageNumber) {
        // Off‑by‑one bug: pageNumber is 1‑based but calculation uses 0‑based index
        const start = (pageNumber - 1) * this.pageSize;
        const end = start + this.pageSize;
        return this.items.slice(start, end);
    }

    next() {
        if ((this.currentPage + 1) * this.pageSize < this.items.length) {
            this.currentPage++;
        }
        return this.getPage(this.currentPage);
    }

    prev() {
        if (this.currentPage > 0) {
            this.currentPage--;
        }
        return this.getPage(this.currentPage);
    }
}

// Example usage
const paginator = new Paginator(5);
paginator.setData([1,2,3,4,5,6,7,8,9,10,11]);
console.log('Page 1:', paginator.getPage(1)); // Expected [1,2,3,4,5] but gets [] due to bug
console.log('Next page:', paginator.next()); // Returns wrong slice
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  processUser(user) {
    if (!user) return;

    const cleanedUser = this._cleanUser(user);
    const normalizedUser = this._normalizeUser(cleanedUser);
    const validatedUser = this._validateUser(normalizedUser);

    this._storeUser(validatedUser);
    this._logUser(validatedUser);
    this._notifyUser(validatedUser);
  }

  _cleanUser(user) {
    return {
      id: user.id,
      name: user.name.trim(),
      email: user.email.toLowerCase().trim()
    };
  }

  _normalizeUser(user) {
    return {
      ...user,
      status: user.status || 'active',
      created: user.created || new Date().toISOString()
    };
  }

  _validateUser(user) {
    if (!user.name || !user.email) {
      throw new Error('User must have a name and email');
    }

    return user;
  }

  _storeUser(user) {
    // Simulated storage logic
    console.log('Storing user:', user);
  }

  _logUser(user) {
    // Simulated logging logic
    console.log('Logging user:', user);
  }

  _notifyUser(user) {
    // Simulated notification logic
    console.log('Notifying user:', user);
  }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i] * 2;
            results_.push_back(value);
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& getResults() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1,2,3,4,5};
    std::thread t([&](){ processor.process(input); });
    t.join();
    for (int v : processor.getResults()) {
        std::cout << v << "" "";
    }
    std::cout << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import os
import json

class ConfigManager:
    def __init__(self, config_file='config.json'):
        self.config_file = config_file
        self.config = self._load_config()

    def _load_config(self):
        if os.path.exists(self.config_file):
            with open(self.config_file, 'r') as f:
                return json.load(f)
        return {}

    def get_config_value(self, key):
        return self.config.get(key)

    def update_config(self, key, value):
        self.config[key] = value
        with open(self.config_file, 'w') as f:
            json.dump(self.config, f)

    def reset_config(self):
        os.remove(self.config_file)
        self.config = self._load_config()

    def __del__(self):
        self.update_config('__last_modified__', 'manual')",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
      class UserManager {
         constructor() {
            this.users = [];
         }

         addUser(user) {
            this.users.push(user);
            return this.users.length - 1;
         }

         removeUser(userId) {
            const index = this.users.findIndex(user => user.id === userId);
            if (index !== -1) {
               this.users.splice(index, 1);
            }
         }

         getUserCount() {
            return this.users.length;
         }
      }

      const userManager = new UserManager();
      userManager.addUser({ id: 1, name: 'John Doe' });
      userManager.addUser({ id: 2, name: 'Jane Doe' });
      console.log(userManager.getUserCount());
   ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    // Loads JSON config file; caches result for subsequent calls
    load() {
        if (this.cache) return this.cache;
        const data = fs.readFileSync(this.path, 'utf8');
        // BUG: JSON.parse can throw, but not caught – leads to uncaught exception
        this.cache = JSON.parse(data);
        return this.cache;
    }
}

function getDatabaseConnection() {
    const cfg = new ConfigLoader('./db_config.json').load();
    // Insecure: directly interpolating credentials into connection string
    const connStr = `postgres://${cfg.user}:${cfg.password}@${cfg.host}:${cfg.port}/${cfg.database}`;
    // Simulated connection object (placeholder)
    return { connectionString: connStr };
}

async function fetchUserData(userId) {
    const db = getDatabaseConnection();
    // BUG: SQL injection vulnerability – userId is concatenated without sanitization
    const query = `SELECT * FROM users WHERE id = ${userId}`;
    // Simulated async DB call
    return new Promise((resolve) => {
        setTimeout(() => resolve({ id: userId, name: 'John Doe' }), 100);
    });
}

module.exports = { ConfigLoader, getDatabaseConnection, fetchUserData };",code_defect,unhandled_exception_and_sql_injection,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    public void processUser(User user) {
        if (user == null) {
            return;
        }

        String username = user.getUsername();
        String email = user.getEmail();
        String role = user.getRole();

        if (role.equals(""ADMIN"")) {
            sendEmail(email, ""Welcome, Admin! Your access has been granted."");
        } else if (role.equals(""MODERATOR"")) {
            sendEmail(email, ""Welcome, Moderator! Your access has been granted."");
        } else {
            sendEmail(email, ""Welcome, User! Your access has been granted."");
        }

        if (username.length() > 20) {
            System.out.println(""Username is too long: "" + username);
        }

        // TODO: Implement password validation
        // setPassword(user, generatePassword());
    }

    private void sendEmail(String email, String message) {
        // Simulated email sending logic
        System.out.println(""Sending email to: "" + email);
        System.out.println(""Message: "" + message);
    }
}",code_smell,long_method,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.users = {}

    def add_user(self, user_id, user_data):
        if user_id not in self.users:
            self.users[user_id] = user_data
        else:
            self.users[user_id].update(user_data)

    def get_user(self, user_id):
        return self.users.get(user_id)

    def save_to_db(self):
        import pickle
        with open(self.db_file, 'wb') as f:
            pickle.dump(self.users, f)

    def load_from_db(self):
        import pickle
        try:
            with open(self.db_file, 'rb') as f:
                self.users = pickle.load(f)
        except FileNotFoundError:
            pass

# usage
user_db = UserDatabase('users.db')
user_db.add_user('user1', {'name': 'John', 'age': 30})
user_db.save_to_db()
user_db.load_from_db()
print(user_db.get_user('user1'))",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Bug: if tasks was empty, task remains 0 and is processed erroneously
            process(task);
        }
    }
    void process(int value) {
        // Simulate work
        std::cout << ""Processing: "" << value << std::endl;
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    dp.addTask(42);
    dp.addTask(7);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}
",code_defect,logic_error_processing_empty_queue,,openai/gpt-oss-120b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  getUserByEmail(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        return this.users[i];
      }
    }
    return null;
  }

  addUser(user) {
    this.users.push(user);
  }

  removeUser(email) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email === email) {
        this.users.splice(i, 1);
        return;
      }
    }
  }

  getUserCount() {
    return this.users.length;
  }

  getAllUsers() {
    return this.users;
  }

  getUserRoles(email) {
    const user = this.getUserByEmail(email);
    return user ? user.roles : [];
  }

  hasRole(email, role) {
    const user = this.getUserByEmail(email);
    return user.roles.includes(role);
  }
}

const userManager = new UserManager();
userManager.addUser({ email: 'alice@example.com', roles: ['admin'] });
userManager.addUser({ email: 'bob@example.com', roles: ['user'] });",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class PaymentProcessor { private static final int MAX_RETRIES = 5; public boolean processPayment(String paymentMethod, double amount) { for (int i = 0; i <= MAX_RETRIES; i++) { try { if (processPaymentInternal(paymentMethod, amount)) { return true; } } catch (Exception e) { System.out.println(""Retrying...""); } } return false; } private boolean processPaymentInternal(String paymentMethod, double amount) { // simulate payment processing delay Thread.sleep(100); return Math.random() < 0.8; } }",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<User> findUsersByRole(String role) throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        // Vulnerable to SQL injection because role is concatenated directly
        String sql = ""SELECT id, username, email FROM users WHERE role = '"" + role + ""'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            User user = new User();
            user.setId(rs.getInt(""id""));
            user.setUsername(rs.getString(""username""));
            user.setEmail(rs.getString(""email""));
            users.add(user);
        }
        rs.close();
        stmt.close();
        conn.close();
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Python,"import os
import json

def load_config(path):
    with open(path, 'r') as f:
        config = json.load(f)
    return config

def process_data(data):
    results = []
    for item in data:
        cleaned_item = item.strip()
        if len(cleaned_item) > 0:
            results.append(cleaned_item.upper())
    return results

def main():
    config = load_config('config.json')
    raw_data_path = config['input_path']

    with open(raw_data_path, 'r') as f:
        raw_data = f.readlines()

    processed_data = process_data(raw_data)

    output_path = config['output_path']
    with open(output_path, 'w') as f:
        for line in processed_data:
            f.write(line + '\n')

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"class UserManager { constructor() { this.users = []; } addUser(user) { if (this.users.push(user) === 1) { console.log('User added successfully'); } } removeUser(userId) { for (let i = 0; i < this.users.length; i++) { if (this.users[i].id === userId) { this.users.splice(i, 1); console.log('User removed successfully'); break; } } } }",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Missing error handling – if file is missing or malformed, JSON.parse will throw and crash the process
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) {
      this.load();
    }
    // Returns undefined silently if key does not exist – caller may assume a value
    return this.cache[key];
  }
}

// Global singleton used throughout the app
const config = new ConfigLoader('/etc/app/config.json');

function initializeService() {
  const port = config.get('servicePort');
  // If servicePort is undefined, server will listen on undefined causing runtime error
  const server = require('http').createServer((req, res) => {
    res.end('OK');
  });
  server.listen(port);
  console.log(`Service started on port ${port}`);
}

initializeService();",code_defect,missing_error_handling,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUserInput(String input) {
        String processedInput = input.trim().toLowerCase();
        if (processedInput.equals(""admin"")) {
            System.out.println(""Access granted."");
        } else {
            System.out.println(""Access denied."");
        }
    }

    public static void main(String[] args) {
        UserProcessor processor = new UserProcessor();
        processor.processUserInput(""Admin"");
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserAccountManager { private Map<String, String> userAccounts = new HashMap<>(); public void addUser(String username, String password) { userAccounts.put(username, password); } public boolean authenticateUser(String username, String password) { String storedPassword = userAccounts.get(username); if (storedPassword != null && storedPassword.equals(password)) { return true; } return false; } public static void main(String[] args) { UserAccountManager manager = new UserAccountManager(); manager.addUser(""john"", ""password123""); System.out.println(manager.authenticateUser(""john"", ""password123"")); } }",code_smell,insecure_password_storage,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user data and writes a report to a file
  async generateUserReport(userId) {
    const user = await this.db.getUserById(userId);
    const orders = await this.db.getOrdersByUserId(userId);
    const report = this._buildReport(user, orders);
    // BUG: Asynchronous write without awaiting, may cause race condition on shutdown
    fs.writeFile('reports/' + userId + '.txt', report, (err) => {
      if (err) console.error('Failed to write report', err);
    });
    return report;
  }

  _buildReport(user, orders) {
    let lines = [];
    lines.push('User Report');
    lines.push('Name: ' + user.name);
    lines.push('Email: ' + user.email);
    lines.push('Orders:');
    // Inefficient loop: concatenates strings inside loop
    for (let i = 0; i < orders.length; i++) {
      lines.push('- Order #' + orders[i].id + ': $' + orders[i].total);
    }
    return lines.join('\n');
  }
}

module.exports = UserService;",code_defect,async_write_without_await_race_condition,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private String databasePassword = ""mySecret123"";

    public void processOrder(String userId, String productId, int quantity) {
        if (quantity <= 0) {
            return;
        }

        try {
            String query = ""SELECT * FROM orders WHERE user_id = '"" + userId + ""' AND product_id = '"" + productId + ""'"";
            // Simulating database connection and query execution
            System.out.println(""Executing query: "" + query);
            if (userId.equals(""admin"")) {
                throw new Exception(""Simulated database error"");
            }
        } catch (Exception e) {
            // Swallowing exception silently
        }
    }
}",code_defect,security_issue,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>

   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };

   class UserRepository {
   public:
       void addUser(User user) { users.push_back(user); }
       User getUser(int index) { return users[index]; }
   private:
       std::vector<User> users;
   };

   int main() {
       UserRepository repo;
       repo.addUser(User(""John"", 30));
       std::cout << repo.getUser(0).getName() << std::endl;
       return 0;
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void deleteAllUsers() {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Dangerous: no WHERE clause, deletes everything
            stmt.executeUpdate(""DELETE FROM users"");
        } catch (Exception e) {
            // Ignored
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,unsafe_sql_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

using namespace std;

class UserProcessor {
public:
    void processUsers(const vector<string>& users) {
        for (const auto& user : users) {
            cout << ""Processing user: "" << user << endl;
            if (user == ""admin"") {
                cout << ""Skipping admin user."" << endl;
                continue;
            }
            string processedUser = user;
            // Legacy code removed
            // processedUser = cleanInput(processedUser);
            processedUser += ""_processed"";
            cout << ""Processed user: "" << processedUser << endl;
        }
    }

private:
    string cleanInput(const string& input) {
        // Simulated input cleaning logic
        return input;
    }
};

int main() {
    UserProcessor processor;
    vector<string> users = {""alice"", ""bob"", ""admin"", ""charlie""};
    processor.processUsers(users);
    return 0;
}",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userDao) {
         this.userDao = userDao;
      }

      async getUsers() {
         const users = await this.userDao.getAllUsers();
         return users.map(user => ({ id: user.id, name: user.name }));
      }

      async getUserById(id) {
         const user = await this.userDao.getUserById(id);
         if (!user) {
            throw new Error('User not found');
         }
         return { id: user.id, name: user.name };
      }
   }

   class UserDao {
      async getAllUsers() {
         // simulate database query
         return [
            { id: 1, name: 'John Doe' },
            { id: 2, name: 'Jane Doe' },
            { id: 3, name: 'Bob Smith' }
         ];
      }

      async getUserById(id) {
         // simulate database query
         const users = await this.getAllUsers();
         return users.find(user => user.id === id);
      }
   }

   const userDao = new UserDao();
   const userService = new UserService(userDao);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""admin123""; // hardcoded credentials

    public List<String> getPendingPayments(int limit) throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT payment_id FROM payments WHERE status='PENDING' LIMIT "" + limit; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""payment_id""));
        }
        // Missing rs.close(), stmt.close(), conn.close()
        return payments;
    }

    public void processPayments() {
        try {
            List<String> pending = getPendingPayments(100);
            for (String pid : pending) {
                // Simulate processing
                updatePaymentStatus(pid, ""COMPLETED"");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updatePaymentStatus(String paymentId, String newStatus) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            String sql = ""UPDATE payments SET status = ? WHERE payment_id = ?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, newStatus);
            stmt.setString(2, paymentId);
            stmt.executeUpdate();
            // Missing stmt.close(), conn.close()
        } catch (SQLException e) {
            // Swallow exception, no handling
        }
    }
}
",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processUserInput(const std::vector<int>& input) {
    std::vector<int> processed;
    for (size_t i = 0; i < input.size(); ++i) {
        int temp = input[i];
        for (size_t j = 0; j < input.size(); ++j) {
            if (i != j) {
                temp += input[j];
            }
        }
        processed.push_back(temp);
    }

    for (int val : processed) {
        std::cout << val << "" "";
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4};
    processUserInput(data);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Java,"public class UserAuthenticator { private static final String DEFAULT_PASSWORD = ""password123""; public boolean authenticate(String username, String password) { if (username.equals(""admin"")) { return password.equals(DEFAULT_PASSWORD); } else { return password.equals(username); } } }",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Simulate processing
            std::cout << ""Processing: "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 0; i < 5; ++i) dp.addTask(i);
    // Missing dp.stop(); leads to thread running forever
    return 0;
}
",code_defect,resource_leak_thread_not_joined,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input, std::vector<int>& output) {
    std::string temp = input;
    for (size_t i = 0; i < temp.length(); ++i) {
        if (temp[i] == ' ') {
            temp.erase(i);
            --i;
        }
    }

    for (size_t i = 0; i < temp.length(); ++i) {
        if (isdigit(temp[i])) {
            output.push_back(temp[i] - '0');
        }
    }
}

int main() {
    std::string input = "" 12a34b56 "";
    std::vector<int> numbers;
    processUserInput(input, numbers);

    std::cout << ""Processed numbers: "";
    for (int num : numbers) {
        std::cout << num << ' ';
    }
    std::cout << std::endl;

    return 0;
}",code_defect,incorrect_conditional_logic,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getUser(id) {
            const user = await this.userRepository.getUser(id);
            if (!user) {
               throw new Error('User not found');
            }
            return user;
         }

         async getUsers() {
            return await this.userRepository.getUsers();
         }

         async createUser(user) {
            if (!user || !user.name || !user.email) {
               throw new Error('Invalid user data');
            }
            return await this.userRepository.createUser(user);
         }
      }

      class UserRepository {
         async getUser(id) {
            // simulate a database query
            return new Promise((resolve) => {
               setTimeout(() => {
                  resolve({ id: 1, name: 'John Doe', email: 'john@example.com' });
               }, 100);
            });
         }

         async getUsers() {
            // simulate a database query
            return new Promise((resolve) => {
               setTimeout(() => {
                  resolve([
                     { id: 1, name: 'John Doe', email: 'john@example.com' },
                     { id: 2, name: 'Jane Doe', email: 'jane@example.com' }
                  ]);
               }, 100);
            });
         }

         async createUser(user) {
            // simulate a database query
            return new Promise((resolve) => {
               setTimeout(() => {
                  resolve(user);
               }, 100);
            });
         }
      }

      const userRepository = new UserRepository();
      const userService = new UserService(userRepository);
      userService.createUser({ name: 'Test User', email: 'test@example.com' }).then((user) => console.log(user));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user data and writes a report file
  async generateUserReport(userId) {
    // Potential race condition: no lock when reading and writing
    const user = await this.db.getUserById(userId);
    const orders = await this.db.getOrdersForUser(userId);
    const report = this._buildReport(user, orders);
    // Insecure: directly using user-provided filename without sanitization
    const filename = `${user.username}_report.txt`;
    fs.writeFileSync('/var/reports/' + filename, report);
    return filename;
  }

  _buildReport(user, orders) {
    let report = `Report for ${user.name}\n`;
    report += 'Orders:\n';
    // Inefficient loop: concatenating strings in a loop
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      report += `- ${order.id}: $${order.amount}\n`;
    }
    return report;
  }
}

module.exports = UserService;",code_defect,insecure_file_write_and_race_condition,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

class DataProcessor {
public:
    void process(const vector<string>& input) {
        for (const auto& line : input) {
            if (line.length() > 100) {
                cout << ""Skipping line: "" << line << endl;
            } else {
                processLine(line);
            }
        }
    }

private:
    void processLine(const string& line) {
        // Do some processing
        if (line.empty()) {
            return;
        }

        for (char c : line) {
            if (isalpha(c)) {
                cout << c << endl;
            }
        }
    }
};

int main() {
    vector<string> data = {""Valid line 1"", ""a""};
    DataProcessor processor;
    processor.process(data);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <algorithm>

      class Employee {
      public:
         Employee(std::string name, int salary) : name(name), salary(salary) {}

         std::string getName() { return name; }
         int getSalary() { return salary; }

      private:
         std::string name;
         int salary;
      };

      void sortEmployees(std::vector<Employee>& employees) {
         std::sort(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
            return a.getSalary() < b.getSalary();
         });
      }

      int main() {
         std::vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
         sortEmployees(employees);

         for (const auto& employee : employees) {
            std::cout << employee.getName() << "" - "" << employee.getSalary() << std::endl;
         }

         return 0;
      }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserCache {
  constructor(filePath) {
    this.filePath = filePath;
    this.cache = {};
    this.load();
  }

  load() {
    const data = fs.readFileSync(this.filePath, 'utf8');
    // Assume file contains JSON object mapping userId to user data
    this.cache = JSON.parse(data);
  }

  getUser(id) {
    // Missing check for undefined leads to crash when id not present
    return this.cache[id];
  }

  updateUser(id, userData) {
    this.cache[id] = userData;
    // Asynchronously write but not waiting for completion; possible race condition
    fs.writeFile(this.filePath, JSON.stringify(this.cache), (err) => {
      if (err) console.error('Failed to write cache');
    });
  }
}

// Global singleton used across modules
const userCache = new UserCache('/etc/app/users.json');

function handleRequest(req, res) {
  const userId = req.query.id;
  const user = userCache.getUser(userId);
  if (!user) {
    res.status(404).send('User not found');
    return;
  }
  // Perform some operation that may throw
  try {
    const result = performSensitiveOperation(user);
    res.send(result);
  } catch (e) {
    // Swallowing error, client gets no indication
    console.error(e);
    res.status(500).end();
  }
}

function performSensitiveOperation(user) {
  // Vulnerable to prototype pollution via user.role
  if (user.role === 'admin') {
    return execSync('rm -rf /important/data'); // Dangerous command execution
  }
  return 'Operation completed';
}

module.exports = { handleRequest, userCache };",code_defect,security_risk,,openai/gpt-oss-120b
Python,"import os
import subprocess

def execute_shell_command(command):
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    
    if process.returncode != 0:
        print(f""Error: {stderr.decode('utf-8')}"")
    else:
        print(stdout.decode('utf-8'))

    return stdout


def main():
    user_input = input(""Enter a command to execute: "")
    execute_shell_command(user_input)

if __name__ == ""__main__"":
    main()",code_defect,command_injection,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>

class BankAccount {
private:
    double balance;
public:
    BankAccount(double initialBalance) : balance(initialBalance) {}
    void deposit(double amount) { balance += amount; }
    void withdraw(double amount) { balance -= amount; }
    double getBalance() { return balance; }
};

int main() {
    BankAccount account(1000.0);
    account.deposit(500.0);
    std::cout << ""Balance: "" << account.getBalance() << std::endl;
    return 0;
}",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<Transaction> fetchPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction t = new Transaction();
            t.setId(rs.getInt(""id""));
            t.setAmount(rs.getDouble(""amount""));
            t.setStatus(rs.getString(""status""));
            list.add(t);
        }
        rs.close();
        stmt.close();
        conn.close();
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = fetchPendingTransactions();
            for (Transaction tx : pending) {
                // Simulate processing
                if (tx.getAmount() < 0) {
                    // Negative amount should be rejected, but logic mistakenly credits the account
                    creditAccount(tx.getId(), Math.abs(tx.getAmount()));
                } else {
                    debitAccount(tx.getId(), tx.getAmount());
                }
                updateStatus(tx.getId(), ""COMPLETED"");
            }
        } catch (SQLException e) {
            // Swallow exception, no logging
        }
    }

    private void debitAccount(int txId, double amount) {
        // Placeholder for debit logic
    }

    private void creditAccount(int txId, double amount) {
        // Placeholder for credit logic
    }

    private void updateStatus(int txId, String status) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = ""UPDATE transactions SET status='"" + status + ""' WHERE id="" + txId; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        stmt.close();
        conn.close();
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,logic_error_and_security_flaw,,openai/gpt-oss-120b
JavaScript,"function processOrders(orders) {
  let results = [];
  for (let i = 0; i < orders.length; i++) {
    let order = orders[i];
    let status = '';
    if (order.total > 100) {
      status = 'premium';
    } else {
      status = 'standard';
    }

    let processedOrder = {
      id: order.id,
      items: order.items,
      total: order.total,
      status: status
    };
    results.push(processedOrder);
  }
  return results;
}

// Unused function
function calculateDiscount(price) {
  return price * 0.9;
}

// Legacy commented-out code
// function sendNotification(message) {
//   console.log(message);
// }",code_smell,dead_code,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, user_data):
        query = ""UPDATE users SET name = '"" + user_data['name'] + ""', email = '"" + user_data['email'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()
",code_defect,SQL Injection Vulnerability,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&LogProcessor::process, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void enqueue(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        queue.push_back(msg);
    }
private:
    void process() {
        while (!stopFlag) {
            std::string msg;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!queue.empty()) {
                    msg = queue.back(); // BUG: should use front()
                    queue.pop_back();
                }
            }
            if (!msg.empty()) {
                // Simulate heavy processing
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                std::cout << ""Processed: "" << msg << std::endl;
            }
        }
    }
    std::vector<std::string> queue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogProcessor lp;
    lp.start();
    for (int i = 0; i < 5; ++i) {
        lp.enqueue(""msg"" + std::to_string(i));
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    lp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
JavaScript,"class UserValidator {
  constructor(userData) {
    this.userData = userData;
  }

  validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  validatePassword(password) {
    return password.length >= 8;
  }

  validateUserData() {
    if (!this.validateEmail(this.userData.email)) {
      return 'Invalid email';
    }

    if (!this.validatePassword(this.userData.password)) {
      return 'Password must be at least 8 characters';
    }

    if (!this.userData.firstName || !this.userData.lastName) {
      return 'First and last names are required';
    }

    return 'Valid';
  }
}

const user = new UserValidator({
  email: 'test@example.com',
  password: '12345678',
  firstName: 'John',
  lastName: 'Doe'
});

console.log(user.validateUserData());",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

    void setName(std::string name) { this->name = name; }
    void setAge(int age) { this->age = age; }

private:
    std::string name;
    int age;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) {
        employees.push_back(employee);
    }

    Employee getOldestEmployee() {
        if (employees.empty()) {
            return Employee("""", 0);
        }

        Employee oldest = employees[0];
        for (int i = 1; i < employees.size(); i++) {
            if (employees[i].getAge() > oldest.getAge()) {
                oldest = employees[i];
            }
        }
        return oldest;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 30));
    manager.addEmployee(Employee(""Alice"", 25));
    manager.addEmployee(Employee(""Bob"", 40));

    Employee oldest = manager.getOldestEmployee();
    std::cout << ""Oldest Employee: "" << oldest.getName() << std::endl;
    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a report to a file
    generateUserReport(userId) {
        // Fetch user
        const user = this.db.query(`SELECT * FROM users WHERE id = ${userId}`);
        // Fetch orders (inefficient: separate query per order)
        const orders = [];
        for (let i = 0; i < user.orderIds.length; i++) {
            const order = this.db.query(`SELECT * FROM orders WHERE id = ${user.orderIds[i]}`);
            orders.push(order);
        }
        // Build report string
        let report = `Report for ${user.name}\n`;
        for (let i = 0; i < orders.length; i++) {
            report += `Order ${i + 1}: ${orders[i].total}\n`;
        }
        // Write to file (hardcoded path, no error handling)
        fs.writeFileSync('/var/reports/user_report.txt', report);
        return report;
    }
}

module.exports = UserService;",code_smell,inefficient_queries_and_hardcoded_path,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrders(List<Order> orders) {
        for (Order order : orders) {
            if (order != null && order.getStatus() == OrderStatus.PENDING) {
                double total = 0;
                for (OrderItem item : order.getItems()) {
                    if (item != null) {
                        total += item.getPrice() * item.getQuantity();
                    }
                }
                if (total > 0) {
                    applyDiscount(order, total);
                    updateInventory(order);
                    sendConfirmationEmail(order);
                }
            }
        }
    }

    private void applyDiscount(Order order, double total) {
        // hardcoded discount without validation or configuration
        double discountedTotal = total * 0.9;
        order.setTotal(discountedTotal);
    }

    private void updateInventory(Order order) {
        for (OrderItem item : order.getItems()) {
            Item inventoryItem = getItemFromInventory(item.getItemId());
            if (inventoryItem != null) {
                inventoryItem.setStock(inventoryItem.getStock() - item.getQuantity());
            }
        }
    }

    private void sendConfirmationEmail(Order order) {
        // stub for email sending logic
    }

    private Item getItemFromInventory(String itemId) {
        // stub for fetching item from inventory
        return new Item();
    }
}",code_smell,feature envy,,qwen/qwen3-32b
Python,"class UserDatabase:
    def __init__(self, db_file):
        self.db_file = db_file
        self.connection = None
    
    def connect(self):
        import sqlite3
        self.connection = sqlite3.connect(self.db_file)
    
    def get_user(self, user_id):
        if self.connection is None:
            self.connect()
        cursor = self.connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
        return cursor.fetchone()
    
    def update_user(self, user_id, new_data):
        if self.connection is None:
            self.connect()
        cursor = self.connection.cursor()
        cursor.execute('UPDATE users SET name = ?, email = ? WHERE id = ?', (new_data['name'], new_data['email'], user_id))
        self.connection.commit()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void startProcessing() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stopProcessing() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addData(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        dataQueue.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int value = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!dataQueue.empty()) {
                    value = dataQueue.back(); // BUG: should pop_front, but uses back without removal
                }
            }
            // Simulate processing
            std::cout << ""Processing: "" << value << std::endl;
            std::this_thread::sleep_for(std::chrono::milliseconds(10));
        }
    }
    std::vector<int> dataQueue;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor proc;
    proc.startProcessing();
    for (int i = 0; i < 5; ++i) {
        proc.addData(i);
    }
    std::this_thread::sleep_for(std::chrono::seconds(1));
    proc.stopProcessing();
    return 0;
}
",code_defect,logic_error_deadlock,,openai/gpt-oss-120b
Python,"import os
import json

def load_config(config_path):
    with open(config_path, 'r') as f:
        config = json.load(f)
    return config

def process_user_data(user_data):
    if 'username' not in user_data:
        return None
    if user_data['username'].startswith('admin'):
        user_data['role'] = 'admin'
    elif user_data['username'].startswith('guest'):
        user_data['role'] = 'guest'
    else:
        user_data['role'] = 'user'
    return user_data

def main():
    config = load_config('config.json')
    user_data = {
        'username': os.environ.get('USER_NAME', 'default_user')
    }
    processed_data = process_user_data(user_data)
    print(processed_data)

if __name__ == '__main__':
    main()",code_defect,missing_error_handling,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor() {
         this.users = [];
      }

      async addUser(user) {
         this.users.push(user);
         return this.users;
      }

      async getUsers() {
         return this.users;
      }
   }

   class UserController {
      constructor(userService) {
         this.userService = userService;
      }

      async handleGetUsers(req, res) {
         const users = await this.userService.getUsers();
         res.json(users);
      }

      async handleAddUser(req, res) {
         const user = req.body;
         const users = await this.userService.addUser(user);
         res.json(users);
      }
   }

   const userService = new UserService();
   const userController = new UserController(userService);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception, return partial results
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,hardcoded_credentials_and_sql_injection_vulnerability,,openai/gpt-oss-120b
Python,"import requests

class DataProcessor:
    def __init__(self):
        self.base_url = 'https://api.example.com/data'
        self.auth_token = 'mysecretpassword123'

    def fetch_and_process_data(self, user_id, limit=100):
        headers = {'Authorization': f'Bearer {self.auth_token}'}
        params = {'user_id': user_id, 'limit': limit}
        response = requests.get(self.base_url, headers=headers, params=params)
        data = response.json()

        processed = []
        for item in data:
            processed_item = {
                'id': item['id'],
                'name': item['name'],
                'score': item.get('score', 0) * 1.5
            }
            processed.append(processed_item)

        return processed

    def batch_process_users(self, user_ids):
        results = []
        for user_id in user_ids:
            res = self.fetch_and_process_data(user_id)
            results.extend(res)
        return results",code_smell,hardcoded_credential,,qwen/qwen3-32b
Java,"public class UserProcessor { private static final int MAX_USERS = 1000; public void processUsers(List<User> users) { for (int i = 0; i < users.size(); i++) { User user = users.get(i); if (user.isActive()) { // Perform some action System.out.println(user.getName()); } } } public static void main(String[] args) { UserProcessor processor = new UserProcessor(); List<User> users = new ArrayList<>(); for (int i = 0; i < MAX_USERS; i++) { users.add(new User(""User "" + i, true)); } processor.processUsers(users); } } class User { private String name; private boolean active; public User(String name, boolean active) { this.name = name; this.active = active; } public String getName() { return name; } public boolean isActive() { return active; } }",code_smell,unused_imports_and_dead_code,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String DB_USER = ""app_user"";
    private static final String DB_PASS = ""password123""; // hardcoded secret

    public List<User> findUsersByName(String name) throws SQLException {
        List<User> users = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        // Vulnerable to SQL injection
        String sql = ""SELECT id, username, email FROM users WHERE username = '"" + name + ""'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            User user = new User();
            user.setId(rs.getInt(""id""));
            user.setUsername(rs.getString(""username""));
            user.setEmail(rs.getString(""email""));
            users.add(user);
        }
        rs.close();
        stmt.close();
        conn.close();
        return users;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor(users, sessionStore) {
    this.users = users;
    this.sessionStore = sessionStore;
  }

  authenticateUser(username, password) {
    const user = this.users.find(u => u.username === username);

    if (!user) {
      return 'Invalid credentials';
    }

    if (user.password === password) {
      this.sessionStore[user.id] = true;
      return 'Login successful';
    }

    return 'Invalid credentials';
  }

  logoutUser(userId) {
    delete this.sessionStore[userId];
  }

  resetPassword(userId, newPassword) {
    const user = this.users.find(u => u.id === userId);

    if (!user) {
      return 'User not found';
    }

    user.password = newPassword;
    return 'Password reset successful';
  }
}

const users = [
  { id: 1, username: 'alice', password: 'password123' },
  { id: 2, username: 'bob', password: 'securepass' }
];

const sessionStore = {};

const auth = new UserAuth(users, sessionStore);
console.log(auth.authenticateUser('alice', 'password123'));
console.log(auth.resetPassword(1, 'newpassword123'));
console.log(auth.logoutUser(1));",code_defect,insecure_data_handling,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, new_data):
        query = ""UPDATE users SET name = '"" + new_data['name'] + ""', email = '"" + new_data['email'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()

# Example usage:
# db_connection = establish_database_connection()
# user_service = UserService(db_connection)
# user_service.update_user(1, {'name': 'John Doe', 'email': 'johndoe@example.com'})
",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
        this.cache = {};
    }

    // Loads user data and caches it, but never clears cache
    getUserById(id) {
        if (this.cache[id]) {
            return Promise.resolve(this.cache[id]);
        }
        return this.db.query('SELECT * FROM users WHERE id = ' + id)
            .then(rows => {
                const user = rows[0];
                this.cache[id] = user; // cache grows unbounded
                return user;
            });
    }

    // Updates user but does not invalidate cache
    updateUser(id, data) {
        const fields = Object.keys(data).map(key => `${key}='${data[key]}'`).join(',');
        return this.db.execute(`UPDATE users SET ${fields} WHERE id = ${id}`)
            .then(() => {
                // missing: delete this.cache[id];
                return true;
            });
    }

    // Very large method handling multiple responsibilities
    importUsersFromCsv(filePath) {
        const content = fs.readFileSync(filePath, 'utf8');
        const lines = content.split('\n');
        const promises = [];
        for (let i = 1; i < lines.length; i++) { // skips header
            const [name, email, age] = lines[i].split(',');
            if (!email) continue; // ignore malformed lines
            const user = { name, email, age: parseInt(age, 10) };
            const p = this.db.execute(`INSERT INTO users (name, email, age) VALUES ('${user.name}', '${user.email}', ${user.age})`)
                .then(() => this.getUserById(this.db.lastInsertId()))
                .then(insertedUser => {
                    // send welcome email (side effect inside data layer)
                    this.sendWelcomeEmail(insertedUser);
                })
                .catch(err => {
                    console.error('Failed to import user:', err);
                });
            promises.push(p);
        }
        return Promise.all(promises);
    }

    sendWelcomeEmail(user) {
        // placeholder for email service
        console.log(`Sending welcome email to ${user.email}`);
    }
}

module.exports = UserService;",code_smell,unbounded_cache_and_missing_cache_invalidation,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    const processedUsers = [];
    for (let i = 0; i < this.users.length; i++) {
      const user = this.users[i];
      if (user.active) {
        const newUser = {
          id: user.id,
          name: user.name,
          email: user.email,
          role: user.role ? user.role.toUpperCase() : 'GUEST'
        };
        processedUsers.push(newUser);
      }
    }
    return processedUsers;
  }

  sendEmails(emailContent) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].email) {
        // Simulate email sending
        console.log(`Email sent to ${this.users[i].email}`);
      }
    }
  }

  // Legacy code for backward compatibility
  // updateUserRole(user, role) {
  //   user.role = role;
  // }
}

const userProcessor = new UserProcessor([
  { id: 1, name: 'Alice', email: 'alice@example.com', active: true, role: 'admin' },
  { id: 2, name: 'Bob', email: 'bob@example.com', active: false, role: 'user' },
  { id: 3, name: 'Charlie', email: 'charlie@example.com', active: true }
]);

userProcessor.processUsers();
userProcessor.sendEmails('Welcome message');",code_smell,large_class,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>
   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };
   class UserRepository {
   public:
       void addUser(User user) { users.push_back(user); }
       User getUser(int index) { return users[index]; }
   private:
       std::vector<User> users;
   };
   int main() {
       UserRepository repo;
       repo.addUser(User(""John"", 30));
       std::cout << repo.getUser(0).getName() << std::endl;
       return 0;
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getPendingPayments() throws SQLException {
        List<String> payments = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id FROM payments WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            payments.add(rs.getString(""id""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return payments;
    }

    public void processPayments() {
        try {
            List<String> pending = getPendingPayments();
            for (String paymentId : pending) {
                // Simulate processing
                if (paymentId.startsWith(""A"")) {
                    // Incorrectly update status using string concatenation -> SQL injection risk
                    String updateSql = ""UPDATE payments SET status='COMPLETED' WHERE id='"" + paymentId + ""'"";
                    executeUpdate(updateSql);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void executeUpdate(String sql) throws SQLException {
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.executeUpdate();
        stmt.close();
        conn.close();
    }
}
",code_defect,sql_injection_via_string_concatenation,,openai/gpt-oss-120b
Java,"public class UserAuthenticator {

    private String[] validUsers = {""admin"", ""user123""};
    private String[] validPasswords = {""securepass"", ""p@ssw0rd""};

    public boolean authenticate(String username, String password) {
        for (int i = 0; i < validUsers.length; i++) {
            if (validUsers[i].equals(username)) {
                if (validPasswords[i].equals(password)) {
                    return true;
                } else {
                    return false;
                }
            }
        }
        return false;
    }

    public void logUserIn(String username) {
        System.out.println(""User "" + username + "" logged in."");
        // TODO: Add session management and logging
    }

    public static void main(String[] args) {
        UserAuthenticator auth = new UserAuthenticator();
        if (auth.authenticate(""admin"", ""securepass"")) {
            auth.logUserIn(""admin"");
        }
    }
}",code_smell,data_clump,,qwen/qwen3-32b
JavaScript,"class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getUser(id) { let user = await this.userRepository.findById(id); if (!user) { user = { id, name: 'Default User' }; } return user; } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');
const path = require('path');

class ConfigLoader {
  constructor(configDir) {
    this.configDir = configDir;
    this.cache = {};
  }

  // Loads a JSON config file and caches it
  loadConfig(name) {
    const filePath = path.join(this.configDir, `${name}.json`);
    // Asynchronously read file but forget to await, returning a Promise instead of the parsed object
    const dataPromise = fs.promises.readFile(filePath, 'utf8');
    const parsed = JSON.parse(dataPromise);
    this.cache[name] = parsed;
    return parsed;
  }

  getConfig(name) {
    if (this.cache[name]) {
      return this.cache[name];
    }
    return this.loadConfig(name);
  }
}

// Usage example
const loader = new ConfigLoader('./config');
const dbConfig = loader.getConfig('database');
console.log('Database host:', dbConfig.host);
",code_defect,async_handling_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUser(User user, String action) {
        if (action.equals(""approve"")) {
            user.setStatus(""APPROVED"");
            sendNotification(user.getEmail(), ""Your account has been approved."");
        } else if (action.equals(""reject"")) {
            user.setStatus(""REJECTED"");
            sendNotification(user.getEmail(), ""Your account has been rejected."");
        } else {
            // No action
        }
    }

    private void sendNotification(String email, String message) {
        EmailService emailService = new EmailService();
        emailService.send(email, message);
    }

    private static class EmailService {
        public void send(String email, String message) {
            // Simulated email sending logic
        }
    }

    private static class User {
        private String email;
        private String status;

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }
    }
}",code_smell,type_switch_smell,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

    void setName(std::string name) { this->name = name; }
    void setSalary(int salary) { this->salary = salary; }

private:
    std::string name;
    int salary;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }

    Employee getEmployeeWithHighestSalary() {
        if (employees.empty()) {
            return Employee("""", 0);
        }

        Employee highestPaidEmployee = employees[0];
        for (int i = 1; i < employees.size(); i++) {
            if (employees[i].getSalary() > highestPaidEmployee.getSalary()) {
                highestPaidEmployee = employees[i];
            }
        }
        return highestPaidEmployee;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John Doe"", 50000));
    manager.addEmployee(Employee(""Jane Doe"", 60000));

    Employee highestPaid = manager.getEmployeeWithHighestSalary();
    std::cout << ""Highest paid employee: "" << highestPaid.getName() << "" with salary: "" << highestPaid.getSalary() << std::endl;

    return 0;
}
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import threading
import time

class ConfigLoader:
    def __init__(self, path):
        self.path = path
        self._config = None
        self._load_lock = threading.Lock()
        self._load_config()

    def _load_config(self):
        # NOTE: No error handling; assumes file exists and is valid JSON
        with open(self.path, 'r') as f:
            self._config = json.load(f)

    def get(self, key, default=None):
        return self._config.get(key, default)

class DataProcessor:
    def __init__(self, config_path):
        self.config = ConfigLoader(config_path)
        self.results = []
        self._stop_event = threading.Event()
        self.worker = threading.Thread(target=self._process_loop)
        self.worker.start()

    def _process_loop(self):
        while not self._stop_event.is_set():
            # Simulate fetching data
            data = self._fetch_data()
            if data:
                processed = self._process_data(data)
                self.results.append(processed)
            time.sleep(1)

    def _fetch_data(self):
        # Placeholder for real data fetch; returns None occasionally
        return os.urandom(16)

    def _process_data(self, data):
        # Intentional bug: using mutable default argument
        return self._complex_transform(data, cache={})

    def _complex_transform(self, data, cache={}):
        # Very naive caching that never clears, leading to memory leak
        if data in cache:
            return cache[data]
        # Simulate expensive computation
        result = sum(b for b in data) % 256
        cache[data] = result
        return result

    def stop(self):
        self._stop_event.set()
        self.worker.join()

if __name__ == ""__main__"":
    processor = DataProcessor('config.json')
    try:
        time.sleep(5)
    finally:
        processor.stop()
        print('Processed results:', processor.results)",code_defect,mutable_default_argument_and_memory_leak,,openai/gpt-oss-120b
Python,"import os
import time

def process_user_data(user_id, user_data):
    
    if not user_data:
        return None

    final_data = []
    for i in range(len(user_data)):
        temp = user_data[i].copy()
        temp['id'] = user_id
        temp['ts'] = int(time.time())
        final_data.append(temp)

    # Legacy code - commented out due to performance issues
    # final_data = [x for x in final_data if x['value'] > 0]
    
    # Additional processing
    for item in final_data:
        if item['status'] == 'active':
            item['value'] *= 1.2
        elif item['status'] == 'inactive':
            item['value'] *= 0.8

    return final_data

# Example usage
data = [{'status': 'active', 'value': 100}, {'status': 'inactive', 'value': 50}]
print(process_user_data(123, data))",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
      class UserDatabase {
         constructor() {
            this.users = [];
         }

         async loadUsersFromDatabase() {
            const dbResponse = await fetch('/users');
            const usersData = await dbResponse.json();
            this.users = usersData.map(user => ({ id: user.id, name: user.name }));
         }

         getUser(id) {
            return this.users.find(user => user.id === id);
         }
      }

      async function main() {
         const db = new UserDatabase();
         await db.loadUsersFromDatabase();
         console.log(db.getUser(1));
      }

      main();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    loadConfig() {
        // Asynchronously read file but return before it's ready
        fs.readFile(this.path, 'utf8', (err, data) => {
            if (err) throw err;
            this.cache = JSON.parse(data);
        });
        return this.cache; // Returns null the first time
    }
}

function initializeApp() {
    const loader = new ConfigLoader('./config.json');
    const config = loader.loadConfig();
    // Use config immediately assuming it's loaded
    if (config.enableFeature) {
        startFeature();
    }
}

function startFeature() {
    console.log('Feature started');
}

initializeApp();",code_defect,async_initialization_race_condition,,openai/gpt-oss-120b
Python,"import os
import json

def process_user_data(data):
    user = data.get('user')
    if not user:
        return
    user_id = user.get('id')
    name = user.get('name')
    email = user.get('email')

    if user_id is None or name is None or email is None:
        return

    user_data = {
        'id': user_id,
        'name': name,
        'email': email,
        'active': True
    }

    if data.get('preferences'):
        user_data['preferences'] = data['preferences']

    if data.get('meta'):
        user_data['meta'] = data['meta']

    return user_data


def save_user_to_db(user_data):
    db_path = os.path.join('db', 'users.json')

    if not os.path.exists('db'):
        os.makedirs('db')

    with open(db_path, 'w') as f:
        json.dump(user_data, f, indent=2)


def main():
    raw_data = {
        'user': {
            'id': 123,
            'name': 'Alice',
            'email': 'alice@example.com'
        },
        'preferences': {
            'theme': 'dark',
            'language': 'en'
        }
    }

    processed_data = process_user_data(raw_data)
    if processed_data:
        save_user_to_db(processed_data)

if __name__ == '__main__':
    main()",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
      class PaymentProcessor {
         constructor() {
            this.payments = [];
         }

         addPayment(payment) {
            this.payments.push(payment);
         }

         processPayments() {
            for (let i = 0; i < this.payments.length; i++) {
               const payment = this.payments[i];
               if (payment.amount > 0) {
                  // simulate payment processing
                  console.log(`Processing payment of $${payment.amount} for ${payment.description}`);
               }
            }
         }
      }

      const processor = new PaymentProcessor();
      processor.addPayment({ amount: 100, description: 'Test Payment' });
      processor.addPayment({ amount: 200, description: 'Another Test Payment' });
      processor.processPayments();
   ",code_smell,inefficient_data_structure,,llama-3.3-70b-versatile
JavaScript,"class OrderProcessor {
  constructor(db) {
    this.db = db;
  }

  // Processes an order and returns a promise that resolves to the order ID
  async processOrder(order) {
    // Validate order fields
    if (!order.userId || !order.items || order.items.length === 0) {
      throw new Error('Invalid order');
    }

    // Insert order record
    const result = await this.db.query('INSERT INTO orders (user_id, total) VALUES (?, ?)', [order.userId, this._calculateTotal(order.items)]);
    const orderId = result.insertId;

    // Insert each item – BUG: uses async inside forEach, which doesn't wait for completion
    order.items.forEach(async (item) => {
      await this.db.query('INSERT INTO order_items (order_id, product_id, qty) VALUES (?, ?, ?)', [orderId, item.productId, item.qty]);
    });

    // Return order ID immediately, before items are saved
    return orderId;
  }

  _calculateTotal(items) {
    return items.reduce((sum, i) => sum + i.price * i.qty, 0);
  }
}

module.exports = OrderProcessor;",code_defect,async_forEach_logic_error,,openai/gpt-oss-120b
Python,"import os
import subprocess

def execute_command(cmd, env_vars=None):
    if env_vars:
        env = os.environ.copy()
        env.update(env_vars)
    else:
        env = os.environ
    
    process = subprocess.Popen(cmd, env=env, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    
    if process.returncode != 0:
        raise Exception(f""Command failed: {cmd} \nError: {stderr.decode()}"")
    
    return stdout.decode()


def deploy_app():
    execute_command('npm install', {'NODE_ENV': 'production'})
    execute_command('npm run build')
    execute_command('docker build -t myapp:latest .')
    execute_command('docker run -d -p 80:80 myapp:latest')

if __name__ == ""__main__"":
    deploy_app()",code_defect,security_vulnerability,,qwen/qwen3-32b
Python,"
class OrderProcessor:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def process_order(self, order_id):
        order_data = self.db_connection.get_order(order_id)
        if order_data:
            total_cost = 0
            for item in order_data['items']:
                total_cost += item['price'] * item['quantity']
            self.db_connection.update_order_total(order_id, total_cost)
            return True
        return False

    def get_order_status(self, order_id):
        order_data = self.db_connection.get_order(order_id)
        if order_data:
            return order_data['status']
        return 'Order not found'

class DatabaseConnection:
    def __init__(self, host, username, password):
        self.host = host
        self.username = username
        self.password = password

    def get_order(self, order_id):
        # Simulating a database query
        orders = {
            1: {'items': [{'price': 10.99, 'quantity': 2}, {'price': 5.99, 'quantity': 1}], 'status': 'pending'},
            2: {'items': [{'price': 7.99, 'quantity': 3}, {'price': 3.99, 'quantity': 2}], 'status': 'shipped'}
        }
        return orders.get(order_id)

    def update_order_total(self, order_id, total_cost):
        # Simulating a database update
        orders = {
            1: {'items': [{'price': 10.99, 'quantity': 2}, {'price': 5.99, 'quantity': 1}], 'status': 'pending', 'total': total_cost},
            2: {'items': [{'price': 7.99, 'quantity': 3}, {'price': 3.99, 'quantity': 2}], 'status': 'shipped'}
        }
        orders[order_id]['total'] = total_cost

db_connection = DatabaseConnection('localhost', 'username', 'password')
order_processor = OrderProcessor(db_connection)
order_processor.process_order(1)
print(order_processor.get_order_status(1))
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(configPath) {
    this.configPath = configPath;
    this.cache = null;
  }

  // Loads config JSON from file; caches result
  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.configPath, 'utf8');
    // BUG: JSON.parse can throw, but not caught – leads to crash on malformed config
    this.cache = JSON.parse(data);
    return this.cache;
  }

  // Reloads config, ignoring cache
  reload() {
    this.cache = null;
    return this.load();
  }
}

// Example usage in a server initialization
function initServer() {
  const loader = new ConfigLoader('/etc/app/config.json');
  const config = loader.load();
  const port = config.port || 3000;
  const server = require('http').createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('Server running');
  });
  server.listen(port);
  console.log(`Server listening on port ${port}`);
}

initServer();",code_defect,unhandled_exception,,openai/gpt-oss-120b
Python,"import os
import json

def process_config(config_path='config.json'):
    with open(config_path, 'r') as f:
        config = json.load(f)

    if 'database' in config:
        db_config = config['database']
        if 'host' in db_config:
            os.environ['DB_HOST'] = db_config['host']
        if 'user' in db_config:
            os.environ['DB_USER'] = db_config['user']
        if 'password' in db_config:
            os.environ['DB_PASSWORD'] = db_config['password']

    return config

config = process_config()
print('Configuration processed.')",code_smell,hardcoded_configuration,,qwen/qwen3-32b
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""P@ssw0rd123""; // hardcoded secret

    public boolean processPayment(String accountId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            conn.setAutoCommit(false);
            // Update account balance
            PreparedStatement updateStmt = conn.prepareStatement(
                ""UPDATE accounts SET balance = balance - ? WHERE account_id = ?"");
            updateStmt.setDouble(1, amount);
            updateStmt.setString(2, accountId);
            int rows = updateStmt.executeUpdate();
            // Insert transaction record
            PreparedStatement insertStmt = conn.prepareStatement(
                ""INSERT INTO transactions (account_id, amount) VALUES (?, ?)"");
            insertStmt.setString(1, accountId);
            insertStmt.setDouble(2, amount);
            insertStmt.executeUpdate();
            // Missing check for rows == 0 leads to silent failure
            conn.commit();
            return true;
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ex) {}
            return false;
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException e) {}
        }
    }

    // Unused method, dead code
    private void logTransaction(String accountId, double amount) {
        // TODO: implement logging
    }
}
",code_defect,missing_validation_of_update_result,,openai/gpt-oss-120b
Python,"import requests
import json
import time

class UserAPI:
    def __init__(self):
        self.base_url = 'https://api.example.com/v1/users'
        self.token = 'abc123supersecret'

    def get_user(self, user_id):
        url = f'{self.base_url}/{user_id}'
        headers = {'Authorization': f'Bearer {self.token}'}
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            return json.loads(response.text)
        else:
            print('Error fetching user data')
            return None

    def update_user(self, user_id, data):
        url = f'{self.base_url}/{user_id}'
        headers = {'Authorization': f'Bearer {self.token}'}
        response = requests.patch(url, headers=headers, json=data)
        if response.status_code == 200:
            return True
        else:
            print('Error updating user data')
            return False

    def get_all_users(self):
        response = requests.get(self.base_url)
        if response.status_code == 200:
            return json.loads(response.text)
        else:
            return []

    def get_user_emails(self):
        users = self.get_all_users()
        emails = []
        for user in users:
            emails.append(user.get('email', ''))
        return emails

    def log_user_emails(self):
        emails = self.get_user_emails()
        for email in emails:
            print(f""Email: {email}"")
            time.sleep(0.5)

if __name__ == '__main__':
    api = UserAPI()
    api.log_user_emails()",code_defect,insecure_hardcoded_secrets,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getAllUsers() { let users = await this.userRepository.findAll(); users.forEach(user => { if (user.role === 'admin') { user.role = 'superuser'; } }); return users; } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = {};
    }

    load() {
        // Reads JSON config file synchronously each call
        const data = fs.readFileSync(this.path, 'utf8');
        const config = JSON.parse(data);
        // Merge with cached values, but cache never updated -> stale data
        return Object.assign({}, this.cache, config);
    }

    get(key) {
        const cfg = this.load();
        return cfg[key];
    }
}

// Usage in server initialization
function initServer() {
    const loader = new ConfigLoader('./config.json');
    const port = loader.get('port') || 3000;
    const server = require('http').createServer((req, res) => {
        // Simple routing
        if (req.url === '/status') {
            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ status: 'ok' }));
        } else {
            res.writeHead(404);
            res.end();
        }
    });
    server.listen(port);
    console.log(`Server listening on port ${port}`);
}

initServer();",code_defect,stale_configuration_due_to_missing_cache_update,,openai/gpt-oss-120b
Python,"import requests

API_URL = 'https://api.example.com/data'

def fetch_and_process_data():
    response = requests.get(API_URL)
    if response.status_code == 200:
        data = response.json()
        processed_data = []
        for item in data:
            if 'id' in item and 'name' in item:
                processed_item = {
                    'id': item['id'],
                    'full_name': f""{item['name']} - fetched at {datetime.now()}""
                }
                processed_data.append(processed_item)
        return processed_data
    else:
        print('Failed to fetch data')
        return None

# Unused function
def calculate_average(numbers):
    return sum(numbers) / len(numbers) if numbers else 0

# Example usage
def main():
    data = fetch_and_process_data()
    if data:
        for item in data:
            print(f""{item['id']}: {item['full_name']}"")

if __name__ == '__main__':
    main()",code_smell,dead_code,,qwen/qwen3-32b
Python,"class UserManager:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        query = ""SELECT * FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, new_data):
        query = ""UPDATE users SET name = '"" + new_data['name'] + ""', email = '"" + new_data['email'] + ""' WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        self.db_connection.commit()
",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users LIMIT "" + limit; // no validation on limit
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, lose stack trace
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void deleteUser(int userId) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // SQL injection vulnerability
            String sql = ""DELETE FROM users WHERE id = "" + userId;
            stmt.executeUpdate(sql);
        } catch (Exception e) {
            // ignored
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,SQL injection vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    let result = [];
    for (let i = 0; i < this.users.length; i++) {
      let user = this.users[i];
      let processedUser = {
        id: user.id,
        name: user.firstName + ' ' + user.lastName,
        role: this.determineRole(user),
        status: this.determineStatus(user)
      };
      result.push(processedUser);
    }
    return result;
  }

  determineRole(user) {
    if (user.isAdmin) return 'admin';
    if (user.isManager) return 'manager';
    return 'user';
  }

  determineStatus(user) {
    if (user.lastLogin) {
      let lastLoginDate = new Date(user.lastLogin);
      let today = new Date();
      let diffDays = Math.floor((today - lastLoginDate) / (1000 * 60 * 60 * 24));
      if (diffDays < 30) return 'active';
      else if (diffDays < 90) return 'inactive';
      else return 'dormant';
    } else {
      return 'unknown';
    }
  }
}

export default UserProcessor;",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // BUG: If no task was retrieved, task remains 0 and is processed incorrectly
            std::cout << ""Processing: "" << task << std::endl;
            // Simulate work
            std::this_thread::sleep_for(std::chrono::milliseconds(10));
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    DataProcessor dp;
    dp.start();
    for (int i = 1; i <= 5; ++i) dp.addTask(i);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}",code_defect,logic_error_unchecked_task,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(std::vector<std::string>& inputVector, const std::string& delimiter) {
    for (const auto& input : inputVector) {
        std::string::size_type pos = 0;
        std::string token;
        while ((pos = input.find(delimiter)) != std::string::npos) {
            token = input.substr(0, pos);
            if (!token.empty()) {
                std::cout << token << std::endl;
            }
            input.erase(0, pos + delimiter.length());
        }
        if (!input.empty()) {
            std::cout << input << std::endl;
        }
    }
}

int main() {
    std::vector<std::string> userInputs = {""apple,banana,orange"", ""grape,melon"", """"};
    std::string delimiter = "","";

    processUserInput(userInputs, delimiter);

    return 0;
}",code_smell,inefficient_data_processing,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = %s"", (user_id,))
        user_data = cursor.fetchone()
        cursor.close()
        return user_data
    
    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = %s, email = %s WHERE id = %s"", (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
        cursor.close()
    
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""DELETE FROM users WHERE id = %s"", (user_id,))
        self.db_connection.commit()
        cursor.close()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class UserService {
    private Connection connection;
    private static final String QUERY = ""SELECT * FROM users WHERE username = '"" + ""?"" + ""'""; // insecure concatenation

    public UserService(Connection conn) {
        this.connection = conn;
    }

    public User getUserByUsername(String username) throws SQLException {
        PreparedStatement stmt = connection.prepareStatement(QUERY);
        stmt.setString(1, username);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            User user = new User();
            user.setId(rs.getInt(""id""));
            user.setUsername(rs.getString(""username""));
            user.setEmail(rs.getString(""email""));
            return user;
        }
        return null;
    }
}

class User {
    private int id;
    private String username;
    private String email;
    public void setId(int id) { this.id = id; }
    public void setUsername(String username) { this.username = username; }
    public void setEmail(String email) { this.email = email; }
    // getters omitted for brevity
}",code_defect,SQL injection due to string concatenation in query,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  constructor(database, logger) {
    this.db = database;
    this.logger = logger;
  }

  processOrder(order) {
    this.logger.info(`Processing order: ${order.id}`);

    const customer = this.db.getCustomer(order.customerId);
    const product = this.db.getProduct(order.productId);

    if (!customer || !product) {
      this.logger.warn(`Customer or product not found for order ${order.id}`);
      return;
    }

    if (product.stock <= 0) {
      this.logger.error(`Product ${product.id} is out of stock`);
      return;
    }

    const price = product.price * order.quantity;

    if (price > customer.creditLimit) {
      this.logger.error(`Order exceeds customer's credit limit for order ${order.id}`);
      return;
    }

    this.db.updateStock(product.id, product.stock - order.quantity);
    this.db.createOrderRecord(order, price);

    this.logger.info(`Order ${order.id} processed successfully`);
  }

  validateInput(order) {
    return order && order.id && order.customerId && order.productId && order.quantity;
  }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"#include <iostream>
#include <string>
using namespace std;

class User {
public:
    User(string name) : name(name) {}
    string getName() { return name; }
    void setName(string name) { this->name = name; }
private:
    string name;
};

class UserService {
public:
    UserService() {}
    User* getUser(string name) {
        // Simulating a database query
        if (name == ""admin"") {
            return new User(name);
        } else {
            return nullptr;
        }
    }
};

int main() {
    UserService service;
    User* user = service.getUser(""admin"");
    if (user) {
        cout << user->getName() << endl;
        delete user;
    }
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public User getUserById(int userId) {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // vulnerable to SQL injection if userId were derived from user input elsewhere
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            // Missing close of ResultSet and handling of potential SQLException
            try {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (Exception ex) {
                // ignore
            }
        }
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL injection vulnerability and resource leak,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

def process_user_data(user_id):
    data_path = 'data/'
    file_name = f'{user_id}_profile.json'
    full_path = os.path.join(data_path, file_name)

    if not os.path.exists(full_path):
        print('File not found, creating default...')
        with open(full_path, 'w') as f:
            json.dump({'user_id': user_id, 'last_login': '1970-01-01'}, f)

    with open(full_path, 'r') as f:
        user_data = json.load(f)

    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    user_data['last_login'] = now

    with open(full_path, 'w') as f:
        json.dump(user_data, f)

    return user_data

# Legacy function, not used anymore
# def update_user_stats(stats):
#     pass",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userRepository) {
         this.userRepository = userRepository;
      }

      async getUser(id) {
         const user = await this.userRepository.getUser(id);
         if (!user) {
            throw new Error('User not found');
         }
         return user;
      }

      async getUsers() {
         return await this.userRepository.getUsers();
      }

      async createUser(user) {
         if (!user || !user.name || !user.email) {
            throw new Error('Invalid user data');
         }
         return await this.userRepository.createUser(user);
      }
   }

   class UserRepository {
      async getUser(id) {
         // simulate database query
         return { id, name: 'John Doe', email: 'john@example.com' };
      }

      async getUsers() {
         // simulate database query
         return [{ id: 1, name: 'John Doe', email: 'john@example.com' }, { id: 2, name: 'Jane Doe', email: 'jane@example.com' }];
      }

      async createUser(user) {
         // simulate database query
         return user;
      }
   }

   const userRepository = new UserRepository();
   const userService = new UserService(userRepository);

   (async () => {
      try {
         const user = await userService.getUser(1);
         console.log(user);
         const users = await userService.getUsers();
         console.log(users);
         const newUser = await userService.createUser({ name: 'New User', email: 'new@example.com' });
         console.log(newUser);
      } catch (error) {
         console.error(error);
      }
   })();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import threading

class ConfigLoader:
    """"""Loads configuration from a JSON file and caches it globally.""""""
    _cache = None
    _lock = threading.Lock()

    @classmethod
    def load(cls, path: str):
        # Double-checked locking pattern (incorrectly implemented)
        if cls._cache is None:
            with cls._lock:
                if cls._cache is None:
                    with open(path, 'r') as f:
                        cls._cache = json.load(f)
        return cls._cache

    @classmethod
    def get(cls, key, default=None):
        cfg = cls.load('config.json')  # Hardcoded path, ignores provided path
        return cfg.get(key, default)

class DataProcessor:
    def __init__(self, source_dir):
        self.source_dir = source_dir
        self.results = []

    def process_all(self):
        files = os.listdir(self.source_dir)
        for fname in files:
            if fname.endswith('.data'):
                full_path = os.path.join(self.source_dir, fname)
                self.results.append(self._process_file(full_path))
        return self.results

    def _process_file(self, path):
        # Reads file, expects each line to be a JSON object
        with open(path, 'r') as f:
            data = [json.loads(line) for line in f]
        # Bug: returns only the first record instead of aggregated result
        return data[0] if data else None

# Usage example (would be in a different module)
processor = DataProcessor('/var/data')
all_results = processor.process_all()
print('Processed', len(all_results), 'files')
",code_defect,logic_error_returns_first_item_only,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>

class LogBuffer {
public:
    LogBuffer(size_t capacity) : capacity_(capacity) {}

    void addEntry(const std::string& entry) {
        std::lock_guard<std::mutex> lock(mtx_);
        if (buffer_.size() >= capacity_) {
            // Drop oldest entry
            buffer_.erase(buffer_.begin());
        }
        buffer_.push_back(entry);
    }

    std::string dump() {
        std::lock_guard<std::mutex> lock(mtx_);
        std::string out;
        for (const auto& e : buffer_) {
            out += e + ""\n"";
        }
        return out;
    }

private:
    size_t capacity_;
    std::vector<std::string> buffer_;
    std::mutex mtx_;
};

// Global logger (shared across threads)
LogBuffer g_logger(100);

void processData(const std::vector<int>& data) {
    for (size_t i = 0; i <= data.size(); ++i) { // BUG: off‑by‑one, may read past end
        int value = data[i];
        if (value % 2 == 0) {
            g_logger.addEntry(""Even: "" + std::to_string(value));
        } else {
            g_logger.addEntry(""Odd: "" + std::to_string(value));
        }
    }
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    processData(numbers);
    std::cout << g_logger.dump();
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order, boolean isPriority, String customerEmail, String customerPhone, String promoCode) {
        if (order == null) {
            return;
        }

        if (isPriority) {
            // Priority orders get a 10% discount
            double total = 0;
            for (Item item : order.getItems()) {
                total += item.getPrice();
            }
            order.setTotal(total * 0.9);
        } else {
            // Non-priority orders get no discount
            double total = 0;
            for (Item item : order.getItems()) {
                total += item.getPrice();
            }
            order.setTotal(total);
        }

        // Apply promo code if provided
        if (promoCode != null && promoCode.equals(""SAVE10"")) {
            order.setTotal(order.getTotal() * 0.9);
        }

        // Send confirmation email
        EmailService.sendEmail(customerEmail, ""Order Confirmed"", ""Thank you for your order!"");

        // Log customer contact info
        System.out.println(""Customer Contact: "" + customerEmail + "" | "" + customerPhone);
    }
}",code_smell,duplicated_code,,qwen/qwen3-32b
C++,"#include <iostream>
#include <fstream>
#include <vector>
#include <string>

class LogProcessor {
public:
    LogProcessor(const std::string& path) : filePath(path) {}
    void loadEntries() {
        std::ifstream in(filePath);
        std::string line;
        while (std::getline(in, line)) {
            entries.push_back(line);
        }
    }
    // Returns the nth entry (1-based index) but mistakenly uses 0-based indexing
    std::string getEntry(size_t n) const {
        if (n == 0 || n > entries.size()) {
            return """";
        }
        return entries[n]; // off-by-one: should be entries[n-1]
    }
    void printAll() const {
        for (size_t i = 0; i <= entries.size(); ++i) { // off-by-one loop, may access out of bounds
            std::cout << entries[i] << std::endl;
        }
    }
private:
    std::string filePath;
    std::vector<std::string> entries;
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    lp.loadEntries();
    std::cout << ""Second entry: "" << lp.getEntry(2) << std::endl;
    lp.printAll();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }
        String customerEmail = order.getCustomerEmail();
        double total = 0.0;
        for (OrderItem item : order.getItems()) {
            total += item.getPrice() * item.getQuantity();
        }
        if (total <= 0) {
            return;
        }
        // Simulate sending an email
        sendEmail(customerEmail, ""Your order has been processed."", ""Total: $"" + total);
    }

    private void sendEmail(String email, String subject, String body) {
        // Email sending logic
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getUser(id) { let user = await this.userRepository.findById(id); if (!user) return null; user.lastAccessed = new Date(); await this.userRepository.save(user); return user; } async getUsers() { return await this.userRepository.findAll(); } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }
    load() {
        // Missing error handling: if file is missing or malformed, throws
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }
    get(key) {
        if (!this.cache) this.load();
        return this.cache[key];
    }
}

function processUserInput(input) {
    // Unsafe: directly eval user input, leading to code injection
    return eval(input);
}

module.exports = { ConfigLoader, processUserInput };",code_defect,code_injection_via_eval,,openai/gpt-oss-120b
Python,"import random

class DataProcessor:
    def __init__(self):
        self._data = []
        self._processed_data = []

    def load_data(self, data):
        self._data = data

    def process(self):
        for item in self._data:
            processed = self._transform(item)
            self._processed_data.append(processed)

    def _transform(self, item):
        if isinstance(item, int):
            return item * 2
        elif isinstance(item, str):
            return item.upper()
        else:
            return item

    def get_results(self):
        return self._processed_data

    def run(self, data):
        self.load_data(data)
        self.process()
        return self.get_results()

# Example usage
processor = DataProcessor()
example_data = [10, 'hello', 5, 'world', None, True]
results = processor.run(example_data)
print(results)",code_smell,large_class,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
        self.login_attempts = 0

    def login(self, password):
        if self.password == password:
            self.login_attempts += 1
            return True
        else:
            return False

    def get_login_attempts(self):
        return self.login_attempts

    def reset_password(self, new_password, old_password):
        if self.password == old_password:
            self.password = new_password
        else:
            pass

account = UserAccount('test_user', 'test_password', 'test@example.com')
print(account.login('test_password'))
print(account.get_login_attempts())
account.reset_password('new_password', 'wrong_password')
print(account.login('new_password'))",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public User getUserById(int userId) {
        User user = null;
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            Statement stmt = conn.createStatement();
            String query = ""SELECT id, username, email FROM users WHERE id = "" + userId; // SQL injection risk
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return user;
    }
}

class User {
    private int id;
    private String username;
    private String email;
    public void setId(int id) { this.id = id; }
    public void setUsername(String username) { this.username = username; }
    public void setEmail(String email) { this.email = email; }
    public int getId() { return id; }
    public String getUsername() { return username; }
    public String getEmail() { return email; }
}",code_defect,sql_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(Order order) {
        if (order == null) {
            return;
        }

        String customerName = order.getCustomerName();
        if (customerName == null || customerName.trim().isEmpty()) {
            return;
        }

        List<OrderItem> items = order.getItems();
        if (items == null || items.isEmpty()) {
            return;
        }

        double total = 0;
        for (OrderItem item : items) {
            if (item != null && item.getPrice() > 0 && item.getQuantity() > 0) {
                total += item.getPrice() * item.getQuantity();
            }
        }

        if (total <= 0) {
            return;
        }

        order.setTotal(total);
        saveOrder(order);
    }

    private void saveOrder(Order order) {
        // Simulated database save logic
        System.out.println(""Order saved: "" + order.toString());
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserManager { private Map<String, User> users = new HashMap<>(); public void addUser(String username, String password) { users.put(username, new User(username, password)); } public User getUser(String username) { return users.get(username); } public void changePassword(String username, String newPassword) { User user = users.get(username); if (user != null) { user.setPassword(newPassword); } } public class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } } }",code_smell,God class,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded secret

    public List<String> getUserEmails(String nameFilter) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // vulnerable to SQL injection
            String sql = ""SELECT email FROM users WHERE name LIKE '%"" + nameFilter + ""%'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            // swallow exception silently
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null || order.getItems() == null) {
            return;
        }
        for (Item item : order.getItems()) {
            if (item != null && item.getPrice() > 0) {
                applyDiscount(item);
                calculateTax(item);
                System.out.println(""Processed item: "" + item.getName());
            }
        }
    }

    private void applyDiscount(Item item) {
        if (item.getQuantity() > 5) {
            item.setPrice(item.getPrice() * 0.8);
        }
    }

    private void calculateTax(Item item) {
        double taxRate = 0.0;
        if (item.getCategory().equals(""ELECTRONICS"")) {
            taxRate = 0.15;
        } else if (item.getCategory().equals(""BOOKS"")) {
            taxRate = 0.10;
        } else {
            taxRate = 0.05;
        }
        item.setPrice(item.getPrice() * (1 + taxRate));
    }
}",code_smell,long_method,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}
    std::string getName() { return name; }
    int getSalary() { return salary; }
private:
    std::string name;
    int salary;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    Employee getHighestPaidEmployee() {
        if (employees.empty()) {
            // Handle empty list
            return Employee("""", 0);
        }
        return *std::max_element(employees.begin(), employees.end(), [](Employee& a, Employee& b) {
            return a.getSalary() < b.getSalary();
        });
    }
private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 50000));
    manager.addEmployee(Employee(""Alice"", 60000));
    Employee highestPaid = manager.getHighestPaidEmployee();
    std::cout << ""Highest paid employee: "" << highestPaid.getName() << "" with salary: "" << highestPaid.getSalary() << std::endl;
    return 0;
}",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
    }

    std::vector<std::string> getAll() const {
        return logs_; // BUG: returning copy without synchronization
    }

private:
    mutable std::mutex mtx_;
    std::vector<std::string> logs_;
};

void worker(LogAggregator& agg, int id) {
    for (int i = 0; i < 1000; ++i) {
        agg.addLog(""Thread "" + std::to_string(id) + "" log "" + std::to_string(i));
    }
}

int main() {
    LogAggregator agg;
    std::thread t1(worker, std::ref(agg), 1);
    std::thread t2(worker, std::ref(agg), 2);
    t1.join();
    t2.join();
    auto all = agg.getAll();
    std::cout << ""Collected "" << all.size() << "" logs."" << std::endl;
    return 0;
}",code_defect,data_race_on_read,,openai/gpt-oss-120b
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""admin123""; // hardcoded credentials

    public List<Double> getUserPayments(int userId) throws SQLException {
        List<Double> amounts = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT amount FROM transactions WHERE user_id = "" + userId; // SQL injection risk
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            amounts.add(rs.getDouble(""amount""));
        }
        rs.close();
        stmt.close();
        conn.close();
        return amounts;
    }

    public double calculateTotal(int userId) {
        try {
            List<Double> payments = getUserPayments(userId);
            double total = 0.0;
            for (int i = 0; i <= payments.size(); i++) { // off-by-one error
                total += payments.get(i);
            }
            return total;
        } catch (SQLException e) {
            // swallow exception, returns 0 silently
            return 0.0;
        }
    }
}
",code_defect,off_by_one_and_sql_injection,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    public void processUser(String username, String email, String role) {
        if (username == null || username.trim().isEmpty()) {
            throw new IllegalArgumentException(""Username cannot be null or empty"");
        }
        
        if (email == null || !email.contains(""@"")) {
            throw new IllegalArgumentException(""Invalid email format"");
        }
        
        String normalizedEmail = email.toLowerCase().trim();
        
        if (role == null || role.trim().isEmpty()) {
            role = ""user"";
        }
        
        if (!role.equals(""user"") && !role.equals(""admin"")) {
            throw new IllegalArgumentException(""Invalid role specified"");
        }
        
        User user = new User();
        user.setUsername(username);
        user.setEmail(normalizedEmail);
        user.setRole(role);
        
        if (role.equals(""admin"")) {
            user.setAdmin(true);
        }
        
        Database.save(user);
    }
}

class User {
    private String username;
    private String email;
    private String role;
    private boolean admin;

    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getRole() { return role; }
    public void setRole(String role) { this.role = role; }

    public boolean isAdmin() { return admin; }
    public void setAdmin(boolean admin) { this.admin = admin; }
}

class Database {
    public static void save(User user) {
        // Simulated database save logic
    }
}",code_smell,poor_error_handling,,qwen/qwen3-32b
Python,"class BankAccount:
    def __init__(self, balance=0.0):
        self.balance = balance
    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
    def withdraw(self, amount):
        if amount > 0 and self.balance >= amount:
            self.balance -= amount
    def get_balance(self):
        return self.balance

account = BankAccount(100.0)
account.deposit(50.0)
print(account.get_balance())",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3
from datetime import datetime

class UserManager:
    def __init__(self, db_path='users.db'):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password):
        # NOTE: In real code use proper password hashing
        password_hash = self._hash_password(password)
        cursor = self.conn.cursor()
        cursor.execute(
            f""INSERT INTO users (username, password_hash, created_at) VALUES ('{username}', '{password_hash}', '{datetime.utcnow()}')""
        )
        self.conn.commit()

    def authenticate(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute(
            f""SELECT password_hash FROM users WHERE username = '{username}'""
        )
        row = cursor.fetchone()
        if row:
            stored_hash = row[0]
            return stored_hash == self._hash_password(password)
        return False

    def _hash_password(self, password):
        # Simple insecure hash for illustration
        return str(abs(hash(password)))

    def export_user_data(self, export_path):
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, username, created_at FROM users')
        users = cursor.fetchall()
        # Directly dump to JSON without sanitization
        with open(export_path, 'w') as f:
            json.dump(users, f)

    def close(self):
        self.conn.close()

# Example usage (would be removed in production)
if __name__ == '__main__':
    manager = UserManager()
    manager.add_user('alice', 'password123')
    manager.add_user('bob', 'secure!')
    print('Auth alice:', manager.authenticate('alice', 'password123'))
    manager.export_user_data('users_export.json')
    manager.close()",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserAuth {
  constructor() {
    this.users = [];
  }

  registerUser(username, password, role, status, email) {
    const user = {
      username, 
      password, 
      role, 
      status, 
      email
    };
    this.users.push(user);
  }

  authenticateUser(username, password) {
    const user = this.users.find(u => u.username === username);
    if (!user) {
      return false;
    }
    return user.password === password;
  }

  getUserRoles(username) {
    const user = this.users.find(u => u.username === username);
    return user ? user.role : null;
  }

  sendEmailVerification(email) {
    // Dummy email verification logic
    console.log(`Sending verification email to ${email}`);
  }
}

const auth = new UserAuth();
auth.registerUser('admin', 'password123', 'admin', 'active', 'admin@example.com');
auth.registerUser('user1', 'userpass', 'user', 'pending', 'user1@example.com');",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <algorithm>

   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}

       std::string getName() { return name; }
       int getAge() { return age; }

   private:
       std::string name;
       int age;
   };

   class UserService {
   public:
       void sortUsers(std::vector<User>& users) {
           std::sort(users.begin(), users.end(), [](const User& a, const User& b) {
               return a.getAge() < b.getAge();
           });
       }

       void printUsers(const std::vector<User>& users) {
           for (const auto& user : users) {
               std::cout << user.getName() << std::endl;
           }
       }
   };

   int main() {
       std::vector<User> users = {User(""John"", 25), User(""Alice"", 30), User(""Bob"", 20)};
       UserService service;
       service.sortUsers(users);
       service.printUsers(users);
       return 0;
   }
   ",code_smell,unused_imports,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user data and writes a report file
  async generateUserReport(userId) {
    // Potential race condition: no lock, multiple calls may interleave
    const user = await this.db.getUserById(userId);
    const orders = await this.db.getOrdersForUser(userId);

    // Inefficient: building a large string with concatenation in a loop
    let report = '';
    report += `Report for ${user.name}\n`;
    report += 'Orders:\n';
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      report += `- Order #${order.id}: $${order.amount}\n`;
    }
    report += `Total: $${orders.reduce((sum, o) => sum + o.amount, 0)}\n`;

    // Bug: using synchronous write while the function is async, can block event loop
    fs.writeFileSync(`/tmp/report_${userId}.txt`, report);
    return `/tmp/report_${userId}.txt`;
  }
}

module.exports = UserService;",code_defect,blocking_io_in_async_function,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrders(List<Order> orders) {
        for (Order order : orders) {
            if (order.getStatus() == OrderStatus.PENDING) {
                String customerName = order.getCustomer().getName();
                String productName = order.getProduct().getName();

                if (customerName != null && !customerName.isEmpty() && productName != null && !productName.isEmpty()) {
                    System.out.println(""Processing order for "" + customerName + "" for product "" + productName);
                    order.setStatus(OrderStatus.PROCESSING);
                    sendConfirmationEmail(order);
                }
            }
        }
    }

    private void sendConfirmationEmail(Order order) {
        // Simulate email sending
        System.out.println(""Email sent to "" + order.getCustomer().getEmail() + "" for order "" + order.getId());
    }
}",code_smell,long_method,,qwen/qwen3-32b
Python,"class UserManager:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        cursor.close()
        return user_data
    
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users')
        users_data = cursor.fetchall()
        cursor.close()
        return users_data
    
    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute('UPDATE users SET name = %s, email = %s WHERE id = %s', (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
        cursor.close()
    
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('DELETE FROM users WHERE id = %s', (user_id,))
        self.db_connection.commit()
        cursor.close()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off-by-one bug
            int value = data[i] * 2; // may read out of bounds
            results_.push_back(value);
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& results() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(input); });
    t.join();
    for (int v : processor.results()) {
        std::cout << v << "" "";
    }
    std::cout << std::endl;
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrders(List<Order> orders) {
        for (Order order : orders) {
            if (order.getStatus() == OrderStatus.PENDING) {
                if (order.getTotalAmount() > 0) {
                    String paymentMethod = order.getPaymentMethod();
                    if (paymentMethod.equals(""CREDIT_CARD"")) {
                        processCreditCardPayment(order);
                    } else if (paymentMethod.equals(""PAYPAL"")) {
                        processPayPalPayment(order);
                    } else {
                        order.setStatus(OrderStatus.FAILED);
                    }
                }
            }
        }
    }

    private void processCreditCardPayment(Order order) {
        // Simulated credit card processing
        System.out.println(""Processing credit card payment for order: "" + order.getId());
        order.setStatus(OrderStatus.PROCESSED);
    }

    private void processPayPalPayment(Order order) {
        // Simulated PayPal processing
        System.out.println(""Processing PayPal payment for order: "" + order.getId());
        order.setStatus(OrderStatus.PROCESSED);
    }
}",code_smell,conditional_complexity,,qwen/qwen3-32b
Python,"import json
import os
import sqlite3
from datetime import datetime

class UserManager:
    def __init__(self, db_path='users.db'):
        self.conn = sqlite3.connect(db_path)
        self._ensure_table()

    def _ensure_table(self):
        self.conn.execute('''CREATE TABLE IF NOT EXISTS users (
                                id INTEGER PRIMARY KEY,
                                username TEXT,
                                password TEXT,
                                created_at TEXT)''')
        self.conn.commit()

    def create_user(self, username, password):
        # Password stored in plain text – security defect
        self.conn.execute('INSERT INTO users (username, password, created_at) VALUES (?, ?, ?)',
                          (username, password, datetime.utcnow().isoformat()))
        self.conn.commit()

    def authenticate(self, username, password):
        cursor = self.conn.execute('SELECT password FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row and row[0] == password:
            return True
        return False

    def export_user_data(self, output_path):
        # Unsafe deserialization – reads raw JSON from file without validation
        with open(output_path, 'r') as f:
            data = json.load(f)
        for user in data.get('users', []):
            self.create_user(user['username'], user['password'])

    def close(self):
        self.conn.close()

# Example usage
if __name__ == '__main__':
    manager = UserManager()
    manager.create_user('alice', 's3cr3t')
    print('Authenticated:', manager.authenticate('alice', 's3cr3t'))
    # Exporting data from an untrusted source can lead to injection
    manager.export_user_data('untrusted_input.json')
    manager.close()",code_defect,security_vulnerability,,openai/gpt-oss-120b
Python,"import json
import os

class ConfigLoader:
    def __init__(self):
        self.config_path = 'config.json'
        self._config = None

    def load_config(self):
        if not os.path.exists(self.config_path):
            self._config = {
                'host': 'localhost',
                'port': 8080,
                'debug': False
            }
            with open(self.config_path, 'w') as f:
                json.dump(self._config, f)
        else:
            with open(self.config_path, 'r') as f:
                self._config = json.load(f)

    def get_config(self):
        return self._config

    def set_debug(self, debug):
        self._config['debug'] = debug
        with open(self.config_path, 'w') as f:
            json.dump(self._config, f)

    def set_host(self, host):
        self._config['host'] = host
        with open(self.config_path, 'w') as f:
            json.dump(self._config, f)

    def set_port(self, port):
        self._config['port'] = port
        with open(self.config_path, 'w') as f:
            json.dump(self._config, f)

    def get_debug(self):
        return self._config.get('debug', False)

    def get_host(self):
        return self._config.get('host', 'localhost')

    def get_port(self):
        return self._config.get('port', 8080)

    def set_all(self, host, port, debug):
        self._config['host'] = host
        self._config['port'] = port
        self._config['debug'] = debug
        with open(self.config_path, 'w') as f:
            json.dump(self._config, f)

config_loader = ConfigLoader()
config_loader.load_config()
print(config_loader.get_config())",code_smell,lack_of_separation_of_concerns,,qwen/qwen3-32b
Java,"public class UserDAO {
    private Connection connection;
    public UserDAO() {
        try {
            Class.forName(""com.mysql.cj.jdbc.Driver"");
            connection = DriverManager.getConnection(""jdbc:mysql://localhost:3306/mydb"", ""root"", ""password"");
        } catch (Exception e) {}
    }
    public List<User> getAllUsers() {
        List<User> users = new ArrayList<>();
        try {
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(""SELECT * FROM users"");
            while (resultSet.next()) {
                User user = new User();
                user.setId(resultSet.getInt(""id""));
                user.setName(resultSet.getString(""name""));
                users.add(user);
            }
        } catch (Exception e) {}
        return users;
    }
}",code_defect,unhandled_sql_exceptions_and_empty_catch_blocks,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::string& file) : logFile(file) {}
    void process() {
        std::vector<std::string> lines = readLines();
        for (size_t i = 0; i <= lines.size(); ++i) { // off‑by‑one error
            std::lock_guard<std::mutex> lock(mtx);
            std::cout << parseLine(lines[i]) << std::endl;
        }
    }
private:
    std::string logFile;
    std::mutex mtx;
    std::vector<std::string> readLines() {
        // Dummy implementation
        return {""entry1"", ""entry2"", ""entry3""};
    }
    std::string parseLine(const std::string& line) {
        // Simple parsing stub
        return ""Parsed:"" + line;
    }
};

int main() {
    LogProcessor lp(""/var/log/app.log"");
    std::thread t1(&LogProcessor::process, &lp);
    std::thread t2(&LogProcessor::process, &lp);
    t1.join();
    t2.join();
    return 0;
}
",code_defect,off_by_one_error_and_race_condition,,openai/gpt-oss-120b
Python,"import sqlite3

class UserManager:
    def __init__(self, db_path='users.db'):
        self.conn = sqlite3.connect(db_path)
        self.cursor = self.conn.cursor()
        self.create_table()

    def create_table(self):
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS users 
                             (id INTEGER PRIMARY KEY, name TEXT, email TEXT)''')
        self.conn.commit()

    def add_user(self, name, email):
        self.cursor.execute(f""INSERT INTO users (name, email) VALUES ('{name}', '{email}')"")
        self.conn.commit()

    def get_user_by_email(self, email):
        self.cursor.execute(f""SELECT * FROM users WHERE email = '{email}'"")
        return self.cursor.fetchone()

    def close(self):
        self.conn.close()

# Usage
if __name__ == '__main__':
    manager = UserManager()
    manager.add_user('Alice', 'alice@example.com')
    user = manager.get_user_by_email('alice@example.com')
    print(user)
    manager.close()",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
Python,"class UserManager:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        return user_data
    
    def update_user(self, user_id, new_data):
        cursor = self.db_connection.cursor()
        cursor.execute('UPDATE users SET name = %s, email = %s WHERE id = %s', (new_data['name'], new_data['email'], user_id))
        self.db_connection.commit()
    
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('DELETE FROM users WHERE id = %s', (user_id,))
        self.db_connection.commit()
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class TransactionProcessor {
public:
    TransactionProcessor() : total_(0) {}

    void addTransaction(int amount) {
        std::lock_guard<std::mutex> lock(mtx_);
        transactions_.push_back(amount);
        total_ += amount; // BUG: total_ updated without synchronization in processAll()
    }

    void processAll() {
        // Simulate processing each transaction
        for (size_t i = 0; i < transactions_.size(); ++i) {
            // heavy computation placeholder
            std::this_thread::sleep_for(std::chrono::milliseconds(1));
        }
        // Reset after processing
        std::lock_guard<std::mutex> lock(mtx_);
        transactions_.clear();
        // total_ is NOT reset, leading to stale sum on subsequent runs
    }

    int getTotal() const {
        return total_; // data race: reading without lock
    }

private:
    std::vector<int> transactions_;
    int total_;
    mutable std::mutex mtx_;
};

void worker(TransactionProcessor& proc, int id) {
    for (int i = 0; i < 100; ++i) {
        proc.addTransaction(id * 10 + i);
    }
}

int main() {
    TransactionProcessor processor;
    std::thread t1(worker, std::ref(processor), 1);
    std::thread t2(worker, std::ref(processor), 2);
    t1.join();
    t2.join();
    processor.processAll();
    std::cout << ""Total processed: "" << processor.getTotal() << std::endl;
    return 0;
}",code_defect,data_race_and_stale_state,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    private List<Order> orders;

    public OrderProcessor(List<Order> orders) {
        this.orders = orders;
    }

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                order.markAsProcessed();
                if (order.getTotal() > 100) {
                    applyLargeOrderDiscount(order);
                } else {
                    applyStandardDiscount(order);
                }
            }
        }
    }

    private void applyLargeOrderDiscount(Order order) {
        double discount = order.getTotal() * 0.15;
        order.setTotal(order.getTotal() - discount);
    }

    private void applyStandardDiscount(Order order) {
        double discount = order.getTotal() * 0.05;
        order.setTotal(order.getTotal() - discount);
    }

    public static void main(String[] args) {
        List<Order> orders = new ArrayList<>();
        // Assume orders are populated from a database or external source
        OrderProcessor processor = new OrderProcessor(orders);
        processor.processOrders();
    }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int age) : name(name), age(age) {}

    std::string getName() { return name; }
    int getAge() { return age; }

private:
    std::string name;
    int age;
};

class EmployeeManager {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    void sortEmployees() { std::sort(employees.begin(), employees.end(), [](Employee a, Employee b) { return a.getAge() < b.getAge(); }); }
    void printEmployees() {
        for (Employee employee : employees) {
            std::cout << employee.getName() << std::endl;
        }
    }

private:
    std::vector<Employee> employees;
};

int main() {
    EmployeeManager manager;
    manager.addEmployee(Employee(""John"", 30));
    manager.addEmployee(Employee(""Alice"", 25));
    manager.sortEmployees();
    manager.printEmployees();
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class PaymentProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""root"";
    private static final String DB_PASSWORD = ""password""; // hardcoded secret

    public boolean processPayment(String userId, double amount) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            conn.setAutoCommit(false);
            if (updateBalance(conn, userId, -amount) && recordTransaction(conn, userId, amount)) {
                conn.commit();
                return true;
            } else {
                conn.rollback();
                return false;
            }
        } catch (SQLException e) {
            try { if (conn != null) conn.rollback(); } catch (SQLException ignored) {}
            return false;
        } finally {
            try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
        }
    }

    private boolean updateBalance(Connection conn, String userId, double delta) throws SQLException {
        String sql = ""UPDATE accounts SET balance = balance + ? WHERE user_id = ?"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setDouble(1, delta);
        stmt.setString(2, userId);
        int rows = stmt.executeUpdate();
        return rows == 1;
    }

    private boolean recordTransaction(Connection conn, String userId, double amount) throws SQLException {
        String sql = ""INSERT INTO transactions (user_id, amount, timestamp) VALUES (?, ?, NOW())"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, userId);
        stmt.setDouble(2, amount);
        int rows = stmt.executeUpdate();
        return rows == 1;
    }

    // Vulnerable method: SQL injection risk
    public double getUserBalance(String userId) {
        double balance = 0.0;
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             Statement stmt = conn.createStatement()) {
            String query = ""SELECT balance FROM accounts WHERE user_id = '"" + userId + ""'""; // unsanitized input
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                balance = rs.getDouble(""balance"");
            }
        } catch (SQLException e) {
            // ignore
        }
        return balance;
    }
}
",code_defect,sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off-by-one error
            int value = data[i] * 2;
            results_.push_back(value);
        }
        logger_.log(""Processing complete"");
    }
    const std::vector<int>& results() const { return results_; }
private:
    Logger& logger_;
    std::vector<int> results_;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> input = {1,2,3,4,5};
    std::thread t([&](){ processor.process(input); });
    t.join();
    for (int v : processor.results()) {
        std::cout << v << "" "";
    }
    std::cout << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <fstream>

void read_and_print_file(const std::string& filename) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << ""Error opening file"" << std::endl;
        return;
    }

    std::string line;
    while (std::getline(file, line)) {
        std::cout << line << std::endl;
    }
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        std::cerr << ""Usage: "" << argv[0] << "" <filename>"" << std::endl;
        return 1;
    }

    read_and_print_file(argv[1]);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserDAO { private static final String DB_URL = ""jdbc:mysql://localhost:3306/mydb""; private static final String USER = ""root""; private static final String PASS = ""password""; public UserDAO() {} public void saveUser(String name, String email) { try { Class.forName(""com.mysql.cj.jdbc.Driver""); Connection conn = DriverManager.getConnection(DB_URL, USER, PASS); String query = ""INSERT INTO users (name, email) VALUES ('"" + name + ""', '"" + email + ""')""; Statement stmt = conn.createStatement(); stmt.executeUpdate(query); } catch (Exception e) { System.out.println(""Error saving user""); } } }",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Reads config file synchronously each time; cache never used
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) this.load();
    return this.cache[key];
  }
}

// Global singleton used across modules
const config = new ConfigLoader('./config.json');

function processData(input) {
  // Assume input is an array of objects with 'value' property
  let sum = 0;
  for (let i = 0; i <= input.length; i++) { // off‑by‑one error, may read undefined
    sum += input[i].value;
  }
  const multiplier = config.get('multiplier') || 1;
  return sum * multiplier;
}

module.exports = { processData, config };",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

struct User {
    std::string username;
    std::string password;
    bool is_active;
};

void processUser(User& user) {
    if (user.username.length() < 3) {
        std::cout << ""Invalid username for user "" << user.username << std::endl;
        return;
    }

    if (user.password.length() < 8) {
        std::cout << ""Password is too weak for user "" << user.username << std::endl;
        return;
    }

    if (!user.is_active) {
        std::cout << ""User "" << user.username << "" is not active. Skipping processing."" << std::endl;
        return;
    }

    // Simulate some processing
    std::cout << ""Processing user: "" << user.username << std::endl;
}

int main() {
    std::vector<User> users = {
        {""john_doe"", ""s3cr3t!@#"", true},
        {""alice_smith"", ""password123"", false},
        {""bob"", ""123456789"", true},
        {""charlie"", ""p@$$w0rd"", true}
    };

    for (auto& user : users) {
        processUser(user);
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
        self.is_active = True

    def deactivate_account(self):
        self.is_active = False

    def change_password(self, new_password):
        if len(new_password) < 8:
            print('Password is too short')
        else:
            self.password = new_password

    def send_email(self, message):
        # Simulating email sending
        print(f'Sending email to {self.email}: {message}')

# Usage
account = UserAccount('john_doe', 'mysecretpassword', 'johndoe@example.com')
account.change_password('newpassword123')
account.send_email('Your account has been updated')",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"class UserService {
  constructor(db) {
    this.db = db;
  }

  // Fetch a page of users, 1-indexed page numbers
  async getUsersPage(pageNumber, pageSize) {
    const offset = (pageNumber - 1) * pageSize;
    const limit = pageSize;
    // BUG: off‑by‑one error – should be offset + limit, but uses offset only
    const rows = await this.db.query('SELECT * FROM users ORDER BY id LIMIT $1 OFFSET $2', [limit, offset]);
    return rows;
  }

  // Update user email without validation
  async updateEmail(userId, newEmail) {
    // SECURITY DEFECT: no sanitization, potential SQL injection
    await this.db.query(`UPDATE users SET email = '${newEmail}' WHERE id = ${userId}`);
  }
}

module.exports = UserService;",code_defect,off_by_one_error_and_sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

class DataProcessor {
public:
    DataProcessor() : buffer_{} {}

    void addData(int value) {
        buffer_.push_back(value);
    }

    void process() {
        for (int i = 0; i < buffer_.size(); ++i) {
            buffer_[i] = buffer_[i] * 2;
            if (i < buffer_.size() - 1) {
                buffer_[i + 1] += buffer_[i];
            }
        }
    }

    void printResults() {
        for (int val : buffer_) {
            std::cout << val << "" "";
        }
        std::cout << std::endl;
    }

private:
    std::vector<int> buffer_;
};

int main() {
    DataProcessor dp;
    dp.addData(5);
    dp.addData(10);
    dp.addData(15);
    dp.process();
    dp.printResults();
    return 0;
}",code_defect,off_by_one_error,,qwen/qwen3-32b
JavaScript,"class UserAuthenticator {
  constructor(database) {
    this.database = database;
  }

  authenticate(username, password) {
    const users = this.database.users;
    for (let i = 0; i < users.length; i++) {
      if (users[i].username === username) {
        if (users[i].password === password) {
          return true;
        }
      }
    }
    return false;
  }
}
const authenticator = new UserAuthenticator({ users: [{ username: 'admin', password: 'password123' }] });
console.log(authenticator.authenticate('admin', 'password123'));",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"package com.example.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection,,openai/gpt-oss-120b
JavaScript,"const fs = require('fs');
const path = require('path');

class ConfigLoader {
    constructor(configDir) {
        this.configDir = configDir;
        this.cache = {};
    }

    // Loads a JSON config file and caches it
    loadConfig(name) {
        const filePath = path.join(this.configDir, `${name}.json`);
        // Asynchronously read file but return before it's finished
        fs.readFile(filePath, 'utf8', (err, data) => {
            if (err) {
                console.error('Failed to read config:', err);
                return;
            }
            try {
                this.cache[name] = JSON.parse(data);
            } catch (e) {
                console.error('Invalid JSON in config:', e);
            }
        });
        // Returns possibly undefined cached value immediately
        return this.cache[name];
    }
}

// Usage example
const loader = new ConfigLoader('/etc/app/config');
const dbConfig = loader.loadConfig('database');
if (dbConfig) {
    console.log('Database host:', dbConfig.host);
} else {
    console.log('Config not loaded yet');
}
",code_defect,asynchronous_logic_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        for (size_t j = 0; j < data.size(); ++j) {
            if (data[i] == data[j]) {
                std::cout << ""Duplicate found: "" << data[i] << std::endl;
                return;
            }
        }
    }
    std::cout << ""No duplicates found."";
}

int main() {
    std::vector<int> values = {1, 2, 3, 4, 5, 1};
    processData(values);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        if user_data:
            return {'id': user_data[0], 'name': user_data[1], 'email': user_data[2]}
        else:
            return None
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users')
        users_data = cursor.fetchall()
        users = []
        for user_data in users_data:
            users.append({'id': user_data[0], 'name': user_data[1], 'email': user_data[2]})
        return users",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String USER = ""admin"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<Transaction> fetchPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction t = new Transaction();
            t.setId(rs.getInt(""id""));
            t.setAmount(rs.getDouble(""amount""));
            t.setStatus(rs.getString(""status""));
            list.add(t);
        }
        // Missing rs.close(), stmt.close(), conn.close()
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = fetchPendingTransactions();
            for (Transaction tx : pending) {
                if (tx.getAmount() < 0) {
                    // negative amount should be rejected, but logic proceeds
                }
                updateTransactionStatus(tx.getId(), ""COMPLETED"");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateTransactionStatus(int id, String newStatus) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            String sql = ""UPDATE transactions SET status='"" + newStatus + ""' WHERE id="" + id; // SQL injection risk
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.executeUpdate();
            // Missing stmt.close(), conn.close()
        } catch (SQLException e) {
            // Swallow exception, no logging
        }
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_sql_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrder(Order order) {
        if (order == null) {
            return;
        }
        List<Item> items = order.getItems();
        for (Item item : items) {
            if (item.getQuantity() > 0) {
                System.out.println(""Processing item: "" + item.getName());
                // Simulate item processing
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    // Ignored intentionally
                }
            }
        }
    }

    // Unused method
    public void calculateTotalPrice(Order order) {
        // Not implemented
    }
}",code_smell,dead_code,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Student {
public:
    Student(std::string name, int grade) : name(name), grade(grade) {}

    std::string getName() { return name; }
    int getGrade() { return grade; }

private:
    std::string name;
    int grade;
};

class StudentDatabase {
public:
    void addStudent(Student student) { students.push_back(student); }
    Student getStudentWithHighestGrade() {
        if (students.empty()) {
            throw std::runtime_error(""No students in database"");
        }
        return *std::max_element(students.begin(), students.end(),
            [](const Student& a, const Student& b) { return a.getGrade() < b.getGrade(); });
    }

private:
    std::vector<Student> students;
};

int main() {
    StudentDatabase db;
    db.addStudent(Student(""Alice"", 90));
    db.addStudent(Student(""Bob"", 95));
    try {
        Student topStudent = db.getStudentWithHighestGrade();
        std::cout << ""Top student: "" << topStudent.getName() << "" with grade "" << topStudent.getGrade() << std::endl;
    } catch (const std::exception& e) {
        std::cerr << ""Error: "" << e.what() << std::endl;
    }
    return 0;
}
",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    LogAggregator() : stopFlag(false) {}
    ~LogAggregator() { stop(); }

    void start() {
        worker = std::thread(&LogAggregator::process, this);
    }

    void stop() {
        stopFlag = true;
        if (worker.joinable())
            worker.join();
    }

    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        buffer.push_back(msg);
    }

private:
    void process() {
        while (!stopFlag) {
            std::vector<std::string> localCopy;
            {
                std::lock_guard<std::mutex> lock(mtx);
                localCopy.swap(buffer);
            }
            for (const auto& line : localCopy) {
                // Simulate I/O delay
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                std::cout << line << std::endl;
            }
        }
    }

    std::vector<std::string> buffer;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogAggregator logger;
    logger.start();
    for (int i = 0; i < 5; ++i) {
        logger.addLog(""Message "" + std::to_string(i));
    }
    // Forgot to stop the logger before exiting
    return 0;
}",code_defect,resource_leak_due_to_unjoined_thread,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private static final String API_KEY = ""1234567890abcdef"";

    public void processOrder(Order order) {
        if (order != null) {
            String customerEmail = order.getCustomerEmail();
            String productCode = order.getProductCode();
            int quantity = order.getQuantity();

            if (quantity > 0 && productCode != null) {
                System.out.println(""Processing order for "" + customerEmail);
                String message = ""Your order for "" + quantity + "" units of "" + productCode + "" is being processed."";
                sendEmail(customerEmail, message);
                logOrderDetails(order);
            }
        }
    }

    private void sendEmail(String email, String message) {
        // Simulated email sending logic
        System.out.println(""Email sent to "" + email + "": "" + message);
    }

    private void logOrderDetails(Order order) {
        // Simulated logging logic
        System.out.println(""Logged order details: "" + order.toString());
    }
}",code_defect,hardcoded_secret,,qwen/qwen3-32b
JavaScript,"
      class UserAuthenticator {
         constructor(database) {
            this.database = database;
         }

         authenticate(username, password) {
            const users = this.database.getUsers();
            for (let i = 0; i < users.length; i++) {
               if (users[i].username === username) {
                  if (users[i].password === password) {
                     return true;
                  }
               }
            }
            return false;
         }
      }

      class Database {
         constructor() {
            this.users = [
               { username: 'admin', password: 'password123' },
               { username: 'user', password: 'password456' }
            ];
         }

         getUsers() {
            return this.users;
         }
      }

      const database = new Database();
      const authenticator = new UserAuthenticator(database);
      console.log(authenticator.authenticate('admin', 'password123'));
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(String domain) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // insecure concatenation leads to SQL injection
            String sql = ""SELECT email FROM users WHERE email LIKE '"" + ""%@"" + domain + ""'"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
Java,"public class UserAuthentication {
    private String username;
    private String password;

    public boolean authenticate(String inputUsername, String inputPassword) {
        if (username == null || password == null) {
            return false;
        }

        if (inputUsername.equals(username)) {
            if (inputPassword.equals(password)) {
                return true;
            }
        }
        return false;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}",code_defect,security_vulnerability,,qwen/qwen3-32b
C++,"
      #include <iostream>
      #include <vector>
      #include <string>
      
      class User {
      public:
         std::string name;
         int age;
         std::vector<std::string> addresses;
      
         User(std::string n, int a) : name(n), age(a) {}
      
         void addAddress(std::string address) {
            addresses.push_back(address);
         }
      
         void printInfo() {
            std::cout << ""Name: "" << name << std::endl;
            std::cout << ""Age: "" << age << std::endl;
            for (const auto& address : addresses) {
               std::cout << ""Address: "" << address << std::endl;
            }
         }
      };
      
      int main() {
         User user(""John"", 30);
         user.addAddress(""123 Main St"");
         user.addAddress(""456 Elm St"");
         user.printInfo();
         return 0;
      }
   ",clean_code,well_structured,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserRepository {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/app"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails() {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sql = ""SELECT email FROM users"";
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Missing close for Statement and Connection leads to resource leak
        }
        return emails;
    }
}
",code_defect,resource_leak,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  processUser(user) {
    if (!user) return;

    let processedUser = {};

    processedUser.id = user.id;
    processedUser.name = user.name ? user.name : 'Unknown';
    processedUser.email = user.email;

    if (user.roles && user.roles.length > 0) {
      processedUser.role = user.roles[0].toUpperCase();
    } else {
      processedUser.role = 'GUEST';
    }

    if (user.preferences) {
      processedUser.language = user.preferences.language || 'en';
      processedUser.theme = user.preferences.theme || 'light';
    } else {
      processedUser.language = 'en';
      processedUser.theme = 'light';
    }

    return processedUser;
  }

  // Legacy code from v1, to be removed in v2
  // processUserLegacy(user) {
  //   // old processing logic
  // }
}

// Example usage:
const user = {
  id: 123,
  name: 'Alice',
  email: 'alice@example.com',
  roles: ['admin'],
  preferences: {
    language: 'es',
    theme: 'dark'
  }
};

const processor = new UserProcessor();
const result = processor.processUser(user);
console.log(result);",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"class UserManager {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  removeUser(username) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        this.users.splice(i, 1);
        break;
      }
    }
  }

  getUser(username) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].username === username) {
        return this.users[i];
      }
    }
    return null;
  }
}

let userManager = new UserManager();
let user = { username: 'john', password: 'password123' };
userManager.addUser(user);
console.log(userManager.getUser('john'));
",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # NOTE: Using eval on file content – insecure!
        with open(self.config_path, 'r') as f:
            data = f.read()
            self.settings = eval(data)  # unsafe deserialization

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, db_conn_str):
        self.db_conn_str = db_conn_str
        self.logger = logging.getLogger(__name__)

    def fetch_user_data(self, user_id):
        # Simulated DB fetch – vulnerable to SQL injection
        query = f""SELECT * FROM users WHERE id = {user_id}""
        self.logger.debug(f""Executing query: {query}"")
        # Placeholder for actual DB call
        return self._execute_query(query)

    def _execute_query(self, query):
        # Mocked response
        return {""id"": 1, ""name"": ""Alice""}

    def process(self, user_id):
        user = self.fetch_user_data(user_id)
        # Assume processing involves JSON serialization
        return json.dumps(user)

if __name__ == ""__main__"":
    cfg = ConfigLoader('config.cfg')
    processor = DataProcessor(cfg.get('db_conn'))
    result = processor.process(os.getenv('USER_ID'))
    print(result)",code_defect,unsafe_deserialization_and_sql_injection,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

def process_user_data(user_data):
    processed_users = []
    for user in user_data:
        user_id = user.get('id')
        name = user.get('name')
        email = user.get('email')
        is_active = user.get('is_active', False)

        if not user_id or not name or not email:
            continue

        processed_users.append({
            'id': user_id,
            'name': name,
            'email': email,
            'is_active': is_active,
            'processed_at': datetime.now().isoformat()
        })

    return processed_users


def load_user_data(file_path):
    if not os.path.exists(file_path):
        return []

    with open(file_path, 'r') as file:
        try:
            return json.load(file)
        except json.JSONDecodeError:
            return []


def save_processed_data(data, output_path):
    with open(output_path, 'w') as file:
        json.dump(data, file, indent=2)


def main():
    input_path = 'users.json'
    output_path = 'processed_users.json'

    user_data = load_user_data(input_path)
    processed_users = process_user_data(user_data)
    save_processed_data(processed_users, output_path)

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getAllUsers() {
            try {
               const users = await this.userRepository.findAll();
               return users.map(user => ({ id: user.id, name: user.name }));
            } catch (error) {
               console.error(error);
               return [];
            }
         }

         async getUserById(id) {
            try {
               const user = await this.userRepository.findById(id);
               if (!user) {
                  throw new Error('User not found');
               }
               return { id: user.id, name: user.name };
            } catch (error) {
               console.error(error);
               throw error;
            }
         }
      }

      class UserRepository {
         async findAll() {
            // Simulating a database query
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' }
            ];
         }

         async findById(id) {
            // Simulating a database query
            const users = await this.findAll();
            return users.find(user => user.id === id);
         }
      }

      const userRepository = new UserRepository();
      const userService = new UserService(userRepository);
      userService.getAllUsers().then(users => console.log(users));
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import sqlite3

class UserManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password_hash TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password):
        # NOTE: insecure password handling for demo purposes
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, password_hash) VALUES (?, ?)', (username, password))
        self.conn.commit()

    def authenticate(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute('SELECT password_hash FROM users WHERE username = ?', (username,))
        row = cursor.fetchone()
        if row and row[0] == password:
            return True
        return False

    def export_user_data(self, export_path):
        cursor = self.conn.cursor()
        cursor.execute('SELECT id, username, password_hash FROM users')
        users = cursor.fetchall()
        # Vulnerable to insecure deserialization if file is tampered
        with open(export_path, 'w') as f:
            json.dump(users, f)

    def import_user_data(self, import_path):
        # No validation of imported data; may lead to SQL injection or corrupt DB
        with open(import_path, 'r') as f:
            users = json.load(f)
        cursor = self.conn.cursor()
        for user in users:
            cursor.execute('INSERT INTO users (id, username, password_hash) VALUES (?, ?, ?)', user)
        self.conn.commit()

# Example usage
if __name__ == '__main__':
    manager = UserManager('users.db')
    manager.add_user('alice', 'secret123')
    manager.add_user('bob', 'password')
    print('Auth alice:', manager.authenticate('alice', 'secret123'))
    manager.export_user_data('backup.json')
    # Simulate restore
    manager.import_user_data('backup.json')
",code_defect,insecure_data_handling,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

using namespace std;

void processData(const vector<string>& input, vector<int>& output) {
    for (size_t i = 0; i < input.size(); ++i) {
        string s = input[i];
        for (size_t j = 0; j < s.length(); ++j) {
            if (s[j] >= '0' && s[j] <= '9') {
                output.push_back(s[j] - '0');
            } else {
                // Re-check character
                if (s[j] >= 'a' && s[j] <= 'z') {
                    output.push_back(10 + (s[j] - 'a'));
                } else if (s[j] >= 'A' && s[j] <= 'Z') {
                    output.push_back(36 + (s[j] - 'A'));
                }
            }
        }
    }
}

int main() {
    vector<string> data = {""abc123"", ""XYZ456""};
    vector<int> result;
    processData(data, result);
    for (int val : result) {
        cout << val << "" "";
    }
    cout << endl;
    return 0;
}",code_smell,inefficient_loop,,qwen/qwen3-32b
Python,"
class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection

    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute(""SELECT * FROM users WHERE id = "" + str(user_id))
        user_data = cursor.fetchone()
        return user_data

    def update_user(self, user_id, user_data):
        cursor = self.db_connection.cursor()
        cursor.execute(""UPDATE users SET name = '"" + user_data['name'] + ""', email = '"" + user_data['email'] + ""' WHERE id = "" + str(user_id))
        self.db_connection.commit()

# usage
import sqlite3
db_connection = sqlite3.connect('users.db')
user_service = UserService(db_connection)
user_data = user_service.get_user(1)
print(user_data)
user_service.update_user(1, {'name': 'John Doe', 'email': 'john@example.com'})
   ",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(configPath) {
        this.configPath = configPath;
        this.cache = null;
    }

    load() {
        // Reads config file synchronously every call, ignoring cache
        const data = fs.readFileSync(this.configPath, 'utf8');
        try {
            this.cache = JSON.parse(data);
        } catch (e) {
            // Swallow parsing errors, return previous cache
            return this.cache;
        }
        return this.cache;
    }
}

function processData(input) {
    // Expects input as an object with numeric 'value'
    if (input && typeof input.value === 'number') {
        // Off‑by‑one error: should be <= 100
        if (input.value > 100) {
            throw new Error('Value out of range');
        }
        return input.value * 2;
    }
    // Missing else branch leads to undefined return
}

// Usage example
const loader = new ConfigLoader('./config.json');
const config = loader.load();
const result = processData(config);
console.log('Result:', result);
",code_defect,off_by_one_error_and_swallowed_exception,,openai/gpt-oss-120b
Java,"public class OrderProcessor {

    public void processOrder(String userId, String productId, int quantity, String paymentMethod, String shippingAddress) {
        if (userId == null || productId == null || paymentMethod == null || shippingAddress == null) {
            throw new IllegalArgumentException(""Invalid input"");
        }

        if (quantity <= 0) {
            throw new IllegalArgumentException(""Quantity must be positive"");
        }

        // Simulate fetching user from a database
        User user = fetchUserFromDatabase(userId);
        Product product = fetchProductFromDatabase(productId);

        if (user == null) {
            throw new RuntimeException(""User not found"");
        }

        if (product == null || product.getPrice() <= 0) {
            throw new RuntimeException(""Product invalid or price missing"");
        }

        // Simulate payment processing
        boolean paymentSuccessful = processPayment(user, product.getPrice() * quantity, paymentMethod);
        if (!paymentSuccessful) {
            throw new RuntimeException(""Payment failed"");
        }

        // Simulate shipping order
        boolean shippingSuccessful = shipProduct(shippingAddress, quantity);
        if (!shippingSuccessful) {
            throw new RuntimeException(""Shipping failed"");
        }

        // Save order to database
        saveOrderToDatabase(user, product, quantity, paymentMethod, shippingAddress);
    }

    private User fetchUserFromDatabase(String userId) {
        // Simulated DB call
        return new User(userId, ""John Doe"");
    }

    private Product fetchProductFromDatabase(String productId) {
        // Simulated DB call
        return new Product(productId, ""Laptop"", 1200.00);
    }

    private boolean processPayment(User user, double totalCost, String paymentMethod) {
        // Simulated payment processing
        return true;
    }

    private boolean shipProduct(String address, int quantity) {
        // Simulated shipping logic
        return true;
    }

    private void saveOrderToDatabase(User user, Product product, int quantity, String paymentMethod, String shippingAddress) {
        // Simulated DB save
    }

    private static class User {
        String userId;
        String name;

        User(String userId, String name) {
            this.userId = userId;
            this.name = name;
        }
    }

    private static class Product {
        String productId;
        String name;
        double price;

        Product(String productId, String name, double price) {
            this.productId = productId;
            this.name = name;
            this.price = price;
        }

        double getPrice() {
            return price;
        }
    }
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
        self.is_active = True
    def deactivate_account(self):
        self.is_active = False
    def change_password(self, new_password):
        self.password = new_password
    def check_credentials(self, input_username, input_password):
        return self.username == input_username and self.password == input_password

account = UserAccount('test_user', 'password123', 'test@example.com')
print(account.check_credentials('test_user', 'wrong_password'))",code_defect,insecure_password_storage,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public List<String> getUserEmails(int limit) {
        List<String> emails = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // insecure concatenation, possible SQL injection if limit came from user input
            String sql = ""SELECT email FROM users LIMIT "" + limit;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                emails.add(rs.getString(""email""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // missing null checks, may throw NullPointerException
            try { stmt.close(); } catch (Exception ignored) {}
            try { conn.close(); } catch (Exception ignored) {}
        }
        return emails;
    }

    public void deleteAllUsers() {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // dangerous: deletes all rows without confirmation
            stmt.executeUpdate(""DELETE FROM users"");
        } catch (Exception e) {
            // swallow exception, no logging
        } finally {
            // resources not closed properly if exception occurs before stmt init
            try { stmt.close(); } catch (Exception ignored) {}
            try { conn.close(); } catch (Exception ignored) {}
        }
    }
}
",code_defect,hardcoded_credentials_and_sql_injection_risk,,openai/gpt-oss-120b
Python,"import os
import requests

class DataProcessor:
    def __init__(self, url, timeout=5):
        self.url = url
        self.timeout = timeout

    def fetch_and_process(self):
        response = requests.get(self.url, timeout=self.timeout)
        if response.status_code == 200:
            data = response.json()
            processed = self._process_data(data)
            return processed
        else:
            return None

    def _process_data(self, data):
        results = []
        for item in data:
            processed_item = {
                'id': item.get('id'),
                'name': item.get('name'),
                'value': item.get('value')
            }
            results.append(processed_item)
        return results

    def save_results(self, results, filename='output.txt'):
        with open(filename, 'w') as f:
            for result in results:
                f.write(str(result) + '\n')

if __name__ == '__main__':
    processor = DataProcessor('https://api.example.com/data')
    results = processor.fetch_and_process()
    if results:
        processor.save_results(results)
    else:
        print('Failed to fetch and process data.')",clean_code,well_structured,,qwen/qwen3-32b
Java,"public class UserManager { private static Map<String, User> users = new HashMap<>(); public static void addUser(String username, String password) { users.put(username, new User(username, password)); } public static User getUser(String username) { return users.get(username); } public static class User { private String username; private String password; public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } } }",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""P@ssw0rd""; // hardcoded secret

    public User getUserById(int userId) {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // SQL injection vulnerability: userId is concatenated directly
            String sql = ""SELECT id, username, email FROM users WHERE id = "" + userId;
            rs = stmt.executeQuery(sql);
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt(""id""));
                user.setUsername(rs.getString(""username""));
                user.setEmail(rs.getString(""email""));
                return user;
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Resources not closed properly, may leak connections
        }
        return null;
    }
}

class User {
    private int id;
    private String username;
    private String email;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}",code_defect,SQL_injection_and_resource_leak,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <string>
#include <vector>

class User {
public:
    User(const std::string& name, int id) : name_(name), id_(id) {}

    void printInfo() const {
        std::cout << ""Name: "" << name_ << "", ID: "" << id_ << std::endl;
    }

    std::string getName() const {
        return name_;
    }

    int getId() const {
        return id_;
    }

private:
    std::string name_;
    int id_;
};

int main() {
    std::vector<User> users = {
        User(""Alice"", 1),
        User(""Bob"", 2),
        User(""Charlie"", 3)
    };

    for (const auto& user : users) {
        user.printInfo();
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Java,public class UserManager { private List<User> users = new ArrayList<>(); public void addUser(User user) { users.add(user); } public User getUser(int index) { return users.get(index); } public int getSize() { return users.size(); } },clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class DataProcessor {
public:
    DataProcessor() : stopFlag(false) {}
    void start() {
        worker = std::thread(&DataProcessor::processLoop, this);
    }
    void stop() {
        stopFlag = true;
        if (worker.joinable()) worker.join();
    }
    void addTask(int value) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push_back(value);
    }
private:
    void processLoop() {
        while (!stopFlag) {
            int task = 0;
            {
                std::lock_guard<std::mutex> lock(mtx);
                if (!tasks.empty()) {
                    task = tasks.back();
                    tasks.pop_back();
                }
            }
            // Bug: processing even when no task was retrieved (task == 0)
            // This leads to unintended processing of zero values.
            std::cout << ""Processing: "" << task << std::endl;
        }
    }
    std::vector<int> tasks;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main(){
    DataProcessor dp;
    dp.start();
    for(int i=1;i<=5;++i) dp.addTask(i);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    dp.stop();
    return 0;
}
",code_defect,logic_error,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    public void processOrders(List<Order> orders) {
        for (Order order : orders) {
            if (order.isValid()) {
                if (order.isDiscountEligible()) {
                    double discountedPrice = order.getTotalPrice() * 0.9;
                    order.setTotalPrice(discountedPrice);
                }
                if (order.isPriority()) {
                    sendToPriorityQueue(order);
                } else {
                    sendToStandardQueue(order);
                }
            }
        }
    }

    private void sendToPriorityQueue(Order order) {
        // Logic to send to priority queue
    }

    private void sendToStandardQueue(Order order) {
        // Logic to send to standard queue
    }

    // TODO: Refactor into smaller methods
    // TODO: Extract business rules into a separate class
    // TODO: Add logging for order processing status
}",code_smell,large_function,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor() {
         this.users = {};
      }

      async getUser(id) {
         return new Promise((resolve) => {
            setTimeout(() => {
               resolve(this.users[id]);
            }, 1000);
         });
      }

      async addUser(user) {
         return new Promise((resolve) => {
            setTimeout(() => {
               this.users[user.id] = user;
               resolve();
            }, 1000);
         });
      }
   }

   class UserController {
      constructor(userService) {
         this.userService = userService;
      }

      async getUserById(id) {
         const user = await this.userService.getUser(id);
         if (!user) {
            throw new Error('User not found');
         }
         return user;
      }

      async addUser(user) {
         await this.userService.addUser(user);
      }
   }

   const userService = new UserService();
   const userController = new UserController(userService);
   ",code_smell,Tight Coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <string>
#include <mutex>
#include <thread>

class LogManager {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        logs_.push_back(msg);
        // Simulate writing to disk (omitted)
    }
    void dump() const {
        for (const auto& m : logs_) {
            std::cout << m << std::endl;
        }
    }
private:
    std::vector<std::string> logs_;
    mutable std::mutex mtx_;
};

// Global logger instance (shared across threads)
LogManager g_logger;

void processData(const std::vector<int>& data) {
    // Intent: compute sum of squares
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) { // BUG: off‑by‑one, accesses out of bounds
        int val = data[i];
        sum += val * val;
    }
    g_logger.log(""Processed sum: "" + std::to_string(sum));
}

int main() {
    std::vector<int> values = {1, 2, 3, 4, 5};
    std::thread t1(processData, std::cref(values));
    std::thread t2(processData, std::cref(values));
    t1.join();
    t2.join();
    g_logger.dump();
    return 0;
}",code_defect,off_by_one_error,,openai/gpt-oss-120b
Python,"import requests
import json

def fetch_data_from_api(url, headers=None):
    response = requests.get(url, headers=headers)
    return response.json()


def process_data(data):
    results = []
    for item in data:
        processed_item = {
            'id': item['id'],
            'name': item.get('name', 'N/A'),
            'status': item.get('status') or 'unknown'
        }
        results.append(processed_item)
    return results


def main():
    api_url = 'https://api.example.com/data'
    auth_header = {'Authorization': 'Bearer 12345'}

    raw_data = fetch_data_from_api(api_url, auth_header)
    processed = process_data(raw_data)

    with open('output.json', 'w') as f:
        json.dump(processed, f, indent=2)

if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int age) : name(name), age(age) {}
    std::string getName() { return name; }
    int getAge() { return age; }
private:
    std::string name;
    int age;
};

class Company {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    void sortEmployees() { 
        std::sort(employees.begin(), employees.end(), [](Employee a, Employee b) { return a.getAge() < b.getAge(); }); 
    }
    void printEmployees() { 
        for (auto& employee : employees) { 
            std::cout << employee.getName() << "" is "" << employee.getAge() << "" years old."" << std::endl; 
        } 
    }
private:
    std::vector<Employee> employees;
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 30));
    company.addEmployee(Employee(""Alice"", 25));
    company.sortEmployees();
    company.printEmployees();
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
Python,"import sqlite3

class UserRepository:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self._ensure_table()

    def _ensure_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, password))
        self.conn.commit()

    def find_user(self, username):
        cursor = self.conn.cursor()
        # Vulnerable to SQL injection because username is interpolated directly
        query = f""SELECT * FROM users WHERE username = '{username}'""
        cursor.execute(query)
        return cursor.fetchone()

    def close(self):
        self.conn.close()

# Example usage
repo = UserRepository('app.db')
repo.add_user('alice', 's3cr3t')
user = repo.find_user(input('Enter username to search: '))
print('Found user:', user)
repo.close()",code_defect,SQL_injection,,openai/gpt-oss-120b
Java,"public class OrderProcessor {
    private List<Order> orders = new ArrayList<>();

    public void processOrders() {
        for (Order order : orders) {
            if (order.isValid()) {
                if (order.getTotal() > 0) {
                    processPayment(order);
                    sendConfirmationEmail(order);
                }
            }
        }
    }

    private void processPayment(Order order) {
        // Simulate payment processing
        System.out.println(""Processing payment for order "" + order.getId());
    }

    private void sendConfirmationEmail(Order order) {
        // Simulate email sending
        System.out.println(""Sending confirmation email for order "" + order.getId());
    }

    public void addOrder(Order order) {
        orders.add(order);
    }
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserService {
     constructor(userRepository) {
       this.userRepository = userRepository;
     }

     async getUser(id) {
       const user = await this.userRepository.findById(id);
       if (!user) {
         throw new Error('User not found');
       }
       return user;
     }

     async getUsers() {
       return await this.userRepository.findAll();
     }

     async createUser(user) {
       if (!user || !user.name || !user.email) {
         throw new Error('Invalid user data');
       }
       return await this.userRepository.create(user);
     }

     async updateUser(id, user) {
       const existingUser = await this.getUser(id);
       if (!existingUser) {
         throw new Error('User not found');
       }
       return await this.userRepository.update(id, user);
     }

     async deleteUser(id) {
       const user = await this.getUser(id);
       if (!user) {
         throw new Error('User not found');
       }
       return await this.userRepository.delete(id);
     }
   }",code_smell,God class,,llama-3.3-70b-versatile
Java,"package com.example.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123"";

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

std::mutex mtx;

void process_data(std::vector<int>& data) {
    for (int i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 0) {
            data[i] *= 2;
        }
    }
}

void thread_task(std::vector<int>& data, int start, int end) {
    for (int i = start; i < end; ++i) {
        if (data[i] % 2 == 0) {
            std::lock_guard<std::mutex> lock(mtx);
            data[i] *= 2;
        }
    }
}

int main() {
    std::vector<int> data = {2, 3, 4, 5, 6, 7, 8, 9};

    std::thread t1(thread_task, std::ref(data), 0, data.size());
    std::thread t2(thread_task, std::ref(data), 0, data.size());

    t1.join();
    t2.join();

    process_data(data);

    for (int val : data) {
        std::cout << val << "" "";
    }

    return 0;
}",code_defect,race_condition,,qwen/qwen3-32b
Python,"
class PaymentProcessor:
    def __init__(self):
        self.cache = {}

    def process_payment(self, user_id, amount):
        if user_id in self.cache:
            return self.cache[user_id]
        else:
            # Simulating an external API call
            result = self._external_api_call(user_id, amount)
            self.cache[user_id] = result
            return result

    def _external_api_call(self, user_id, amount):
        # Simulating a delay
        import time
        time.sleep(1)
        return amount * 1.1

    def get_cached_result(self, user_id):
        return self.cache.get(user_id)

processor = PaymentProcessor()
print(processor.process_payment('user1', 100))
print(processor.get_cached_result('user1'))",code_smell,inefficient_caching,,llama-3.3-70b-versatile
Python,"import os
import json
from datetime import datetime

class ConfigManager:
    def __init__(self):
        self.config_path = os.path.join(os.getcwd(), 'config.json')
        self.data = self.load_config()

    def load_config(self):
        try:
            with open(self.config_path, 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            print('Config file not found, creating default.')
            return self.create_default_config()

    def create_default_config(self):
        default = {
            'timeout': 30,
            'retries': 3,
            'log_level': 'INFO',
            'debug': False
        }
        with open(self.config_path, 'w') as f:
            json.dump(default, f)
        return default

    def get_config_value(self, key):
        return self.data.get(key)

    def update_config(self, key, value):
        self.data[key] = value
        with open(self.config_path, 'w') as f:
            json.dump(self.data, f)

    def log_config(self):
        print(f'[{datetime.now()}] Current config: {self.data}')",clean_code,well_structured,,qwen/qwen3-32b
Python,"class UserAccount:
    def __init__(self, username, password):
        self.username = username
        self.password = password
    def authenticate(self, input_password):
        return self.password == input_password
    def change_password(self, new_password):
        self.password = new_password
    def get_username(self):
        return self.username
    def __str__(self):
        return f'User: {self.username}'

class Authenticator:
    def __init__(self):
        self.accounts = {}
    def add_account(self, account):
        self.accounts[account.username] = account
    def remove_account(self, username):
        if username in self.accounts:
            del self.accounts[username]
    def authenticate_user(self, username, password):
        if username in self.accounts:
            return self.accounts[username].authenticate(password)
        return False

authenticator = Authenticator()
account = UserAccount('test_user', 'test_password')
authenticator.add_account(account)
print(authenticator.authenticate_user('test_user', 'test_password'))",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os
import logging

logger = logging.getLogger(__name__)

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # BUG: Using eval on file contents leads to code execution vulnerability
        with open(self.config_path, 'r') as f:
            data = f.read()
            self.settings = eval(data)  # unsafe
        logger.info(""Configuration loaded"")

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)

    def process(self, records):
        results = []
        for i in range(0, len(records), self.batch_size):
            batch = records[i:i + self.batch_size]
            results.extend(self._process_batch(batch))
        return results

    def _process_batch(self, batch):
        # Simulate processing
        return [self._transform(r) for r in batch]

    def _transform(self, record):
        # Assume record is a dict with 'value' key
        return record['value'] * 2

if __name__ == ""__main__"":
    cfg = ConfigLoader('config.cfg')
    processor = DataProcessor(cfg)
    sample_data = [{'value': i} for i in range(1000)]
    output = processor.process(sample_data)
    print(json.dumps(output[:10]))",code_defect,unsafe_deserialization,,openai/gpt-oss-120b
Java,"public class UserAuthentication {
    public boolean validateUser(String username, String password) {
        if (username == null || password == null) {
            return false;
        }

        String hashedPassword = hashPassword(password);
        User user = fetchUserFromDatabase(username);

        if (user == null) {
            return false;
        }

        // Temporarily commented out for debugging
        // if (!user.isAccountActive()) {
        //     return false;
        // }

        return user.getPasswordHash().equals(hashedPassword);
    }

    private String hashPassword(String password) {
        // Simplified hashing for example purposes
        return password.hashCode() + """";
    }

    private User fetchUserFromDatabase(String username) {
        // Simulated database lookup
        if (""admin"".equals(username)) {
            return new User(""admin"", ""123"", true);
        } else {
            return null;
        }
    }

    private static class User {
        private String username;
        private String passwordHash;
        private boolean accountActive;

        public User(String username, String passwordHash, boolean accountActive) {
            this.username = username;
            this.passwordHash = passwordHash;
            this.accountActive = accountActive;
        }

        public String getPasswordHash() {
            return passwordHash;
        }

        public boolean isAccountActive() {
            return accountActive;
        }
    }
}",code_smell,commented_out_code,,qwen/qwen3-32b
Java,"public class UserService { private static final int MAX_ATTEMPTS = 5; public boolean authenticate(String username, String password) { for (int i = 0; i < MAX_ATTEMPTS; i++) { if (username.equals(""admin"") && password.equals(""password123"")) { return true; } } return false; } }",code_smell,magic_number,,llama-3.3-70b-versatile
JavaScript,"class Paginator {
  constructor(pageSize) {
    this.pageSize = pageSize || 10;
    this.currentPage = 0;
    this.items = [];
  }

  loadItems(fetchFn) {
    // fetchFn returns a promise that resolves to an array of items
    return fetchFn().then(data => {
      this.items = data;
    });
  }

  getPage(pageNumber) {
    // BUG: off‑by‑one error – should use pageNumber - 1
    const start = pageNumber * this.pageSize;
    const end = start + this.pageSize;
    return this.items.slice(start, end);
  }

  nextPage() {
    const next = this.currentPage + 1;
    const page = this.getPage(next);
    if (page.length > 0) {
      this.currentPage = next;
    }
    return page;
  }
}

// Example usage
const paginator = new Paginator(5);
await paginator.loadItems(() => Promise.resolve([1,2,3,4,5,6,7,8,9,10]));
console.log('First page:', paginator.getPage(1)); // Expected [1,2,3,4,5] but gets [] due to bug
",code_defect,off_by_one_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::string processUserInput(const std::string& input) {
    std::string result;
    for (size_t i = 0; i < input.length(); ++i) {
        if (input[i] >= 'a' && input[i] <= 'z') {
            result += input[i];
        } else if (input[i] >= 'A' && input[i] <= 'Z') {
            result += input[i];
        } else {
            result += '_';
        }
    }

    return result;
}

int main() {
    std::vector<std::string> testInputs = {""Hello, World!"", ""C++ Rocks! 2023"", ""12345""};

    for (const auto& input : testInputs) {
        std::string processed = processUserInput(input);
        std::cout << ""Input: '"" << input << ""' -> Processed: '"" << processed << ""'\n"";
    }

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
      class UserDatabase {
         constructor() {
            this.users = {};
         }

         addUser(id, name, email) {
            if (!this.users[id]) {
               this.users[id] = { name, email };
            }
         }

         getUser(id) {
            return this.users[id];
         }

         updateUser(id, name, email) {
            if (this.users[id]) {
               this.users[id].name = name;
               this.users[id].email = email;
            }
         }

         deleteUser(id) {
            if (this.users[id]) {
               delete this.users[id];
            }
         }
      }

      const db = new UserDatabase();
      db.addUser(1, 'John Doe', 'john@example.com');
      db.addUser(2, 'Jane Doe', 'jane@example.com');

      function printUser(id) {
         const user = db.getUser(id);
         if (user) {
            console.log(user.name, user.email);
         }
      }

      printUser(1);
      printUser(2);
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.*;
import java.util.*;

public class UserService {
    private Connection connection;

    public UserService(Connection connection) {
        this.connection = connection;
    }

    // Retrieves user by ID, but uses string concatenation leading to SQL injection vulnerability
    public Map<String, String> getUserById(String userId) throws SQLException {
        String query = ""SELECT username, email FROM users WHERE id = "" + userId;
        Statement stmt = connection.createStatement();
        ResultSet rs = stmt.executeQuery(query);
        Map<String, String> user = new HashMap<>();
        if (rs.next()) {
            user.put(""username"", rs.getString(""username""));
            user.put(""email"", rs.getString(""email""));
        }
        rs.close();
        stmt.close();
        return user;
    }
}
",code_defect,SQL_injection_vulnerability,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users, logger) {
    this.users = users;
    this.logger = logger;
    this.cache = {};
  }

  processUsers() {
    for (const user of this.users) {
      const cached = this.cache[user.id];
      if (cached) {
        this.logger.log(`User ${user.id} already processed`);
        continue;
      }

      this.cache[user.id] = true;

      if (!user || !user.name || !user.email) {
        this.logger.error(`Invalid user data for user ${user.id}`);
        continue;
      }

      const normalizedEmail = user.email.trim().toLowerCase();
      if (!this.validateEmail(normalizedEmail)) {
        this.logger.warn(`Invalid email for user ${user.id}`);
        continue;
      }

      this.sendEmail(normalizedEmail, `Hello, ${user.name}`);
    }
  }

  validateEmail(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  }

  sendEmail(email, message) {
    console.log(`Sending email to ${email}: ${message}`);
    // Actual email sending logic would go here
  }
}",clean_code,well_structured,,qwen/qwen3-32b
C++,"
   #include <iostream>
   #include <vector>
   #include <string>

   class User {
   public:
       User(std::string name, int age) : name(name), age(age) {}
       std::string getName() { return name; }
       int getAge() { return age; }
   private:
       std::string name;
       int age;
   };

   class UserService {
   public:
       std::vector<User> users;
       void addUser(User user) { users.push_back(user); }
       User getUser(int index) { return users[index]; }
   };

   int main() {
       UserService service;
       service.addUser(User(""John"", 30));
       service.addUser(User(""Alice"", 25));
       std::cout << service.getUser(0).getName() << std::endl;
       return 0;
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(configPath) {
        this.path = configPath;
        this.cache = null;
    }

    load() {
        // Synchronous read for simplicity, but no error handling
        const data = fs.readFileSync(this.path, 'utf8');
        this.cache = JSON.parse(data);
        return this.cache;
    }

    get(key) {
        if (!this.cache) {
            this.load();
        }
        // Missing check for undefined key, returns undefined silently
        return this.cache[key];
    }
}

// Global singleton used across the app
const config = new ConfigLoader('/etc/app/config.json');

function initializeApp() {
    // Assume config contains DB credentials
    const dbUser = config.get('dbUser');
    const dbPass = config.get('dbPass');
    // Directly embed credentials into connection string (security defect)
    const connectionString = `postgres://${dbUser}:${dbPass}@localhost:5432/mydb`;
    // Simulate DB connection (placeholder)
    console.log('Connecting to DB with:', connectionString);
    // ... rest of initialization
}

initializeApp();",code_defect,hardcoded_credentials_security_bug,,openai/gpt-oss-120b
Python,"import os
import time

def process_data(data):
    processed = []
    for item in data:
        if item['type'] == 'A':
            processed.append(item['value'] * 2)
        elif item['type'] == 'B':
            processed.append(item['value'] // 2)
        elif item['type'] == 'C':
            processed.append(item['value'] ** 2)
        else:
            processed.append(None)
    return processed

def load_data_from_file(file_path):
    with open(file_path, 'r') as f:
        data = f.read().splitlines()
    return [{'type': line.split(':')[0], 'value': int(line.split(':')[1])} for line in data]

def main():
    data_file = 'input.txt'
    if not os.path.exists(data_file):
        print(f""{data_file} not found."")
        return

    raw_data = load_data_from_file(data_file)
    result = process_data(raw_data)
    print(""Processing complete."")
    print(""Results:"", result)
    time.sleep(1)  # Simulate additional processing delay

if __name__ == ""__main__"":
    main()",code_smell,long_function,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogProcessor {
public:
    LogProcessor(const std::vector<std::string>& logs) : logs_(logs) {}
    void startProcessing() {
        for (int i = 0; i <= logs_.size(); ++i) { // off‑by‑one error
            std::thread t(&LogProcessor::processLog, this, i);
            t.detach();
        }
    }
private:
    void processLog(size_t index) {
        if (index >= logs_.size()) return; // out‑of‑bounds guard but race condition possible
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << ""Processing: "" << logs_[index] << std::endl;
    }
    const std::vector<std::string>& logs_;
    std::mutex mtx_;
};

int main() {
    std::vector<std::string> logs = {""log1"", ""log2"", ""log3""};
    LogProcessor lp(logs);
    lp.startProcessing();
    std::this_thread::sleep_for(std::chrono::seconds(1));
    return 0;
}",code_defect,off_by_one_and_thread_race,,openai/gpt-oss-120b
Python,"import os
import sqlite3

class UserManager:
    def __init__(self, db_path='users.db'):
        self.db_path = db_path
        self.conn = sqlite3.connect(self.db_path)
        self.cursor = self.conn.cursor()
        self._create_table()

    def _create_table(self):
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS users
                             (id INTEGER PRIMARY KEY, name TEXT, email TEXT)''')
        self.conn.commit()

    def add_user(self, user_id, name, email):
        self.cursor.execute(f""""""INSERT INTO users (id, name, email) VALUES
                            ({user_id}, '{name}', '{email}')"""""")
        self.conn.commit()

    def get_user(self, user_id):
        self.cursor.execute(f""""""SELECT * FROM users WHERE id={user_id}"""""")
        return self.cursor.fetchone()

    def close(self):
        self.conn.close()

# Example usage
if __name__ == '__main__':
    manager = UserManager()
    manager.add_user(1, 'Alice', 'alice@example.com')
    user = manager.get_user(1)
    print(user)
    manager.close()",code_defect,sql_injection_vulnerability,,qwen/qwen3-32b
Java,"public class PaymentProcessor {
    private static final double INTEREST_RATE = 0.05;
    public void processPayment(double amount, int months) {
        double totalAmount = amount;
        for (int i = 0; i < months; i++) {
            totalAmount += amount * INTEREST_RATE;
        }
        System.out.println(""Total amount to be paid: "" + totalAmount);
    }
    public static void main(String[] args) {
        PaymentProcessor paymentProcessor = new PaymentProcessor();
        paymentProcessor.processPayment(1000, 12);
    }
}",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = null;
    }

    loadConfig() {
        // Asynchronously read config but forget to await, returning before data is ready
        fs.readFile(this.path, 'utf8', (err, data) => {
            if (err) {
                console.error('Failed to load config:', err);
                return;
            }
            this.cache = JSON.parse(data);
        });
        return this.cache; // Returns null on first call
    }
}

// Usage
const loader = new ConfigLoader('./config.json');
const config = loader.loadConfig();
if (config.enableFeature) {
    console.log('Feature enabled');
} else {
    console.log('Feature disabled');
}",code_defect,asynchronous_logic_error,,openai/gpt-oss-120b
Python,"import os
import requests
import json

def fetch_weather_data(city, api_key=None):
    if api_key is None:
        api_key = 'default_key'

    url = f'https://api.weatherapi.com/v1/current.json?key={api_key}&q={city}'
    response = requests.get(url)
    data = response.json()

    if data.get('error'):
        return None

    return {
        'city': city,
        'temperature': data['current']['temp_c'],
        'condition': data['current']['condition']['text']
    }


if __name__ == '__main__':
    city = input('Enter city name: ')
    weather = fetch_weather_data(city)
    if weather:
        print(f""Temperature in {weather['city']}: {weather['temperature']}°C"")
        print(f""Condition: {weather['condition']}"")
    else:
        print('Failed to fetch weather data.')",code_defect,insecure_api_handling,,qwen/qwen3-32b
Python,"class PaymentProcessor:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def process_payment(self, payment_amount, user_id):
        query = ""SELECT balance FROM users WHERE id = "" + str(user_id)
        cursor = self.db_connection.cursor()
        cursor.execute(query)
        user_balance = cursor.fetchone()[0]
        if user_balance >= payment_amount:
            new_balance = user_balance - payment_amount
            query = ""UPDATE users SET balance = "" + str(new_balance) + "" WHERE id = "" + str(user_id)
            cursor.execute(query)
            self.db_connection.commit()
            return True
        return False",code_defect,SQL injection vulnerability,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserCache {
  constructor(filePath) {
    this.filePath = filePath;
    this.cache = {};
    this._load();
  }

  _load() {
    try {
      const data = fs.readFileSync(this.filePath, 'utf8');
      this.cache = JSON.parse(data);
    } catch (e) {
      // ignore errors, start with empty cache
      this.cache = {};
    }
  }

  getUser(id) {
    return this.cache[id];
  }

  setUser(id, userObj) {
    this.cache[id] = userObj;
    // Asynchronously write to disk but forget to handle errors
    fs.writeFile(this.filePath, JSON.stringify(this.cache), (err) => {
      // silently ignore write errors
    });
  }
}

// Global singleton used throughout the app
const userCache = new UserCache('/tmp/userCache.json');

function processLogin(req, res) {
  const userId = req.body.id;
  const user = userCache.getUser(userId);
  if (!user) {
    // Create a new user with default settings
    const newUser = { id: userId, role: 'guest', createdAt: new Date() };
    userCache.setUser(userId, newUser);
    res.json({ status: 'created', user: newUser });
  } else {
    // Update last login timestamp
    user.lastLogin = new Date();
    // Missing call to setUser, so cache isn't persisted
    res.json({ status: 'existing', user });
  }
}

module.exports = { processLogin, userCache };",code_defect,state_not_persisted,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data, int* result, int size) {
    for (int i = 0; i < size; ++i) {
        result[i] = data[i] * 2;
    }
}

int main() {
    std::vector<int> input = {1, 2, 3, 4, 5};
    int* output = new int[input.size()];

    processData(input, output, input.size());

    for (int i = 0; i < input.size(); ++i) {
        std::cout << output[i] << ' ';
    }

    delete[] output;
    return 0;
}",code_defect,memory_management_error,,qwen/qwen3-32b
C++,"
#include <iostream>
#include <vector>
#include <algorithm>

class Employee {
public:
    Employee(std::string name, int salary) : name(name), salary(salary) {}

    std::string getName() { return name; }
    int getSalary() { return salary; }

private:
    std::string name;
    int salary;
};

class Company {
public:
    void addEmployee(Employee employee) { employees.push_back(employee); }
    int calculateTotalSalary() {
        int total = 0;
        for (const auto& employee : employees) {
            total += employee.getSalary();
        }
        return total;
    }

private:
    std::vector<Employee> employees;
};

int main() {
    Company company;
    company.addEmployee(Employee(""John"", 50000));
    company.addEmployee(Employee(""Alice"", 60000));
    std::cout << company.calculateTotalSalary() << std::endl;
    return 0;
}
",clean_code,well_structured,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off‑by‑one error
            int value = data[i]; // may read out of bounds
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << std::endl;
    std::cout << ""Odd sum: "" << processor.getOddSum() << std::endl;
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
Java,"public class UserProcessor {

    private List<User> users = new ArrayList<>();

    public void loadUsers(String filePath) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split("","");
                if (parts.length >= 3) {
                    String username = parts[0];
                    String email = parts[1];
                    int age = Integer.parseInt(parts[2]);
                    users.add(new User(username, email, age));
                }
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void processUsers() {
        for (User user : users) {
            if (user.getEmail().contains(""@"")) {
                sendEmail(user.getEmail(), ""Welcome!"" );
            }
        }
    }

    private void sendEmail(String to, String message) {
        // Simulated email sending logic
        System.out.println(""Sending email to "" + to + "": "" + message);
    }

    public static void main(String[] args) {
        UserProcessor processor = new UserProcessor();
        processor.loadUsers(""users.csv"");
        processor.processUsers();
    }
}",code_defect,missing_error_handling,,qwen/qwen3-32b
Python,"
class UserAccount:
    def __init__(self, username, password):
        self.username = username
        self.password = password

    def authenticate(self, input_password):
        return self.password == input_password

    def change_password(self, new_password):
        self.password = new_password

class AuthenticationManager:
    def __init__(self):
        self.accounts = {}

    def create_account(self, username, password):
        if username in self.accounts:
            return False
        self.accounts[username] = UserAccount(username, password)
        return True

    def authenticate_user(self, username, password):
        if username not in self.accounts:
            return False
        return self.accounts[username].authenticate(password)

    def change_user_password(self, username, new_password):
        if username not in self.accounts:
            return False
        self.accounts[username].change_password(new_password)
        return True

auth_manager = AuthenticationManager()
auth_manager.create_account('admin', 'password123')
print(auth_manager.authenticate_user('admin', 'password123'))
auth_manager.change_user_password('admin', 'new_password')
print(auth_manager.authenticate_user('admin', 'new_password'))",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
  constructor(db) {
    this.db = db;
  }

  // Retrieves user profile and writes a log file
  async getUserProfile(userId) {
    const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
    if (!user) {
      throw new Error('User not found');
    }
    const profile = JSON.parse(user[0].profile_json);
    // Log user access without sanitization - potential injection
    const logEntry = `User ${userId} accessed at ${new Date().toISOString()}\n`;
    fs.appendFileSync('/var/log/app_access.log', logEntry);
    return profile;
  }

  // Updates user email without proper validation
  async updateEmail(userId, newEmail) {
    // Direct string interpolation leads to SQL injection
    const query = `UPDATE users SET email = '${newEmail}' WHERE id = ${userId}`;
    await this.db.execute(query);
    // No error handling, assumes success
  }
}

module.exports = UserService;",code_defect,sql_injection,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data) {
    for (size_t i = 0; i < data.size(); ++i) {
        if (data[i] < 0) {
            data[i] = -data[i];
        }
        if (data[i] > 100) {
            data[i] = 100;
        }
    }
}

void printData(const std::vector<int>& data) {
    for (const auto& val : data) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;
}

int main() {
    std::vector<int> values = { -10, 50, 120, -200, 99, 0 };
    processData(values);
    printData(values);
    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"class PaymentProcessor:
    def __init__(self, payment_gateway):
        self.payment_gateway = payment_gateway
    
    def process_payment(self, amount, currency):
        if self.payment_gateway == 'paypal':
            # Using paypal
            return self.paypal_payment(amount, currency)
        elif self.payment_gateway == 'stripe':
            # Using stripe
            return self.stripe_payment(amount, currency)
        else:
            return False
    
    def paypal_payment(self, amount, currency):
        # Simulating a paypal payment
        return True
    
    def stripe_payment(self, amount, currency):
        # Simulating a stripe payment
        return True",code_smell,God class,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    // Missing error handling – if file is missing or malformed, JSON.parse will throw
    const data = fs.readFileSync(this.path, 'utf8');
    this.cache = JSON.parse(data);
    return this.cache;
  }

  get(key) {
    if (!this.cache) {
      this.load();
    }
    // Returns undefined for nested keys like ""db.host""
    return this.cache[key];
  }
}

// Global singleton used across the app
const config = new ConfigLoader('./config.json');

function processRequest(req, res) {
  // Assume req.body contains JSON with a ""userId"" field
  const userId = req.body.userId;
  // Vulnerable to prototype pollution via JSON.parse inside ConfigLoader
  const userConfig = config.get('users')[userId];
  if (!userConfig) {
    res.status(404).send('User not found');
    return;
  }
  // Off‑by‑one error: should be < length, not <=
  for (let i = 0; i <= userConfig.permissions.length; i++) {
    if (userConfig.permissions[i] === 'admin') {
      res.send('Welcome admin');
      return;
    }
  }
  res.send('Access denied');
}

module.exports = { processRequest, config };",code_defect,off_by_one_error_and_missing_error_handling,,openai/gpt-oss-120b
Python,"import os
import json
import requests

class ConfigLoader:
    def __init__(self, config_path='config.json'):
        self.config_path = config_path
        self.config = self.load_config()

    def load_config(self):
        try:
            with open(self.config_path, 'r') as file:
                config = json.load(file)
                return config
        except Exception as e:
            print(f'Error loading config: {e}')
            return {}

    def get_api_key(self):
        return self.config.get('api_key')

    def get_api_url(self):
        return self.config.get('api_url')

def fetch_data_from_api():
    loader = ConfigLoader()
    url = loader.get_api_url()
    api_key = loader.get_api_key()

    headers = {'Authorization': f'Bearer {api_key}'}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.json()
    else:
        print('Failed to fetch data')
        return None

# Legacy code that was supposed to be removed
# def fetch_old_data():
#     return requests.get('http://old-api.com/data').json()",code_smell,dead_code,,qwen/qwen3-32b
JavaScript,"
   class User {
      constructor(username, password) {
         this.username = username;
         this.password = password;
      }

      authenticate(password) {
         if (this.password === password) {
            return true;
         } else {
            return false;
         }
      }
   }

   class UserService {
      constructor() {
         this.users = [];
      }

      addUser(user) {
         this.users.push(user);
      }

      getUser(username) {
         for (let i = 0; i < this.users.length; i++) {
            if (this.users[i].username === username) {
               return this.users[i];
            }
         }
         return null;
      }
   }

   let userService = new UserService();
   let user = new User('test', 'test');
   userService.addUser(user);
   let storedUser = userService.getUser('test');
   console.log(storedUser.authenticate('test'));
   ",code_smell,inefficient_loop,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(dbPath) {
        this.dbPath = dbPath;
        this.cache = {};
    }

    // Loads user data from disk every time; no caching, leads to race condition
    getUser(id) {
        const raw = fs.readFileSync(this.dbPath, 'utf8');
        const users = JSON.parse(raw);
        return users.find(u => u.id === id);
    }

    // Updates user but writes whole file without locking; possible data loss
    updateUser(id, updates) {
        const raw = fs.readFileSync(this.dbPath, 'utf8');
        const users = JSON.parse(raw);
        const user = users.find(u => u.id === id);
        if (!user) throw new Error('User not found');
        Object.assign(user, updates);
        // Missing atomic write; concurrent calls may corrupt file
        fs.writeFileSync(this.dbPath, JSON.stringify(users, null, 2), 'utf8');
        return user;
    }
}

// Example usage
const service = new UserService('./data/users.json');
service.updateUser(42, {email: 'new@example.com'});",code_defect,race_condition_and_data_corruption,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

std::vector<std::string> processInput(const std::vector<std::string>& input) {
    std::vector<std::string> results;

    for (size_t i = 0; i < input.size(); ++i) {
        std::string temp = input[i];
        if (temp.empty()) continue;
        for (char& c : temp) {
            c = toupper(c);
        }
        results.push_back(temp);
    }

    for (size_t i = 0; i < input.size(); ++i) {
        if (results[i].length() < 3) {
            results[i] = ""SHORT"";
        }
    }

    return results;
}

int main() {
    std::vector<std::string> input = { ""apple"", """", ""ba"", ""cherry"" };
    std::vector<std::string> output = processInput(input);
    for (const std::string& s : output) {
        std::cout << s << std::endl;
    }
    return 0;
}",code_smell,duplicated_effort,,qwen/qwen3-32b
C++,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Employee {
public:
    string name;
    int salary;
    Employee(string n, int s) : name(n), salary(s) {}
};

bool compareEmployees(Employee e1, Employee e2) {
    return e1.salary < e2.salary;
}

int main() {
    vector<Employee> employees = {Employee(""John"", 50000), Employee(""Alice"", 60000), Employee(""Bob"", 40000)};
    sort(employees.begin(), employees.end(), compareEmployees);
    for (Employee e : employees) {
        cout << e.name << "" "" << e.salary << endl;
    }
    return 0;
}",code_smell,unused_imports_and_long_parameter_lists,,llama-3.3-70b-versatile
Java,"package com.example.payment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

public class TransactionProcessor {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/payments"";
    private static final String DB_USER = ""admin"";
    private static final String DB_PASSWORD = ""admin123""; // hardcoded secret

    public List<Transaction> fetchPendingTransactions() throws SQLException {
        List<Transaction> list = new ArrayList<>();
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String sql = ""SELECT id, amount, status FROM transactions WHERE status='PENDING'"";
        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Transaction t = new Transaction();
            t.setId(rs.getInt(""id""));
            t.setAmount(rs.getDouble(""amount""));
            t.setStatus(rs.getString(""status""));
            list.add(t);
        }
        // Missing rs.close(), stmt.close(), conn.close() -> resource leak
        return list;
    }

    public void processTransactions() {
        try {
            List<Transaction> pending = fetchPendingTransactions();
            for (Transaction tx : pending) {
                // Simulate processing
                if (tx.getAmount() < 0) {
                    // Incorrect logic: negative amounts should be flagged, but code proceeds
                    tx.setStatus(""FAILED"");
                }
                updateTransactionStatus(tx);
            }
        } catch (SQLException e) {
            // Swallowing exception, no logging
        }
    }

    private void updateTransactionStatus(Transaction tx) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = ""UPDATE transactions SET status=? WHERE id=?"";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, tx.getStatus());
            stmt.setInt(2, tx.getId());
            stmt.executeUpdate();
            // Missing stmt.close(), conn.close()
        } catch (SQLException e) {
            // Ignored
        }
    }
}

class Transaction {
    private int id;
    private double amount;
    private String status;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}",code_defect,resource_leak_and_logic_error,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& input, std::vector<int>& output) {
    for (size_t i = 0; i < input.size(); ++i) {
        for (size_t j = 0; j < input.size(); ++j) {
            if (i != j) {
                output.push_back(input[i] + input[j]);
            }
        }
    }
}

int main() {
    std::vector<int> data = {1, 2, 3};
    std::vector<int> result;
    processData(data, result);

    for (int val : result) {
        std::cout << val << ' ';
    }
    std::cout << std::endl;

    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
JavaScript,"class UserDatabase {
  constructor() {
    this.users = [];
  }

  addUser(user) {
    this.users.push(user);
  }

  getUserById(id) {
    for (let i = 0; i < this.users.length; i++) {
      if (this.users[i].id === id) {
        return this.users[i];
      }
    }
    return null;
  }
}

const db = new UserDatabase();

function main() {
  db.addUser({ id: 1, name: 'John Doe' });
  db.addUser({ id: 2, name: 'Jane Doe' });
  console.log(db.getUserById(1));
}

main();",code_smell,inefficient_loop,,llama-3.3-70b-versatile
Python,"import os
import json
import requests

def fetch_user_data(user_id):
    url = f'https://api.example.com/users/{user_id}'
    response = requests.get(url)
    if response.status_code == 200:
        data = json.loads(response.text)
        return data
    else:
        return None

def process_user_data(data):
    processed = []
    for item in data:
        user = {
            'id': item.get('id'),
            'name': item.get('name'),
            'email': item.get('email')
        }
        processed.append(user)
    return processed

def save_to_file(data, filename='output.json'):
    with open(filename, 'w') as f:
        json.dump(data, f)

if __name__ == '__main__':
    user_id = '12345'
    user_data = fetch_user_data(user_id)
    processed_data = process_user_data([user_data])
    save_to_file(processed_data)
    print('Data saved.')",code_defect,incorrect_error_handling,,qwen/qwen3-32b
JavaScript,"
   class UserService {
      constructor(userRepository) {
         this.userRepository = userRepository;
      }

      async getAllUsers() {
         const users = await this.userRepository.findAll();
         return users.map(user => ({ id: user.id, name: user.name }));
      }

      async getUserById(id) {
         const user = await this.userRepository.findById(id);
         if (!user) {
            throw new Error(`User with id ${id} not found`);
         }
         return { id: user.id, name: user.name };
      }
   }

   class UserRepository {
      constructor(db) {
         this.db = db;
      }

      async findAll() {
         return await this.db.query('SELECT * FROM users');
      }

      async findById(id) {
         const result = await this.db.query(`SELECT * FROM users WHERE id = ${id}`);
         return result[0];
      }
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class Logger {
public:
    void log(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx_);
        std::cout << msg << std::endl;
    }
private:
    std::mutex mtx_;
};

class DataProcessor {
public:
    DataProcessor(Logger& logger) : logger_(logger) {}
    void process(const std::vector<int>& data) {
        for (size_t i = 0; i <= data.size(); ++i) { // off-by-one error
            int value = data[i]; // out-of-bounds access when i == data.size()
            if (value % 2 == 0) {
                even_sum_ += value;
            } else {
                odd_sum_ += value;
            }
        }
        logger_.log(""Processing complete"");
    }
    int getEvenSum() const { return even_sum_; }
    int getOddSum() const { return odd_sum_; }
private:
    Logger& logger_;
    int even_sum_ = 0;
    int odd_sum_ = 0;
};

int main() {
    Logger logger;
    DataProcessor processor(logger);
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::thread t([&](){ processor.process(numbers); });
    t.join();
    std::cout << ""Even sum: "" << processor.getEvenSum() << ""\n"";
    std::cout << ""Odd sum: "" << processor.getOddSum() << ""\n"";
    return 0;
}
",code_defect,off_by_one_error,,openai/gpt-oss-120b
JavaScript,"class OrderProcessor {
  processOrders(orders, users, products, taxRate = 0.1, discountRules) {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      let totalPrice = 0;

      for (let j = 0; j < order.items.length; j++) {
        const item = order.items[j];
        const product = products.find(p => p.id === item.productId);
        let price = product.price * item.quantity;

        // Apply discounts
        if (discountRules && discountRules.length > 0) {
          for (let k = 0; k < discountRules.length; k++) {
            const rule = discountRules[k];
            if (rule.productId === item.productId) {
              price *= (1 - rule.discountPercentage / 100);
            }
          }
        }

        totalPrice += price;
      }

      // Apply tax
      totalPrice += totalPrice * taxRate;

      // Assign user info
      const user = users.find(u => u.id === order.userId);
      order.user = user;
      order.totalPrice = totalPrice;
    }
  }
}

// Usage
const orders = [
  { id: 1, userId: 1, items: [{ productId: 101, quantity: 2 }] }
];

const users = [
  { id: 1, name: 'John Doe' }
];

const products = [
  { id: 101, price: 50 }
];

const discountRules = [
  { productId: 101, discountPercentage: 10 }
];

const processor = new OrderProcessor();
processor.processOrders(orders, users, products, 0.1, discountRules);",code_smell,long_method,,qwen/qwen3-32b
JavaScript,class UserService { constructor(userRepository) { this.userRepository = userRepository; } async getUser(id) { let user = await this.userRepository.getUser(id); if (user) { return user; } else { return await this.userRepository.createUser(id); } } },code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class ConfigLoader {
  constructor(path) {
    this.path = path;
    this.cache = null;
  }

  load() {
    if (this.cache) return this.cache;
    const data = fs.readFileSync(this.path, 'utf8');
    // No error handling, assumes file exists and is valid JSON
    this.cache = JSON.parse(data);
    return this.cache;
  }
}

class UserService {
  constructor(db) {
    this.db = db;
    this.config = new ConfigLoader('./config.json');
  }

  async getUserProfile(userId) {
    const config = this.config.load();
    const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
    if (!user) return null;
    // Bug: uses config.maxItems which may be undefined, leading to NaN in slice
    const recentActivities = await this.db.query('SELECT * FROM activities WHERE user_id = ? ORDER BY created_at DESC LIMIT ?', [userId, config.maxItems]);
    user.activities = recentActivities.slice(0, config.maxItems);
    return user;
  }
}

module.exports = { ConfigLoader, UserService };",code_defect,logic_error_due_to_missing_config_property,,openai/gpt-oss-120b
Java,"public class UserProcessor {
    private final List<String> userRoles = Arrays.asList(""admin"", ""moderator"", ""user"");

    public boolean isValidUser(String username, String role, int accessLevel) {
        if (username == null || username.trim().isEmpty()) {
            return false;
        }

        if (!userRoles.contains(role.toLowerCase())) {
            return false;
        }

        if (accessLevel < 1 || accessLevel > 10) {
            return false;
        }

        return true;
    }

    public void grantAccess(String username, String role, int accessLevel) {
        if (isValidUser(username, role, accessLevel)) {
            System.out.println(""Access granted to "" + username + "" with role "" + role);
        } else {
            System.out.println(""Access denied for "" + username);
        }
    }
}",code_smell,long_function,,qwen/qwen3-32b
JavaScript,"
   class UserAccount {
      constructor(username, password) {
         this.username = username;
         this.password = password;
      }

      authenticate(username, password) {
         if (username === this.username && password === this.password) {
            return true;
         }
         return false;
      }
   }

   function authenticateUser(username, password) {
      const users = [
         new UserAccount('admin', 'password123'),
         new UserAccount('user1', 'password456')
      ];

      for (let i = 0; i < users.length; i++) {
         if (users[i].authenticate(username, password)) {
            return users[i];
         }
      }
      return null;
   }

   const authenticatedUser = authenticateUser('admin', 'password123');
   if (authenticatedUser) {
      console.log('Authenticated successfully');
   } else {
      console.log('Authentication failed');
   }
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
Python,"import json
import os

class ConfigLoader:
    def __init__(self, config_path):
        self.config_path = config_path
        self.settings = {}
        self._load()

    def _load(self):
        # Load configuration from a JSON file
        with open(self.config_path, 'r') as f:
            data = json.load(f)
        # Directly update settings without validation
        self.settings.update(data)

    def get(self, key, default=None):
        return self.settings.get(key, default)

class DataProcessor:
    def __init__(self, config_loader):
        self.config = config_loader
        self.batch_size = self.config.get('batch_size', 100)

    def process(self, input_file):
        # Process each line as JSON, but uses eval on untrusted data
        with open(input_file, 'r') as f:
            for line in f:
                record = eval(line)  # unsafe deserialization
                self._handle_record(record)

    def _handle_record(self, record):
        # Simulate some processing
        if 'value' in record:
            result = record['value'] * 2
            print(f""Processed: {result}"")
        else:
            print(""Missing value"")

if __name__ == '__main__':
    cfg = ConfigLoader(os.getenv('CONFIG_PATH', 'config.json'))
    processor = DataProcessor(cfg)
    processor.process('data.txt')
",code_defect,unsafe_deserialization_using_eval,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(userData) {
    this.userData = userData;
  }

  processUsers() {
    for (let i = 0; i < this.userData.length; i++) {
      if (this.userData[i].role === 'admin') {
        this.userData[i].permissions = ['read', 'write', 'delete'];
      } else if (this.userData[i].role === 'editor') {
        this.userData[i].permissions = ['read', 'write'];
      } else {
        this.userData[i].permissions = ['read'];
      }
    }
  }

  getProcessedData() {
    return this.userData;
  }
}

const users = [
  { name: 'Alice', role: 'admin' },
  { name: 'Bob', role: 'editor' },
  { name: 'Charlie', role: 'viewer' }
];

const processor = new UserProcessor(users);
processor.processUsers();
console.log(processor.getProcessedData());",code_smell,large_function,,qwen/qwen3-32b
JavaScript,"
   class PaymentProcessor {
      constructor() {
         this.payments = [];
      }

      addPayment(payment) {
         this.payments.push(payment);
      }

      processPayments() {
         for (let i = 0; i < this.payments.length; i++) {
            const payment = this.payments[i];
            if (payment.amount > 1000) {
               this.payments.splice(i, 1);
               i--;
            } else {
               payment.processed = true;
            }
         }
      }
   }

   const paymentProcessor = new PaymentProcessor();
   paymentProcessor.addPayment({ amount: 500, processed: false });
   paymentProcessor.addPayment({ amount: 1500, processed: false });
   paymentProcessor.processPayments();
   console.log(paymentProcessor.payments);
   ",code_defect,incorrect_modification_of_array_during_iteration,,llama-3.3-70b-versatile
Java,"package com.example.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String DB_USER = ""appuser"";
    private static final String DB_PASSWORD = ""password123""; // hardcoded secret

    public List<String> getUserRoles(String username) {
        List<String> roles = new ArrayList<>();
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection
            String query = ""SELECT role_name FROM user_roles WHERE username = '"" + username + ""'"";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                roles.add(rs.getString(""role_name""));
            }
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return roles;
    }
}
",code_defect,SQL_injection_and_hardcoded_credentials,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

using namespace std;

class DataProcessor {
public:
    void process(const vector<int>& data) {
        if (data.empty()) return;

        for (int i = 0; i < data.size(); ++i) {
            for (int j = 0; j < data.size(); ++j) {
                cout << data[i] * data[j] << endl;
            }
        }
    }
};

int main() {
    vector<int> input = {1, 2, 3, 4, 5};
    DataProcessor dp;
    dp.process(input);
    return 0;
}",code_smell,inefficient_algorithm,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(userRepository) {
            this.userRepository = userRepository;
         }

         async getAllUsers() {
            const users = await this.userRepository.findAll();
            return users.map(user => ({ id: user.id, name: user.name }));
         }

         async getUserById(id) {
            const user = await this.userRepository.findById(id);
            if (!user) {
               throw new Error('User not found');
            }
            return user;
         }
      }

      class UserRepository {
         constructor(dbConnection) {
            this.dbConnection = dbConnection;
         }

         async findAll() {
            const query = 'SELECT * FROM users';
            const results = await this.dbConnection.query(query);
            return results.rows;
         }

         async findById(id) {
            const query = 'SELECT * FROM users WHERE id = $1';
            const results = await this.dbConnection.query(query, [id]);
            return results.rows[0];
         }
      }",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user data and writes a report to a file
    async generateUserReport(userId) {
        const user = await this.db.getUserById(userId);
        if (!user) {
            throw new Error('User not found');
        }
        const orders = await this.db.getOrdersForUser(userId);
        const total = orders.reduce((sum, o) => sum + o.amount, 0);
        const report = `User: ${user.name}\nTotal Orders: ${orders.length}\nTotal Amount: $${total}`;
        // BUG: Asynchronous write without awaiting, may cause race condition if called multiple times
        fs.writeFile('reports/' + userId + '.txt', report, (err) => {
            if (err) console.error('Failed to write report:', err);
        });
        return report;
    }
}

module.exports = UserService;",code_defect,async_file_write_race_condition,,openai/gpt-oss-120b
Python,"import time
import random

class TaskScheduler:
    def __init__(self):
        self.tasks = []
        self.running = False

    def add_task(self, task_func, *args, **kwargs):
        self.tasks.append((task_func, args, kwargs))

    def start(self):
        self.running = True
        while self.running:
            for task_func, args, kwargs in self.tasks:
                try:
                    task_func(*args, **kwargs)
                except Exception as e:
                    print(f'Error in task: {e}')
            time.sleep(1)

    def stop(self):
        self.running = False

    def add_cleanup_task(self):
        def cleanup():
            print('Cleaning up...')
            time.sleep(2)
            print('Cleanup done.')
        self.add_task(cleanup)

# Example usage
def simulate_work(id):
    print(f'Starting work for task {id}...')
    time.sleep(random.uniform(0.5, 1.5))
    print(f'Work for task {id} completed.')

if __name__ == '__main__':
    scheduler = TaskScheduler()
    for i in range(5):
        scheduler.add_task(simulate_work, i)
    scheduler.add_cleanup_task()
    scheduler.start()",code_smell,long_method,,qwen/qwen3-32b
JavaScript,"
      class UserService {
         constructor(dbConnection) {
            this.dbConnection = dbConnection;
         }

         async getUser(id) {
            const query = 'SELECT * FROM users WHERE id = ' + id;
            const results = await this.dbConnection.query(query);
            return results[0];
         }

         async getUsers() {
            const query = 'SELECT * FROM users';
            const results = await this.dbConnection.query(query);
            return results;
         }
      }

      const dbConnection = {
         query: async (query) => {
            // simulate a database query
            return [
               { id: 1, name: 'John Doe' },
               { id: 2, name: 'Jane Doe' }
            ];
         }
      };

      const userService = new UserService(dbConnection);
      userService.getUsers().then(users => console.log(users));
   ",code_defect,insecure_sql_query,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserReportGenerator {
    constructor(dbConnection, logger, emailService, templateEngine, config, cache, analyticsTracker) {
        this.db = dbConnection;
        this.log = logger;
        this.email = emailService;
        this.template = templateEngine;
        this.cfg = config;
        this.cache = cache;
        this.analytics = analyticsTracker;
    }

    generateAndSendReport(userId, startDate, endDate, format, includeCharts, locale, timezone) {
        // Fetch user data
        const user = this.db.query(`SELECT * FROM users WHERE id = ${userId}`);
        if (!user) {
            this.log.error('User not found');
            return;
        }

        // Get raw activity data
        let activity = this.db.query(`SELECT * FROM activity WHERE user_id = ${userId} AND date >= '${startDate}' AND date <= '${endDate}'`);
        // Apply caching (inefficiently recompute each time)
        const cacheKey = `${userId}-${startDate}-${endDate}-${format}`;
        if (this.cache.has(cacheKey)) {
            activity = this.cache.get(cacheKey);
        } else {
            // Simulate heavy processing
            for (let i = 0; i < activity.length; i++) {
                activity[i].processed = true;
                // Unnecessary nested loop causing O(n^2) work
                for (let j = 0; j < activity.length; j++) {
                    if (i !== j && activity[i].type === activity[j].type) {
                        activity[i].relatedCount = (activity[i].relatedCount || 0) + 1;
                    }
                }
            }
            this.cache.set(cacheKey, activity);
        }

        // Generate report content
        const reportHtml = this.template.render('report', {
            user,
            activity,
            includeCharts,
            locale,
            timezone
        });

        // Save report to file (hardcoded path)
        const filePath = `/tmp/report_${userId}.${format}`;
        fs.writeFileSync(filePath, reportHtml);

        // Send email
        this.email.send({
            to: user.email,
            subject: `Your report from ${startDate} to ${endDate}`,
            attachments: [{ path: filePath }]
        });

        // Track analytics
        this.analytics.track('report_sent', { userId, format, timestamp: Date.now() });
    }
}

module.exports = UserReportGenerator;",code_smell,God_class_with_long_parameter_list_and_inefficient_nested_loops,,openai/gpt-oss-120b
JavaScript,"class UserProcessor {
  constructor(users) {
    this.users = users;
  }

  processUsers() {
    for (let i = 0; i < this.users.length; i++) {
      this.processUser(this.users[i]);
    }
  }

  processUser(user) {
    if (user && user.id && user.name) {
      console.log(`Processing user: ${user.name}`);
      this.sendEmail(user);
      this.updateDatabase(user);
      this.generateReport(user);
    }
  }

  sendEmail(user) {
    console.log(`Email sent to ${user.email}`);
  }

  updateDatabase(user) {
    console.log(`User ${user.id} updated in the database`);
  }

  generateReport(user) {
    console.log(`Report generated for user: ${user.name}`);
  }
}

const users = [
  { id: 1, name: 'Alice', email: 'alice@example.com' },
  { id: 2, name: 'Bob', email: 'bob@example.com' }
];

const processor = new UserProcessor(users);
processor.processUsers();",code_smell,large_class,,qwen/qwen3-32b
JavaScript,"const fs = require('fs');

class ConfigLoader {
    constructor(path) {
        this.path = path;
        this.cache = {};
    }

    load(key) {
        if (this.cache[key]) {
            return this.cache[key];
        }
        const data = fs.readFileSync(this.path, 'utf8');
        const lines = data.split('\n');
        for (let i = 0; i < lines.length; i++) {
            const [k, v] = lines[i].split('=');
            if (k === key) {
                this.cache[key] = v;
                return v;
            }
        }
        return null;
    }
}

// Usage example
const loader = new ConfigLoader('/etc/app.conf');
const secret = loader.load('API_KEY');
process.env.API_KEY = secret; // BUG: If secret is null, environment variable is set to null, causing downstream auth failures",code_defect,null_assignment,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>

void processData(std::vector<int>& data, int a, int b, int c, int d, int e) {
    for (int i = 0; i < data.size(); ++i) {
        data[i] = a * data[i] + b;
    }

    for (int i = 0; i < data.size(); ++i) {
        data[i] = c * data[i] + d;
    }

    // Old version of the code below
    // for (int i = 0; i < data.size(); ++i) {
    //     data[i] = e * data[i];
    // }

    for (int i = 0; i < data.size(); ++i) {
        data[i] = e * data[i];
    }
}

int main() {
    std::vector<int> myData = {1, 2, 3, 4, 5};
    processData(myData, 2, 3, 4, 5, 6);

    for (int val : myData) {
        std::cout << val << ' ';
    }

    return 0;
}",code_smell,long_parameter_list,,qwen/qwen3-32b
Python,"class UserService:
    def __init__(self, db_connection):
        self.db_connection = db_connection
    
    def get_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user_data = cursor.fetchone()
        return user_data
    
    def get_all_users(self):
        cursor = self.db_connection.cursor()
        cursor.execute('SELECT * FROM users')
        users_data = cursor.fetchall()
        return users_data
    
    def create_user(self, user_name, user_email):
        cursor = self.db_connection.cursor()
        cursor.execute('INSERT INTO users (name, email) VALUES (%s, %s)', (user_name, user_email))
        self.db_connection.commit()
    
    def update_user(self, user_id, user_name, user_email):
        cursor = self.db_connection.cursor()
        cursor.execute('UPDATE users SET name = %s, email = %s WHERE id = %s', (user_name, user_email, user_id))
        self.db_connection.commit()
    
    def delete_user(self, user_id):
        cursor = self.db_connection.cursor()
        cursor.execute('DELETE FROM users WHERE id = %s', (user_id,))
        self.db_connection.commit()
",code_smell,God class,,llama-3.3-70b-versatile
C++,"#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

class LogAggregator {
public:
    LogAggregator() : stopFlag(false) {}
    ~LogAggregator() { stop(); }

    void start() {
        worker = std::thread(&LogAggregator::process, this);
    }

    void stop() {
        stopFlag = true;
        if (worker.joinable())
            worker.join();
    }

    void addLog(const std::string& msg) {
        std::lock_guard<std::mutex> lock(mtx);
        buffer.push_back(msg);
    }

private:
    void process() {
        while (!stopFlag) {
            std::vector<std::string> localCopy;
            {
                std::lock_guard<std::mutex> lock(mtx);
                localCopy.swap(buffer);
            }
            for (const auto& line : localCopy) {
                // Simulate I/O delay
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
                std::cout << line << std::endl;
            }
            // Missing sleep here leads to busy-wait
        }
    }

    std::vector<std::string> buffer;
    std::mutex mtx;
    std::thread worker;
    bool stopFlag;
};

int main() {
    LogAggregator logger;
    logger.start();
    for (int i = 0; i < 5; ++i) {
        logger.addLog(""Event "" + std::to_string(i));
    }
    logger.stop();
    return 0;
}",code_defect,busy_wait_without_sleep,,openai/gpt-oss-120b
C++,"#include <iostream>
#include <vector>
#include <string>

void processUserInput(const std::string& input) {
    std::vector<std::string> data = {""user1"", ""user2"", ""admin""};
    bool isAdmin = false;

    for (const auto& user : data) {
        if (user == input) {
            isAdmin = (user == ""admin"");
            break;
        }
    }

    if (isAdmin) {
        std::cout << ""Access granted to admin panel."" << std::endl;
    } else {
        std::cout << ""Access denied."" << std::endl;
    }
}

int main() {
    std::string userInput;
    std::cout << ""Enter username: "";
    std::cin >> userInput;

    processUserInput(userInput);

    return 0;
}",clean_code,well_structured,,qwen/qwen3-32b
Python,"
class BankAccount:
    def __init__(self, balance=0):
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        return self.balance

    def withdraw(self, amount):
        if amount > self.balance:
            return 'Insufficient funds'
        self.balance -= amount
        return self.balance

    def get_balance(self):
        return self.balance

class Bank:
    def __init__(self):
        self.accounts = {}

    def create_account(self, account_number, initial_balance=0):
        self.accounts[account_number] = BankAccount(initial_balance)

    def get_account(self, account_number):
        return self.accounts.get(account_number)

    def transfer(self, from_account, to_account, amount):
        from_acc = self.get_account(from_account)
        to_acc = self.get_account(to_account)
        if from_acc and to_acc:
            if from_acc.balance >= amount:
                from_acc.withdraw(amount)
                to_acc.deposit(amount)
            else:
                print('Insufficient funds')
        else:
            print('Account not found')

bank = Bank()
bank.create_account('12345', 1000)
bank.create_account('67890', 500)
bank.transfer('12345', '67890', 200)
print(bank.get_account('12345').get_balance())
print(bank.get_account('67890').get_balance())
",code_smell,tight_coupling,,llama-3.3-70b-versatile
Java,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class UserService {
    private static final String DB_URL = ""jdbc:mysql://localhost:3306/appdb"";
    private static final String USER = ""app_user"";
    private static final String PASS = ""password123""; // hardcoded credentials

    public String getUserEmail(int userId) {
        String email = null;
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            // Vulnerable to SQL injection if userId were derived from untrusted input
            String sql = ""SELECT email FROM users WHERE id = "" + userId;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                email = rs.getString(""email"");
            }
            rs.close();
        } catch (Exception e) {
            // Swallow exception, no logging
        } finally {
            // Resources not closed properly if exception occurs before stmt assignment
            try { if (stmt != null) stmt.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return email;
    }
}
",code_defect,resource_leak_and_swallowed_exception,,openai/gpt-oss-120b
Python,"import os
import json
from datetime import datetime

def process_user_data(data):
    users = []
    for entry in data:
        if 'user' in entry and 'timestamp' in entry:
            user = entry['user']
            timestamp = entry['timestamp']
            if isinstance(user, dict) and 'id' in user:
                user_id = user['id']
                username = user.get('name', 'unknown')
                users.append({
                    'id': user_id,
                    'name': username,
                    'logged_in': True
                })
            elif isinstance(user, str):
                users.append({
                    'id': None,
                    'name': user,
                    'logged_in': False
                })
            else:
                users.append({
                    'id': None,
                    'name': 'invalid',
                    'logged_in': False
                })
    return users

def read_data_from_file(file_path):
    if not os.path.exists(file_path):
        return []

    with open(file_path, 'r') as f:
        try:
            data = json.load(f)
        except json.JSONDecodeError:
            return []

    return data


def main():
    data = read_data_from_file('user_data.json')
    processed = process_user_data(data)
    print(json.dumps(processed, indent=2))


if __name__ == '__main__':
    main()",clean_code,well_structured,,qwen/qwen3-32b
JavaScript,"
   class UserService {
       constructor(userRepository) {
           this.userRepository = userRepository;
       }

       async getUser(id) {
           const user = await this.userRepository.findById(id);
           if (!user) {
               throw new Error('User not found');
           }
           return user;
       }

       async getUsers() {
           return await this.userRepository.findAll();
       }
   }

   class UserRepository {
       async findById(id) {
           // simulate a database query
           return { id: id, name: 'John Doe' };
       }

       async findAll() {
           // simulate a database query
           return [{ id: 1, name: 'John Doe' }, { id: 2, name: 'Jane Doe' }];
       }
   }

   const userRepository = new UserRepository();
   const userService = new UserService(userRepository);

   (async () => {
       try {
           const user = await userService.getUser(1);
           console.log(user);
           const users = await userService.getUsers();
           console.log(users);
       } catch (error) {
           console.error(error);
       }
   })();
   ",code_smell,tight_coupling,,llama-3.3-70b-versatile
JavaScript,"const fs = require('fs');

class UserService {
    constructor(db) {
        this.db = db;
    }

    // Retrieves user profile and writes a log file asynchronously
    async getUserProfile(userId) {
        const user = await this.db.query('SELECT * FROM users WHERE id = ?', [userId]);
        // Fire-and-forget logging – the promise is not awaited
        this.logAccess(userId);
        return user[0];
    }

    // Logs access to a file; returns a promise but callers often ignore it
    async logAccess(userId) {
        const logEntry = `${new Date().toISOString()} - User ${userId} accessed profile\n`;
        return new Promise((resolve, reject) => {
            fs.appendFile('access.log', logEntry, err => {
                if (err) reject(err);
                else resolve();
            });
        });
    }
}

// Usage example
(async () => {
    const db = {
        query: async (sql, params) => [{ id: params[0], name: 'Alice' }]
    };
    const service = new UserService(db);
    const profile = await service.getUserProfile(42);
    console.log('Profile:', profile);
})();",code_defect,unhandled async operation leading to potential race condition,,openai/gpt-oss-120b
